
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056f4  080056f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f4  080056f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005708  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005708  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0d1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a8  00000000  00000000  0002e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c97  00000000  00000000  00031a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a1e  00000000  00000000  0004b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096cf3  00000000  00000000  0005d117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  000f3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f7160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005660 	.word	0x08005660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005660 	.word	0x08005660

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 fdb0 	bl	8001d8c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fafb 	bl	800082c <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f955 	bl	80004ec <__aeabi_fsub>
 8000242:	f000 faf3 	bl	800082c <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	0243      	lsls	r3, r0, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	464f      	mov	r7, r9
 8000258:	4646      	mov	r6, r8
 800025a:	4699      	mov	r9, r3
 800025c:	46d6      	mov	lr, sl
 800025e:	0fc3      	lsrs	r3, r0, #31
 8000260:	0045      	lsls	r5, r0, #1
 8000262:	4698      	mov	r8, r3
 8000264:	b5c0      	push	{r6, r7, lr}
 8000266:	464b      	mov	r3, r9
 8000268:	1c0f      	adds	r7, r1, #0
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	d100      	bne.n	8000270 <__aeabi_fmul+0x20>
 800026e:	e0cb      	b.n	8000408 <__aeabi_fmul+0x1b8>
 8000270:	2dff      	cmp	r5, #255	; 0xff
 8000272:	d100      	bne.n	8000276 <__aeabi_fmul+0x26>
 8000274:	e0cf      	b.n	8000416 <__aeabi_fmul+0x1c6>
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	04d2      	lsls	r2, r2, #19
 800027c:	431a      	orrs	r2, r3
 800027e:	2300      	movs	r3, #0
 8000280:	4691      	mov	r9, r2
 8000282:	2600      	movs	r6, #0
 8000284:	469a      	mov	sl, r3
 8000286:	3d7f      	subs	r5, #127	; 0x7f
 8000288:	027c      	lsls	r4, r7, #9
 800028a:	007b      	lsls	r3, r7, #1
 800028c:	0a64      	lsrs	r4, r4, #9
 800028e:	0e1b      	lsrs	r3, r3, #24
 8000290:	0fff      	lsrs	r7, r7, #31
 8000292:	2b00      	cmp	r3, #0
 8000294:	d100      	bne.n	8000298 <__aeabi_fmul+0x48>
 8000296:	e0a9      	b.n	80003ec <__aeabi_fmul+0x19c>
 8000298:	2bff      	cmp	r3, #255	; 0xff
 800029a:	d011      	beq.n	80002c0 <__aeabi_fmul+0x70>
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	04d2      	lsls	r2, r2, #19
 80002a2:	4314      	orrs	r4, r2
 80002a4:	4642      	mov	r2, r8
 80002a6:	3b7f      	subs	r3, #127	; 0x7f
 80002a8:	195b      	adds	r3, r3, r5
 80002aa:	407a      	eors	r2, r7
 80002ac:	2000      	movs	r0, #0
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	1c5d      	adds	r5, r3, #1
 80002b2:	2e0a      	cmp	r6, #10
 80002b4:	dd13      	ble.n	80002de <__aeabi_fmul+0x8e>
 80002b6:	003a      	movs	r2, r7
 80002b8:	2e0b      	cmp	r6, #11
 80002ba:	d047      	beq.n	800034c <__aeabi_fmul+0xfc>
 80002bc:	4647      	mov	r7, r8
 80002be:	e03f      	b.n	8000340 <__aeabi_fmul+0xf0>
 80002c0:	002b      	movs	r3, r5
 80002c2:	33ff      	adds	r3, #255	; 0xff
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d11e      	bne.n	8000306 <__aeabi_fmul+0xb6>
 80002c8:	2202      	movs	r2, #2
 80002ca:	4316      	orrs	r6, r2
 80002cc:	4642      	mov	r2, r8
 80002ce:	3501      	adds	r5, #1
 80002d0:	407a      	eors	r2, r7
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	35ff      	adds	r5, #255	; 0xff
 80002d6:	2e0a      	cmp	r6, #10
 80002d8:	dd00      	ble.n	80002dc <__aeabi_fmul+0x8c>
 80002da:	e0e4      	b.n	80004a6 <__aeabi_fmul+0x256>
 80002dc:	2002      	movs	r0, #2
 80002de:	2e02      	cmp	r6, #2
 80002e0:	dc1c      	bgt.n	800031c <__aeabi_fmul+0xcc>
 80002e2:	3e01      	subs	r6, #1
 80002e4:	2e01      	cmp	r6, #1
 80002e6:	d842      	bhi.n	800036e <__aeabi_fmul+0x11e>
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d03d      	beq.n	8000368 <__aeabi_fmul+0x118>
 80002ec:	2801      	cmp	r0, #1
 80002ee:	d166      	bne.n	80003be <__aeabi_fmul+0x16e>
 80002f0:	2000      	movs	r0, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	05c0      	lsls	r0, r0, #23
 80002f6:	4308      	orrs	r0, r1
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4310      	orrs	r0, r2
 80002fc:	bce0      	pop	{r5, r6, r7}
 80002fe:	46ba      	mov	sl, r7
 8000300:	46b1      	mov	r9, r6
 8000302:	46a8      	mov	r8, r5
 8000304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000306:	2203      	movs	r2, #3
 8000308:	4316      	orrs	r6, r2
 800030a:	4642      	mov	r2, r8
 800030c:	3501      	adds	r5, #1
 800030e:	407a      	eors	r2, r7
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	35ff      	adds	r5, #255	; 0xff
 8000314:	2e0a      	cmp	r6, #10
 8000316:	dd00      	ble.n	800031a <__aeabi_fmul+0xca>
 8000318:	e0e4      	b.n	80004e4 <__aeabi_fmul+0x294>
 800031a:	2003      	movs	r0, #3
 800031c:	2101      	movs	r1, #1
 800031e:	40b1      	lsls	r1, r6
 8000320:	26a6      	movs	r6, #166	; 0xa6
 8000322:	00f6      	lsls	r6, r6, #3
 8000324:	4231      	tst	r1, r6
 8000326:	d10a      	bne.n	800033e <__aeabi_fmul+0xee>
 8000328:	2690      	movs	r6, #144	; 0x90
 800032a:	00b6      	lsls	r6, r6, #2
 800032c:	4231      	tst	r1, r6
 800032e:	d116      	bne.n	800035e <__aeabi_fmul+0x10e>
 8000330:	3eb9      	subs	r6, #185	; 0xb9
 8000332:	3eff      	subs	r6, #255	; 0xff
 8000334:	420e      	tst	r6, r1
 8000336:	d01a      	beq.n	800036e <__aeabi_fmul+0x11e>
 8000338:	46a1      	mov	r9, r4
 800033a:	4682      	mov	sl, r0
 800033c:	e000      	b.n	8000340 <__aeabi_fmul+0xf0>
 800033e:	0017      	movs	r7, r2
 8000340:	4653      	mov	r3, sl
 8000342:	003a      	movs	r2, r7
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00f      	beq.n	8000368 <__aeabi_fmul+0x118>
 8000348:	464c      	mov	r4, r9
 800034a:	4650      	mov	r0, sl
 800034c:	2803      	cmp	r0, #3
 800034e:	d1cd      	bne.n	80002ec <__aeabi_fmul+0x9c>
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	03c9      	lsls	r1, r1, #15
 8000354:	4321      	orrs	r1, r4
 8000356:	0249      	lsls	r1, r1, #9
 8000358:	20ff      	movs	r0, #255	; 0xff
 800035a:	0a49      	lsrs	r1, r1, #9
 800035c:	e7ca      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	2200      	movs	r2, #0
 8000362:	20ff      	movs	r0, #255	; 0xff
 8000364:	03c9      	lsls	r1, r1, #15
 8000366:	e7c5      	b.n	80002f4 <__aeabi_fmul+0xa4>
 8000368:	20ff      	movs	r0, #255	; 0xff
 800036a:	2100      	movs	r1, #0
 800036c:	e7c2      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800036e:	0c20      	lsrs	r0, r4, #16
 8000370:	4649      	mov	r1, r9
 8000372:	0424      	lsls	r4, r4, #16
 8000374:	0c24      	lsrs	r4, r4, #16
 8000376:	0027      	movs	r7, r4
 8000378:	0c0e      	lsrs	r6, r1, #16
 800037a:	0409      	lsls	r1, r1, #16
 800037c:	0c09      	lsrs	r1, r1, #16
 800037e:	4374      	muls	r4, r6
 8000380:	434f      	muls	r7, r1
 8000382:	4346      	muls	r6, r0
 8000384:	4348      	muls	r0, r1
 8000386:	0c39      	lsrs	r1, r7, #16
 8000388:	1900      	adds	r0, r0, r4
 800038a:	1809      	adds	r1, r1, r0
 800038c:	428c      	cmp	r4, r1
 800038e:	d903      	bls.n	8000398 <__aeabi_fmul+0x148>
 8000390:	2080      	movs	r0, #128	; 0x80
 8000392:	0240      	lsls	r0, r0, #9
 8000394:	4684      	mov	ip, r0
 8000396:	4466      	add	r6, ip
 8000398:	043f      	lsls	r7, r7, #16
 800039a:	0408      	lsls	r0, r1, #16
 800039c:	0c3f      	lsrs	r7, r7, #16
 800039e:	19c0      	adds	r0, r0, r7
 80003a0:	0184      	lsls	r4, r0, #6
 80003a2:	1e67      	subs	r7, r4, #1
 80003a4:	41bc      	sbcs	r4, r7
 80003a6:	0c09      	lsrs	r1, r1, #16
 80003a8:	0e80      	lsrs	r0, r0, #26
 80003aa:	1989      	adds	r1, r1, r6
 80003ac:	4304      	orrs	r4, r0
 80003ae:	0189      	lsls	r1, r1, #6
 80003b0:	430c      	orrs	r4, r1
 80003b2:	0109      	lsls	r1, r1, #4
 80003b4:	d571      	bpl.n	800049a <__aeabi_fmul+0x24a>
 80003b6:	2301      	movs	r3, #1
 80003b8:	0861      	lsrs	r1, r4, #1
 80003ba:	401c      	ands	r4, r3
 80003bc:	430c      	orrs	r4, r1
 80003be:	002b      	movs	r3, r5
 80003c0:	337f      	adds	r3, #127	; 0x7f
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dd51      	ble.n	800046a <__aeabi_fmul+0x21a>
 80003c6:	0761      	lsls	r1, r4, #29
 80003c8:	d004      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003ca:	210f      	movs	r1, #15
 80003cc:	4021      	ands	r1, r4
 80003ce:	2904      	cmp	r1, #4
 80003d0:	d000      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003d2:	3404      	adds	r4, #4
 80003d4:	0121      	lsls	r1, r4, #4
 80003d6:	d503      	bpl.n	80003e0 <__aeabi_fmul+0x190>
 80003d8:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <__aeabi_fmul+0x298>)
 80003da:	401c      	ands	r4, r3
 80003dc:	002b      	movs	r3, r5
 80003de:	3380      	adds	r3, #128	; 0x80
 80003e0:	2bfe      	cmp	r3, #254	; 0xfe
 80003e2:	dcc1      	bgt.n	8000368 <__aeabi_fmul+0x118>
 80003e4:	01a1      	lsls	r1, r4, #6
 80003e6:	0a49      	lsrs	r1, r1, #9
 80003e8:	b2d8      	uxtb	r0, r3
 80003ea:	e783      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80003ec:	2c00      	cmp	r4, #0
 80003ee:	d12c      	bne.n	800044a <__aeabi_fmul+0x1fa>
 80003f0:	2301      	movs	r3, #1
 80003f2:	4642      	mov	r2, r8
 80003f4:	431e      	orrs	r6, r3
 80003f6:	002b      	movs	r3, r5
 80003f8:	407a      	eors	r2, r7
 80003fa:	2001      	movs	r0, #1
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	1c5d      	adds	r5, r3, #1
 8000400:	2e0a      	cmp	r6, #10
 8000402:	dd00      	ble.n	8000406 <__aeabi_fmul+0x1b6>
 8000404:	e757      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000406:	e76a      	b.n	80002de <__aeabi_fmul+0x8e>
 8000408:	2b00      	cmp	r3, #0
 800040a:	d110      	bne.n	800042e <__aeabi_fmul+0x1de>
 800040c:	2301      	movs	r3, #1
 800040e:	2604      	movs	r6, #4
 8000410:	2500      	movs	r5, #0
 8000412:	469a      	mov	sl, r3
 8000414:	e738      	b.n	8000288 <__aeabi_fmul+0x38>
 8000416:	2b00      	cmp	r3, #0
 8000418:	d104      	bne.n	8000424 <__aeabi_fmul+0x1d4>
 800041a:	2302      	movs	r3, #2
 800041c:	2608      	movs	r6, #8
 800041e:	25ff      	movs	r5, #255	; 0xff
 8000420:	469a      	mov	sl, r3
 8000422:	e731      	b.n	8000288 <__aeabi_fmul+0x38>
 8000424:	2303      	movs	r3, #3
 8000426:	260c      	movs	r6, #12
 8000428:	25ff      	movs	r5, #255	; 0xff
 800042a:	469a      	mov	sl, r3
 800042c:	e72c      	b.n	8000288 <__aeabi_fmul+0x38>
 800042e:	4648      	mov	r0, r9
 8000430:	f001 fcb6 	bl	8001da0 <__clzsi2>
 8000434:	464a      	mov	r2, r9
 8000436:	1f43      	subs	r3, r0, #5
 8000438:	2576      	movs	r5, #118	; 0x76
 800043a:	409a      	lsls	r2, r3
 800043c:	2300      	movs	r3, #0
 800043e:	426d      	negs	r5, r5
 8000440:	4691      	mov	r9, r2
 8000442:	2600      	movs	r6, #0
 8000444:	469a      	mov	sl, r3
 8000446:	1a2d      	subs	r5, r5, r0
 8000448:	e71e      	b.n	8000288 <__aeabi_fmul+0x38>
 800044a:	0020      	movs	r0, r4
 800044c:	f001 fca8 	bl	8001da0 <__clzsi2>
 8000450:	4642      	mov	r2, r8
 8000452:	1f43      	subs	r3, r0, #5
 8000454:	409c      	lsls	r4, r3
 8000456:	1a2b      	subs	r3, r5, r0
 8000458:	3b76      	subs	r3, #118	; 0x76
 800045a:	407a      	eors	r2, r7
 800045c:	2000      	movs	r0, #0
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	1c5d      	adds	r5, r3, #1
 8000462:	2e0a      	cmp	r6, #10
 8000464:	dd00      	ble.n	8000468 <__aeabi_fmul+0x218>
 8000466:	e726      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000468:	e739      	b.n	80002de <__aeabi_fmul+0x8e>
 800046a:	2101      	movs	r1, #1
 800046c:	1acb      	subs	r3, r1, r3
 800046e:	2b1b      	cmp	r3, #27
 8000470:	dd00      	ble.n	8000474 <__aeabi_fmul+0x224>
 8000472:	e73d      	b.n	80002f0 <__aeabi_fmul+0xa0>
 8000474:	359e      	adds	r5, #158	; 0x9e
 8000476:	0021      	movs	r1, r4
 8000478:	40ac      	lsls	r4, r5
 800047a:	40d9      	lsrs	r1, r3
 800047c:	1e63      	subs	r3, r4, #1
 800047e:	419c      	sbcs	r4, r3
 8000480:	4321      	orrs	r1, r4
 8000482:	074b      	lsls	r3, r1, #29
 8000484:	d004      	beq.n	8000490 <__aeabi_fmul+0x240>
 8000486:	230f      	movs	r3, #15
 8000488:	400b      	ands	r3, r1
 800048a:	2b04      	cmp	r3, #4
 800048c:	d000      	beq.n	8000490 <__aeabi_fmul+0x240>
 800048e:	3104      	adds	r1, #4
 8000490:	014b      	lsls	r3, r1, #5
 8000492:	d504      	bpl.n	800049e <__aeabi_fmul+0x24e>
 8000494:	2001      	movs	r0, #1
 8000496:	2100      	movs	r1, #0
 8000498:	e72c      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800049a:	001d      	movs	r5, r3
 800049c:	e78f      	b.n	80003be <__aeabi_fmul+0x16e>
 800049e:	0189      	lsls	r1, r1, #6
 80004a0:	2000      	movs	r0, #0
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	e726      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004a6:	2302      	movs	r3, #2
 80004a8:	2e0f      	cmp	r6, #15
 80004aa:	d10c      	bne.n	80004c6 <__aeabi_fmul+0x276>
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	464b      	mov	r3, r9
 80004b0:	03c9      	lsls	r1, r1, #15
 80004b2:	420b      	tst	r3, r1
 80004b4:	d00d      	beq.n	80004d2 <__aeabi_fmul+0x282>
 80004b6:	420c      	tst	r4, r1
 80004b8:	d10b      	bne.n	80004d2 <__aeabi_fmul+0x282>
 80004ba:	4321      	orrs	r1, r4
 80004bc:	0249      	lsls	r1, r1, #9
 80004be:	003a      	movs	r2, r7
 80004c0:	20ff      	movs	r0, #255	; 0xff
 80004c2:	0a49      	lsrs	r1, r1, #9
 80004c4:	e716      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004c6:	2e0b      	cmp	r6, #11
 80004c8:	d000      	beq.n	80004cc <__aeabi_fmul+0x27c>
 80004ca:	e6f7      	b.n	80002bc <__aeabi_fmul+0x6c>
 80004cc:	46a1      	mov	r9, r4
 80004ce:	469a      	mov	sl, r3
 80004d0:	e736      	b.n	8000340 <__aeabi_fmul+0xf0>
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	464b      	mov	r3, r9
 80004d6:	03c9      	lsls	r1, r1, #15
 80004d8:	4319      	orrs	r1, r3
 80004da:	0249      	lsls	r1, r1, #9
 80004dc:	4642      	mov	r2, r8
 80004de:	20ff      	movs	r0, #255	; 0xff
 80004e0:	0a49      	lsrs	r1, r1, #9
 80004e2:	e707      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004e4:	2303      	movs	r3, #3
 80004e6:	e7df      	b.n	80004a8 <__aeabi_fmul+0x258>
 80004e8:	f7ffffff 	.word	0xf7ffffff

080004ec <__aeabi_fsub>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	46c6      	mov	lr, r8
 80004f0:	0243      	lsls	r3, r0, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	0045      	lsls	r5, r0, #1
 80004f6:	00da      	lsls	r2, r3, #3
 80004f8:	0fc4      	lsrs	r4, r0, #31
 80004fa:	0248      	lsls	r0, r1, #9
 80004fc:	004f      	lsls	r7, r1, #1
 80004fe:	4694      	mov	ip, r2
 8000500:	0a42      	lsrs	r2, r0, #9
 8000502:	001e      	movs	r6, r3
 8000504:	4690      	mov	r8, r2
 8000506:	b500      	push	{lr}
 8000508:	0e2d      	lsrs	r5, r5, #24
 800050a:	0e3f      	lsrs	r7, r7, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	0980      	lsrs	r0, r0, #6
 8000510:	2fff      	cmp	r7, #255	; 0xff
 8000512:	d059      	beq.n	80005c8 <__aeabi_fsub+0xdc>
 8000514:	2201      	movs	r2, #1
 8000516:	4051      	eors	r1, r2
 8000518:	428c      	cmp	r4, r1
 800051a:	d039      	beq.n	8000590 <__aeabi_fsub+0xa4>
 800051c:	1bea      	subs	r2, r5, r7
 800051e:	2a00      	cmp	r2, #0
 8000520:	dd58      	ble.n	80005d4 <__aeabi_fsub+0xe8>
 8000522:	2f00      	cmp	r7, #0
 8000524:	d068      	beq.n	80005f8 <__aeabi_fsub+0x10c>
 8000526:	2dff      	cmp	r5, #255	; 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fsub+0x40>
 800052a:	e0d1      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	04db      	lsls	r3, r3, #19
 8000530:	4318      	orrs	r0, r3
 8000532:	2a1b      	cmp	r2, #27
 8000534:	dc00      	bgt.n	8000538 <__aeabi_fsub+0x4c>
 8000536:	e0e3      	b.n	8000700 <__aeabi_fsub+0x214>
 8000538:	2301      	movs	r3, #1
 800053a:	4662      	mov	r2, ip
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	015a      	lsls	r2, r3, #5
 8000540:	d400      	bmi.n	8000544 <__aeabi_fsub+0x58>
 8000542:	e0ac      	b.n	800069e <__aeabi_fsub+0x1b2>
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	099e      	lsrs	r6, r3, #6
 8000548:	0030      	movs	r0, r6
 800054a:	f001 fc29 	bl	8001da0 <__clzsi2>
 800054e:	0033      	movs	r3, r6
 8000550:	3805      	subs	r0, #5
 8000552:	4083      	lsls	r3, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fsub+0x6e>
 8000558:	e0c6      	b.n	80006e8 <__aeabi_fsub+0x1fc>
 800055a:	4ab2      	ldr	r2, [pc, #712]	; (8000824 <__aeabi_fsub+0x338>)
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	4013      	ands	r3, r2
 8000560:	075a      	lsls	r2, r3, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fsub+0x82>
 8000564:	220f      	movs	r2, #15
 8000566:	401a      	ands	r2, r3
 8000568:	2a04      	cmp	r2, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fsub+0x82>
 800056c:	3304      	adds	r3, #4
 800056e:	015a      	lsls	r2, r3, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fsub+0x88>
 8000572:	e097      	b.n	80006a4 <__aeabi_fsub+0x1b8>
 8000574:	1c6a      	adds	r2, r5, #1
 8000576:	2dfe      	cmp	r5, #254	; 0xfe
 8000578:	d100      	bne.n	800057c <__aeabi_fsub+0x90>
 800057a:	e084      	b.n	8000686 <__aeabi_fsub+0x19a>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	0a5e      	lsrs	r6, r3, #9
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	05d0      	lsls	r0, r2, #23
 8000584:	4330      	orrs	r0, r6
 8000586:	07e4      	lsls	r4, r4, #31
 8000588:	4320      	orrs	r0, r4
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000590:	1bea      	subs	r2, r5, r7
 8000592:	2a00      	cmp	r2, #0
 8000594:	dd41      	ble.n	800061a <__aeabi_fsub+0x12e>
 8000596:	2f00      	cmp	r7, #0
 8000598:	d06b      	beq.n	8000672 <__aeabi_fsub+0x186>
 800059a:	2dff      	cmp	r5, #255	; 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0xb4>
 800059e:	e097      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4318      	orrs	r0, r3
 80005a6:	2a1b      	cmp	r2, #27
 80005a8:	dc00      	bgt.n	80005ac <__aeabi_fsub+0xc0>
 80005aa:	e0cc      	b.n	8000746 <__aeabi_fsub+0x25a>
 80005ac:	2301      	movs	r3, #1
 80005ae:	4463      	add	r3, ip
 80005b0:	015a      	lsls	r2, r3, #5
 80005b2:	d574      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 80005b4:	3501      	adds	r5, #1
 80005b6:	2dff      	cmp	r5, #255	; 0xff
 80005b8:	d065      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80005ba:	2201      	movs	r2, #1
 80005bc:	499a      	ldr	r1, [pc, #616]	; (8000828 <__aeabi_fsub+0x33c>)
 80005be:	401a      	ands	r2, r3
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	400b      	ands	r3, r1
 80005c4:	4313      	orrs	r3, r2
 80005c6:	e7cb      	b.n	8000560 <__aeabi_fsub+0x74>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d01f      	beq.n	800060c <__aeabi_fsub+0x120>
 80005cc:	428c      	cmp	r4, r1
 80005ce:	d022      	beq.n	8000616 <__aeabi_fsub+0x12a>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3aff      	subs	r2, #255	; 0xff
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d035      	beq.n	8000644 <__aeabi_fsub+0x158>
 80005d8:	1b7a      	subs	r2, r7, r5
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fsub+0xf4>
 80005de:	e099      	b.n	8000714 <__aeabi_fsub+0x228>
 80005e0:	4663      	mov	r3, ip
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fsub+0xfc>
 80005e6:	e0dd      	b.n	80007a4 <__aeabi_fsub+0x2b8>
 80005e8:	1e53      	subs	r3, r2, #1
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fsub+0x104>
 80005ee:	e105      	b.n	80007fc <__aeabi_fsub+0x310>
 80005f0:	2aff      	cmp	r2, #255	; 0xff
 80005f2:	d06b      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 80005f4:	001a      	movs	r2, r3
 80005f6:	e094      	b.n	8000722 <__aeabi_fsub+0x236>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d073      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 80005fc:	1e51      	subs	r1, r2, #1
 80005fe:	2a01      	cmp	r2, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x118>
 8000602:	e0df      	b.n	80007c4 <__aeabi_fsub+0x2d8>
 8000604:	2aff      	cmp	r2, #255	; 0xff
 8000606:	d063      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000608:	000a      	movs	r2, r1
 800060a:	e792      	b.n	8000532 <__aeabi_fsub+0x46>
 800060c:	2201      	movs	r2, #1
 800060e:	4051      	eors	r1, r2
 8000610:	42a1      	cmp	r1, r4
 8000612:	d000      	beq.n	8000616 <__aeabi_fsub+0x12a>
 8000614:	e782      	b.n	800051c <__aeabi_fsub+0x30>
 8000616:	002a      	movs	r2, r5
 8000618:	3aff      	subs	r2, #255	; 0xff
 800061a:	2a00      	cmp	r2, #0
 800061c:	d036      	beq.n	800068c <__aeabi_fsub+0x1a0>
 800061e:	1b7a      	subs	r2, r7, r5
 8000620:	2d00      	cmp	r5, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fsub+0x13a>
 8000624:	e0aa      	b.n	800077c <__aeabi_fsub+0x290>
 8000626:	2fff      	cmp	r7, #255	; 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fsub+0x140>
 800062a:	e0da      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	4661      	mov	r1, ip
 8000630:	04db      	lsls	r3, r3, #19
 8000632:	4319      	orrs	r1, r3
 8000634:	468c      	mov	ip, r1
 8000636:	2a1b      	cmp	r2, #27
 8000638:	dc00      	bgt.n	800063c <__aeabi_fsub+0x150>
 800063a:	e0d4      	b.n	80007e6 <__aeabi_fsub+0x2fa>
 800063c:	2301      	movs	r3, #1
 800063e:	003d      	movs	r5, r7
 8000640:	181b      	adds	r3, r3, r0
 8000642:	e7b5      	b.n	80005b0 <__aeabi_fsub+0xc4>
 8000644:	27fe      	movs	r7, #254	; 0xfe
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	4217      	tst	r7, r2
 800064a:	d171      	bne.n	8000730 <__aeabi_fsub+0x244>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_fsub+0x166>
 8000650:	e09e      	b.n	8000790 <__aeabi_fsub+0x2a4>
 8000652:	4663      	mov	r3, ip
 8000654:	2b00      	cmp	r3, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x16e>
 8000658:	e0d5      	b.n	8000806 <__aeabi_fsub+0x31a>
 800065a:	2200      	movs	r2, #0
 800065c:	2800      	cmp	r0, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fsub+0x176>
 8000660:	e78f      	b.n	8000582 <__aeabi_fsub+0x96>
 8000662:	1a1b      	subs	r3, r3, r0
 8000664:	015e      	lsls	r6, r3, #5
 8000666:	d400      	bmi.n	800066a <__aeabi_fsub+0x17e>
 8000668:	e0d6      	b.n	8000818 <__aeabi_fsub+0x32c>
 800066a:	4663      	mov	r3, ip
 800066c:	000c      	movs	r4, r1
 800066e:	1ac3      	subs	r3, r0, r3
 8000670:	e776      	b.n	8000560 <__aeabi_fsub+0x74>
 8000672:	2800      	cmp	r0, #0
 8000674:	d036      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 8000676:	1e51      	subs	r1, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fsub+0x192>
 800067c:	e09a      	b.n	80007b4 <__aeabi_fsub+0x2c8>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d026      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000682:	000a      	movs	r2, r1
 8000684:	e78f      	b.n	80005a6 <__aeabi_fsub+0xba>
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	2600      	movs	r6, #0
 800068a:	e77a      	b.n	8000582 <__aeabi_fsub+0x96>
 800068c:	27fe      	movs	r7, #254	; 0xfe
 800068e:	1c6a      	adds	r2, r5, #1
 8000690:	4217      	tst	r7, r2
 8000692:	d062      	beq.n	800075a <__aeabi_fsub+0x26e>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0f6      	beq.n	8000686 <__aeabi_fsub+0x19a>
 8000698:	0015      	movs	r5, r2
 800069a:	4460      	add	r0, ip
 800069c:	0843      	lsrs	r3, r0, #1
 800069e:	075a      	lsls	r2, r3, #29
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fsub+0x1b8>
 80006a2:	e75f      	b.n	8000564 <__aeabi_fsub+0x78>
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	2dff      	cmp	r5, #255	; 0xff
 80006a8:	d012      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006aa:	025b      	lsls	r3, r3, #9
 80006ac:	0a5e      	lsrs	r6, r3, #9
 80006ae:	b2ea      	uxtb	r2, r5
 80006b0:	e767      	b.n	8000582 <__aeabi_fsub+0x96>
 80006b2:	4662      	mov	r2, ip
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 80006b8:	e093      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d008      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	03d2      	lsls	r2, r2, #15
 80006c2:	4213      	tst	r3, r2
 80006c4:	d004      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006c6:	4640      	mov	r0, r8
 80006c8:	4210      	tst	r0, r2
 80006ca:	d101      	bne.n	80006d0 <__aeabi_fsub+0x1e4>
 80006cc:	000c      	movs	r4, r1
 80006ce:	4643      	mov	r3, r8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0d8      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80006d4:	2680      	movs	r6, #128	; 0x80
 80006d6:	03f6      	lsls	r6, r6, #15
 80006d8:	431e      	orrs	r6, r3
 80006da:	0276      	lsls	r6, r6, #9
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	0a76      	lsrs	r6, r6, #9
 80006e0:	e74f      	b.n	8000582 <__aeabi_fsub+0x96>
 80006e2:	4643      	mov	r3, r8
 80006e4:	0015      	movs	r5, r2
 80006e6:	e7de      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80006e8:	2220      	movs	r2, #32
 80006ea:	1b40      	subs	r0, r0, r5
 80006ec:	3001      	adds	r0, #1
 80006ee:	1a12      	subs	r2, r2, r0
 80006f0:	0019      	movs	r1, r3
 80006f2:	4093      	lsls	r3, r2
 80006f4:	40c1      	lsrs	r1, r0
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	2500      	movs	r5, #0
 80006fc:	430b      	orrs	r3, r1
 80006fe:	e72f      	b.n	8000560 <__aeabi_fsub+0x74>
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	0001      	movs	r1, r0
 8000706:	4098      	lsls	r0, r3
 8000708:	0003      	movs	r3, r0
 800070a:	40d1      	lsrs	r1, r2
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	4193      	sbcs	r3, r2
 8000710:	430b      	orrs	r3, r1
 8000712:	e712      	b.n	800053a <__aeabi_fsub+0x4e>
 8000714:	2fff      	cmp	r7, #255	; 0xff
 8000716:	d0d9      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	4664      	mov	r4, ip
 800071c:	04db      	lsls	r3, r3, #19
 800071e:	431c      	orrs	r4, r3
 8000720:	46a4      	mov	ip, r4
 8000722:	2a1b      	cmp	r2, #27
 8000724:	dd52      	ble.n	80007cc <__aeabi_fsub+0x2e0>
 8000726:	2301      	movs	r3, #1
 8000728:	000c      	movs	r4, r1
 800072a:	003d      	movs	r5, r7
 800072c:	1ac3      	subs	r3, r0, r3
 800072e:	e706      	b.n	800053e <__aeabi_fsub+0x52>
 8000730:	4663      	mov	r3, ip
 8000732:	1a1e      	subs	r6, r3, r0
 8000734:	0173      	lsls	r3, r6, #5
 8000736:	d439      	bmi.n	80007ac <__aeabi_fsub+0x2c0>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fsub+0x252>
 800073c:	e704      	b.n	8000548 <__aeabi_fsub+0x5c>
 800073e:	2400      	movs	r4, #0
 8000740:	2200      	movs	r2, #0
 8000742:	2600      	movs	r6, #0
 8000744:	e71d      	b.n	8000582 <__aeabi_fsub+0x96>
 8000746:	2320      	movs	r3, #32
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	0001      	movs	r1, r0
 800074c:	4098      	lsls	r0, r3
 800074e:	0003      	movs	r3, r0
 8000750:	40d1      	lsrs	r1, r2
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	430b      	orrs	r3, r1
 8000758:	e729      	b.n	80005ae <__aeabi_fsub+0xc2>
 800075a:	2d00      	cmp	r5, #0
 800075c:	d1a9      	bne.n	80006b2 <__aeabi_fsub+0x1c6>
 800075e:	4663      	mov	r3, ip
 8000760:	2b00      	cmp	r3, #0
 8000762:	d056      	beq.n	8000812 <__aeabi_fsub+0x326>
 8000764:	2200      	movs	r2, #0
 8000766:	2800      	cmp	r0, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x280>
 800076a:	e70a      	b.n	8000582 <__aeabi_fsub+0x96>
 800076c:	0003      	movs	r3, r0
 800076e:	4463      	add	r3, ip
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d594      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <__aeabi_fsub+0x338>)
 8000776:	3501      	adds	r5, #1
 8000778:	4013      	ands	r3, r2
 800077a:	e790      	b.n	800069e <__aeabi_fsub+0x1b2>
 800077c:	4663      	mov	r3, ip
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0af      	beq.n	80006e2 <__aeabi_fsub+0x1f6>
 8000782:	1e53      	subs	r3, r2, #1
 8000784:	2a01      	cmp	r2, #1
 8000786:	d015      	beq.n	80007b4 <__aeabi_fsub+0x2c8>
 8000788:	2aff      	cmp	r2, #255	; 0xff
 800078a:	d02a      	beq.n	80007e2 <__aeabi_fsub+0x2f6>
 800078c:	001a      	movs	r2, r3
 800078e:	e752      	b.n	8000636 <__aeabi_fsub+0x14a>
 8000790:	4662      	mov	r2, ip
 8000792:	2a00      	cmp	r2, #0
 8000794:	d191      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 8000796:	2800      	cmp	r0, #0
 8000798:	d198      	bne.n	80006cc <__aeabi_fsub+0x1e0>
 800079a:	2680      	movs	r6, #128	; 0x80
 800079c:	2400      	movs	r4, #0
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	03f6      	lsls	r6, r6, #15
 80007a2:	e6ee      	b.n	8000582 <__aeabi_fsub+0x96>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	0015      	movs	r5, r2
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80007ac:	4663      	mov	r3, ip
 80007ae:	000c      	movs	r4, r1
 80007b0:	1ac6      	subs	r6, r0, r3
 80007b2:	e6c9      	b.n	8000548 <__aeabi_fsub+0x5c>
 80007b4:	0003      	movs	r3, r0
 80007b6:	4463      	add	r3, ip
 80007b8:	2501      	movs	r5, #1
 80007ba:	015a      	lsls	r2, r3, #5
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_fsub+0x2d4>
 80007be:	e76e      	b.n	800069e <__aeabi_fsub+0x1b2>
 80007c0:	2502      	movs	r5, #2
 80007c2:	e6fa      	b.n	80005ba <__aeabi_fsub+0xce>
 80007c4:	4663      	mov	r3, ip
 80007c6:	2501      	movs	r5, #1
 80007c8:	1a1b      	subs	r3, r3, r0
 80007ca:	e6b8      	b.n	800053e <__aeabi_fsub+0x52>
 80007cc:	4664      	mov	r4, ip
 80007ce:	2320      	movs	r3, #32
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	4662      	mov	r2, ip
 80007d6:	409a      	lsls	r2, r3
 80007d8:	0013      	movs	r3, r2
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4323      	orrs	r3, r4
 80007e0:	e7a2      	b.n	8000728 <__aeabi_fsub+0x23c>
 80007e2:	4643      	mov	r3, r8
 80007e4:	e774      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80007e6:	4661      	mov	r1, ip
 80007e8:	2320      	movs	r3, #32
 80007ea:	40d1      	lsrs	r1, r2
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4662      	mov	r2, ip
 80007f0:	409a      	lsls	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	430b      	orrs	r3, r1
 80007fa:	e720      	b.n	800063e <__aeabi_fsub+0x152>
 80007fc:	4663      	mov	r3, ip
 80007fe:	000c      	movs	r4, r1
 8000800:	2501      	movs	r5, #1
 8000802:	1ac3      	subs	r3, r0, r3
 8000804:	e69b      	b.n	800053e <__aeabi_fsub+0x52>
 8000806:	2800      	cmp	r0, #0
 8000808:	d099      	beq.n	800073e <__aeabi_fsub+0x252>
 800080a:	000c      	movs	r4, r1
 800080c:	4646      	mov	r6, r8
 800080e:	2200      	movs	r2, #0
 8000810:	e6b7      	b.n	8000582 <__aeabi_fsub+0x96>
 8000812:	4646      	mov	r6, r8
 8000814:	2200      	movs	r2, #0
 8000816:	e6b4      	b.n	8000582 <__aeabi_fsub+0x96>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d000      	beq.n	800081e <__aeabi_fsub+0x332>
 800081c:	e73f      	b.n	800069e <__aeabi_fsub+0x1b2>
 800081e:	2400      	movs	r4, #0
 8000820:	2600      	movs	r6, #0
 8000822:	e6ae      	b.n	8000582 <__aeabi_fsub+0x96>
 8000824:	fbffffff 	.word	0xfbffffff
 8000828:	7dffffff 	.word	0x7dffffff

0800082c <__aeabi_f2iz>:
 800082c:	0241      	lsls	r1, r0, #9
 800082e:	0042      	lsls	r2, r0, #1
 8000830:	0fc3      	lsrs	r3, r0, #31
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	2000      	movs	r0, #0
 8000836:	0e12      	lsrs	r2, r2, #24
 8000838:	2a7e      	cmp	r2, #126	; 0x7e
 800083a:	dd03      	ble.n	8000844 <__aeabi_f2iz+0x18>
 800083c:	2a9d      	cmp	r2, #157	; 0x9d
 800083e:	dd02      	ble.n	8000846 <__aeabi_f2iz+0x1a>
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <__aeabi_f2iz+0x3c>)
 8000842:	1898      	adds	r0, r3, r2
 8000844:	4770      	bx	lr
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4301      	orrs	r1, r0
 800084c:	2a95      	cmp	r2, #149	; 0x95
 800084e:	dc07      	bgt.n	8000860 <__aeabi_f2iz+0x34>
 8000850:	2096      	movs	r0, #150	; 0x96
 8000852:	1a82      	subs	r2, r0, r2
 8000854:	40d1      	lsrs	r1, r2
 8000856:	4248      	negs	r0, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f3      	bne.n	8000844 <__aeabi_f2iz+0x18>
 800085c:	0008      	movs	r0, r1
 800085e:	e7f1      	b.n	8000844 <__aeabi_f2iz+0x18>
 8000860:	3a96      	subs	r2, #150	; 0x96
 8000862:	4091      	lsls	r1, r2
 8000864:	e7f7      	b.n	8000856 <__aeabi_f2iz+0x2a>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	7fffffff 	.word	0x7fffffff

0800086c <__aeabi_i2f>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	2800      	cmp	r0, #0
 8000870:	d013      	beq.n	800089a <__aeabi_i2f+0x2e>
 8000872:	17c3      	asrs	r3, r0, #31
 8000874:	18c5      	adds	r5, r0, r3
 8000876:	405d      	eors	r5, r3
 8000878:	0fc4      	lsrs	r4, r0, #31
 800087a:	0028      	movs	r0, r5
 800087c:	f001 fa90 	bl	8001da0 <__clzsi2>
 8000880:	239e      	movs	r3, #158	; 0x9e
 8000882:	0001      	movs	r1, r0
 8000884:	1a1b      	subs	r3, r3, r0
 8000886:	2b96      	cmp	r3, #150	; 0x96
 8000888:	dc0f      	bgt.n	80008aa <__aeabi_i2f+0x3e>
 800088a:	2808      	cmp	r0, #8
 800088c:	d031      	beq.n	80008f2 <__aeabi_i2f+0x86>
 800088e:	3908      	subs	r1, #8
 8000890:	408d      	lsls	r5, r1
 8000892:	026d      	lsls	r5, r5, #9
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	b2d8      	uxtb	r0, r3
 8000898:	e002      	b.n	80008a0 <__aeabi_i2f+0x34>
 800089a:	2400      	movs	r4, #0
 800089c:	2000      	movs	r0, #0
 800089e:	2500      	movs	r5, #0
 80008a0:	05c0      	lsls	r0, r0, #23
 80008a2:	4328      	orrs	r0, r5
 80008a4:	07e4      	lsls	r4, r4, #31
 80008a6:	4320      	orrs	r0, r4
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	2b99      	cmp	r3, #153	; 0x99
 80008ac:	dd0c      	ble.n	80008c8 <__aeabi_i2f+0x5c>
 80008ae:	2205      	movs	r2, #5
 80008b0:	1a12      	subs	r2, r2, r0
 80008b2:	0028      	movs	r0, r5
 80008b4:	40d0      	lsrs	r0, r2
 80008b6:	0002      	movs	r2, r0
 80008b8:	0008      	movs	r0, r1
 80008ba:	301b      	adds	r0, #27
 80008bc:	4085      	lsls	r5, r0
 80008be:	0028      	movs	r0, r5
 80008c0:	1e45      	subs	r5, r0, #1
 80008c2:	41a8      	sbcs	r0, r5
 80008c4:	4302      	orrs	r2, r0
 80008c6:	0015      	movs	r5, r2
 80008c8:	2905      	cmp	r1, #5
 80008ca:	dc16      	bgt.n	80008fa <__aeabi_i2f+0x8e>
 80008cc:	002a      	movs	r2, r5
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <__aeabi_i2f+0xa0>)
 80008d0:	4002      	ands	r2, r0
 80008d2:	076e      	lsls	r6, r5, #29
 80008d4:	d009      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008d6:	260f      	movs	r6, #15
 80008d8:	4035      	ands	r5, r6
 80008da:	2d04      	cmp	r5, #4
 80008dc:	d005      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008de:	3204      	adds	r2, #4
 80008e0:	0155      	lsls	r5, r2, #5
 80008e2:	d502      	bpl.n	80008ea <__aeabi_i2f+0x7e>
 80008e4:	239f      	movs	r3, #159	; 0x9f
 80008e6:	4002      	ands	r2, r0
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	0192      	lsls	r2, r2, #6
 80008ec:	0a55      	lsrs	r5, r2, #9
 80008ee:	b2d8      	uxtb	r0, r3
 80008f0:	e7d6      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008f2:	026d      	lsls	r5, r5, #9
 80008f4:	2096      	movs	r0, #150	; 0x96
 80008f6:	0a6d      	lsrs	r5, r5, #9
 80008f8:	e7d2      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008fa:	1f4a      	subs	r2, r1, #5
 80008fc:	4095      	lsls	r5, r2
 80008fe:	002a      	movs	r2, r5
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <__aeabi_i2f+0xa0>)
 8000902:	4002      	ands	r2, r0
 8000904:	076e      	lsls	r6, r5, #29
 8000906:	d0f0      	beq.n	80008ea <__aeabi_i2f+0x7e>
 8000908:	e7e5      	b.n	80008d6 <__aeabi_i2f+0x6a>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	fbffffff 	.word	0xfbffffff

08000910 <__aeabi_dadd>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	464f      	mov	r7, r9
 8000914:	4646      	mov	r6, r8
 8000916:	46d6      	mov	lr, sl
 8000918:	0004      	movs	r4, r0
 800091a:	b5c0      	push	{r6, r7, lr}
 800091c:	001f      	movs	r7, r3
 800091e:	030b      	lsls	r3, r1, #12
 8000920:	0010      	movs	r0, r2
 8000922:	004e      	lsls	r6, r1, #1
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	0fcd      	lsrs	r5, r1, #31
 8000928:	0f61      	lsrs	r1, r4, #29
 800092a:	007a      	lsls	r2, r7, #1
 800092c:	4319      	orrs	r1, r3
 800092e:	00e3      	lsls	r3, r4, #3
 8000930:	033c      	lsls	r4, r7, #12
 8000932:	0fff      	lsrs	r7, r7, #31
 8000934:	46bc      	mov	ip, r7
 8000936:	0a64      	lsrs	r4, r4, #9
 8000938:	0f47      	lsrs	r7, r0, #29
 800093a:	4327      	orrs	r7, r4
 800093c:	0d76      	lsrs	r6, r6, #21
 800093e:	0d52      	lsrs	r2, r2, #21
 8000940:	00c0      	lsls	r0, r0, #3
 8000942:	46b9      	mov	r9, r7
 8000944:	4680      	mov	r8, r0
 8000946:	1ab7      	subs	r7, r6, r2
 8000948:	4565      	cmp	r5, ip
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x3e>
 800094c:	e09b      	b.n	8000a86 <__aeabi_dadd+0x176>
 800094e:	2f00      	cmp	r7, #0
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x44>
 8000952:	e084      	b.n	8000a5e <__aeabi_dadd+0x14e>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x4a>
 8000958:	e0be      	b.n	8000ad8 <__aeabi_dadd+0x1c8>
 800095a:	4ac8      	ldr	r2, [pc, #800]	; (8000c7c <__aeabi_dadd+0x36c>)
 800095c:	4296      	cmp	r6, r2
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x52>
 8000960:	e124      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	464c      	mov	r4, r9
 8000966:	0412      	lsls	r2, r2, #16
 8000968:	4314      	orrs	r4, r2
 800096a:	46a1      	mov	r9, r4
 800096c:	2f38      	cmp	r7, #56	; 0x38
 800096e:	dd00      	ble.n	8000972 <__aeabi_dadd+0x62>
 8000970:	e167      	b.n	8000c42 <__aeabi_dadd+0x332>
 8000972:	2f1f      	cmp	r7, #31
 8000974:	dd00      	ble.n	8000978 <__aeabi_dadd+0x68>
 8000976:	e1d6      	b.n	8000d26 <__aeabi_dadd+0x416>
 8000978:	2220      	movs	r2, #32
 800097a:	464c      	mov	r4, r9
 800097c:	1bd2      	subs	r2, r2, r7
 800097e:	4094      	lsls	r4, r2
 8000980:	46a2      	mov	sl, r4
 8000982:	4644      	mov	r4, r8
 8000984:	40fc      	lsrs	r4, r7
 8000986:	0020      	movs	r0, r4
 8000988:	4654      	mov	r4, sl
 800098a:	4304      	orrs	r4, r0
 800098c:	4640      	mov	r0, r8
 800098e:	4090      	lsls	r0, r2
 8000990:	1e42      	subs	r2, r0, #1
 8000992:	4190      	sbcs	r0, r2
 8000994:	464a      	mov	r2, r9
 8000996:	40fa      	lsrs	r2, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	1a89      	subs	r1, r1, r2
 800099c:	1b1c      	subs	r4, r3, r4
 800099e:	42a3      	cmp	r3, r4
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	1a8b      	subs	r3, r1, r2
 80009a6:	469a      	mov	sl, r3
 80009a8:	4653      	mov	r3, sl
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_dadd+0xa0>
 80009ae:	e0d4      	b.n	8000b5a <__aeabi_dadd+0x24a>
 80009b0:	4653      	mov	r3, sl
 80009b2:	025a      	lsls	r2, r3, #9
 80009b4:	0a53      	lsrs	r3, r2, #9
 80009b6:	469a      	mov	sl, r3
 80009b8:	4653      	mov	r3, sl
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0xb0>
 80009be:	e104      	b.n	8000bca <__aeabi_dadd+0x2ba>
 80009c0:	4650      	mov	r0, sl
 80009c2:	f001 f9ed 	bl	8001da0 <__clzsi2>
 80009c6:	0003      	movs	r3, r0
 80009c8:	3b08      	subs	r3, #8
 80009ca:	2220      	movs	r2, #32
 80009cc:	0020      	movs	r0, r4
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	4651      	mov	r1, sl
 80009d2:	40d0      	lsrs	r0, r2
 80009d4:	4099      	lsls	r1, r3
 80009d6:	0002      	movs	r2, r0
 80009d8:	409c      	lsls	r4, r3
 80009da:	430a      	orrs	r2, r1
 80009dc:	42b3      	cmp	r3, r6
 80009de:	da00      	bge.n	80009e2 <__aeabi_dadd+0xd2>
 80009e0:	e102      	b.n	8000be8 <__aeabi_dadd+0x2d8>
 80009e2:	1b9b      	subs	r3, r3, r6
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	291f      	cmp	r1, #31
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dadd+0xdc>
 80009ea:	e0a7      	b.n	8000b3c <__aeabi_dadd+0x22c>
 80009ec:	2320      	movs	r3, #32
 80009ee:	0010      	movs	r0, r2
 80009f0:	0026      	movs	r6, r4
 80009f2:	1a5b      	subs	r3, r3, r1
 80009f4:	409c      	lsls	r4, r3
 80009f6:	4098      	lsls	r0, r3
 80009f8:	40ce      	lsrs	r6, r1
 80009fa:	40ca      	lsrs	r2, r1
 80009fc:	1e63      	subs	r3, r4, #1
 80009fe:	419c      	sbcs	r4, r3
 8000a00:	4330      	orrs	r0, r6
 8000a02:	4692      	mov	sl, r2
 8000a04:	2600      	movs	r6, #0
 8000a06:	4304      	orrs	r4, r0
 8000a08:	0763      	lsls	r3, r4, #29
 8000a0a:	d009      	beq.n	8000a20 <__aeabi_dadd+0x110>
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	4023      	ands	r3, r4
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d005      	beq.n	8000a20 <__aeabi_dadd+0x110>
 8000a14:	1d23      	adds	r3, r4, #4
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	41a4      	sbcs	r4, r4
 8000a1a:	4264      	negs	r4, r4
 8000a1c:	44a2      	add	sl, r4
 8000a1e:	001c      	movs	r4, r3
 8000a20:	4653      	mov	r3, sl
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_dadd+0x118>
 8000a26:	e09b      	b.n	8000b60 <__aeabi_dadd+0x250>
 8000a28:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	429e      	cmp	r6, r3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x122>
 8000a30:	e0b8      	b.n	8000ba4 <__aeabi_dadd+0x294>
 8000a32:	4653      	mov	r3, sl
 8000a34:	4992      	ldr	r1, [pc, #584]	; (8000c80 <__aeabi_dadd+0x370>)
 8000a36:	08e4      	lsrs	r4, r4, #3
 8000a38:	400b      	ands	r3, r1
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	075b      	lsls	r3, r3, #29
 8000a3e:	4323      	orrs	r3, r4
 8000a40:	0572      	lsls	r2, r6, #21
 8000a42:	024c      	lsls	r4, r1, #9
 8000a44:	0b24      	lsrs	r4, r4, #12
 8000a46:	0d52      	lsrs	r2, r2, #21
 8000a48:	0512      	lsls	r2, r2, #20
 8000a4a:	07ed      	lsls	r5, r5, #31
 8000a4c:	4322      	orrs	r2, r4
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	0018      	movs	r0, r3
 8000a52:	0011      	movs	r1, r2
 8000a54:	bce0      	pop	{r5, r6, r7}
 8000a56:	46ba      	mov	sl, r7
 8000a58:	46b1      	mov	r9, r6
 8000a5a:	46a8      	mov	r8, r5
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d048      	beq.n	8000af4 <__aeabi_dadd+0x1e4>
 8000a62:	1b97      	subs	r7, r2, r6
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x15a>
 8000a68:	e10e      	b.n	8000c88 <__aeabi_dadd+0x378>
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x162>
 8000a70:	e1b7      	b.n	8000de2 <__aeabi_dadd+0x4d2>
 8000a72:	1e7c      	subs	r4, r7, #1
 8000a74:	2f01      	cmp	r7, #1
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x16a>
 8000a78:	e226      	b.n	8000ec8 <__aeabi_dadd+0x5b8>
 8000a7a:	4d80      	ldr	r5, [pc, #512]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a7c:	42af      	cmp	r7, r5
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x172>
 8000a80:	e1d5      	b.n	8000e2e <__aeabi_dadd+0x51e>
 8000a82:	0027      	movs	r7, r4
 8000a84:	e107      	b.n	8000c96 <__aeabi_dadd+0x386>
 8000a86:	2f00      	cmp	r7, #0
 8000a88:	dc00      	bgt.n	8000a8c <__aeabi_dadd+0x17c>
 8000a8a:	e0b2      	b.n	8000bf2 <__aeabi_dadd+0x2e2>
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d047      	beq.n	8000b20 <__aeabi_dadd+0x210>
 8000a90:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a92:	4296      	cmp	r6, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x188>
 8000a96:	e089      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	464c      	mov	r4, r9
 8000a9c:	0412      	lsls	r2, r2, #16
 8000a9e:	4314      	orrs	r4, r2
 8000aa0:	46a1      	mov	r9, r4
 8000aa2:	2f38      	cmp	r7, #56	; 0x38
 8000aa4:	dc6b      	bgt.n	8000b7e <__aeabi_dadd+0x26e>
 8000aa6:	2f1f      	cmp	r7, #31
 8000aa8:	dc00      	bgt.n	8000aac <__aeabi_dadd+0x19c>
 8000aaa:	e16e      	b.n	8000d8a <__aeabi_dadd+0x47a>
 8000aac:	003a      	movs	r2, r7
 8000aae:	4648      	mov	r0, r9
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d0      	lsrs	r0, r2
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	2f20      	cmp	r7, #32
 8000ab8:	d007      	beq.n	8000aca <__aeabi_dadd+0x1ba>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4648      	mov	r0, r9
 8000abe:	1bd2      	subs	r2, r2, r7
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	4680      	mov	r8, r0
 8000aca:	4640      	mov	r0, r8
 8000acc:	1e42      	subs	r2, r0, #1
 8000ace:	4190      	sbcs	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	4314      	orrs	r4, r2
 8000ad6:	e057      	b.n	8000b88 <__aeabi_dadd+0x278>
 8000ad8:	464a      	mov	r2, r9
 8000ada:	4302      	orrs	r2, r0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x1d0>
 8000ade:	e103      	b.n	8000ce8 <__aeabi_dadd+0x3d8>
 8000ae0:	1e7a      	subs	r2, r7, #1
 8000ae2:	2f01      	cmp	r7, #1
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x1d8>
 8000ae6:	e193      	b.n	8000e10 <__aeabi_dadd+0x500>
 8000ae8:	4c64      	ldr	r4, [pc, #400]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000aea:	42a7      	cmp	r7, r4
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x1e0>
 8000aee:	e18a      	b.n	8000e06 <__aeabi_dadd+0x4f6>
 8000af0:	0017      	movs	r7, r2
 8000af2:	e73b      	b.n	800096c <__aeabi_dadd+0x5c>
 8000af4:	4c63      	ldr	r4, [pc, #396]	; (8000c84 <__aeabi_dadd+0x374>)
 8000af6:	1c72      	adds	r2, r6, #1
 8000af8:	4222      	tst	r2, r4
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x1ee>
 8000afc:	e0e0      	b.n	8000cc0 <__aeabi_dadd+0x3b0>
 8000afe:	000a      	movs	r2, r1
 8000b00:	431a      	orrs	r2, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d000      	beq.n	8000b08 <__aeabi_dadd+0x1f8>
 8000b06:	e174      	b.n	8000df2 <__aeabi_dadd+0x4e2>
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x1fe>
 8000b0c:	e1d0      	b.n	8000eb0 <__aeabi_dadd+0x5a0>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	4302      	orrs	r2, r0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x206>
 8000b14:	e1e3      	b.n	8000ede <__aeabi_dadd+0x5ce>
 8000b16:	074a      	lsls	r2, r1, #29
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	08c9      	lsrs	r1, r1, #3
 8000b1e:	e029      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000b20:	464a      	mov	r2, r9
 8000b22:	4302      	orrs	r2, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x218>
 8000b26:	e17d      	b.n	8000e24 <__aeabi_dadd+0x514>
 8000b28:	1e7a      	subs	r2, r7, #1
 8000b2a:	2f01      	cmp	r7, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x220>
 8000b2e:	e0e0      	b.n	8000cf2 <__aeabi_dadd+0x3e2>
 8000b30:	4c52      	ldr	r4, [pc, #328]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b32:	42a7      	cmp	r7, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x228>
 8000b36:	e166      	b.n	8000e06 <__aeabi_dadd+0x4f6>
 8000b38:	0017      	movs	r7, r2
 8000b3a:	e7b2      	b.n	8000aa2 <__aeabi_dadd+0x192>
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	3b1f      	subs	r3, #31
 8000b40:	40d8      	lsrs	r0, r3
 8000b42:	2920      	cmp	r1, #32
 8000b44:	d003      	beq.n	8000b4e <__aeabi_dadd+0x23e>
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	1e63      	subs	r3, r4, #1
 8000b50:	419c      	sbcs	r4, r3
 8000b52:	2300      	movs	r3, #0
 8000b54:	2600      	movs	r6, #0
 8000b56:	469a      	mov	sl, r3
 8000b58:	4304      	orrs	r4, r0
 8000b5a:	0763      	lsls	r3, r4, #29
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x250>
 8000b5e:	e755      	b.n	8000a0c <__aeabi_dadd+0xfc>
 8000b60:	4652      	mov	r2, sl
 8000b62:	08e3      	lsrs	r3, r4, #3
 8000b64:	0752      	lsls	r2, r2, #29
 8000b66:	4313      	orrs	r3, r2
 8000b68:	4652      	mov	r2, sl
 8000b6a:	0037      	movs	r7, r6
 8000b6c:	08d1      	lsrs	r1, r2, #3
 8000b6e:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b70:	4297      	cmp	r7, r2
 8000b72:	d01f      	beq.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000b74:	0309      	lsls	r1, r1, #12
 8000b76:	057a      	lsls	r2, r7, #21
 8000b78:	0b0c      	lsrs	r4, r1, #12
 8000b7a:	0d52      	lsrs	r2, r2, #21
 8000b7c:	e764      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000b7e:	4642      	mov	r2, r8
 8000b80:	464c      	mov	r4, r9
 8000b82:	4314      	orrs	r4, r2
 8000b84:	1e62      	subs	r2, r4, #1
 8000b86:	4194      	sbcs	r4, r2
 8000b88:	18e4      	adds	r4, r4, r3
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	4192      	sbcs	r2, r2
 8000b8e:	4252      	negs	r2, r2
 8000b90:	4692      	mov	sl, r2
 8000b92:	448a      	add	sl, r1
 8000b94:	4653      	mov	r3, sl
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	d5df      	bpl.n	8000b5a <__aeabi_dadd+0x24a>
 8000b9a:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b9c:	3601      	adds	r6, #1
 8000b9e:	429e      	cmp	r6, r3
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_dadd+0x294>
 8000ba2:	e0b3      	b.n	8000d0c <__aeabi_dadd+0x3fc>
 8000ba4:	0032      	movs	r2, r6
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e74d      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000bac:	074a      	lsls	r2, r1, #29
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	08c9      	lsrs	r1, r1, #3
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x2ac>
 8000bba:	e200      	b.n	8000fbe <__aeabi_dadd+0x6ae>
 8000bbc:	2480      	movs	r4, #128	; 0x80
 8000bbe:	0324      	lsls	r4, r4, #12
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	0324      	lsls	r4, r4, #12
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000bc6:	0b24      	lsrs	r4, r4, #12
 8000bc8:	e73e      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f001 f8e8 	bl	8001da0 <__clzsi2>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	2b1f      	cmp	r3, #31
 8000bd6:	dc00      	bgt.n	8000bda <__aeabi_dadd+0x2ca>
 8000bd8:	e6f7      	b.n	80009ca <__aeabi_dadd+0xba>
 8000bda:	0022      	movs	r2, r4
 8000bdc:	3808      	subs	r0, #8
 8000bde:	4082      	lsls	r2, r0
 8000be0:	2400      	movs	r4, #0
 8000be2:	42b3      	cmp	r3, r6
 8000be4:	db00      	blt.n	8000be8 <__aeabi_dadd+0x2d8>
 8000be6:	e6fc      	b.n	80009e2 <__aeabi_dadd+0xd2>
 8000be8:	1af6      	subs	r6, r6, r3
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <__aeabi_dadd+0x370>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	4692      	mov	sl, r2
 8000bf0:	e70a      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d02b      	beq.n	8000c4e <__aeabi_dadd+0x33e>
 8000bf6:	1b97      	subs	r7, r2, r6
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x2ee>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x460>
 8000bfe:	4c1f      	ldr	r4, [pc, #124]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x2f6>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x530>
 8000c06:	2480      	movs	r4, #128	; 0x80
 8000c08:	0424      	lsls	r4, r4, #16
 8000c0a:	4321      	orrs	r1, r4
 8000c0c:	2f38      	cmp	r7, #56	; 0x38
 8000c0e:	dd00      	ble.n	8000c12 <__aeabi_dadd+0x302>
 8000c10:	e11e      	b.n	8000e50 <__aeabi_dadd+0x540>
 8000c12:	2f1f      	cmp	r7, #31
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x308>
 8000c16:	e19e      	b.n	8000f56 <__aeabi_dadd+0x646>
 8000c18:	2620      	movs	r6, #32
 8000c1a:	000c      	movs	r4, r1
 8000c1c:	1bf6      	subs	r6, r6, r7
 8000c1e:	0018      	movs	r0, r3
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	40b4      	lsls	r4, r6
 8000c24:	40f8      	lsrs	r0, r7
 8000c26:	1e5e      	subs	r6, r3, #1
 8000c28:	41b3      	sbcs	r3, r6
 8000c2a:	40f9      	lsrs	r1, r7
 8000c2c:	4304      	orrs	r4, r0
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	4489      	add	r9, r1
 8000c32:	4444      	add	r4, r8
 8000c34:	4544      	cmp	r4, r8
 8000c36:	419b      	sbcs	r3, r3
 8000c38:	425b      	negs	r3, r3
 8000c3a:	444b      	add	r3, r9
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	0016      	movs	r6, r2
 8000c40:	e7a8      	b.n	8000b94 <__aeabi_dadd+0x284>
 8000c42:	4642      	mov	r2, r8
 8000c44:	464c      	mov	r4, r9
 8000c46:	4314      	orrs	r4, r2
 8000c48:	1e62      	subs	r2, r4, #1
 8000c4a:	4194      	sbcs	r4, r2
 8000c4c:	e6a6      	b.n	800099c <__aeabi_dadd+0x8c>
 8000c4e:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__aeabi_dadd+0x374>)
 8000c50:	1c72      	adds	r2, r6, #1
 8000c52:	4222      	tst	r2, r4
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x348>
 8000c56:	e0a8      	b.n	8000daa <__aeabi_dadd+0x49a>
 8000c58:	000a      	movs	r2, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_dadd+0x352>
 8000c60:	e10a      	b.n	8000e78 <__aeabi_dadd+0x568>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x358>
 8000c66:	e15e      	b.n	8000f26 <__aeabi_dadd+0x616>
 8000c68:	464a      	mov	r2, r9
 8000c6a:	4302      	orrs	r2, r0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_dadd+0x360>
 8000c6e:	e161      	b.n	8000f34 <__aeabi_dadd+0x624>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e77c      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	000007ff 	.word	0x000007ff
 8000c80:	ff7fffff 	.word	0xff7fffff
 8000c84:	000007fe 	.word	0x000007fe
 8000c88:	4ccf      	ldr	r4, [pc, #828]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000c8a:	42a2      	cmp	r2, r4
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x380>
 8000c8e:	e0ce      	b.n	8000e2e <__aeabi_dadd+0x51e>
 8000c90:	2480      	movs	r4, #128	; 0x80
 8000c92:	0424      	lsls	r4, r4, #16
 8000c94:	4321      	orrs	r1, r4
 8000c96:	2f38      	cmp	r7, #56	; 0x38
 8000c98:	dc5b      	bgt.n	8000d52 <__aeabi_dadd+0x442>
 8000c9a:	2f1f      	cmp	r7, #31
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_dadd+0x390>
 8000c9e:	e0dc      	b.n	8000e5a <__aeabi_dadd+0x54a>
 8000ca0:	2520      	movs	r5, #32
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	1bed      	subs	r5, r5, r7
 8000ca6:	001e      	movs	r6, r3
 8000ca8:	40ab      	lsls	r3, r5
 8000caa:	40ac      	lsls	r4, r5
 8000cac:	40fe      	lsrs	r6, r7
 8000cae:	1e5d      	subs	r5, r3, #1
 8000cb0:	41ab      	sbcs	r3, r5
 8000cb2:	4334      	orrs	r4, r6
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	464b      	mov	r3, r9
 8000cba:	1a5b      	subs	r3, r3, r1
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	e04c      	b.n	8000d5a <__aeabi_dadd+0x44a>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a1c      	subs	r4, r3, r0
 8000cc4:	1a88      	subs	r0, r1, r2
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	4252      	negs	r2, r2
 8000ccc:	4692      	mov	sl, r2
 8000cce:	0002      	movs	r2, r0
 8000cd0:	4650      	mov	r0, sl
 8000cd2:	1a12      	subs	r2, r2, r0
 8000cd4:	4692      	mov	sl, r2
 8000cd6:	0212      	lsls	r2, r2, #8
 8000cd8:	d478      	bmi.n	8000dcc <__aeabi_dadd+0x4bc>
 8000cda:	4653      	mov	r3, sl
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000ce0:	e66a      	b.n	80009b8 <__aeabi_dadd+0xa8>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	e745      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000ce8:	074a      	lsls	r2, r1, #29
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	e73d      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000cf2:	181c      	adds	r4, r3, r0
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	419b      	sbcs	r3, r3
 8000cf8:	4449      	add	r1, r9
 8000cfa:	468a      	mov	sl, r1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	449a      	add	sl, r3
 8000d00:	4653      	mov	r3, sl
 8000d02:	2601      	movs	r6, #1
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	d400      	bmi.n	8000d0a <__aeabi_dadd+0x3fa>
 8000d08:	e727      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4baf      	ldr	r3, [pc, #700]	; (8000fcc <__aeabi_dadd+0x6bc>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	401a      	ands	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	4021      	ands	r1, r4
 8000d18:	0862      	lsrs	r2, r4, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	07dc      	lsls	r4, r3, #31
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	469a      	mov	sl, r3
 8000d22:	4314      	orrs	r4, r2
 8000d24:	e670      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000d26:	003a      	movs	r2, r7
 8000d28:	464c      	mov	r4, r9
 8000d2a:	3a20      	subs	r2, #32
 8000d2c:	40d4      	lsrs	r4, r2
 8000d2e:	46a4      	mov	ip, r4
 8000d30:	2f20      	cmp	r7, #32
 8000d32:	d007      	beq.n	8000d44 <__aeabi_dadd+0x434>
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	4648      	mov	r0, r9
 8000d38:	1bd2      	subs	r2, r2, r7
 8000d3a:	4090      	lsls	r0, r2
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	4640      	mov	r0, r8
 8000d40:	4310      	orrs	r0, r2
 8000d42:	4680      	mov	r8, r0
 8000d44:	4640      	mov	r0, r8
 8000d46:	1e42      	subs	r2, r0, #1
 8000d48:	4190      	sbcs	r0, r2
 8000d4a:	4662      	mov	r2, ip
 8000d4c:	0004      	movs	r4, r0
 8000d4e:	4314      	orrs	r4, r2
 8000d50:	e624      	b.n	800099c <__aeabi_dadd+0x8c>
 8000d52:	4319      	orrs	r1, r3
 8000d54:	000c      	movs	r4, r1
 8000d56:	1e63      	subs	r3, r4, #1
 8000d58:	419c      	sbcs	r4, r3
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	1b1c      	subs	r4, r3, r4
 8000d5e:	45a0      	cmp	r8, r4
 8000d60:	419b      	sbcs	r3, r3
 8000d62:	4649      	mov	r1, r9
 8000d64:	425b      	negs	r3, r3
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	469a      	mov	sl, r3
 8000d6a:	4665      	mov	r5, ip
 8000d6c:	0016      	movs	r6, r2
 8000d6e:	e61b      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000d70:	000c      	movs	r4, r1
 8000d72:	431c      	orrs	r4, r3
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x468>
 8000d76:	e0c7      	b.n	8000f08 <__aeabi_dadd+0x5f8>
 8000d78:	1e7c      	subs	r4, r7, #1
 8000d7a:	2f01      	cmp	r7, #1
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dadd+0x470>
 8000d7e:	e0f9      	b.n	8000f74 <__aeabi_dadd+0x664>
 8000d80:	4e91      	ldr	r6, [pc, #580]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000d82:	42b7      	cmp	r7, r6
 8000d84:	d05c      	beq.n	8000e40 <__aeabi_dadd+0x530>
 8000d86:	0027      	movs	r7, r4
 8000d88:	e740      	b.n	8000c0c <__aeabi_dadd+0x2fc>
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	464c      	mov	r4, r9
 8000d8e:	4640      	mov	r0, r8
 8000d90:	1bd2      	subs	r2, r2, r7
 8000d92:	4094      	lsls	r4, r2
 8000d94:	40f8      	lsrs	r0, r7
 8000d96:	4304      	orrs	r4, r0
 8000d98:	4640      	mov	r0, r8
 8000d9a:	4090      	lsls	r0, r2
 8000d9c:	1e42      	subs	r2, r0, #1
 8000d9e:	4190      	sbcs	r0, r2
 8000da0:	464a      	mov	r2, r9
 8000da2:	40fa      	lsrs	r2, r7
 8000da4:	4304      	orrs	r4, r0
 8000da6:	1889      	adds	r1, r1, r2
 8000da8:	e6ee      	b.n	8000b88 <__aeabi_dadd+0x278>
 8000daa:	4c87      	ldr	r4, [pc, #540]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000dac:	42a2      	cmp	r2, r4
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x4a2>
 8000db0:	e6f9      	b.n	8000ba6 <__aeabi_dadd+0x296>
 8000db2:	1818      	adds	r0, r3, r0
 8000db4:	4298      	cmp	r0, r3
 8000db6:	419b      	sbcs	r3, r3
 8000db8:	4449      	add	r1, r9
 8000dba:	425b      	negs	r3, r3
 8000dbc:	18cb      	adds	r3, r1, r3
 8000dbe:	07dc      	lsls	r4, r3, #31
 8000dc0:	0840      	lsrs	r0, r0, #1
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	0016      	movs	r6, r2
 8000dc8:	4304      	orrs	r4, r0
 8000dca:	e6c6      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000dcc:	4642      	mov	r2, r8
 8000dce:	1ad4      	subs	r4, r2, r3
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	4180      	sbcs	r0, r0
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	1a0b      	subs	r3, r1, r0
 8000ddc:	469a      	mov	sl, r3
 8000dde:	4665      	mov	r5, ip
 8000de0:	e5ea      	b.n	80009b8 <__aeabi_dadd+0xa8>
 8000de2:	464b      	mov	r3, r9
 8000de4:	464a      	mov	r2, r9
 8000de6:	08c0      	lsrs	r0, r0, #3
 8000de8:	075b      	lsls	r3, r3, #29
 8000dea:	4665      	mov	r5, ip
 8000dec:	4303      	orrs	r3, r0
 8000dee:	08d1      	lsrs	r1, r2, #3
 8000df0:	e6bd      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d000      	beq.n	8000df8 <__aeabi_dadd+0x4e8>
 8000df6:	e08e      	b.n	8000f16 <__aeabi_dadd+0x606>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	d117      	bne.n	8000e2e <__aeabi_dadd+0x51e>
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	2500      	movs	r5, #0
 8000e02:	0309      	lsls	r1, r1, #12
 8000e04:	e6da      	b.n	8000bbc <__aeabi_dadd+0x2ac>
 8000e06:	074a      	lsls	r2, r1, #29
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	08c9      	lsrs	r1, r1, #3
 8000e0e:	e6d1      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e10:	1a1c      	subs	r4, r3, r0
 8000e12:	464a      	mov	r2, r9
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	419b      	sbcs	r3, r3
 8000e18:	1a89      	subs	r1, r1, r2
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	469a      	mov	sl, r3
 8000e20:	2601      	movs	r6, #1
 8000e22:	e5c1      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000e24:	074a      	lsls	r2, r1, #29
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	e69f      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000e2e:	4643      	mov	r3, r8
 8000e30:	08d8      	lsrs	r0, r3, #3
 8000e32:	464b      	mov	r3, r9
 8000e34:	464a      	mov	r2, r9
 8000e36:	075b      	lsls	r3, r3, #29
 8000e38:	4665      	mov	r5, ip
 8000e3a:	4303      	orrs	r3, r0
 8000e3c:	08d1      	lsrs	r1, r2, #3
 8000e3e:	e6b9      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e40:	4643      	mov	r3, r8
 8000e42:	08d8      	lsrs	r0, r3, #3
 8000e44:	464b      	mov	r3, r9
 8000e46:	464a      	mov	r2, r9
 8000e48:	075b      	lsls	r3, r3, #29
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	08d1      	lsrs	r1, r2, #3
 8000e4e:	e6b1      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e50:	4319      	orrs	r1, r3
 8000e52:	000c      	movs	r4, r1
 8000e54:	1e63      	subs	r3, r4, #1
 8000e56:	419c      	sbcs	r4, r3
 8000e58:	e6eb      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000e5a:	003c      	movs	r4, r7
 8000e5c:	000d      	movs	r5, r1
 8000e5e:	3c20      	subs	r4, #32
 8000e60:	40e5      	lsrs	r5, r4
 8000e62:	2f20      	cmp	r7, #32
 8000e64:	d003      	beq.n	8000e6e <__aeabi_dadd+0x55e>
 8000e66:	2440      	movs	r4, #64	; 0x40
 8000e68:	1be4      	subs	r4, r4, r7
 8000e6a:	40a1      	lsls	r1, r4
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	001c      	movs	r4, r3
 8000e70:	1e63      	subs	r3, r4, #1
 8000e72:	419c      	sbcs	r4, r3
 8000e74:	432c      	orrs	r4, r5
 8000e76:	e770      	b.n	8000d5a <__aeabi_dadd+0x44a>
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d0e1      	beq.n	8000e40 <__aeabi_dadd+0x530>
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	4302      	orrs	r2, r0
 8000e80:	d0c1      	beq.n	8000e06 <__aeabi_dadd+0x4f6>
 8000e82:	074a      	lsls	r2, r1, #29
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	08c9      	lsrs	r1, r1, #3
 8000e8c:	0312      	lsls	r2, r2, #12
 8000e8e:	4211      	tst	r1, r2
 8000e90:	d008      	beq.n	8000ea4 <__aeabi_dadd+0x594>
 8000e92:	4648      	mov	r0, r9
 8000e94:	08c4      	lsrs	r4, r0, #3
 8000e96:	4214      	tst	r4, r2
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_dadd+0x594>
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	0742      	lsls	r2, r0, #29
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	0f5a      	lsrs	r2, r3, #29
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	0752      	lsls	r2, r2, #29
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	e681      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000eb0:	464b      	mov	r3, r9
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x5a8>
 8000eb6:	e714      	b.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000eb8:	464b      	mov	r3, r9
 8000eba:	464a      	mov	r2, r9
 8000ebc:	08c0      	lsrs	r0, r0, #3
 8000ebe:	075b      	lsls	r3, r3, #29
 8000ec0:	4665      	mov	r5, ip
 8000ec2:	4303      	orrs	r3, r0
 8000ec4:	08d1      	lsrs	r1, r2, #3
 8000ec6:	e655      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000ec8:	1ac4      	subs	r4, r0, r3
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	4180      	sbcs	r0, r0
 8000ece:	464b      	mov	r3, r9
 8000ed0:	4240      	negs	r0, r0
 8000ed2:	1a59      	subs	r1, r3, r1
 8000ed4:	1a0b      	subs	r3, r1, r0
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	4665      	mov	r5, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	e564      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000ede:	1a1c      	subs	r4, r3, r0
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	4180      	sbcs	r0, r0
 8000ee6:	1a8a      	subs	r2, r1, r2
 8000ee8:	4240      	negs	r0, r0
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	4692      	mov	sl, r2
 8000eee:	0212      	lsls	r2, r2, #8
 8000ef0:	d549      	bpl.n	8000f86 <__aeabi_dadd+0x676>
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	1ad4      	subs	r4, r2, r3
 8000ef6:	45a0      	cmp	r8, r4
 8000ef8:	4180      	sbcs	r0, r0
 8000efa:	464b      	mov	r3, r9
 8000efc:	4240      	negs	r0, r0
 8000efe:	1a59      	subs	r1, r3, r1
 8000f00:	1a0b      	subs	r3, r1, r0
 8000f02:	469a      	mov	sl, r3
 8000f04:	4665      	mov	r5, ip
 8000f06:	e57f      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000f08:	464b      	mov	r3, r9
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	08c0      	lsrs	r0, r0, #3
 8000f0e:	075b      	lsls	r3, r3, #29
 8000f10:	4303      	orrs	r3, r0
 8000f12:	08d1      	lsrs	r1, r2, #3
 8000f14:	e62b      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000f16:	464a      	mov	r2, r9
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	4302      	orrs	r2, r0
 8000f1c:	d138      	bne.n	8000f90 <__aeabi_dadd+0x680>
 8000f1e:	074a      	lsls	r2, r1, #29
 8000f20:	4313      	orrs	r3, r2
 8000f22:	08c9      	lsrs	r1, r1, #3
 8000f24:	e646      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000f26:	464b      	mov	r3, r9
 8000f28:	464a      	mov	r2, r9
 8000f2a:	08c0      	lsrs	r0, r0, #3
 8000f2c:	075b      	lsls	r3, r3, #29
 8000f2e:	4303      	orrs	r3, r0
 8000f30:	08d1      	lsrs	r1, r2, #3
 8000f32:	e61f      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000f34:	181c      	adds	r4, r3, r0
 8000f36:	429c      	cmp	r4, r3
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	4449      	add	r1, r9
 8000f3c:	468a      	mov	sl, r1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	449a      	add	sl, r3
 8000f42:	4653      	mov	r3, sl
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x63a>
 8000f48:	e607      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f4a:	4652      	mov	r2, sl
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <__aeabi_dadd+0x6bc>)
 8000f4e:	2601      	movs	r6, #1
 8000f50:	401a      	ands	r2, r3
 8000f52:	4692      	mov	sl, r2
 8000f54:	e601      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f56:	003c      	movs	r4, r7
 8000f58:	000e      	movs	r6, r1
 8000f5a:	3c20      	subs	r4, #32
 8000f5c:	40e6      	lsrs	r6, r4
 8000f5e:	2f20      	cmp	r7, #32
 8000f60:	d003      	beq.n	8000f6a <__aeabi_dadd+0x65a>
 8000f62:	2440      	movs	r4, #64	; 0x40
 8000f64:	1be4      	subs	r4, r4, r7
 8000f66:	40a1      	lsls	r1, r4
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	001c      	movs	r4, r3
 8000f6c:	1e63      	subs	r3, r4, #1
 8000f6e:	419c      	sbcs	r4, r3
 8000f70:	4334      	orrs	r4, r6
 8000f72:	e65e      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000f74:	4443      	add	r3, r8
 8000f76:	4283      	cmp	r3, r0
 8000f78:	4180      	sbcs	r0, r0
 8000f7a:	4449      	add	r1, r9
 8000f7c:	468a      	mov	sl, r1
 8000f7e:	4240      	negs	r0, r0
 8000f80:	001c      	movs	r4, r3
 8000f82:	4482      	add	sl, r0
 8000f84:	e6bc      	b.n	8000d00 <__aeabi_dadd+0x3f0>
 8000f86:	4653      	mov	r3, sl
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x67e>
 8000f8c:	e6a9      	b.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000f8e:	e5e4      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f90:	074a      	lsls	r2, r1, #29
 8000f92:	4313      	orrs	r3, r2
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	08c9      	lsrs	r1, r1, #3
 8000f98:	0312      	lsls	r2, r2, #12
 8000f9a:	4211      	tst	r1, r2
 8000f9c:	d009      	beq.n	8000fb2 <__aeabi_dadd+0x6a2>
 8000f9e:	4648      	mov	r0, r9
 8000fa0:	08c4      	lsrs	r4, r0, #3
 8000fa2:	4214      	tst	r4, r2
 8000fa4:	d105      	bne.n	8000fb2 <__aeabi_dadd+0x6a2>
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	4665      	mov	r5, ip
 8000faa:	0021      	movs	r1, r4
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	0742      	lsls	r2, r0, #29
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	0f5a      	lsrs	r2, r3, #29
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	0752      	lsls	r2, r2, #29
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	e5fa      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4a01      	ldr	r2, [pc, #4]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	e540      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	000007ff 	.word	0x000007ff
 8000fcc:	ff7fffff 	.word	0xff7fffff

08000fd0 <__aeabi_ddiv>:
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	4657      	mov	r7, sl
 8000fd4:	464e      	mov	r6, r9
 8000fd6:	4645      	mov	r5, r8
 8000fd8:	46de      	mov	lr, fp
 8000fda:	b5e0      	push	{r5, r6, r7, lr}
 8000fdc:	030c      	lsls	r4, r1, #12
 8000fde:	001f      	movs	r7, r3
 8000fe0:	004b      	lsls	r3, r1, #1
 8000fe2:	4681      	mov	r9, r0
 8000fe4:	4692      	mov	sl, r2
 8000fe6:	0005      	movs	r5, r0
 8000fe8:	b085      	sub	sp, #20
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d5b      	lsrs	r3, r3, #21
 8000fee:	0fce      	lsrs	r6, r1, #31
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x26>
 8000ff4:	e152      	b.n	800129c <__aeabi_ddiv+0x2cc>
 8000ff6:	4ad2      	ldr	r2, [pc, #840]	; (8001340 <__aeabi_ddiv+0x370>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2e>
 8000ffc:	e16e      	b.n	80012dc <__aeabi_ddiv+0x30c>
 8000ffe:	0f42      	lsrs	r2, r0, #29
 8001000:	00e4      	lsls	r4, r4, #3
 8001002:	4314      	orrs	r4, r2
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0412      	lsls	r2, r2, #16
 8001008:	4322      	orrs	r2, r4
 800100a:	4690      	mov	r8, r2
 800100c:	4acd      	ldr	r2, [pc, #820]	; (8001344 <__aeabi_ddiv+0x374>)
 800100e:	00c5      	lsls	r5, r0, #3
 8001010:	4693      	mov	fp, r2
 8001012:	449b      	add	fp, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4699      	mov	r9, r3
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	033c      	lsls	r4, r7, #12
 800101c:	007b      	lsls	r3, r7, #1
 800101e:	4650      	mov	r0, sl
 8001020:	0b24      	lsrs	r4, r4, #12
 8001022:	0d5b      	lsrs	r3, r3, #21
 8001024:	0fff      	lsrs	r7, r7, #31
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x5c>
 800102a:	e11a      	b.n	8001262 <__aeabi_ddiv+0x292>
 800102c:	4ac4      	ldr	r2, [pc, #784]	; (8001340 <__aeabi_ddiv+0x370>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x64>
 8001032:	e15e      	b.n	80012f2 <__aeabi_ddiv+0x322>
 8001034:	0f42      	lsrs	r2, r0, #29
 8001036:	00e4      	lsls	r4, r4, #3
 8001038:	4322      	orrs	r2, r4
 800103a:	2480      	movs	r4, #128	; 0x80
 800103c:	0424      	lsls	r4, r4, #16
 800103e:	4314      	orrs	r4, r2
 8001040:	4ac0      	ldr	r2, [pc, #768]	; (8001344 <__aeabi_ddiv+0x374>)
 8001042:	00c1      	lsls	r1, r0, #3
 8001044:	4694      	mov	ip, r2
 8001046:	465a      	mov	r2, fp
 8001048:	4463      	add	r3, ip
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	469b      	mov	fp, r3
 800104e:	2000      	movs	r0, #0
 8001050:	0033      	movs	r3, r6
 8001052:	407b      	eors	r3, r7
 8001054:	469a      	mov	sl, r3
 8001056:	464b      	mov	r3, r9
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d827      	bhi.n	80010ac <__aeabi_ddiv+0xdc>
 800105c:	4aba      	ldr	r2, [pc, #744]	; (8001348 <__aeabi_ddiv+0x378>)
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	58d3      	ldr	r3, [r2, r3]
 8001062:	469f      	mov	pc, r3
 8001064:	46b2      	mov	sl, r6
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d016      	beq.n	800109a <__aeabi_ddiv+0xca>
 800106c:	2b03      	cmp	r3, #3
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0xa2>
 8001070:	e287      	b.n	8001582 <__aeabi_ddiv+0x5b2>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d000      	beq.n	8001078 <__aeabi_ddiv+0xa8>
 8001076:	e0d5      	b.n	8001224 <__aeabi_ddiv+0x254>
 8001078:	2300      	movs	r3, #0
 800107a:	2200      	movs	r2, #0
 800107c:	2500      	movs	r5, #0
 800107e:	051b      	lsls	r3, r3, #20
 8001080:	4313      	orrs	r3, r2
 8001082:	4652      	mov	r2, sl
 8001084:	07d2      	lsls	r2, r2, #31
 8001086:	4313      	orrs	r3, r2
 8001088:	0028      	movs	r0, r5
 800108a:	0019      	movs	r1, r3
 800108c:	b005      	add	sp, #20
 800108e:	bcf0      	pop	{r4, r5, r6, r7}
 8001090:	46bb      	mov	fp, r7
 8001092:	46b2      	mov	sl, r6
 8001094:	46a9      	mov	r9, r5
 8001096:	46a0      	mov	r8, r4
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	2200      	movs	r2, #0
 800109c:	2500      	movs	r5, #0
 800109e:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <__aeabi_ddiv+0x370>)
 80010a0:	e7ed      	b.n	800107e <__aeabi_ddiv+0xae>
 80010a2:	46ba      	mov	sl, r7
 80010a4:	46a0      	mov	r8, r4
 80010a6:	000d      	movs	r5, r1
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	e7dc      	b.n	8001066 <__aeabi_ddiv+0x96>
 80010ac:	4544      	cmp	r4, r8
 80010ae:	d200      	bcs.n	80010b2 <__aeabi_ddiv+0xe2>
 80010b0:	e1c4      	b.n	800143c <__aeabi_ddiv+0x46c>
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0xe6>
 80010b4:	e1bf      	b.n	8001436 <__aeabi_ddiv+0x466>
 80010b6:	2301      	movs	r3, #1
 80010b8:	425b      	negs	r3, r3
 80010ba:	469c      	mov	ip, r3
 80010bc:	002e      	movs	r6, r5
 80010be:	4640      	mov	r0, r8
 80010c0:	2500      	movs	r5, #0
 80010c2:	44e3      	add	fp, ip
 80010c4:	0223      	lsls	r3, r4, #8
 80010c6:	0e0c      	lsrs	r4, r1, #24
 80010c8:	431c      	orrs	r4, r3
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	4699      	mov	r9, r3
 80010ce:	0423      	lsls	r3, r4, #16
 80010d0:	020a      	lsls	r2, r1, #8
 80010d2:	0c1f      	lsrs	r7, r3, #16
 80010d4:	4649      	mov	r1, r9
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9701      	str	r7, [sp, #4]
 80010da:	f7ff f89b 	bl	8000214 <__aeabi_uidivmod>
 80010de:	0002      	movs	r2, r0
 80010e0:	437a      	muls	r2, r7
 80010e2:	040b      	lsls	r3, r1, #16
 80010e4:	0c31      	lsrs	r1, r6, #16
 80010e6:	4680      	mov	r8, r0
 80010e8:	4319      	orrs	r1, r3
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d907      	bls.n	80010fe <__aeabi_ddiv+0x12e>
 80010ee:	2301      	movs	r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	469c      	mov	ip, r3
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	44e0      	add	r8, ip
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d800      	bhi.n	80010fe <__aeabi_ddiv+0x12e>
 80010fc:	e201      	b.n	8001502 <__aeabi_ddiv+0x532>
 80010fe:	1a88      	subs	r0, r1, r2
 8001100:	4649      	mov	r1, r9
 8001102:	f7ff f887 	bl	8000214 <__aeabi_uidivmod>
 8001106:	9a01      	ldr	r2, [sp, #4]
 8001108:	0436      	lsls	r6, r6, #16
 800110a:	4342      	muls	r2, r0
 800110c:	0409      	lsls	r1, r1, #16
 800110e:	0c36      	lsrs	r6, r6, #16
 8001110:	0003      	movs	r3, r0
 8001112:	430e      	orrs	r6, r1
 8001114:	42b2      	cmp	r2, r6
 8001116:	d904      	bls.n	8001122 <__aeabi_ddiv+0x152>
 8001118:	1936      	adds	r6, r6, r4
 800111a:	3b01      	subs	r3, #1
 800111c:	42b4      	cmp	r4, r6
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x152>
 8001120:	e1e9      	b.n	80014f6 <__aeabi_ddiv+0x526>
 8001122:	1ab0      	subs	r0, r6, r2
 8001124:	4642      	mov	r2, r8
 8001126:	9e00      	ldr	r6, [sp, #0]
 8001128:	0412      	lsls	r2, r2, #16
 800112a:	431a      	orrs	r2, r3
 800112c:	0c33      	lsrs	r3, r6, #16
 800112e:	001f      	movs	r7, r3
 8001130:	0c11      	lsrs	r1, r2, #16
 8001132:	4690      	mov	r8, r2
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	0413      	lsls	r3, r2, #16
 8001138:	0432      	lsls	r2, r6, #16
 800113a:	0c16      	lsrs	r6, r2, #16
 800113c:	0032      	movs	r2, r6
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	435a      	muls	r2, r3
 8001142:	9603      	str	r6, [sp, #12]
 8001144:	437b      	muls	r3, r7
 8001146:	434e      	muls	r6, r1
 8001148:	4379      	muls	r1, r7
 800114a:	0c17      	lsrs	r7, r2, #16
 800114c:	46bc      	mov	ip, r7
 800114e:	199b      	adds	r3, r3, r6
 8001150:	4463      	add	r3, ip
 8001152:	429e      	cmp	r6, r3
 8001154:	d903      	bls.n	800115e <__aeabi_ddiv+0x18e>
 8001156:	2680      	movs	r6, #128	; 0x80
 8001158:	0276      	lsls	r6, r6, #9
 800115a:	46b4      	mov	ip, r6
 800115c:	4461      	add	r1, ip
 800115e:	0c1e      	lsrs	r6, r3, #16
 8001160:	1871      	adds	r1, r6, r1
 8001162:	0416      	lsls	r6, r2, #16
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	0c36      	lsrs	r6, r6, #16
 8001168:	199e      	adds	r6, r3, r6
 800116a:	4288      	cmp	r0, r1
 800116c:	d302      	bcc.n	8001174 <__aeabi_ddiv+0x1a4>
 800116e:	d112      	bne.n	8001196 <__aeabi_ddiv+0x1c6>
 8001170:	42b5      	cmp	r5, r6
 8001172:	d210      	bcs.n	8001196 <__aeabi_ddiv+0x1c6>
 8001174:	4643      	mov	r3, r8
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	9b00      	ldr	r3, [sp, #0]
 800117a:	469c      	mov	ip, r3
 800117c:	4465      	add	r5, ip
 800117e:	001f      	movs	r7, r3
 8001180:	429d      	cmp	r5, r3
 8001182:	419b      	sbcs	r3, r3
 8001184:	425b      	negs	r3, r3
 8001186:	191b      	adds	r3, r3, r4
 8001188:	18c0      	adds	r0, r0, r3
 800118a:	4284      	cmp	r4, r0
 800118c:	d200      	bcs.n	8001190 <__aeabi_ddiv+0x1c0>
 800118e:	e19e      	b.n	80014ce <__aeabi_ddiv+0x4fe>
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x1c4>
 8001192:	e199      	b.n	80014c8 <__aeabi_ddiv+0x4f8>
 8001194:	4690      	mov	r8, r2
 8001196:	1bae      	subs	r6, r5, r6
 8001198:	42b5      	cmp	r5, r6
 800119a:	41ad      	sbcs	r5, r5
 800119c:	1a40      	subs	r0, r0, r1
 800119e:	426d      	negs	r5, r5
 80011a0:	1b40      	subs	r0, r0, r5
 80011a2:	4284      	cmp	r4, r0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x1d8>
 80011a6:	e1d2      	b.n	800154e <__aeabi_ddiv+0x57e>
 80011a8:	4649      	mov	r1, r9
 80011aa:	f7ff f833 	bl	8000214 <__aeabi_uidivmod>
 80011ae:	9a01      	ldr	r2, [sp, #4]
 80011b0:	040b      	lsls	r3, r1, #16
 80011b2:	4342      	muls	r2, r0
 80011b4:	0c31      	lsrs	r1, r6, #16
 80011b6:	0005      	movs	r5, r0
 80011b8:	4319      	orrs	r1, r3
 80011ba:	428a      	cmp	r2, r1
 80011bc:	d900      	bls.n	80011c0 <__aeabi_ddiv+0x1f0>
 80011be:	e16c      	b.n	800149a <__aeabi_ddiv+0x4ca>
 80011c0:	1a88      	subs	r0, r1, r2
 80011c2:	4649      	mov	r1, r9
 80011c4:	f7ff f826 	bl	8000214 <__aeabi_uidivmod>
 80011c8:	9a01      	ldr	r2, [sp, #4]
 80011ca:	0436      	lsls	r6, r6, #16
 80011cc:	4342      	muls	r2, r0
 80011ce:	0409      	lsls	r1, r1, #16
 80011d0:	0c36      	lsrs	r6, r6, #16
 80011d2:	0003      	movs	r3, r0
 80011d4:	430e      	orrs	r6, r1
 80011d6:	42b2      	cmp	r2, r6
 80011d8:	d900      	bls.n	80011dc <__aeabi_ddiv+0x20c>
 80011da:	e153      	b.n	8001484 <__aeabi_ddiv+0x4b4>
 80011dc:	9803      	ldr	r0, [sp, #12]
 80011de:	1ab6      	subs	r6, r6, r2
 80011e0:	0002      	movs	r2, r0
 80011e2:	042d      	lsls	r5, r5, #16
 80011e4:	431d      	orrs	r5, r3
 80011e6:	9f02      	ldr	r7, [sp, #8]
 80011e8:	042b      	lsls	r3, r5, #16
 80011ea:	0c1b      	lsrs	r3, r3, #16
 80011ec:	435a      	muls	r2, r3
 80011ee:	437b      	muls	r3, r7
 80011f0:	469c      	mov	ip, r3
 80011f2:	0c29      	lsrs	r1, r5, #16
 80011f4:	4348      	muls	r0, r1
 80011f6:	0c13      	lsrs	r3, r2, #16
 80011f8:	4484      	add	ip, r0
 80011fa:	4463      	add	r3, ip
 80011fc:	4379      	muls	r1, r7
 80011fe:	4298      	cmp	r0, r3
 8001200:	d903      	bls.n	800120a <__aeabi_ddiv+0x23a>
 8001202:	2080      	movs	r0, #128	; 0x80
 8001204:	0240      	lsls	r0, r0, #9
 8001206:	4684      	mov	ip, r0
 8001208:	4461      	add	r1, ip
 800120a:	0c18      	lsrs	r0, r3, #16
 800120c:	0412      	lsls	r2, r2, #16
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	0c12      	lsrs	r2, r2, #16
 8001212:	1840      	adds	r0, r0, r1
 8001214:	189b      	adds	r3, r3, r2
 8001216:	4286      	cmp	r6, r0
 8001218:	d200      	bcs.n	800121c <__aeabi_ddiv+0x24c>
 800121a:	e100      	b.n	800141e <__aeabi_ddiv+0x44e>
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x250>
 800121e:	e0fb      	b.n	8001418 <__aeabi_ddiv+0x448>
 8001220:	2301      	movs	r3, #1
 8001222:	431d      	orrs	r5, r3
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <__aeabi_ddiv+0x37c>)
 8001226:	445b      	add	r3, fp
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_ddiv+0x25e>
 800122c:	e0aa      	b.n	8001384 <__aeabi_ddiv+0x3b4>
 800122e:	076a      	lsls	r2, r5, #29
 8001230:	d000      	beq.n	8001234 <__aeabi_ddiv+0x264>
 8001232:	e13d      	b.n	80014b0 <__aeabi_ddiv+0x4e0>
 8001234:	08e9      	lsrs	r1, r5, #3
 8001236:	4642      	mov	r2, r8
 8001238:	01d2      	lsls	r2, r2, #7
 800123a:	d506      	bpl.n	800124a <__aeabi_ddiv+0x27a>
 800123c:	4642      	mov	r2, r8
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <__aeabi_ddiv+0x380>)
 8001240:	401a      	ands	r2, r3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	4690      	mov	r8, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	445b      	add	r3, fp
 800124a:	4a42      	ldr	r2, [pc, #264]	; (8001354 <__aeabi_ddiv+0x384>)
 800124c:	4293      	cmp	r3, r2
 800124e:	dd00      	ble.n	8001252 <__aeabi_ddiv+0x282>
 8001250:	e723      	b.n	800109a <__aeabi_ddiv+0xca>
 8001252:	4642      	mov	r2, r8
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	0755      	lsls	r5, r2, #29
 8001258:	0252      	lsls	r2, r2, #9
 800125a:	430d      	orrs	r5, r1
 800125c:	0b12      	lsrs	r2, r2, #12
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	e70d      	b.n	800107e <__aeabi_ddiv+0xae>
 8001262:	4651      	mov	r1, sl
 8001264:	4321      	orrs	r1, r4
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x29a>
 8001268:	e07c      	b.n	8001364 <__aeabi_ddiv+0x394>
 800126a:	2c00      	cmp	r4, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x2a0>
 800126e:	e0fb      	b.n	8001468 <__aeabi_ddiv+0x498>
 8001270:	0020      	movs	r0, r4
 8001272:	f000 fd95 	bl	8001da0 <__clzsi2>
 8001276:	0002      	movs	r2, r0
 8001278:	3a0b      	subs	r2, #11
 800127a:	231d      	movs	r3, #29
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	4652      	mov	r2, sl
 8001280:	0001      	movs	r1, r0
 8001282:	40da      	lsrs	r2, r3
 8001284:	4653      	mov	r3, sl
 8001286:	3908      	subs	r1, #8
 8001288:	408b      	lsls	r3, r1
 800128a:	408c      	lsls	r4, r1
 800128c:	0019      	movs	r1, r3
 800128e:	4314      	orrs	r4, r2
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <__aeabi_ddiv+0x388>)
 8001292:	4458      	add	r0, fp
 8001294:	469b      	mov	fp, r3
 8001296:	4483      	add	fp, r0
 8001298:	2000      	movs	r0, #0
 800129a:	e6d9      	b.n	8001050 <__aeabi_ddiv+0x80>
 800129c:	0003      	movs	r3, r0
 800129e:	4323      	orrs	r3, r4
 80012a0:	4698      	mov	r8, r3
 80012a2:	d044      	beq.n	800132e <__aeabi_ddiv+0x35e>
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_ddiv+0x2da>
 80012a8:	e0cf      	b.n	800144a <__aeabi_ddiv+0x47a>
 80012aa:	0020      	movs	r0, r4
 80012ac:	f000 fd78 	bl	8001da0 <__clzsi2>
 80012b0:	0001      	movs	r1, r0
 80012b2:	0002      	movs	r2, r0
 80012b4:	390b      	subs	r1, #11
 80012b6:	231d      	movs	r3, #29
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	4649      	mov	r1, r9
 80012bc:	0010      	movs	r0, r2
 80012be:	40d9      	lsrs	r1, r3
 80012c0:	3808      	subs	r0, #8
 80012c2:	4084      	lsls	r4, r0
 80012c4:	000b      	movs	r3, r1
 80012c6:	464d      	mov	r5, r9
 80012c8:	4323      	orrs	r3, r4
 80012ca:	4698      	mov	r8, r3
 80012cc:	4085      	lsls	r5, r0
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <__aeabi_ddiv+0x38c>)
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	469b      	mov	fp, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4699      	mov	r9, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	e69e      	b.n	800101a <__aeabi_ddiv+0x4a>
 80012dc:	0002      	movs	r2, r0
 80012de:	4322      	orrs	r2, r4
 80012e0:	4690      	mov	r8, r2
 80012e2:	d11d      	bne.n	8001320 <__aeabi_ddiv+0x350>
 80012e4:	2208      	movs	r2, #8
 80012e6:	469b      	mov	fp, r3
 80012e8:	2302      	movs	r3, #2
 80012ea:	2500      	movs	r5, #0
 80012ec:	4691      	mov	r9, r2
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	e693      	b.n	800101a <__aeabi_ddiv+0x4a>
 80012f2:	4651      	mov	r1, sl
 80012f4:	4321      	orrs	r1, r4
 80012f6:	d109      	bne.n	800130c <__aeabi_ddiv+0x33c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	464a      	mov	r2, r9
 80012fc:	431a      	orrs	r2, r3
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <__aeabi_ddiv+0x390>)
 8001300:	4691      	mov	r9, r2
 8001302:	469c      	mov	ip, r3
 8001304:	2400      	movs	r4, #0
 8001306:	2002      	movs	r0, #2
 8001308:	44e3      	add	fp, ip
 800130a:	e6a1      	b.n	8001050 <__aeabi_ddiv+0x80>
 800130c:	2303      	movs	r3, #3
 800130e:	464a      	mov	r2, r9
 8001310:	431a      	orrs	r2, r3
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <__aeabi_ddiv+0x390>)
 8001314:	4691      	mov	r9, r2
 8001316:	469c      	mov	ip, r3
 8001318:	4651      	mov	r1, sl
 800131a:	2003      	movs	r0, #3
 800131c:	44e3      	add	fp, ip
 800131e:	e697      	b.n	8001050 <__aeabi_ddiv+0x80>
 8001320:	220c      	movs	r2, #12
 8001322:	469b      	mov	fp, r3
 8001324:	2303      	movs	r3, #3
 8001326:	46a0      	mov	r8, r4
 8001328:	4691      	mov	r9, r2
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	e675      	b.n	800101a <__aeabi_ddiv+0x4a>
 800132e:	2304      	movs	r3, #4
 8001330:	4699      	mov	r9, r3
 8001332:	2300      	movs	r3, #0
 8001334:	469b      	mov	fp, r3
 8001336:	3301      	adds	r3, #1
 8001338:	2500      	movs	r5, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	e66d      	b.n	800101a <__aeabi_ddiv+0x4a>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	000007ff 	.word	0x000007ff
 8001344:	fffffc01 	.word	0xfffffc01
 8001348:	0800569c 	.word	0x0800569c
 800134c:	000003ff 	.word	0x000003ff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	000007fe 	.word	0x000007fe
 8001358:	000003f3 	.word	0x000003f3
 800135c:	fffffc0d 	.word	0xfffffc0d
 8001360:	fffff801 	.word	0xfffff801
 8001364:	464a      	mov	r2, r9
 8001366:	2301      	movs	r3, #1
 8001368:	431a      	orrs	r2, r3
 800136a:	4691      	mov	r9, r2
 800136c:	2400      	movs	r4, #0
 800136e:	2001      	movs	r0, #1
 8001370:	e66e      	b.n	8001050 <__aeabi_ddiv+0x80>
 8001372:	2300      	movs	r3, #0
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	469a      	mov	sl, r3
 8001378:	2500      	movs	r5, #0
 800137a:	4b88      	ldr	r3, [pc, #544]	; (800159c <__aeabi_ddiv+0x5cc>)
 800137c:	0312      	lsls	r2, r2, #12
 800137e:	e67e      	b.n	800107e <__aeabi_ddiv+0xae>
 8001380:	2501      	movs	r5, #1
 8001382:	426d      	negs	r5, r5
 8001384:	2201      	movs	r2, #1
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	2a38      	cmp	r2, #56	; 0x38
 800138a:	dd00      	ble.n	800138e <__aeabi_ddiv+0x3be>
 800138c:	e674      	b.n	8001078 <__aeabi_ddiv+0xa8>
 800138e:	2a1f      	cmp	r2, #31
 8001390:	dc00      	bgt.n	8001394 <__aeabi_ddiv+0x3c4>
 8001392:	e0bd      	b.n	8001510 <__aeabi_ddiv+0x540>
 8001394:	211f      	movs	r1, #31
 8001396:	4249      	negs	r1, r1
 8001398:	1acb      	subs	r3, r1, r3
 800139a:	4641      	mov	r1, r8
 800139c:	40d9      	lsrs	r1, r3
 800139e:	000b      	movs	r3, r1
 80013a0:	2a20      	cmp	r2, #32
 80013a2:	d004      	beq.n	80013ae <__aeabi_ddiv+0x3de>
 80013a4:	4641      	mov	r1, r8
 80013a6:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <__aeabi_ddiv+0x5d0>)
 80013a8:	445a      	add	r2, fp
 80013aa:	4091      	lsls	r1, r2
 80013ac:	430d      	orrs	r5, r1
 80013ae:	0029      	movs	r1, r5
 80013b0:	1e4a      	subs	r2, r1, #1
 80013b2:	4191      	sbcs	r1, r2
 80013b4:	4319      	orrs	r1, r3
 80013b6:	2307      	movs	r3, #7
 80013b8:	001d      	movs	r5, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	400d      	ands	r5, r1
 80013be:	420b      	tst	r3, r1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_ddiv+0x3f4>
 80013c2:	e0d0      	b.n	8001566 <__aeabi_ddiv+0x596>
 80013c4:	220f      	movs	r2, #15
 80013c6:	2300      	movs	r3, #0
 80013c8:	400a      	ands	r2, r1
 80013ca:	2a04      	cmp	r2, #4
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x400>
 80013ce:	e0c7      	b.n	8001560 <__aeabi_ddiv+0x590>
 80013d0:	1d0a      	adds	r2, r1, #4
 80013d2:	428a      	cmp	r2, r1
 80013d4:	4189      	sbcs	r1, r1
 80013d6:	4249      	negs	r1, r1
 80013d8:	185b      	adds	r3, r3, r1
 80013da:	0011      	movs	r1, r2
 80013dc:	021a      	lsls	r2, r3, #8
 80013de:	d400      	bmi.n	80013e2 <__aeabi_ddiv+0x412>
 80013e0:	e0be      	b.n	8001560 <__aeabi_ddiv+0x590>
 80013e2:	2301      	movs	r3, #1
 80013e4:	2200      	movs	r2, #0
 80013e6:	2500      	movs	r5, #0
 80013e8:	e649      	b.n	800107e <__aeabi_ddiv+0xae>
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	4643      	mov	r3, r8
 80013ee:	0312      	lsls	r2, r2, #12
 80013f0:	4213      	tst	r3, r2
 80013f2:	d008      	beq.n	8001406 <__aeabi_ddiv+0x436>
 80013f4:	4214      	tst	r4, r2
 80013f6:	d106      	bne.n	8001406 <__aeabi_ddiv+0x436>
 80013f8:	4322      	orrs	r2, r4
 80013fa:	0312      	lsls	r2, r2, #12
 80013fc:	46ba      	mov	sl, r7
 80013fe:	000d      	movs	r5, r1
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <__aeabi_ddiv+0x5cc>)
 8001402:	0b12      	lsrs	r2, r2, #12
 8001404:	e63b      	b.n	800107e <__aeabi_ddiv+0xae>
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	4643      	mov	r3, r8
 800140a:	0312      	lsls	r2, r2, #12
 800140c:	431a      	orrs	r2, r3
 800140e:	0312      	lsls	r2, r2, #12
 8001410:	46b2      	mov	sl, r6
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <__aeabi_ddiv+0x5cc>)
 8001414:	0b12      	lsrs	r2, r2, #12
 8001416:	e632      	b.n	800107e <__aeabi_ddiv+0xae>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d100      	bne.n	800141e <__aeabi_ddiv+0x44e>
 800141c:	e702      	b.n	8001224 <__aeabi_ddiv+0x254>
 800141e:	19a6      	adds	r6, r4, r6
 8001420:	1e6a      	subs	r2, r5, #1
 8001422:	42a6      	cmp	r6, r4
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x458>
 8001426:	e089      	b.n	800153c <__aeabi_ddiv+0x56c>
 8001428:	4286      	cmp	r6, r0
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x45e>
 800142c:	e09f      	b.n	800156e <__aeabi_ddiv+0x59e>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x462>
 8001430:	e0af      	b.n	8001592 <__aeabi_ddiv+0x5c2>
 8001432:	0015      	movs	r5, r2
 8001434:	e6f4      	b.n	8001220 <__aeabi_ddiv+0x250>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d900      	bls.n	800143c <__aeabi_ddiv+0x46c>
 800143a:	e63c      	b.n	80010b6 <__aeabi_ddiv+0xe6>
 800143c:	4643      	mov	r3, r8
 800143e:	07de      	lsls	r6, r3, #31
 8001440:	0858      	lsrs	r0, r3, #1
 8001442:	086b      	lsrs	r3, r5, #1
 8001444:	431e      	orrs	r6, r3
 8001446:	07ed      	lsls	r5, r5, #31
 8001448:	e63c      	b.n	80010c4 <__aeabi_ddiv+0xf4>
 800144a:	f000 fca9 	bl	8001da0 <__clzsi2>
 800144e:	0001      	movs	r1, r0
 8001450:	0002      	movs	r2, r0
 8001452:	3115      	adds	r1, #21
 8001454:	3220      	adds	r2, #32
 8001456:	291c      	cmp	r1, #28
 8001458:	dc00      	bgt.n	800145c <__aeabi_ddiv+0x48c>
 800145a:	e72c      	b.n	80012b6 <__aeabi_ddiv+0x2e6>
 800145c:	464b      	mov	r3, r9
 800145e:	3808      	subs	r0, #8
 8001460:	4083      	lsls	r3, r0
 8001462:	2500      	movs	r5, #0
 8001464:	4698      	mov	r8, r3
 8001466:	e732      	b.n	80012ce <__aeabi_ddiv+0x2fe>
 8001468:	f000 fc9a 	bl	8001da0 <__clzsi2>
 800146c:	0003      	movs	r3, r0
 800146e:	001a      	movs	r2, r3
 8001470:	3215      	adds	r2, #21
 8001472:	3020      	adds	r0, #32
 8001474:	2a1c      	cmp	r2, #28
 8001476:	dc00      	bgt.n	800147a <__aeabi_ddiv+0x4aa>
 8001478:	e6ff      	b.n	800127a <__aeabi_ddiv+0x2aa>
 800147a:	4654      	mov	r4, sl
 800147c:	3b08      	subs	r3, #8
 800147e:	2100      	movs	r1, #0
 8001480:	409c      	lsls	r4, r3
 8001482:	e705      	b.n	8001290 <__aeabi_ddiv+0x2c0>
 8001484:	1936      	adds	r6, r6, r4
 8001486:	3b01      	subs	r3, #1
 8001488:	42b4      	cmp	r4, r6
 800148a:	d900      	bls.n	800148e <__aeabi_ddiv+0x4be>
 800148c:	e6a6      	b.n	80011dc <__aeabi_ddiv+0x20c>
 800148e:	42b2      	cmp	r2, r6
 8001490:	d800      	bhi.n	8001494 <__aeabi_ddiv+0x4c4>
 8001492:	e6a3      	b.n	80011dc <__aeabi_ddiv+0x20c>
 8001494:	1e83      	subs	r3, r0, #2
 8001496:	1936      	adds	r6, r6, r4
 8001498:	e6a0      	b.n	80011dc <__aeabi_ddiv+0x20c>
 800149a:	1909      	adds	r1, r1, r4
 800149c:	3d01      	subs	r5, #1
 800149e:	428c      	cmp	r4, r1
 80014a0:	d900      	bls.n	80014a4 <__aeabi_ddiv+0x4d4>
 80014a2:	e68d      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014a4:	428a      	cmp	r2, r1
 80014a6:	d800      	bhi.n	80014aa <__aeabi_ddiv+0x4da>
 80014a8:	e68a      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014aa:	1e85      	subs	r5, r0, #2
 80014ac:	1909      	adds	r1, r1, r4
 80014ae:	e687      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014b0:	220f      	movs	r2, #15
 80014b2:	402a      	ands	r2, r5
 80014b4:	2a04      	cmp	r2, #4
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0x4ea>
 80014b8:	e6bc      	b.n	8001234 <__aeabi_ddiv+0x264>
 80014ba:	1d29      	adds	r1, r5, #4
 80014bc:	42a9      	cmp	r1, r5
 80014be:	41ad      	sbcs	r5, r5
 80014c0:	426d      	negs	r5, r5
 80014c2:	08c9      	lsrs	r1, r1, #3
 80014c4:	44a8      	add	r8, r5
 80014c6:	e6b6      	b.n	8001236 <__aeabi_ddiv+0x266>
 80014c8:	42af      	cmp	r7, r5
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x4fe>
 80014cc:	e662      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014ce:	4281      	cmp	r1, r0
 80014d0:	d804      	bhi.n	80014dc <__aeabi_ddiv+0x50c>
 80014d2:	d000      	beq.n	80014d6 <__aeabi_ddiv+0x506>
 80014d4:	e65e      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014d6:	42ae      	cmp	r6, r5
 80014d8:	d800      	bhi.n	80014dc <__aeabi_ddiv+0x50c>
 80014da:	e65b      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014dc:	2302      	movs	r3, #2
 80014de:	425b      	negs	r3, r3
 80014e0:	469c      	mov	ip, r3
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	44e0      	add	r8, ip
 80014e6:	469c      	mov	ip, r3
 80014e8:	4465      	add	r5, ip
 80014ea:	429d      	cmp	r5, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	425b      	negs	r3, r3
 80014f0:	191b      	adds	r3, r3, r4
 80014f2:	18c0      	adds	r0, r0, r3
 80014f4:	e64f      	b.n	8001196 <__aeabi_ddiv+0x1c6>
 80014f6:	42b2      	cmp	r2, r6
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x52c>
 80014fa:	e612      	b.n	8001122 <__aeabi_ddiv+0x152>
 80014fc:	1e83      	subs	r3, r0, #2
 80014fe:	1936      	adds	r6, r6, r4
 8001500:	e60f      	b.n	8001122 <__aeabi_ddiv+0x152>
 8001502:	428a      	cmp	r2, r1
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x538>
 8001506:	e5fa      	b.n	80010fe <__aeabi_ddiv+0x12e>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	4698      	mov	r8, r3
 800150c:	1909      	adds	r1, r1, r4
 800150e:	e5f6      	b.n	80010fe <__aeabi_ddiv+0x12e>
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <__aeabi_ddiv+0x5d4>)
 8001512:	0028      	movs	r0, r5
 8001514:	445b      	add	r3, fp
 8001516:	4641      	mov	r1, r8
 8001518:	409d      	lsls	r5, r3
 800151a:	4099      	lsls	r1, r3
 800151c:	40d0      	lsrs	r0, r2
 800151e:	1e6b      	subs	r3, r5, #1
 8001520:	419d      	sbcs	r5, r3
 8001522:	4643      	mov	r3, r8
 8001524:	4301      	orrs	r1, r0
 8001526:	4329      	orrs	r1, r5
 8001528:	40d3      	lsrs	r3, r2
 800152a:	074a      	lsls	r2, r1, #29
 800152c:	d100      	bne.n	8001530 <__aeabi_ddiv+0x560>
 800152e:	e755      	b.n	80013dc <__aeabi_ddiv+0x40c>
 8001530:	220f      	movs	r2, #15
 8001532:	400a      	ands	r2, r1
 8001534:	2a04      	cmp	r2, #4
 8001536:	d000      	beq.n	800153a <__aeabi_ddiv+0x56a>
 8001538:	e74a      	b.n	80013d0 <__aeabi_ddiv+0x400>
 800153a:	e74f      	b.n	80013dc <__aeabi_ddiv+0x40c>
 800153c:	0015      	movs	r5, r2
 800153e:	4286      	cmp	r6, r0
 8001540:	d000      	beq.n	8001544 <__aeabi_ddiv+0x574>
 8001542:	e66d      	b.n	8001220 <__aeabi_ddiv+0x250>
 8001544:	9a00      	ldr	r2, [sp, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d000      	beq.n	800154c <__aeabi_ddiv+0x57c>
 800154a:	e669      	b.n	8001220 <__aeabi_ddiv+0x250>
 800154c:	e66a      	b.n	8001224 <__aeabi_ddiv+0x254>
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <__aeabi_ddiv+0x5d8>)
 8001550:	445b      	add	r3, fp
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc00      	bgt.n	8001558 <__aeabi_ddiv+0x588>
 8001556:	e713      	b.n	8001380 <__aeabi_ddiv+0x3b0>
 8001558:	2501      	movs	r5, #1
 800155a:	2100      	movs	r1, #0
 800155c:	44a8      	add	r8, r5
 800155e:	e66a      	b.n	8001236 <__aeabi_ddiv+0x266>
 8001560:	075d      	lsls	r5, r3, #29
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	0b1a      	lsrs	r2, r3, #12
 8001566:	08c9      	lsrs	r1, r1, #3
 8001568:	2300      	movs	r3, #0
 800156a:	430d      	orrs	r5, r1
 800156c:	e587      	b.n	800107e <__aeabi_ddiv+0xae>
 800156e:	9900      	ldr	r1, [sp, #0]
 8001570:	3d02      	subs	r5, #2
 8001572:	004a      	lsls	r2, r1, #1
 8001574:	428a      	cmp	r2, r1
 8001576:	41bf      	sbcs	r7, r7
 8001578:	427f      	negs	r7, r7
 800157a:	193f      	adds	r7, r7, r4
 800157c:	19f6      	adds	r6, r6, r7
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	e7dd      	b.n	800153e <__aeabi_ddiv+0x56e>
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	4643      	mov	r3, r8
 8001586:	0312      	lsls	r2, r2, #12
 8001588:	431a      	orrs	r2, r3
 800158a:	0312      	lsls	r2, r2, #12
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <__aeabi_ddiv+0x5cc>)
 800158e:	0b12      	lsrs	r2, r2, #12
 8001590:	e575      	b.n	800107e <__aeabi_ddiv+0xae>
 8001592:	9900      	ldr	r1, [sp, #0]
 8001594:	4299      	cmp	r1, r3
 8001596:	d3ea      	bcc.n	800156e <__aeabi_ddiv+0x59e>
 8001598:	0015      	movs	r5, r2
 800159a:	e7d3      	b.n	8001544 <__aeabi_ddiv+0x574>
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	0000043e 	.word	0x0000043e
 80015a4:	0000041e 	.word	0x0000041e
 80015a8:	000003ff 	.word	0x000003ff

080015ac <__aeabi_dmul>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	4645      	mov	r5, r8
 80015b0:	46de      	mov	lr, fp
 80015b2:	4657      	mov	r7, sl
 80015b4:	464e      	mov	r6, r9
 80015b6:	b5e0      	push	{r5, r6, r7, lr}
 80015b8:	001f      	movs	r7, r3
 80015ba:	030b      	lsls	r3, r1, #12
 80015bc:	0b1b      	lsrs	r3, r3, #12
 80015be:	469b      	mov	fp, r3
 80015c0:	004d      	lsls	r5, r1, #1
 80015c2:	0fcb      	lsrs	r3, r1, #31
 80015c4:	0004      	movs	r4, r0
 80015c6:	4691      	mov	r9, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	b087      	sub	sp, #28
 80015cc:	0d6d      	lsrs	r5, r5, #21
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x26>
 80015d0:	e1cd      	b.n	800196e <__aeabi_dmul+0x3c2>
 80015d2:	4bce      	ldr	r3, [pc, #824]	; (800190c <__aeabi_dmul+0x360>)
 80015d4:	429d      	cmp	r5, r3
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x2e>
 80015d8:	e1e9      	b.n	80019ae <__aeabi_dmul+0x402>
 80015da:	465a      	mov	r2, fp
 80015dc:	0f43      	lsrs	r3, r0, #29
 80015de:	00d2      	lsls	r2, r2, #3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	00c3      	lsls	r3, r0, #3
 80015ea:	469a      	mov	sl, r3
 80015ec:	4bc8      	ldr	r3, [pc, #800]	; (8001910 <__aeabi_dmul+0x364>)
 80015ee:	4693      	mov	fp, r2
 80015f0:	469c      	mov	ip, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	2600      	movs	r6, #0
 80015f6:	4465      	add	r5, ip
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	033c      	lsls	r4, r7, #12
 80015fc:	007b      	lsls	r3, r7, #1
 80015fe:	4648      	mov	r0, r9
 8001600:	0b24      	lsrs	r4, r4, #12
 8001602:	0d5b      	lsrs	r3, r3, #21
 8001604:	0fff      	lsrs	r7, r7, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x60>
 800160a:	e189      	b.n	8001920 <__aeabi_dmul+0x374>
 800160c:	4abf      	ldr	r2, [pc, #764]	; (800190c <__aeabi_dmul+0x360>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <__aeabi_dmul+0x9a>
 8001612:	0f42      	lsrs	r2, r0, #29
 8001614:	00e4      	lsls	r4, r4, #3
 8001616:	4322      	orrs	r2, r4
 8001618:	2480      	movs	r4, #128	; 0x80
 800161a:	0424      	lsls	r4, r4, #16
 800161c:	4314      	orrs	r4, r2
 800161e:	4abc      	ldr	r2, [pc, #752]	; (8001910 <__aeabi_dmul+0x364>)
 8001620:	2100      	movs	r1, #0
 8001622:	4694      	mov	ip, r2
 8001624:	4642      	mov	r2, r8
 8001626:	4463      	add	r3, ip
 8001628:	195b      	adds	r3, r3, r5
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
 800162e:	407a      	eors	r2, r7
 8001630:	3301      	adds	r3, #1
 8001632:	00c0      	lsls	r0, r0, #3
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2e0a      	cmp	r6, #10
 800163a:	dd1c      	ble.n	8001676 <__aeabi_dmul+0xca>
 800163c:	003a      	movs	r2, r7
 800163e:	2e0b      	cmp	r6, #11
 8001640:	d05e      	beq.n	8001700 <__aeabi_dmul+0x154>
 8001642:	4647      	mov	r7, r8
 8001644:	e056      	b.n	80016f4 <__aeabi_dmul+0x148>
 8001646:	4649      	mov	r1, r9
 8001648:	4bb0      	ldr	r3, [pc, #704]	; (800190c <__aeabi_dmul+0x360>)
 800164a:	4321      	orrs	r1, r4
 800164c:	18eb      	adds	r3, r5, r3
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2900      	cmp	r1, #0
 8001652:	d12a      	bne.n	80016aa <__aeabi_dmul+0xfe>
 8001654:	2080      	movs	r0, #128	; 0x80
 8001656:	2202      	movs	r2, #2
 8001658:	0100      	lsls	r0, r0, #4
 800165a:	002b      	movs	r3, r5
 800165c:	4684      	mov	ip, r0
 800165e:	4316      	orrs	r6, r2
 8001660:	4642      	mov	r2, r8
 8001662:	4463      	add	r3, ip
 8001664:	407a      	eors	r2, r7
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2e0a      	cmp	r6, #10
 800166c:	dd00      	ble.n	8001670 <__aeabi_dmul+0xc4>
 800166e:	e231      	b.n	8001ad4 <__aeabi_dmul+0x528>
 8001670:	2000      	movs	r0, #0
 8001672:	2400      	movs	r4, #0
 8001674:	2102      	movs	r1, #2
 8001676:	2e02      	cmp	r6, #2
 8001678:	dc26      	bgt.n	80016c8 <__aeabi_dmul+0x11c>
 800167a:	3e01      	subs	r6, #1
 800167c:	2e01      	cmp	r6, #1
 800167e:	d852      	bhi.n	8001726 <__aeabi_dmul+0x17a>
 8001680:	2902      	cmp	r1, #2
 8001682:	d04c      	beq.n	800171e <__aeabi_dmul+0x172>
 8001684:	2901      	cmp	r1, #1
 8001686:	d000      	beq.n	800168a <__aeabi_dmul+0xde>
 8001688:	e118      	b.n	80018bc <__aeabi_dmul+0x310>
 800168a:	2300      	movs	r3, #0
 800168c:	2400      	movs	r4, #0
 800168e:	2500      	movs	r5, #0
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	4323      	orrs	r3, r4
 8001694:	07d2      	lsls	r2, r2, #31
 8001696:	4313      	orrs	r3, r2
 8001698:	0028      	movs	r0, r5
 800169a:	0019      	movs	r1, r3
 800169c:	b007      	add	sp, #28
 800169e:	bcf0      	pop	{r4, r5, r6, r7}
 80016a0:	46bb      	mov	fp, r7
 80016a2:	46b2      	mov	sl, r6
 80016a4:	46a9      	mov	r9, r5
 80016a6:	46a0      	mov	r8, r4
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	2203      	movs	r2, #3
 80016ae:	0109      	lsls	r1, r1, #4
 80016b0:	002b      	movs	r3, r5
 80016b2:	468c      	mov	ip, r1
 80016b4:	4316      	orrs	r6, r2
 80016b6:	4642      	mov	r2, r8
 80016b8:	4463      	add	r3, ip
 80016ba:	407a      	eors	r2, r7
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2e0a      	cmp	r6, #10
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_dmul+0x11a>
 80016c4:	e228      	b.n	8001b18 <__aeabi_dmul+0x56c>
 80016c6:	2103      	movs	r1, #3
 80016c8:	2501      	movs	r5, #1
 80016ca:	40b5      	lsls	r5, r6
 80016cc:	46ac      	mov	ip, r5
 80016ce:	26a6      	movs	r6, #166	; 0xa6
 80016d0:	4663      	mov	r3, ip
 80016d2:	00f6      	lsls	r6, r6, #3
 80016d4:	4035      	ands	r5, r6
 80016d6:	4233      	tst	r3, r6
 80016d8:	d10b      	bne.n	80016f2 <__aeabi_dmul+0x146>
 80016da:	2690      	movs	r6, #144	; 0x90
 80016dc:	00b6      	lsls	r6, r6, #2
 80016de:	4233      	tst	r3, r6
 80016e0:	d118      	bne.n	8001714 <__aeabi_dmul+0x168>
 80016e2:	3eb9      	subs	r6, #185	; 0xb9
 80016e4:	3eff      	subs	r6, #255	; 0xff
 80016e6:	421e      	tst	r6, r3
 80016e8:	d01d      	beq.n	8001726 <__aeabi_dmul+0x17a>
 80016ea:	46a3      	mov	fp, r4
 80016ec:	4682      	mov	sl, r0
 80016ee:	9100      	str	r1, [sp, #0]
 80016f0:	e000      	b.n	80016f4 <__aeabi_dmul+0x148>
 80016f2:	0017      	movs	r7, r2
 80016f4:	9900      	ldr	r1, [sp, #0]
 80016f6:	003a      	movs	r2, r7
 80016f8:	2902      	cmp	r1, #2
 80016fa:	d010      	beq.n	800171e <__aeabi_dmul+0x172>
 80016fc:	465c      	mov	r4, fp
 80016fe:	4650      	mov	r0, sl
 8001700:	2903      	cmp	r1, #3
 8001702:	d1bf      	bne.n	8001684 <__aeabi_dmul+0xd8>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	031b      	lsls	r3, r3, #12
 8001708:	431c      	orrs	r4, r3
 800170a:	0324      	lsls	r4, r4, #12
 800170c:	0005      	movs	r5, r0
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <__aeabi_dmul+0x360>)
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	e7bd      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001714:	2480      	movs	r4, #128	; 0x80
 8001716:	2200      	movs	r2, #0
 8001718:	4b7c      	ldr	r3, [pc, #496]	; (800190c <__aeabi_dmul+0x360>)
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	e7b8      	b.n	8001690 <__aeabi_dmul+0xe4>
 800171e:	2400      	movs	r4, #0
 8001720:	2500      	movs	r5, #0
 8001722:	4b7a      	ldr	r3, [pc, #488]	; (800190c <__aeabi_dmul+0x360>)
 8001724:	e7b4      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001726:	4653      	mov	r3, sl
 8001728:	041e      	lsls	r6, r3, #16
 800172a:	0c36      	lsrs	r6, r6, #16
 800172c:	0c1f      	lsrs	r7, r3, #16
 800172e:	0033      	movs	r3, r6
 8001730:	0c01      	lsrs	r1, r0, #16
 8001732:	0400      	lsls	r0, r0, #16
 8001734:	0c00      	lsrs	r0, r0, #16
 8001736:	4343      	muls	r3, r0
 8001738:	4698      	mov	r8, r3
 800173a:	0003      	movs	r3, r0
 800173c:	437b      	muls	r3, r7
 800173e:	4699      	mov	r9, r3
 8001740:	0033      	movs	r3, r6
 8001742:	434b      	muls	r3, r1
 8001744:	469c      	mov	ip, r3
 8001746:	4643      	mov	r3, r8
 8001748:	000d      	movs	r5, r1
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	469a      	mov	sl, r3
 800174e:	437d      	muls	r5, r7
 8001750:	44cc      	add	ip, r9
 8001752:	44d4      	add	ip, sl
 8001754:	9500      	str	r5, [sp, #0]
 8001756:	45e1      	cmp	r9, ip
 8001758:	d904      	bls.n	8001764 <__aeabi_dmul+0x1b8>
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	4699      	mov	r9, r3
 8001760:	444d      	add	r5, r9
 8001762:	9500      	str	r5, [sp, #0]
 8001764:	4663      	mov	r3, ip
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	001d      	movs	r5, r3
 800176a:	4663      	mov	r3, ip
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	469c      	mov	ip, r3
 8001770:	4643      	mov	r3, r8
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	4698      	mov	r8, r3
 8001778:	4663      	mov	r3, ip
 800177a:	4443      	add	r3, r8
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	0c23      	lsrs	r3, r4, #16
 8001780:	4698      	mov	r8, r3
 8001782:	0033      	movs	r3, r6
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	4363      	muls	r3, r4
 800178a:	469c      	mov	ip, r3
 800178c:	0023      	movs	r3, r4
 800178e:	437b      	muls	r3, r7
 8001790:	4699      	mov	r9, r3
 8001792:	4643      	mov	r3, r8
 8001794:	435e      	muls	r6, r3
 8001796:	435f      	muls	r7, r3
 8001798:	444e      	add	r6, r9
 800179a:	4663      	mov	r3, ip
 800179c:	46b2      	mov	sl, r6
 800179e:	0c1e      	lsrs	r6, r3, #16
 80017a0:	4456      	add	r6, sl
 80017a2:	45b1      	cmp	r9, r6
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x202>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4699      	mov	r9, r3
 80017ac:	444f      	add	r7, r9
 80017ae:	0c33      	lsrs	r3, r6, #16
 80017b0:	4699      	mov	r9, r3
 80017b2:	003b      	movs	r3, r7
 80017b4:	444b      	add	r3, r9
 80017b6:	9305      	str	r3, [sp, #20]
 80017b8:	4663      	mov	r3, ip
 80017ba:	46ac      	mov	ip, r5
 80017bc:	041f      	lsls	r7, r3, #16
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0436      	lsls	r6, r6, #16
 80017c2:	19f6      	adds	r6, r6, r7
 80017c4:	44b4      	add	ip, r6
 80017c6:	4663      	mov	r3, ip
 80017c8:	9304      	str	r3, [sp, #16]
 80017ca:	465b      	mov	r3, fp
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	469c      	mov	ip, r3
 80017d0:	465b      	mov	r3, fp
 80017d2:	041f      	lsls	r7, r3, #16
 80017d4:	0c3f      	lsrs	r7, r7, #16
 80017d6:	003b      	movs	r3, r7
 80017d8:	4343      	muls	r3, r0
 80017da:	4699      	mov	r9, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4343      	muls	r3, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	464b      	mov	r3, r9
 80017e4:	4660      	mov	r0, ip
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	469b      	mov	fp, r3
 80017ea:	4348      	muls	r0, r1
 80017ec:	4379      	muls	r1, r7
 80017ee:	4451      	add	r1, sl
 80017f0:	4459      	add	r1, fp
 80017f2:	458a      	cmp	sl, r1
 80017f4:	d903      	bls.n	80017fe <__aeabi_dmul+0x252>
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	469a      	mov	sl, r3
 80017fc:	4450      	add	r0, sl
 80017fe:	0c0b      	lsrs	r3, r1, #16
 8001800:	469a      	mov	sl, r3
 8001802:	464b      	mov	r3, r9
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	4699      	mov	r9, r3
 800180a:	003b      	movs	r3, r7
 800180c:	4363      	muls	r3, r4
 800180e:	0409      	lsls	r1, r1, #16
 8001810:	4645      	mov	r5, r8
 8001812:	4449      	add	r1, r9
 8001814:	4699      	mov	r9, r3
 8001816:	4663      	mov	r3, ip
 8001818:	435c      	muls	r4, r3
 800181a:	436b      	muls	r3, r5
 800181c:	469c      	mov	ip, r3
 800181e:	464b      	mov	r3, r9
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	4698      	mov	r8, r3
 8001824:	436f      	muls	r7, r5
 8001826:	193f      	adds	r7, r7, r4
 8001828:	4447      	add	r7, r8
 800182a:	4450      	add	r0, sl
 800182c:	42bc      	cmp	r4, r7
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x28c>
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4698      	mov	r8, r3
 8001836:	44c4      	add	ip, r8
 8001838:	9b04      	ldr	r3, [sp, #16]
 800183a:	9d00      	ldr	r5, [sp, #0]
 800183c:	4698      	mov	r8, r3
 800183e:	4445      	add	r5, r8
 8001840:	42b5      	cmp	r5, r6
 8001842:	41b6      	sbcs	r6, r6
 8001844:	4273      	negs	r3, r6
 8001846:	4698      	mov	r8, r3
 8001848:	464b      	mov	r3, r9
 800184a:	041e      	lsls	r6, r3, #16
 800184c:	9b05      	ldr	r3, [sp, #20]
 800184e:	043c      	lsls	r4, r7, #16
 8001850:	4699      	mov	r9, r3
 8001852:	0c36      	lsrs	r6, r6, #16
 8001854:	19a4      	adds	r4, r4, r6
 8001856:	444c      	add	r4, r9
 8001858:	46a1      	mov	r9, r4
 800185a:	4683      	mov	fp, r0
 800185c:	186e      	adds	r6, r5, r1
 800185e:	44c1      	add	r9, r8
 8001860:	428e      	cmp	r6, r1
 8001862:	4189      	sbcs	r1, r1
 8001864:	44cb      	add	fp, r9
 8001866:	465d      	mov	r5, fp
 8001868:	4249      	negs	r1, r1
 800186a:	186d      	adds	r5, r5, r1
 800186c:	429c      	cmp	r4, r3
 800186e:	41a4      	sbcs	r4, r4
 8001870:	45c1      	cmp	r9, r8
 8001872:	419b      	sbcs	r3, r3
 8001874:	4583      	cmp	fp, r0
 8001876:	4180      	sbcs	r0, r0
 8001878:	428d      	cmp	r5, r1
 800187a:	4189      	sbcs	r1, r1
 800187c:	425b      	negs	r3, r3
 800187e:	4264      	negs	r4, r4
 8001880:	431c      	orrs	r4, r3
 8001882:	4240      	negs	r0, r0
 8001884:	9b03      	ldr	r3, [sp, #12]
 8001886:	4249      	negs	r1, r1
 8001888:	4301      	orrs	r1, r0
 800188a:	0270      	lsls	r0, r6, #9
 800188c:	0c3f      	lsrs	r7, r7, #16
 800188e:	4318      	orrs	r0, r3
 8001890:	19e4      	adds	r4, r4, r7
 8001892:	1e47      	subs	r7, r0, #1
 8001894:	41b8      	sbcs	r0, r7
 8001896:	1864      	adds	r4, r4, r1
 8001898:	4464      	add	r4, ip
 800189a:	0df6      	lsrs	r6, r6, #23
 800189c:	0261      	lsls	r1, r4, #9
 800189e:	4330      	orrs	r0, r6
 80018a0:	0dec      	lsrs	r4, r5, #23
 80018a2:	026e      	lsls	r6, r5, #9
 80018a4:	430c      	orrs	r4, r1
 80018a6:	4330      	orrs	r0, r6
 80018a8:	01c9      	lsls	r1, r1, #7
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dmul+0x302>
 80018ac:	e0f1      	b.n	8001a92 <__aeabi_dmul+0x4e6>
 80018ae:	2101      	movs	r1, #1
 80018b0:	0843      	lsrs	r3, r0, #1
 80018b2:	4001      	ands	r1, r0
 80018b4:	430b      	orrs	r3, r1
 80018b6:	07e0      	lsls	r0, r4, #31
 80018b8:	4318      	orrs	r0, r3
 80018ba:	0864      	lsrs	r4, r4, #1
 80018bc:	4915      	ldr	r1, [pc, #84]	; (8001914 <__aeabi_dmul+0x368>)
 80018be:	9b02      	ldr	r3, [sp, #8]
 80018c0:	468c      	mov	ip, r1
 80018c2:	4463      	add	r3, ip
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dc00      	bgt.n	80018ca <__aeabi_dmul+0x31e>
 80018c8:	e097      	b.n	80019fa <__aeabi_dmul+0x44e>
 80018ca:	0741      	lsls	r1, r0, #29
 80018cc:	d009      	beq.n	80018e2 <__aeabi_dmul+0x336>
 80018ce:	210f      	movs	r1, #15
 80018d0:	4001      	ands	r1, r0
 80018d2:	2904      	cmp	r1, #4
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dmul+0x336>
 80018d6:	1d01      	adds	r1, r0, #4
 80018d8:	4281      	cmp	r1, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	4240      	negs	r0, r0
 80018de:	1824      	adds	r4, r4, r0
 80018e0:	0008      	movs	r0, r1
 80018e2:	01e1      	lsls	r1, r4, #7
 80018e4:	d506      	bpl.n	80018f4 <__aeabi_dmul+0x348>
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	00c9      	lsls	r1, r1, #3
 80018ea:	468c      	mov	ip, r1
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <__aeabi_dmul+0x36c>)
 80018ee:	401c      	ands	r4, r3
 80018f0:	9b02      	ldr	r3, [sp, #8]
 80018f2:	4463      	add	r3, ip
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <__aeabi_dmul+0x370>)
 80018f6:	428b      	cmp	r3, r1
 80018f8:	dd00      	ble.n	80018fc <__aeabi_dmul+0x350>
 80018fa:	e710      	b.n	800171e <__aeabi_dmul+0x172>
 80018fc:	0761      	lsls	r1, r4, #29
 80018fe:	08c5      	lsrs	r5, r0, #3
 8001900:	0264      	lsls	r4, r4, #9
 8001902:	055b      	lsls	r3, r3, #21
 8001904:	430d      	orrs	r5, r1
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d5b      	lsrs	r3, r3, #21
 800190a:	e6c1      	b.n	8001690 <__aeabi_dmul+0xe4>
 800190c:	000007ff 	.word	0x000007ff
 8001910:	fffffc01 	.word	0xfffffc01
 8001914:	000003ff 	.word	0x000003ff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	000007fe 	.word	0x000007fe
 8001920:	464b      	mov	r3, r9
 8001922:	4323      	orrs	r3, r4
 8001924:	d059      	beq.n	80019da <__aeabi_dmul+0x42e>
 8001926:	2c00      	cmp	r4, #0
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0x380>
 800192a:	e0a3      	b.n	8001a74 <__aeabi_dmul+0x4c8>
 800192c:	0020      	movs	r0, r4
 800192e:	f000 fa37 	bl	8001da0 <__clzsi2>
 8001932:	0001      	movs	r1, r0
 8001934:	0003      	movs	r3, r0
 8001936:	390b      	subs	r1, #11
 8001938:	221d      	movs	r2, #29
 800193a:	1a52      	subs	r2, r2, r1
 800193c:	4649      	mov	r1, r9
 800193e:	0018      	movs	r0, r3
 8001940:	40d1      	lsrs	r1, r2
 8001942:	464a      	mov	r2, r9
 8001944:	3808      	subs	r0, #8
 8001946:	4082      	lsls	r2, r0
 8001948:	4084      	lsls	r4, r0
 800194a:	0010      	movs	r0, r2
 800194c:	430c      	orrs	r4, r1
 800194e:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <__aeabi_dmul+0x574>)
 8001950:	1aeb      	subs	r3, r5, r3
 8001952:	4694      	mov	ip, r2
 8001954:	4642      	mov	r2, r8
 8001956:	4463      	add	r3, ip
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	407a      	eors	r2, r7
 800195e:	3301      	adds	r3, #1
 8001960:	2100      	movs	r1, #0
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2e0a      	cmp	r6, #10
 8001968:	dd00      	ble.n	800196c <__aeabi_dmul+0x3c0>
 800196a:	e667      	b.n	800163c <__aeabi_dmul+0x90>
 800196c:	e683      	b.n	8001676 <__aeabi_dmul+0xca>
 800196e:	465b      	mov	r3, fp
 8001970:	4303      	orrs	r3, r0
 8001972:	469a      	mov	sl, r3
 8001974:	d02a      	beq.n	80019cc <__aeabi_dmul+0x420>
 8001976:	465b      	mov	r3, fp
 8001978:	2b00      	cmp	r3, #0
 800197a:	d06d      	beq.n	8001a58 <__aeabi_dmul+0x4ac>
 800197c:	4658      	mov	r0, fp
 800197e:	f000 fa0f 	bl	8001da0 <__clzsi2>
 8001982:	0001      	movs	r1, r0
 8001984:	0003      	movs	r3, r0
 8001986:	390b      	subs	r1, #11
 8001988:	221d      	movs	r2, #29
 800198a:	1a52      	subs	r2, r2, r1
 800198c:	0021      	movs	r1, r4
 800198e:	0018      	movs	r0, r3
 8001990:	465d      	mov	r5, fp
 8001992:	40d1      	lsrs	r1, r2
 8001994:	3808      	subs	r0, #8
 8001996:	4085      	lsls	r5, r0
 8001998:	000a      	movs	r2, r1
 800199a:	4084      	lsls	r4, r0
 800199c:	432a      	orrs	r2, r5
 800199e:	4693      	mov	fp, r2
 80019a0:	46a2      	mov	sl, r4
 80019a2:	4d5f      	ldr	r5, [pc, #380]	; (8001b20 <__aeabi_dmul+0x574>)
 80019a4:	2600      	movs	r6, #0
 80019a6:	1aed      	subs	r5, r5, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	e625      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019ae:	465b      	mov	r3, fp
 80019b0:	4303      	orrs	r3, r0
 80019b2:	469a      	mov	sl, r3
 80019b4:	d105      	bne.n	80019c2 <__aeabi_dmul+0x416>
 80019b6:	2300      	movs	r3, #0
 80019b8:	469b      	mov	fp, r3
 80019ba:	3302      	adds	r3, #2
 80019bc:	2608      	movs	r6, #8
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	e61b      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019c2:	2303      	movs	r3, #3
 80019c4:	4682      	mov	sl, r0
 80019c6:	260c      	movs	r6, #12
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	e616      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019cc:	2300      	movs	r3, #0
 80019ce:	469b      	mov	fp, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	2604      	movs	r6, #4
 80019d4:	2500      	movs	r5, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	e60f      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019da:	4642      	mov	r2, r8
 80019dc:	3301      	adds	r3, #1
 80019de:	9501      	str	r5, [sp, #4]
 80019e0:	431e      	orrs	r6, r3
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	407a      	eors	r2, r7
 80019e6:	3301      	adds	r3, #1
 80019e8:	2400      	movs	r4, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2e0a      	cmp	r6, #10
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0x44c>
 80019f6:	e621      	b.n	800163c <__aeabi_dmul+0x90>
 80019f8:	e63d      	b.n	8001676 <__aeabi_dmul+0xca>
 80019fa:	2101      	movs	r1, #1
 80019fc:	1ac9      	subs	r1, r1, r3
 80019fe:	2938      	cmp	r1, #56	; 0x38
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dmul+0x458>
 8001a02:	e642      	b.n	800168a <__aeabi_dmul+0xde>
 8001a04:	291f      	cmp	r1, #31
 8001a06:	dd47      	ble.n	8001a98 <__aeabi_dmul+0x4ec>
 8001a08:	261f      	movs	r6, #31
 8001a0a:	0025      	movs	r5, r4
 8001a0c:	4276      	negs	r6, r6
 8001a0e:	1af3      	subs	r3, r6, r3
 8001a10:	40dd      	lsrs	r5, r3
 8001a12:	002b      	movs	r3, r5
 8001a14:	2920      	cmp	r1, #32
 8001a16:	d005      	beq.n	8001a24 <__aeabi_dmul+0x478>
 8001a18:	4942      	ldr	r1, [pc, #264]	; (8001b24 <__aeabi_dmul+0x578>)
 8001a1a:	9d02      	ldr	r5, [sp, #8]
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	4465      	add	r5, ip
 8001a20:	40ac      	lsls	r4, r5
 8001a22:	4320      	orrs	r0, r4
 8001a24:	1e41      	subs	r1, r0, #1
 8001a26:	4188      	sbcs	r0, r1
 8001a28:	4318      	orrs	r0, r3
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	001d      	movs	r5, r3
 8001a2e:	2400      	movs	r4, #0
 8001a30:	4005      	ands	r5, r0
 8001a32:	4203      	tst	r3, r0
 8001a34:	d04a      	beq.n	8001acc <__aeabi_dmul+0x520>
 8001a36:	230f      	movs	r3, #15
 8001a38:	2400      	movs	r4, #0
 8001a3a:	4003      	ands	r3, r0
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d042      	beq.n	8001ac6 <__aeabi_dmul+0x51a>
 8001a40:	1d03      	adds	r3, r0, #4
 8001a42:	4283      	cmp	r3, r0
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	4240      	negs	r0, r0
 8001a48:	1824      	adds	r4, r4, r0
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d53a      	bpl.n	8001ac6 <__aeabi_dmul+0x51a>
 8001a50:	2301      	movs	r3, #1
 8001a52:	2400      	movs	r4, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	e61b      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001a58:	f000 f9a2 	bl	8001da0 <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	0003      	movs	r3, r0
 8001a60:	3115      	adds	r1, #21
 8001a62:	3320      	adds	r3, #32
 8001a64:	291c      	cmp	r1, #28
 8001a66:	dd8f      	ble.n	8001988 <__aeabi_dmul+0x3dc>
 8001a68:	3808      	subs	r0, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4084      	lsls	r4, r0
 8001a6e:	4692      	mov	sl, r2
 8001a70:	46a3      	mov	fp, r4
 8001a72:	e796      	b.n	80019a2 <__aeabi_dmul+0x3f6>
 8001a74:	f000 f994 	bl	8001da0 <__clzsi2>
 8001a78:	0001      	movs	r1, r0
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	3115      	adds	r1, #21
 8001a7e:	3320      	adds	r3, #32
 8001a80:	291c      	cmp	r1, #28
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dmul+0x4da>
 8001a84:	e758      	b.n	8001938 <__aeabi_dmul+0x38c>
 8001a86:	0002      	movs	r2, r0
 8001a88:	464c      	mov	r4, r9
 8001a8a:	3a08      	subs	r2, #8
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	4094      	lsls	r4, r2
 8001a90:	e75d      	b.n	800194e <__aeabi_dmul+0x3a2>
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	e711      	b.n	80018bc <__aeabi_dmul+0x310>
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <__aeabi_dmul+0x57c>)
 8001a9a:	0026      	movs	r6, r4
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	9d02      	ldr	r5, [sp, #8]
 8001aa2:	40cb      	lsrs	r3, r1
 8001aa4:	4465      	add	r5, ip
 8001aa6:	40ae      	lsls	r6, r5
 8001aa8:	431e      	orrs	r6, r3
 8001aaa:	0003      	movs	r3, r0
 8001aac:	40ab      	lsls	r3, r5
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	4183      	sbcs	r3, r0
 8001ab2:	0030      	movs	r0, r6
 8001ab4:	4318      	orrs	r0, r3
 8001ab6:	40cc      	lsrs	r4, r1
 8001ab8:	0743      	lsls	r3, r0, #29
 8001aba:	d0c7      	beq.n	8001a4c <__aeabi_dmul+0x4a0>
 8001abc:	230f      	movs	r3, #15
 8001abe:	4003      	ands	r3, r0
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d1bd      	bne.n	8001a40 <__aeabi_dmul+0x494>
 8001ac4:	e7c2      	b.n	8001a4c <__aeabi_dmul+0x4a0>
 8001ac6:	0765      	lsls	r5, r4, #29
 8001ac8:	0264      	lsls	r4, r4, #9
 8001aca:	0b24      	lsrs	r4, r4, #12
 8001acc:	08c0      	lsrs	r0, r0, #3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4305      	orrs	r5, r0
 8001ad2:	e5dd      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	2e0f      	cmp	r6, #15
 8001ada:	d10c      	bne.n	8001af6 <__aeabi_dmul+0x54a>
 8001adc:	2480      	movs	r4, #128	; 0x80
 8001ade:	465b      	mov	r3, fp
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	4223      	tst	r3, r4
 8001ae4:	d00e      	beq.n	8001b04 <__aeabi_dmul+0x558>
 8001ae6:	4221      	tst	r1, r4
 8001ae8:	d10c      	bne.n	8001b04 <__aeabi_dmul+0x558>
 8001aea:	430c      	orrs	r4, r1
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	003a      	movs	r2, r7
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <__aeabi_dmul+0x580>)
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	e5cc      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001af6:	2e0b      	cmp	r6, #11
 8001af8:	d000      	beq.n	8001afc <__aeabi_dmul+0x550>
 8001afa:	e5a2      	b.n	8001642 <__aeabi_dmul+0x96>
 8001afc:	468b      	mov	fp, r1
 8001afe:	46aa      	mov	sl, r5
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	e5f7      	b.n	80016f4 <__aeabi_dmul+0x148>
 8001b04:	2480      	movs	r4, #128	; 0x80
 8001b06:	465b      	mov	r3, fp
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	431c      	orrs	r4, r3
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	4642      	mov	r2, r8
 8001b10:	4655      	mov	r5, sl
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <__aeabi_dmul+0x580>)
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	e5bb      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001b18:	464d      	mov	r5, r9
 8001b1a:	0021      	movs	r1, r4
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e7db      	b.n	8001ad8 <__aeabi_dmul+0x52c>
 8001b20:	fffffc0d 	.word	0xfffffc0d
 8001b24:	0000043e 	.word	0x0000043e
 8001b28:	0000041e 	.word	0x0000041e
 8001b2c:	000007ff 	.word	0x000007ff

08001b30 <__aeabi_i2d>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d016      	beq.n	8001b64 <__aeabi_i2d+0x34>
 8001b36:	17c3      	asrs	r3, r0, #31
 8001b38:	18c5      	adds	r5, r0, r3
 8001b3a:	405d      	eors	r5, r3
 8001b3c:	0fc4      	lsrs	r4, r0, #31
 8001b3e:	0028      	movs	r0, r5
 8001b40:	f000 f92e 	bl	8001da0 <__clzsi2>
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <__aeabi_i2d+0x5c>)
 8001b46:	1a1b      	subs	r3, r3, r0
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	dc16      	bgt.n	8001b7a <__aeabi_i2d+0x4a>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	002e      	movs	r6, r5
 8001b50:	3215      	adds	r2, #21
 8001b52:	4096      	lsls	r6, r2
 8001b54:	220b      	movs	r2, #11
 8001b56:	1a12      	subs	r2, r2, r0
 8001b58:	40d5      	lsrs	r5, r2
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	032d      	lsls	r5, r5, #12
 8001b5e:	0b2d      	lsrs	r5, r5, #12
 8001b60:	0d5b      	lsrs	r3, r3, #21
 8001b62:	e003      	b.n	8001b6c <__aeabi_i2d+0x3c>
 8001b64:	2400      	movs	r4, #0
 8001b66:	2300      	movs	r3, #0
 8001b68:	2500      	movs	r5, #0
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	051b      	lsls	r3, r3, #20
 8001b6e:	432b      	orrs	r3, r5
 8001b70:	07e4      	lsls	r4, r4, #31
 8001b72:	4323      	orrs	r3, r4
 8001b74:	0030      	movs	r0, r6
 8001b76:	0019      	movs	r1, r3
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	380b      	subs	r0, #11
 8001b7c:	4085      	lsls	r5, r0
 8001b7e:	055b      	lsls	r3, r3, #21
 8001b80:	032d      	lsls	r5, r5, #12
 8001b82:	2600      	movs	r6, #0
 8001b84:	0b2d      	lsrs	r5, r5, #12
 8001b86:	0d5b      	lsrs	r3, r3, #21
 8001b88:	e7f0      	b.n	8001b6c <__aeabi_i2d+0x3c>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	0000041e 	.word	0x0000041e

08001b90 <__aeabi_f2d>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	0242      	lsls	r2, r0, #9
 8001b94:	0043      	lsls	r3, r0, #1
 8001b96:	0fc4      	lsrs	r4, r0, #31
 8001b98:	20fe      	movs	r0, #254	; 0xfe
 8001b9a:	0e1b      	lsrs	r3, r3, #24
 8001b9c:	1c59      	adds	r1, r3, #1
 8001b9e:	0a55      	lsrs	r5, r2, #9
 8001ba0:	4208      	tst	r0, r1
 8001ba2:	d00c      	beq.n	8001bbe <__aeabi_f2d+0x2e>
 8001ba4:	21e0      	movs	r1, #224	; 0xe0
 8001ba6:	0089      	lsls	r1, r1, #2
 8001ba8:	468c      	mov	ip, r1
 8001baa:	076d      	lsls	r5, r5, #29
 8001bac:	0b12      	lsrs	r2, r2, #12
 8001bae:	4463      	add	r3, ip
 8001bb0:	051b      	lsls	r3, r3, #20
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	07e4      	lsls	r4, r4, #31
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	0028      	movs	r0, r5
 8001bba:	0019      	movs	r1, r3
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <__aeabi_f2d+0x5c>
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	d01b      	beq.n	8001bfe <__aeabi_f2d+0x6e>
 8001bc6:	0028      	movs	r0, r5
 8001bc8:	f000 f8ea 	bl	8001da0 <__clzsi2>
 8001bcc:	280a      	cmp	r0, #10
 8001bce:	dc1c      	bgt.n	8001c0a <__aeabi_f2d+0x7a>
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	002a      	movs	r2, r5
 8001bd4:	1a1b      	subs	r3, r3, r0
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	0003      	movs	r3, r0
 8001bda:	3315      	adds	r3, #21
 8001bdc:	409d      	lsls	r5, r3
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <__aeabi_f2d+0x88>)
 8001be0:	0312      	lsls	r2, r2, #12
 8001be2:	1a1b      	subs	r3, r3, r0
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	0b12      	lsrs	r2, r2, #12
 8001be8:	0d5b      	lsrs	r3, r3, #21
 8001bea:	e7e1      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	d009      	beq.n	8001c04 <__aeabi_f2d+0x74>
 8001bf0:	0b13      	lsrs	r3, r2, #12
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0312      	lsls	r2, r2, #12
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	076d      	lsls	r5, r5, #29
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <__aeabi_f2d+0x8c>)
 8001bfc:	e7d8      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2200      	movs	r2, #0
 8001c02:	e7d5      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <__aeabi_f2d+0x8c>)
 8001c08:	e7d2      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	3b0b      	subs	r3, #11
 8001c10:	409a      	lsls	r2, r3
 8001c12:	2500      	movs	r5, #0
 8001c14:	e7e3      	b.n	8001bde <__aeabi_f2d+0x4e>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	00000389 	.word	0x00000389
 8001c1c:	000007ff 	.word	0x000007ff

08001c20 <__aeabi_d2f>:
 8001c20:	0002      	movs	r2, r0
 8001c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c24:	004b      	lsls	r3, r1, #1
 8001c26:	030d      	lsls	r5, r1, #12
 8001c28:	0f40      	lsrs	r0, r0, #29
 8001c2a:	0d5b      	lsrs	r3, r3, #21
 8001c2c:	0fcc      	lsrs	r4, r1, #31
 8001c2e:	0a6d      	lsrs	r5, r5, #9
 8001c30:	493a      	ldr	r1, [pc, #232]	; (8001d1c <__aeabi_d2f+0xfc>)
 8001c32:	4305      	orrs	r5, r0
 8001c34:	1c58      	adds	r0, r3, #1
 8001c36:	00d7      	lsls	r7, r2, #3
 8001c38:	4208      	tst	r0, r1
 8001c3a:	d00a      	beq.n	8001c52 <__aeabi_d2f+0x32>
 8001c3c:	4938      	ldr	r1, [pc, #224]	; (8001d20 <__aeabi_d2f+0x100>)
 8001c3e:	1859      	adds	r1, r3, r1
 8001c40:	29fe      	cmp	r1, #254	; 0xfe
 8001c42:	dd16      	ble.n	8001c72 <__aeabi_d2f+0x52>
 8001c44:	20ff      	movs	r0, #255	; 0xff
 8001c46:	2200      	movs	r2, #0
 8001c48:	05c0      	lsls	r0, r0, #23
 8001c4a:	4310      	orrs	r0, r2
 8001c4c:	07e4      	lsls	r4, r4, #31
 8001c4e:	4320      	orrs	r0, r4
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <__aeabi_d2f+0x44>
 8001c56:	433d      	orrs	r5, r7
 8001c58:	d026      	beq.n	8001ca8 <__aeabi_d2f+0x88>
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	0192      	lsls	r2, r2, #6
 8001c5e:	0a52      	lsrs	r2, r2, #9
 8001c60:	b2d8      	uxtb	r0, r3
 8001c62:	e7f1      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001c64:	432f      	orrs	r7, r5
 8001c66:	d0ed      	beq.n	8001c44 <__aeabi_d2f+0x24>
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	03d2      	lsls	r2, r2, #15
 8001c6c:	20ff      	movs	r0, #255	; 0xff
 8001c6e:	432a      	orrs	r2, r5
 8001c70:	e7ea      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001c72:	2900      	cmp	r1, #0
 8001c74:	dd1b      	ble.n	8001cae <__aeabi_d2f+0x8e>
 8001c76:	0192      	lsls	r2, r2, #6
 8001c78:	1e50      	subs	r0, r2, #1
 8001c7a:	4182      	sbcs	r2, r0
 8001c7c:	00ed      	lsls	r5, r5, #3
 8001c7e:	0f7f      	lsrs	r7, r7, #29
 8001c80:	432a      	orrs	r2, r5
 8001c82:	433a      	orrs	r2, r7
 8001c84:	0753      	lsls	r3, r2, #29
 8001c86:	d047      	beq.n	8001d18 <__aeabi_d2f+0xf8>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_d2f+0x72>
 8001c90:	3204      	adds	r2, #4
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	04db      	lsls	r3, r3, #19
 8001c96:	4013      	ands	r3, r2
 8001c98:	d03e      	beq.n	8001d18 <__aeabi_d2f+0xf8>
 8001c9a:	1c48      	adds	r0, r1, #1
 8001c9c:	29fe      	cmp	r1, #254	; 0xfe
 8001c9e:	d0d1      	beq.n	8001c44 <__aeabi_d2f+0x24>
 8001ca0:	0192      	lsls	r2, r2, #6
 8001ca2:	0a52      	lsrs	r2, r2, #9
 8001ca4:	b2c0      	uxtb	r0, r0
 8001ca6:	e7cf      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	2200      	movs	r2, #0
 8001cac:	e7cc      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001cae:	000a      	movs	r2, r1
 8001cb0:	3217      	adds	r2, #23
 8001cb2:	db2f      	blt.n	8001d14 <__aeabi_d2f+0xf4>
 8001cb4:	2680      	movs	r6, #128	; 0x80
 8001cb6:	0436      	lsls	r6, r6, #16
 8001cb8:	432e      	orrs	r6, r5
 8001cba:	251e      	movs	r5, #30
 8001cbc:	1a6d      	subs	r5, r5, r1
 8001cbe:	2d1f      	cmp	r5, #31
 8001cc0:	dd11      	ble.n	8001ce6 <__aeabi_d2f+0xc6>
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	1a52      	subs	r2, r2, r1
 8001cc8:	0031      	movs	r1, r6
 8001cca:	40d1      	lsrs	r1, r2
 8001ccc:	2d20      	cmp	r5, #32
 8001cce:	d004      	beq.n	8001cda <__aeabi_d2f+0xba>
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <__aeabi_d2f+0x104>)
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	4463      	add	r3, ip
 8001cd6:	409e      	lsls	r6, r3
 8001cd8:	4337      	orrs	r7, r6
 8001cda:	003a      	movs	r2, r7
 8001cdc:	1e53      	subs	r3, r2, #1
 8001cde:	419a      	sbcs	r2, r3
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	e7ce      	b.n	8001c84 <__aeabi_d2f+0x64>
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <__aeabi_d2f+0x108>)
 8001ce8:	0038      	movs	r0, r7
 8001cea:	4694      	mov	ip, r2
 8001cec:	4463      	add	r3, ip
 8001cee:	4098      	lsls	r0, r3
 8001cf0:	003a      	movs	r2, r7
 8001cf2:	1e41      	subs	r1, r0, #1
 8001cf4:	4188      	sbcs	r0, r1
 8001cf6:	409e      	lsls	r6, r3
 8001cf8:	40ea      	lsrs	r2, r5
 8001cfa:	4330      	orrs	r0, r6
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	0753      	lsls	r3, r2, #29
 8001d02:	d1c1      	bne.n	8001c88 <__aeabi_d2f+0x68>
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	0013      	movs	r3, r2
 8001d08:	04c9      	lsls	r1, r1, #19
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	420a      	tst	r2, r1
 8001d10:	d1c6      	bne.n	8001ca0 <__aeabi_d2f+0x80>
 8001d12:	e7a3      	b.n	8001c5c <__aeabi_d2f+0x3c>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e7a0      	b.n	8001c5a <__aeabi_d2f+0x3a>
 8001d18:	000b      	movs	r3, r1
 8001d1a:	e79f      	b.n	8001c5c <__aeabi_d2f+0x3c>
 8001d1c:	000007fe 	.word	0x000007fe
 8001d20:	fffffc80 	.word	0xfffffc80
 8001d24:	fffffca2 	.word	0xfffffca2
 8001d28:	fffffc82 	.word	0xfffffc82

08001d2c <__aeabi_cfrcmple>:
 8001d2c:	4684      	mov	ip, r0
 8001d2e:	0008      	movs	r0, r1
 8001d30:	4661      	mov	r1, ip
 8001d32:	e7ff      	b.n	8001d34 <__aeabi_cfcmpeq>

08001d34 <__aeabi_cfcmpeq>:
 8001d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d36:	f000 f8bd 	bl	8001eb4 <__lesf2>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d401      	bmi.n	8001d42 <__aeabi_cfcmpeq+0xe>
 8001d3e:	2100      	movs	r1, #0
 8001d40:	42c8      	cmn	r0, r1
 8001d42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d44 <__aeabi_fcmpeq>:
 8001d44:	b510      	push	{r4, lr}
 8001d46:	f000 f849 	bl	8001ddc <__eqsf2>
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <__aeabi_fcmplt>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f8af 	bl	8001eb4 <__lesf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	db01      	blt.n	8001d5e <__aeabi_fcmplt+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__aeabi_fcmple>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f000 f8a5 	bl	8001eb4 <__lesf2>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	dd01      	ble.n	8001d72 <__aeabi_fcmple+0xe>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	2001      	movs	r0, #1
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)

08001d78 <__aeabi_fcmpgt>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	f000 f855 	bl	8001e28 <__gesf2>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	dc01      	bgt.n	8001d86 <__aeabi_fcmpgt+0xe>
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	2001      	movs	r0, #1
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)

08001d8c <__aeabi_fcmpge>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	f000 f84b 	bl	8001e28 <__gesf2>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	da01      	bge.n	8001d9a <__aeabi_fcmpge+0xe>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)

08001da0 <__clzsi2>:
 8001da0:	211c      	movs	r1, #28
 8001da2:	2301      	movs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d301      	bcc.n	8001dae <__clzsi2+0xe>
 8001daa:	0c00      	lsrs	r0, r0, #16
 8001dac:	3910      	subs	r1, #16
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	4298      	cmp	r0, r3
 8001db2:	d301      	bcc.n	8001db8 <__clzsi2+0x18>
 8001db4:	0a00      	lsrs	r0, r0, #8
 8001db6:	3908      	subs	r1, #8
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d301      	bcc.n	8001dc2 <__clzsi2+0x22>
 8001dbe:	0900      	lsrs	r0, r0, #4
 8001dc0:	3904      	subs	r1, #4
 8001dc2:	a202      	add	r2, pc, #8	; (adr r2, 8001dcc <__clzsi2+0x2c>)
 8001dc4:	5c10      	ldrb	r0, [r2, r0]
 8001dc6:	1840      	adds	r0, r0, r1
 8001dc8:	4770      	bx	lr
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	02020304 	.word	0x02020304
 8001dd0:	01010101 	.word	0x01010101
	...

08001ddc <__eqsf2>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	0042      	lsls	r2, r0, #1
 8001de0:	0245      	lsls	r5, r0, #9
 8001de2:	024e      	lsls	r6, r1, #9
 8001de4:	004c      	lsls	r4, r1, #1
 8001de6:	0fc3      	lsrs	r3, r0, #31
 8001de8:	0a6d      	lsrs	r5, r5, #9
 8001dea:	2001      	movs	r0, #1
 8001dec:	0e12      	lsrs	r2, r2, #24
 8001dee:	0a76      	lsrs	r6, r6, #9
 8001df0:	0e24      	lsrs	r4, r4, #24
 8001df2:	0fc9      	lsrs	r1, r1, #31
 8001df4:	2aff      	cmp	r2, #255	; 0xff
 8001df6:	d006      	beq.n	8001e06 <__eqsf2+0x2a>
 8001df8:	2cff      	cmp	r4, #255	; 0xff
 8001dfa:	d003      	beq.n	8001e04 <__eqsf2+0x28>
 8001dfc:	42a2      	cmp	r2, r4
 8001dfe:	d101      	bne.n	8001e04 <__eqsf2+0x28>
 8001e00:	42b5      	cmp	r5, r6
 8001e02:	d006      	beq.n	8001e12 <__eqsf2+0x36>
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	2d00      	cmp	r5, #0
 8001e08:	d1fc      	bne.n	8001e04 <__eqsf2+0x28>
 8001e0a:	2cff      	cmp	r4, #255	; 0xff
 8001e0c:	d1fa      	bne.n	8001e04 <__eqsf2+0x28>
 8001e0e:	2e00      	cmp	r6, #0
 8001e10:	d1f8      	bne.n	8001e04 <__eqsf2+0x28>
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d006      	beq.n	8001e24 <__eqsf2+0x48>
 8001e16:	2001      	movs	r0, #1
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d1f3      	bne.n	8001e04 <__eqsf2+0x28>
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	1e43      	subs	r3, r0, #1
 8001e20:	4198      	sbcs	r0, r3
 8001e22:	e7ef      	b.n	8001e04 <__eqsf2+0x28>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7ed      	b.n	8001e04 <__eqsf2+0x28>

08001e28 <__gesf2>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	0042      	lsls	r2, r0, #1
 8001e2c:	0245      	lsls	r5, r0, #9
 8001e2e:	024e      	lsls	r6, r1, #9
 8001e30:	004c      	lsls	r4, r1, #1
 8001e32:	0fc3      	lsrs	r3, r0, #31
 8001e34:	0a6d      	lsrs	r5, r5, #9
 8001e36:	0e12      	lsrs	r2, r2, #24
 8001e38:	0a76      	lsrs	r6, r6, #9
 8001e3a:	0e24      	lsrs	r4, r4, #24
 8001e3c:	0fc8      	lsrs	r0, r1, #31
 8001e3e:	2aff      	cmp	r2, #255	; 0xff
 8001e40:	d01b      	beq.n	8001e7a <__gesf2+0x52>
 8001e42:	2cff      	cmp	r4, #255	; 0xff
 8001e44:	d00e      	beq.n	8001e64 <__gesf2+0x3c>
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d11b      	bne.n	8001e82 <__gesf2+0x5a>
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d101      	bne.n	8001e52 <__gesf2+0x2a>
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d01c      	beq.n	8001e8c <__gesf2+0x64>
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	d00c      	beq.n	8001e70 <__gesf2+0x48>
 8001e56:	4283      	cmp	r3, r0
 8001e58:	d01c      	beq.n	8001e94 <__gesf2+0x6c>
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	1e58      	subs	r0, r3, #1
 8001e5e:	4008      	ands	r0, r1
 8001e60:	3801      	subs	r0, #1
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	2e00      	cmp	r6, #0
 8001e66:	d122      	bne.n	8001eae <__gesf2+0x86>
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d1f4      	bne.n	8001e56 <__gesf2+0x2e>
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d1f2      	bne.n	8001e56 <__gesf2+0x2e>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1f6      	bne.n	8001e62 <__gesf2+0x3a>
 8001e74:	2001      	movs	r0, #1
 8001e76:	4240      	negs	r0, r0
 8001e78:	e7f3      	b.n	8001e62 <__gesf2+0x3a>
 8001e7a:	2d00      	cmp	r5, #0
 8001e7c:	d117      	bne.n	8001eae <__gesf2+0x86>
 8001e7e:	2cff      	cmp	r4, #255	; 0xff
 8001e80:	d0f0      	beq.n	8001e64 <__gesf2+0x3c>
 8001e82:	2c00      	cmp	r4, #0
 8001e84:	d1e7      	bne.n	8001e56 <__gesf2+0x2e>
 8001e86:	2e00      	cmp	r6, #0
 8001e88:	d1e5      	bne.n	8001e56 <__gesf2+0x2e>
 8001e8a:	e7e6      	b.n	8001e5a <__gesf2+0x32>
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	d0e7      	beq.n	8001e62 <__gesf2+0x3a>
 8001e92:	e7e2      	b.n	8001e5a <__gesf2+0x32>
 8001e94:	42a2      	cmp	r2, r4
 8001e96:	dc05      	bgt.n	8001ea4 <__gesf2+0x7c>
 8001e98:	dbea      	blt.n	8001e70 <__gesf2+0x48>
 8001e9a:	42b5      	cmp	r5, r6
 8001e9c:	d802      	bhi.n	8001ea4 <__gesf2+0x7c>
 8001e9e:	d3e7      	bcc.n	8001e70 <__gesf2+0x48>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	e7de      	b.n	8001e62 <__gesf2+0x3a>
 8001ea4:	4243      	negs	r3, r0
 8001ea6:	4158      	adcs	r0, r3
 8001ea8:	0040      	lsls	r0, r0, #1
 8001eaa:	3801      	subs	r0, #1
 8001eac:	e7d9      	b.n	8001e62 <__gesf2+0x3a>
 8001eae:	2002      	movs	r0, #2
 8001eb0:	4240      	negs	r0, r0
 8001eb2:	e7d6      	b.n	8001e62 <__gesf2+0x3a>

08001eb4 <__lesf2>:
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	0042      	lsls	r2, r0, #1
 8001eb8:	0245      	lsls	r5, r0, #9
 8001eba:	024e      	lsls	r6, r1, #9
 8001ebc:	004c      	lsls	r4, r1, #1
 8001ebe:	0fc3      	lsrs	r3, r0, #31
 8001ec0:	0a6d      	lsrs	r5, r5, #9
 8001ec2:	0e12      	lsrs	r2, r2, #24
 8001ec4:	0a76      	lsrs	r6, r6, #9
 8001ec6:	0e24      	lsrs	r4, r4, #24
 8001ec8:	0fc8      	lsrs	r0, r1, #31
 8001eca:	2aff      	cmp	r2, #255	; 0xff
 8001ecc:	d00b      	beq.n	8001ee6 <__lesf2+0x32>
 8001ece:	2cff      	cmp	r4, #255	; 0xff
 8001ed0:	d00d      	beq.n	8001eee <__lesf2+0x3a>
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d11f      	bne.n	8001f16 <__lesf2+0x62>
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d116      	bne.n	8001f08 <__lesf2+0x54>
 8001eda:	2e00      	cmp	r6, #0
 8001edc:	d114      	bne.n	8001f08 <__lesf2+0x54>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	2d00      	cmp	r5, #0
 8001ee2:	d010      	beq.n	8001f06 <__lesf2+0x52>
 8001ee4:	e009      	b.n	8001efa <__lesf2+0x46>
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d10c      	bne.n	8001f04 <__lesf2+0x50>
 8001eea:	2cff      	cmp	r4, #255	; 0xff
 8001eec:	d113      	bne.n	8001f16 <__lesf2+0x62>
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d108      	bne.n	8001f04 <__lesf2+0x50>
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d008      	beq.n	8001f08 <__lesf2+0x54>
 8001ef6:	4283      	cmp	r3, r0
 8001ef8:	d012      	beq.n	8001f20 <__lesf2+0x6c>
 8001efa:	2102      	movs	r1, #2
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	4008      	ands	r0, r1
 8001f00:	3801      	subs	r0, #1
 8001f02:	e000      	b.n	8001f06 <__lesf2+0x52>
 8001f04:	2002      	movs	r0, #2
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d1f4      	bne.n	8001ef6 <__lesf2+0x42>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d1fa      	bne.n	8001f06 <__lesf2+0x52>
 8001f10:	2001      	movs	r0, #1
 8001f12:	4240      	negs	r0, r0
 8001f14:	e7f7      	b.n	8001f06 <__lesf2+0x52>
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d1ed      	bne.n	8001ef6 <__lesf2+0x42>
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d1eb      	bne.n	8001ef6 <__lesf2+0x42>
 8001f1e:	e7ec      	b.n	8001efa <__lesf2+0x46>
 8001f20:	42a2      	cmp	r2, r4
 8001f22:	dc05      	bgt.n	8001f30 <__lesf2+0x7c>
 8001f24:	dbf2      	blt.n	8001f0c <__lesf2+0x58>
 8001f26:	42b5      	cmp	r5, r6
 8001f28:	d802      	bhi.n	8001f30 <__lesf2+0x7c>
 8001f2a:	d3ef      	bcc.n	8001f0c <__lesf2+0x58>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7ea      	b.n	8001f06 <__lesf2+0x52>
 8001f30:	4243      	negs	r3, r0
 8001f32:	4158      	adcs	r0, r3
 8001f34:	0040      	lsls	r0, r0, #1
 8001f36:	3801      	subs	r0, #1
 8001f38:	e7e5      	b.n	8001f06 <__lesf2+0x52>
 8001f3a:	46c0      	nop			; (mov r8, r8)

08001f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	2414      	movs	r4, #20
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	0018      	movs	r0, r3
 8001f48:	2314      	movs	r3, #20
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f003 fb5b 	bl	8005608 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0309      	lsls	r1, r1, #12
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	031b      	lsls	r3, r3, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	03c9      	lsls	r1, r1, #15
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	03db      	lsls	r3, r3, #15
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0289      	lsls	r1, r1, #10
 8001f94:	430a      	orrs	r2, r1
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	02c9      	lsls	r1, r1, #11
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	02db      	lsls	r3, r3, #11
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fc2:	2390      	movs	r3, #144	; 0x90
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2120      	movs	r1, #32
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fe74 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4821      	ldr	r0, [pc, #132]	; (800205c <MX_GPIO_Init+0x120>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	0019      	movs	r1, r3
 8001fda:	f000 fe6d 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0192      	lsls	r2, r2, #6
 8001fe4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	2284      	movs	r2, #132	; 0x84
 8001fea:	0392      	lsls	r2, r2, #14
 8001fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <MX_GPIO_Init+0x124>)
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	f000 fce4 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002000:	193b      	adds	r3, r7, r4
 8002002:	2220      	movs	r2, #32
 8002004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	193b      	adds	r3, r7, r4
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002018:	193a      	adds	r2, r7, r4
 800201a:	2390      	movs	r3, #144	; 0x90
 800201c:	05db      	lsls	r3, r3, #23
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fcd1 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002026:	0021      	movs	r1, r4
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2201      	movs	r2, #1
 8002034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	187b      	adds	r3, r7, r1
 8002044:	4a05      	ldr	r2, [pc, #20]	; (800205c <MX_GPIO_Init+0x120>)
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f000 fcbd 	bl	80029c8 <HAL_GPIO_Init>

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b00b      	add	sp, #44	; 0x2c
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40021000 	.word	0x40021000
 800205c:	48000400 	.word	0x48000400
 8002060:	48000800 	.word	0x48000800

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206a:	f000 fb95 	bl	8002798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206e:	f000 f88f 	bl	8002190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002072:	f7ff ff63 	bl	8001f3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002076:	f000 fae9 	bl	800264c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800207a:	f000 f8e1 	bl	8002240 <MX_SPI1_Init>
  MX_TIM1_Init();
 800207e:	f000 f9cf 	bl	8002420 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <main+0x10c>)
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f002 f8da 	bl	8004240 <HAL_TIM_PWM_Start>
  // Set CS Pin to low on idle
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4838      	ldr	r0, [pc, #224]	; (8002174 <main+0x110>)
 8002092:	2201      	movs	r2, #1
 8002094:	0019      	movs	r1, r3
 8002096:	f000 fe0f 	bl	8002cb8 <HAL_GPIO_WritePin>

  uint8_t RxBuffer[3];
  uint8_t TxBuffer[3] = {0b0000001, 0b10000000, 0b00000001};
 800209a:	003b      	movs	r3, r7
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <main+0x114>)
 800209e:	8811      	ldrh	r1, [r2, #0]
 80020a0:	8019      	strh	r1, [r3, #0]
 80020a2:	7892      	ldrb	r2, [r2, #2]
 80020a4:	709a      	strb	r2, [r3, #2]
  uint16_t period = 63999;
 80020a6:	2316      	movs	r3, #22
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	4a34      	ldr	r2, [pc, #208]	; (800217c <main+0x118>)
 80020ac:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set chip select pin low
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <main+0x110>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fdff 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, sizeof(TxBuffer), 500);
 80020ba:	1d3a      	adds	r2, r7, #4
 80020bc:	0039      	movs	r1, r7
 80020be:	4830      	ldr	r0, [pc, #192]	; (8002180 <main+0x11c>)
 80020c0:	23fa      	movs	r3, #250	; 0xfa
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2303      	movs	r3, #3
 80020c8:	f001 fcca 	bl	8003a60 <HAL_SPI_TransmitReceive>

	// Extact 10-bit ADC value from the received SPI buffer
	ADCValue = ((RxBuffer[1] & 0b00000011) << 8) | RxBuffer[2];
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	23c0      	movs	r3, #192	; 0xc0
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	b21a      	sxth	r2, r3
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	2114      	movs	r1, #20
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	801a      	strh	r2, [r3, #0]

	// Normalize the ADC value to a range of 0 to 1
	newADCValue = ADCValue / 1023.0;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff fd1d 	bl	8001b30 <__aeabi_i2d>
 80020f6:	2200      	movs	r2, #0
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <main+0x120>)
 80020fa:	f7fe ff69 	bl	8000fd0 <__aeabi_ddiv>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	0010      	movs	r0, r2
 8002104:	0019      	movs	r1, r3
 8002106:	f7ff fd8b 	bl	8001c20 <__aeabi_d2f>
 800210a:	1c03      	adds	r3, r0, #0
 800210c:	613b      	str	r3, [r7, #16]

	// Calculate the duty cycle in the range of 0.05 to 0.1
	dutyCycle = 0.05 + newADCValue * (0.1 - 0.05);
 800210e:	6938      	ldr	r0, [r7, #16]
 8002110:	f7ff fd3e 	bl	8001b90 <__aeabi_f2d>
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <main+0x124>)
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <main+0x128>)
 8002118:	f7ff fa48 	bl	80015ac <__aeabi_dmul>
 800211c:	0002      	movs	r2, r0
 800211e:	000b      	movs	r3, r1
 8002120:	0010      	movs	r0, r2
 8002122:	0019      	movs	r1, r3
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <main+0x124>)
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <main+0x128>)
 8002128:	f7fe fbf2 	bl	8000910 <__aeabi_dadd>
 800212c:	0002      	movs	r2, r0
 800212e:	000b      	movs	r3, r1
 8002130:	0010      	movs	r0, r2
 8002132:	0019      	movs	r1, r3
 8002134:	f7ff fd74 	bl	8001c20 <__aeabi_d2f>
 8002138:	1c03      	adds	r3, r0, #0
 800213a:	60fb      	str	r3, [r7, #12]

	// Calculate the compare value for the timer
	ccrValue = dutyCycle * period;
 800213c:	2316      	movs	r3, #22
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	0018      	movs	r0, r3
 8002144:	f7fe fb92 	bl	800086c <__aeabi_i2f>
 8002148:	1c03      	adds	r3, r0, #0
 800214a:	68f9      	ldr	r1, [r7, #12]
 800214c:	1c18      	adds	r0, r3, #0
 800214e:	f7fe f87f 	bl	8000250 <__aeabi_fmul>
 8002152:	1c03      	adds	r3, r0, #0
 8002154:	250a      	movs	r5, #10
 8002156:	197c      	adds	r4, r7, r5
 8002158:	1c18      	adds	r0, r3, #0
 800215a:	f7fe f861 	bl	8000220 <__aeabi_f2uiz>
 800215e:	0003      	movs	r3, r0
 8002160:	8023      	strh	r3, [r4, #0]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccrValue);
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <main+0x10c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	197a      	adds	r2, r7, r5
 8002168:	8812      	ldrh	r2, [r2, #0]
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set chip select pin low
 800216c:	e79f      	b.n	80020ae <main+0x4a>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	2000008c 	.word	0x2000008c
 8002174:	48000400 	.word	0x48000400
 8002178:	08005678 	.word	0x08005678
 800217c:	fffff9ff 	.word	0xfffff9ff
 8002180:	20000028 	.word	0x20000028
 8002184:	408ff800 	.word	0x408ff800
 8002188:	9999999a 	.word	0x9999999a
 800218c:	3fa99999 	.word	0x3fa99999

08002190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b099      	sub	sp, #100	; 0x64
 8002194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002196:	242c      	movs	r4, #44	; 0x2c
 8002198:	193b      	adds	r3, r7, r4
 800219a:	0018      	movs	r0, r3
 800219c:	2334      	movs	r3, #52	; 0x34
 800219e:	001a      	movs	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	f003 fa31 	bl	8005608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a6:	231c      	movs	r3, #28
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	0018      	movs	r0, r3
 80021ac:	2310      	movs	r3, #16
 80021ae:	001a      	movs	r2, r3
 80021b0:	2100      	movs	r1, #0
 80021b2:	f003 fa29 	bl	8005608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b6:	003b      	movs	r3, r7
 80021b8:	0018      	movs	r0, r3
 80021ba:	231c      	movs	r3, #28
 80021bc:	001a      	movs	r2, r3
 80021be:	2100      	movs	r1, #0
 80021c0:	f003 fa22 	bl	8005608 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2220      	movs	r2, #32
 80021c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2201      	movs	r2, #1
 80021ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fd8b 	bl	8002cf4 <HAL_RCC_OscConfig>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80021e2:	f000 f828 	bl	8002236 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	211c      	movs	r1, #28
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2207      	movs	r2, #7
 80021ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2203      	movs	r2, #3
 80021f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2101      	movs	r1, #1
 8002204:	0018      	movs	r0, r3
 8002206:	f001 f8fb 	bl	8003400 <HAL_RCC_ClockConfig>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800220e:	f000 f812 	bl	8002236 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002212:	003b      	movs	r3, r7
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002218:	003b      	movs	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221e:	003b      	movs	r3, r7
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fa67 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800222a:	f000 f804 	bl	8002236 <Error_Handler>
  }
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b019      	add	sp, #100	; 0x64
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223a:	b672      	cpsid	i
}
 800223c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223e:	e7fe      	b.n	800223e <Error_Handler+0x8>

08002240 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002246:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <MX_SPI1_Init+0x78>)
 8002248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_SPI1_Init+0x74>)
 800224c:	2282      	movs	r2, #130	; 0x82
 800224e:	0052      	lsls	r2, r2, #1
 8002250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_SPI1_Init+0x74>)
 800225a:	22e0      	movs	r2, #224	; 0xe0
 800225c:	00d2      	lsls	r2, r2, #3
 800225e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_SPI1_Init+0x74>)
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002276:	2218      	movs	r2, #24
 8002278:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_SPI1_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_SPI1_Init+0x74>)
 800228e:	2207      	movs	r2, #7
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_SPI1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_SPI1_Init+0x74>)
 800229a:	2208      	movs	r2, #8
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <MX_SPI1_Init+0x74>)
 80022a0:	0018      	movs	r0, r3
 80022a2:	f001 fb25 	bl	80038f0 <HAL_SPI_Init>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022aa:	f7ff ffc4 	bl	8002236 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000028 	.word	0x20000028
 80022b8:	40013000 	.word	0x40013000

080022bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	2414      	movs	r4, #20
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	0018      	movs	r0, r3
 80022ca:	2314      	movs	r3, #20
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f003 f99a 	bl	8005608 <memset>
  if(spiHandle->Instance==SPI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <HAL_SPI_MspInit+0xd8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d155      	bne.n	800238a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0149      	lsls	r1, r1, #5
 80022e8:	430a      	orrs	r2, r1
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0289      	lsls	r1, r1, #10
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	02c9      	lsls	r1, r1, #11
 8002320:	430a      	orrs	r2, r1
 8002322:	615a      	str	r2, [r3, #20]
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	02db      	lsls	r3, r3, #11
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002332:	193b      	adds	r3, r7, r4
 8002334:	22c0      	movs	r2, #192	; 0xc0
 8002336:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	193b      	adds	r3, r7, r4
 800233a:	2202      	movs	r2, #2
 800233c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2203      	movs	r2, #3
 8002348:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	193a      	adds	r2, r7, r4
 8002352:	2390      	movs	r3, #144	; 0x90
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fb35 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235e:	0021      	movs	r1, r4
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2208      	movs	r2, #8
 8002364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2202      	movs	r2, #2
 800236a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2203      	movs	r2, #3
 8002376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	187b      	adds	r3, r7, r1
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_SPI_MspInit+0xe0>)
 8002382:	0019      	movs	r1, r3
 8002384:	0010      	movs	r0, r2
 8002386:	f000 fb1f 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b00b      	add	sp, #44	; 0x2c
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40013000 	.word	0x40013000
 8002398:	40021000 	.word	0x40021000
 800239c:	48000400 	.word	0x48000400

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_MspInit+0x44>)
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_MspInit+0x44>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	619a      	str	r2, [r3, #24]
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_MspInit+0x44>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_MspInit+0x44>)
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_MspInit+0x44>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0549      	lsls	r1, r1, #21
 80023c8:	430a      	orrs	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_MspInit+0x44>)
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	055b      	lsls	r3, r3, #21
 80023d4:	4013      	ands	r3, r2
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240c:	f000 fa0c 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b096      	sub	sp, #88	; 0x58
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	2348      	movs	r3, #72	; 0x48
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	0018      	movs	r0, r3
 800242c:	2310      	movs	r3, #16
 800242e:	001a      	movs	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	f003 f8e9 	bl	8005608 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	0018      	movs	r0, r3
 800243c:	2308      	movs	r3, #8
 800243e:	001a      	movs	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f003 f8e1 	bl	8005608 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002446:	2324      	movs	r3, #36	; 0x24
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	0018      	movs	r0, r3
 800244c:	231c      	movs	r3, #28
 800244e:	001a      	movs	r2, r3
 8002450:	2100      	movs	r1, #0
 8002452:	f003 f8d9 	bl	8005608 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	0018      	movs	r0, r3
 800245a:	2320      	movs	r3, #32
 800245c:	001a      	movs	r2, r3
 800245e:	2100      	movs	r1, #0
 8002460:	f003 f8d2 	bl	8005608 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002464:	4b46      	ldr	r3, [pc, #280]	; (8002580 <MX_TIM1_Init+0x160>)
 8002466:	4a47      	ldr	r2, [pc, #284]	; (8002584 <MX_TIM1_Init+0x164>)
 8002468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <MX_TIM1_Init+0x160>)
 800246c:	220e      	movs	r2, #14
 800246e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <MX_TIM1_Init+0x160>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8002476:	4b42      	ldr	r3, [pc, #264]	; (8002580 <MX_TIM1_Init+0x160>)
 8002478:	4a43      	ldr	r2, [pc, #268]	; (8002588 <MX_TIM1_Init+0x168>)
 800247a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <MX_TIM1_Init+0x160>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <MX_TIM1_Init+0x160>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <MX_TIM1_Init+0x160>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <MX_TIM1_Init+0x160>)
 8002490:	0018      	movs	r0, r3
 8002492:	f001 fe2d 	bl	80040f0 <HAL_TIM_Base_Init>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800249a:	f7ff fecc 	bl	8002236 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249e:	2148      	movs	r1, #72	; 0x48
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0152      	lsls	r2, r2, #5
 80024a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024a8:	187a      	adds	r2, r7, r1
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <MX_TIM1_Init+0x160>)
 80024ac:	0011      	movs	r1, r2
 80024ae:	0018      	movs	r0, r3
 80024b0:	f002 f844 	bl	800453c <HAL_TIM_ConfigClockSource>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80024b8:	f7ff febd 	bl	8002236 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <MX_TIM1_Init+0x160>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 fe66 	bl	8004190 <HAL_TIM_PWM_Init>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80024c8:	f7ff feb5 	bl	8002236 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024da:	187a      	adds	r2, r7, r1
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <MX_TIM1_Init+0x160>)
 80024de:	0011      	movs	r1, r2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f002 fc39 	bl	8004d58 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80024ea:	f7ff fea4 	bl	8002236 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ee:	2124      	movs	r1, #36	; 0x24
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2260      	movs	r2, #96	; 0x60
 80024f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002514:	187b      	adds	r3, r7, r1
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800251a:	1879      	adds	r1, r7, r1
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <MX_TIM1_Init+0x160>)
 800251e:	2200      	movs	r2, #0
 8002520:	0018      	movs	r0, r3
 8002522:	f001 ff45 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d001      	beq.n	800252e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800252a:	f7ff fe84 	bl	8002236 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0192      	lsls	r2, r2, #6
 8002552:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800255a:	1d3a      	adds	r2, r7, #4
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_TIM1_Init+0x160>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f002 fc57 	bl	8004e14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800256a:	f7ff fe64 	bl	8002236 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <MX_TIM1_Init+0x160>)
 8002570:	0018      	movs	r0, r3
 8002572:	f000 f82b 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b016      	add	sp, #88	; 0x58
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	2000008c 	.word	0x2000008c
 8002584:	40012c00 	.word	0x40012c00
 8002588:	0000f9ff 	.word	0x0000f9ff

0800258c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_TIM_Base_MspInit+0x38>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_TIM_Base_MspInit+0x3c>)
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_TIM_Base_MspInit+0x3c>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0109      	lsls	r1, r1, #4
 80025a8:	430a      	orrs	r2, r1
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_TIM_Base_MspInit+0x3c>)
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	240c      	movs	r4, #12
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	0018      	movs	r0, r3
 80025da:	2314      	movs	r3, #20
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f003 f812 	bl	8005608 <memset>
  if(timHandle->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_TIM_MspPostInit+0x78>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d125      	bne.n	800263a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_TIM_MspPostInit+0x7c>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_TIM_MspPostInit+0x7c>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0289      	lsls	r1, r1, #10
 80025f8:	430a      	orrs	r2, r1
 80025fa:	615a      	str	r2, [r3, #20]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_TIM_MspPostInit+0x7c>)
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	029b      	lsls	r3, r3, #10
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260a:	193b      	adds	r3, r7, r4
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0052      	lsls	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	0021      	movs	r1, r4
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2202      	movs	r2, #2
 8002618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2202      	movs	r2, #2
 800262a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	187a      	adds	r2, r7, r1
 800262e:	2390      	movs	r3, #144	; 0x90
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f9c7 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b009      	add	sp, #36	; 0x24
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40021000 	.word	0x40021000

0800264c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <MX_USART2_UART_Init+0x5c>)
 8002654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002658:	2296      	movs	r2, #150	; 0x96
 800265a:	0212      	lsls	r2, r2, #8
 800265c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <MX_USART2_UART_Init+0x58>)
 8002690:	0018      	movs	r0, r3
 8002692:	f002 fc1d 	bl	8004ed0 <HAL_UART_Init>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800269a:	f7ff fdcc 	bl	8002236 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200000d4 	.word	0x200000d4
 80026a8:	40004400 	.word	0x40004400

080026ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	2414      	movs	r4, #20
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	0018      	movs	r0, r3
 80026ba:	2314      	movs	r3, #20
 80026bc:	001a      	movs	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	f002 ffa2 	bl	8005608 <memset>
  if(uartHandle->Instance==USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_UART_MspInit+0x90>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d132      	bne.n	8002734 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0289      	lsls	r1, r1, #10
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0289      	lsls	r1, r1, #10
 80026f4:	430a      	orrs	r2, r1
 80026f6:	615a      	str	r2, [r3, #20]
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002706:	0021      	movs	r1, r4
 8002708:	187b      	adds	r3, r7, r1
 800270a:	220c      	movs	r2, #12
 800270c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2202      	movs	r2, #2
 8002712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2201      	movs	r2, #1
 8002724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	187a      	adds	r2, r7, r1
 8002728:	2390      	movs	r3, #144	; 0x90
 800272a:	05db      	lsls	r3, r3, #23
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f94a 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b00b      	add	sp, #44	; 0x2c
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	40004400 	.word	0x40004400
 8002740:	40021000 	.word	0x40021000

08002744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002748:	480d      	ldr	r0, [pc, #52]	; (8002780 <LoopForever+0x6>)
  ldr r1, =_edata
 800274a:	490e      	ldr	r1, [pc, #56]	; (8002784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <LoopForever+0xe>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002750:	e002      	b.n	8002758 <LoopCopyDataInit>

08002752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002756:	3304      	adds	r3, #4

08002758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800275c:	d3f9      	bcc.n	8002752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002760:	4c0b      	ldr	r4, [pc, #44]	; (8002790 <LoopForever+0x16>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002764:	e001      	b.n	800276a <LoopFillZerobss>

08002766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002768:	3204      	adds	r2, #4

0800276a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800276c:	d3fb      	bcc.n	8002766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800276e:	f7ff fe52 	bl	8002416 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002772:	f002 ff51 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002776:	f7ff fc75 	bl	8002064 <main>

0800277a <LoopForever>:

LoopForever:
    b LoopForever
 800277a:	e7fe      	b.n	800277a <LoopForever>
  ldr   r0, =_estack
 800277c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002788:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 800278c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002790:	2000015c 	.word	0x2000015c

08002794 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC1_COMP_IRQHandler>
	...

08002798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_Init+0x24>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_Init+0x24>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 f809 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ae:	f7ff fdf7 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	40022000 	.word	0x40022000

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_InitTick+0x5c>)
 80027ca:	681c      	ldr	r4, [r3, #0]
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_InitTick+0x60>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	0019      	movs	r1, r3
 80027d2:	23fa      	movs	r3, #250	; 0xfa
 80027d4:	0098      	lsls	r0, r3, #2
 80027d6:	f7fd fc97 	bl	8000108 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	0019      	movs	r1, r3
 80027de:	0020      	movs	r0, r4
 80027e0:	f7fd fc92 	bl	8000108 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 f8e1 	bl	80029ae <HAL_SYSTICK_Config>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e00f      	b.n	8002814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d80b      	bhi.n	8002812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	2301      	movs	r3, #1
 80027fe:	425b      	negs	r3, r3
 8002800:	2200      	movs	r2, #0
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f8be 	bl	8002984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_InitTick+0x64>)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b003      	add	sp, #12
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	20000000 	.word	0x20000000
 8002820:	20000008 	.word	0x20000008
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_IncTick+0x1c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	001a      	movs	r2, r3
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_IncTick+0x20>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	18d2      	adds	r2, r2, r3
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_IncTick+0x20>)
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	20000008 	.word	0x20000008
 8002848:	20000158 	.word	0x20000158

0800284c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_GetTick+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000158 	.word	0x20000158

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	0002      	movs	r2, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b7f      	cmp	r3, #127	; 0x7f
 8002874:	d828      	bhi.n	80028c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002876:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <__NVIC_SetPriority+0xd4>)
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	33c0      	adds	r3, #192	; 0xc0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	589b      	ldr	r3, [r3, r2]
 8002886:	1dfa      	adds	r2, r7, #7
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	0011      	movs	r1, r2
 800288c:	2203      	movs	r2, #3
 800288e:	400a      	ands	r2, r1
 8002890:	00d2      	lsls	r2, r2, #3
 8002892:	21ff      	movs	r1, #255	; 0xff
 8002894:	4091      	lsls	r1, r2
 8002896:	000a      	movs	r2, r1
 8002898:	43d2      	mvns	r2, r2
 800289a:	401a      	ands	r2, r3
 800289c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	401a      	ands	r2, r3
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	2303      	movs	r3, #3
 80028ae:	4003      	ands	r3, r0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b4:	481f      	ldr	r0, [pc, #124]	; (8002934 <__NVIC_SetPriority+0xd4>)
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	430a      	orrs	r2, r1
 80028c0:	33c0      	adds	r3, #192	; 0xc0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028c6:	e031      	b.n	800292c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <__NVIC_SetPriority+0xd8>)
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0019      	movs	r1, r3
 80028d0:	230f      	movs	r3, #15
 80028d2:	400b      	ands	r3, r1
 80028d4:	3b08      	subs	r3, #8
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3306      	adds	r3, #6
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	3304      	adds	r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1dfa      	adds	r2, r7, #7
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	0011      	movs	r1, r2
 80028e8:	2203      	movs	r2, #3
 80028ea:	400a      	ands	r2, r1
 80028ec:	00d2      	lsls	r2, r2, #3
 80028ee:	21ff      	movs	r1, #255	; 0xff
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	43d2      	mvns	r2, r2
 80028f6:	401a      	ands	r2, r3
 80028f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	401a      	ands	r2, r3
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	0018      	movs	r0, r3
 8002908:	2303      	movs	r3, #3
 800290a:	4003      	ands	r3, r0
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002910:	4809      	ldr	r0, [pc, #36]	; (8002938 <__NVIC_SetPriority+0xd8>)
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	001c      	movs	r4, r3
 8002918:	230f      	movs	r3, #15
 800291a:	4023      	ands	r3, r4
 800291c:	3b08      	subs	r3, #8
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	430a      	orrs	r2, r1
 8002922:	3306      	adds	r3, #6
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	18c3      	adds	r3, r0, r3
 8002928:	3304      	adds	r3, #4
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b003      	add	sp, #12
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	045b      	lsls	r3, r3, #17
 800294c:	429a      	cmp	r2, r3
 800294e:	d301      	bcc.n	8002954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002950:	2301      	movs	r3, #1
 8002952:	e010      	b.n	8002976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <SysTick_Config+0x44>)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	3a01      	subs	r2, #1
 800295a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295c:	2301      	movs	r3, #1
 800295e:	425b      	negs	r3, r3
 8002960:	2103      	movs	r1, #3
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff ff7c 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SysTick_Config+0x44>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <SysTick_Config+0x44>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	210f      	movs	r1, #15
 8002990:	187b      	adds	r3, r7, r1
 8002992:	1c02      	adds	r2, r0, #0
 8002994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	187b      	adds	r3, r7, r1
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b25b      	sxtb	r3, r3
 800299e:	0011      	movs	r1, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff ff5d 	bl	8002860 <__NVIC_SetPriority>
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ffbf 	bl	800293c <SysTick_Config>
 80029be:	0003      	movs	r3, r0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d6:	e155      	b.n	8002c84 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_GPIO_Init+0x28>
 80029ee:	e146      	b.n	8002c7e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d005      	beq.n	8002a08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d130      	bne.n	8002a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	409a      	lsls	r2, r3
 8002a16:	0013      	movs	r3, r2
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3e:	2201      	movs	r2, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	2201      	movs	r2, #1
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d017      	beq.n	8002aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d123      	bne.n	8002afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	58d3      	ldr	r3, [r2, r3]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2107      	movs	r1, #7
 8002ade:	400b      	ands	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	6939      	ldr	r1, [r7, #16]
 8002af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d100      	bne.n	8002b3c <HAL_GPIO_Init+0x174>
 8002b3a:	e0a0      	b.n	8002c7e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3c:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2d4>)
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2d4>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
 8002b48:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2d4>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x2d8>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	589b      	ldr	r3, [r3, r2]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2203      	movs	r2, #3
 8002b66:	4013      	ands	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	0013      	movs	r3, r2
 8002b70:	43da      	mvns	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	2390      	movs	r3, #144	; 0x90
 8002b7c:	05db      	lsls	r3, r3, #23
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a47      	ldr	r2, [pc, #284]	; (8002ca4 <HAL_GPIO_Init+0x2dc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x1ea>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a46      	ldr	r2, [pc, #280]	; (8002ca8 <HAL_GPIO_Init+0x2e0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x1e6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_GPIO_Init+0x2e4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x1e2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a44      	ldr	r2, [pc, #272]	; (8002cb0 <HAL_GPIO_Init+0x2e8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x1de>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x1f0>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x1f0>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x1f0>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x1f0>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x1f0>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	2103      	movs	r1, #3
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2d8>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	025b      	lsls	r3, r3, #9
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	029b      	lsls	r3, r3, #10
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	035b      	lsls	r3, r3, #13
 8002c42:	4013      	ands	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c54:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	039b      	lsls	r3, r3, #14
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_GPIO_Init+0x2ec>)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	40da      	lsrs	r2, r3
 8002c8c:	1e13      	subs	r3, r2, #0
 8002c8e:	d000      	beq.n	8002c92 <HAL_GPIO_Init+0x2ca>
 8002c90:	e6a2      	b.n	80029d8 <HAL_GPIO_Init+0x10>
  } 
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	48000400 	.word	0x48000400
 8002ca8:	48000800 	.word	0x48000800
 8002cac:	48000c00 	.word	0x48000c00
 8002cb0:	48001000 	.word	0x48001000
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	0008      	movs	r0, r1
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	1cbb      	adds	r3, r7, #2
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	1c7b      	adds	r3, r7, #1
 8002ccc:	1c0a      	adds	r2, r1, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd0:	1c7b      	adds	r3, r7, #1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cd8:	1cbb      	adds	r3, r7, #2
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce2:	1cbb      	adds	r3, r7, #2
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f000 fb76 	bl	80033f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d100      	bne.n	8002d14 <HAL_RCC_OscConfig+0x20>
 8002d12:	e08e      	b.n	8002e32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d14:	4bc5      	ldr	r3, [pc, #788]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d00e      	beq.n	8002d3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d20:	4bc2      	ldr	r3, [pc, #776]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	220c      	movs	r2, #12
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d117      	bne.n	8002d5c <HAL_RCC_OscConfig+0x68>
 8002d2c:	4bbf      	ldr	r3, [pc, #764]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	401a      	ands	r2, r3
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10e      	bne.n	8002d5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3e:	4bbb      	ldr	r3, [pc, #748]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	4013      	ands	r3, r2
 8002d48:	d100      	bne.n	8002d4c <HAL_RCC_OscConfig+0x58>
 8002d4a:	e071      	b.n	8002e30 <HAL_RCC_OscConfig+0x13c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d000      	beq.n	8002d56 <HAL_RCC_OscConfig+0x62>
 8002d54:	e06c      	b.n	8002e30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f000 fb4c 	bl	80033f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80>
 8002d64:	4bb1      	ldr	r3, [pc, #708]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4bb0      	ldr	r3, [pc, #704]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0249      	lsls	r1, r1, #9
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e02f      	b.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCC_OscConfig+0xa2>
 8002d7c:	4bab      	ldr	r3, [pc, #684]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4baa      	ldr	r3, [pc, #680]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d82:	49ab      	ldr	r1, [pc, #684]	; (8003030 <HAL_RCC_OscConfig+0x33c>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	4ba8      	ldr	r3, [pc, #672]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4ba7      	ldr	r3, [pc, #668]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002d8e:	49a9      	ldr	r1, [pc, #676]	; (8003034 <HAL_RCC_OscConfig+0x340>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e01e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d10e      	bne.n	8002dbc <HAL_RCC_OscConfig+0xc8>
 8002d9e:	4ba3      	ldr	r3, [pc, #652]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4ba2      	ldr	r3, [pc, #648]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	02c9      	lsls	r1, r1, #11
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b9f      	ldr	r3, [pc, #636]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	0249      	lsls	r1, r1, #9
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
 8002dbc:	4b9b      	ldr	r3, [pc, #620]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b9a      	ldr	r3, [pc, #616]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dc2:	499b      	ldr	r1, [pc, #620]	; (8003030 <HAL_RCC_OscConfig+0x33c>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	4b98      	ldr	r3, [pc, #608]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b97      	ldr	r3, [pc, #604]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dce:	4999      	ldr	r1, [pc, #612]	; (8003034 <HAL_RCC_OscConfig+0x340>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d014      	beq.n	8002e06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fd36 	bl	800284c <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de6:	f7ff fd31 	bl	800284c <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e2fd      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df8:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0xf2>
 8002e04:	e015      	b.n	8002e32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7ff fd21 	bl	800284c <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7ff fd1c 	bl	800284c <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e2e8      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b82      	ldr	r3, [pc, #520]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x11c>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCC_OscConfig+0x14a>
 8002e3c:	e06c      	b.n	8002f18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	220c      	movs	r2, #12
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e48:	4b78      	ldr	r3, [pc, #480]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11f      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1a0>
 8002e54:	4b75      	ldr	r3, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	4b71      	ldr	r3, [pc, #452]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x188>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e2bb      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22f8      	movs	r2, #248	; 0xf8
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	e041      	b.n	8002f18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d024      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b62      	ldr	r3, [pc, #392]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fcd0 	bl	800284c <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7ff fccb 	bl	800284c <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e297      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	22f8      	movs	r2, #248	; 0xf8
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00da      	lsls	r2, r3, #3
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e018      	b.n	8002f18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	438a      	bics	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7ff fcab 	bl	800284c <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efc:	f7ff fca6 	bl	800284c <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e272      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d1f1      	bne.n	8002efc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b40      	ldr	r3, [pc, #256]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7ff fc89 	bl	800284c <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7ff fc84 	bl	800284c <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e250      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2202      	movs	r2, #2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d0f1      	beq.n	8002f40 <HAL_RCC_OscConfig+0x24c>
 8002f5c:	e018      	b.n	8002f90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f62:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	438a      	bics	r2, r1
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fc6f 	bl	800284c <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f74:	f7ff fc6a 	bl	800284c <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e236      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d1f1      	bne.n	8002f74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d100      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2a8>
 8002f9a:	e0b5      	b.n	8003108 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9c:	201f      	movs	r0, #31
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	055b      	lsls	r3, r3, #21
 8002fac:	4013      	ands	r3, r2
 8002fae:	d110      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	0549      	lsls	r1, r1, #21
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	61da      	str	r2, [r3, #28]
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	055b      	lsls	r3, r3, #21
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fcc:	183b      	adds	r3, r7, r0
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_OscConfig+0x344>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_OscConfig+0x344>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_RCC_OscConfig+0x344>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0049      	lsls	r1, r1, #1
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fec:	f7ff fc2e 	bl	800284c <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7ff fc29 	bl	800284c <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1f5      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x344>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10f      	bne.n	800303c <HAL_RCC_OscConfig+0x348>
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_OscConfig+0x338>)
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	e036      	b.n	8003098 <HAL_RCC_OscConfig+0x3a4>
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	fffeffff 	.word	0xfffeffff
 8003034:	fffbffff 	.word	0xfffbffff
 8003038:	40007000 	.word	0x40007000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x36a>
 8003044:	4bca      	ldr	r3, [pc, #808]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4bc9      	ldr	r3, [pc, #804]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800304a:	2101      	movs	r1, #1
 800304c:	438a      	bics	r2, r1
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	4bc7      	ldr	r3, [pc, #796]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	4bc6      	ldr	r3, [pc, #792]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003056:	2104      	movs	r1, #4
 8003058:	438a      	bics	r2, r1
 800305a:	621a      	str	r2, [r3, #32]
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x3a4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x38c>
 8003066:	4bc2      	ldr	r3, [pc, #776]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	4bc1      	ldr	r3, [pc, #772]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800306c:	2104      	movs	r1, #4
 800306e:	430a      	orrs	r2, r1
 8003070:	621a      	str	r2, [r3, #32]
 8003072:	4bbf      	ldr	r3, [pc, #764]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	4bbe      	ldr	r3, [pc, #760]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	621a      	str	r2, [r3, #32]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x3a4>
 8003080:	4bbb      	ldr	r3, [pc, #748]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4bba      	ldr	r3, [pc, #744]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003086:	2101      	movs	r1, #1
 8003088:	438a      	bics	r2, r1
 800308a:	621a      	str	r2, [r3, #32]
 800308c:	4bb8      	ldr	r3, [pc, #736]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	4bb7      	ldr	r3, [pc, #732]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003092:	2104      	movs	r1, #4
 8003094:	438a      	bics	r2, r1
 8003096:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7ff fbd4 	bl	800284c <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e009      	b.n	80030be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7ff fbcf 	bl	800284c <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	4aaf      	ldr	r2, [pc, #700]	; (8003374 <HAL_RCC_OscConfig+0x680>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e19a      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	4bac      	ldr	r3, [pc, #688]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x3b6>
 80030c8:	e013      	b.n	80030f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7ff fbbf 	bl	800284c <HAL_GetTick>
 80030ce:	0003      	movs	r3, r0
 80030d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	e009      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7ff fbba 	bl	800284c <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4aa5      	ldr	r2, [pc, #660]	; (8003374 <HAL_RCC_OscConfig+0x680>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e185      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	4ba1      	ldr	r3, [pc, #644]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f2:	231f      	movs	r3, #31
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b9c      	ldr	r3, [pc, #624]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	4b9b      	ldr	r3, [pc, #620]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003102:	499d      	ldr	r1, [pc, #628]	; (8003378 <HAL_RCC_OscConfig+0x684>)
 8003104:	400a      	ands	r2, r1
 8003106:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d063      	beq.n	80031da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d12a      	bne.n	8003170 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800311a:	4b95      	ldr	r3, [pc, #596]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800311c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311e:	4b94      	ldr	r3, [pc, #592]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003120:	2104      	movs	r1, #4
 8003122:	430a      	orrs	r2, r1
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003126:	4b92      	ldr	r3, [pc, #584]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312a:	4b91      	ldr	r3, [pc, #580]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800312c:	2101      	movs	r1, #1
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7ff fb8b 	bl	800284c <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800313c:	f7ff fb86 	bl	800284c <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e152      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d0f1      	beq.n	800313c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003158:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	22f8      	movs	r2, #248	; 0xf8
 800315e:	4393      	bics	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	00da      	lsls	r2, r3, #3
 8003168:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800316a:	430a      	orrs	r2, r1
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
 800316e:	e034      	b.n	80031da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	3305      	adds	r3, #5
 8003176:	d111      	bne.n	800319c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003178:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800317a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317c:	4b7c      	ldr	r3, [pc, #496]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800317e:	2104      	movs	r1, #4
 8003180:	438a      	bics	r2, r1
 8003182:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003184:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	22f8      	movs	r2, #248	; 0xf8
 800318a:	4393      	bics	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	00da      	lsls	r2, r3, #3
 8003194:	4b76      	ldr	r3, [pc, #472]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	e01e      	b.n	80031da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800319c:	4b74      	ldr	r3, [pc, #464]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800319e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a0:	4b73      	ldr	r3, [pc, #460]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031a2:	2104      	movs	r1, #4
 80031a4:	430a      	orrs	r2, r1
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031a8:	4b71      	ldr	r3, [pc, #452]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7ff fb4a 	bl	800284c <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031be:	f7ff fb45 	bl	800284c <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e111      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031d0:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d1f1      	bne.n	80031be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	d05c      	beq.n	800329e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031e4:	4b62      	ldr	r3, [pc, #392]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	220c      	movs	r2, #12
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d00e      	beq.n	800320e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031f0:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	220c      	movs	r2, #12
 80031f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d114      	bne.n	8003226 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031fc:	4b5c      	ldr	r3, [pc, #368]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	401a      	ands	r2, r3
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	4013      	ands	r3, r2
 8003218:	d040      	beq.n	800329c <HAL_RCC_OscConfig+0x5a8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d03c      	beq.n	800329c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0e6      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01b      	beq.n	8003266 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800322e:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0249      	lsls	r1, r1, #9
 8003238:	430a      	orrs	r2, r1
 800323a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff fb06 	bl	800284c <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003246:	f7ff fb01 	bl	800284c <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0cd      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003258:	4b45      	ldr	r3, [pc, #276]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	4013      	ands	r3, r2
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x552>
 8003264:	e01b      	b.n	800329e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003266:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800326c:	4943      	ldr	r1, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x688>)
 800326e:	400a      	ands	r2, r1
 8003270:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7ff faeb 	bl	800284c <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327c:	f7ff fae6 	bl	800284c <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0b2      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	025b      	lsls	r3, r3, #9
 8003296:	4013      	ands	r3, r2
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x588>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800329c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d100      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5b4>
 80032a6:	e0a4      	b.n	80033f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	220c      	movs	r2, #12
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d100      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5c2>
 80032b4:	e078      	b.n	80033a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d14c      	bne.n	8003358 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80032c4:	492e      	ldr	r1, [pc, #184]	; (8003380 <HAL_RCC_OscConfig+0x68c>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7ff fabf 	bl	800284c <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7ff faba 	bl	800284c <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e086      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	049b      	lsls	r3, r3, #18
 80032ee:	4013      	ands	r3, r2
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	220f      	movs	r2, #15
 80032f8:	4393      	bics	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
 8003306:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <HAL_RCC_OscConfig+0x690>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	431a      	orrs	r2, r3
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 8003326:	2180      	movs	r1, #128	; 0x80
 8003328:	0449      	lsls	r1, r1, #17
 800332a:	430a      	orrs	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7ff fa8d 	bl	800284c <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7ff fa88 	bl	800284c <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e054      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	049b      	lsls	r3, r3, #18
 8003352:	4013      	ands	r3, r2
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x644>
 8003356:	e04c      	b.n	80033f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_RCC_OscConfig+0x67c>)
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x68c>)
 8003360:	400a      	ands	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff fa72 	bl	800284c <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x6a6>
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40021000 	.word	0x40021000
 8003374:	00001388 	.word	0x00001388
 8003378:	efffffff 	.word	0xefffffff
 800337c:	fffeffff 	.word	0xfffeffff
 8003380:	feffffff 	.word	0xfeffffff
 8003384:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7ff fa60 	bl	800284c <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e02c      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_RCC_OscConfig+0x708>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	049b      	lsls	r3, r3, #18
 80033a2:	4013      	ands	r3, r2
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x694>
 80033a6:	e024      	b.n	80033f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e01f      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_OscConfig+0x708>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x708>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	23c0      	movs	r3, #192	; 0xc0
 80033c4:	025b      	lsls	r3, r3, #9
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10e      	bne.n	80033ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	220f      	movs	r2, #15
 80033d4:	401a      	ands	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	23f0      	movs	r3, #240	; 0xf0
 80033e2:	039b      	lsls	r3, r3, #14
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b008      	add	sp, #32
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0bf      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d911      	bls.n	8003446 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	4393      	bics	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	4b5b      	ldr	r3, [pc, #364]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0a6      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	d015      	beq.n	800347c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2204      	movs	r2, #4
 8003456:	4013      	ands	r3, r2
 8003458:	d006      	beq.n	8003468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800345a:	4b51      	ldr	r3, [pc, #324]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003460:	21e0      	movs	r1, #224	; 0xe0
 8003462:	00c9      	lsls	r1, r1, #3
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	22f0      	movs	r2, #240	; 0xf0
 800346e:	4393      	bics	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	4b4a      	ldr	r3, [pc, #296]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d04c      	beq.n	8003520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	029b      	lsls	r3, r3, #10
 8003496:	4013      	ands	r3, r2
 8003498:	d120      	bne.n	80034dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07a      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	049b      	lsls	r3, r3, #18
 80034ae:	4013      	ands	r3, r2
 80034b0:	d114      	bne.n	80034dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06e      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80034be:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 80034c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	4013      	ands	r3, r2
 80034c8:	d108      	bne.n	80034dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e062      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e05b      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034dc:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2203      	movs	r2, #3
 80034e2:	4393      	bics	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4b2d      	ldr	r3, [pc, #180]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f0:	f7ff f9ac 	bl	800284c <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f8:	e009      	b.n	800350e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fa:	f7ff f9a7 	bl	800284c <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	4a27      	ldr	r2, [pc, #156]	; (80035a4 <HAL_RCC_ClockConfig+0x1a4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e042      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	220c      	movs	r2, #12
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1ec      	bne.n	80034fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d211      	bcs.n	8003552 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4393      	bics	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x19c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e020      	b.n	8003594 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_RCC_ClockConfig+0x1a8>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003570:	f000 f820 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8003574:	0001      	movs	r1, r0
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	220f      	movs	r2, #15
 800357e:	4013      	ands	r3, r2
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1ac>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	000a      	movs	r2, r1
 8003586:	40da      	lsrs	r2, r3
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1b0>)
 800358a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff f917 	bl	80027c0 <HAL_InitTick>
  
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40022000 	.word	0x40022000
 80035a0:	40021000 	.word	0x40021000
 80035a4:	00001388 	.word	0x00001388
 80035a8:	fffff8ff 	.word	0xfffff8ff
 80035ac:	080056dc 	.word	0x080056dc
 80035b0:	20000000 	.word	0x20000000

080035b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b08f      	sub	sp, #60	; 0x3c
 80035b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035ba:	2314      	movs	r3, #20
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xec>)
 80035c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035c2:	c313      	stmia	r3!, {r0, r1, r4}
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	4a36      	ldr	r2, [pc, #216]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80035cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035ce:	c313      	stmia	r3!, {r0, r1, r4}
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d8:	2300      	movs	r3, #0
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
 80035dc:	2300      	movs	r3, #0
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	220c      	movs	r2, #12
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d047      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0xd4>
 80035f8:	d849      	bhi.n	800368e <HAL_RCC_GetSysClockFreq+0xda>
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x50>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x56>
 8003602:	e044      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003608:	e044      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	220f      	movs	r2, #15
 8003610:	4013      	ands	r3, r2
 8003612:	2214      	movs	r2, #20
 8003614:	18ba      	adds	r2, r7, r2
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	220f      	movs	r2, #15
 8003620:	4013      	ands	r3, r2
 8003622:	1d3a      	adds	r2, r7, #4
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362a:	23c0      	movs	r3, #192	; 0xc0
 800362c:	025b      	lsls	r3, r3, #9
 800362e:	401a      	ands	r2, r3
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	025b      	lsls	r3, r3, #9
 8003634:	429a      	cmp	r2, r3
 8003636:	d109      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363a:	481c      	ldr	r0, [pc, #112]	; (80036ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800363c:	f7fc fd64 	bl	8000108 <__udivsi3>
 8003640:	0003      	movs	r3, r0
 8003642:	001a      	movs	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	4353      	muls	r3, r2
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	e01a      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	025b      	lsls	r3, r3, #9
 8003652:	401a      	ands	r2, r3
 8003654:	23c0      	movs	r3, #192	; 0xc0
 8003656:	025b      	lsls	r3, r3, #9
 8003658:	429a      	cmp	r2, r3
 800365a:	d109      	bne.n	8003670 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800365c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365e:	4814      	ldr	r0, [pc, #80]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003660:	f7fc fd52 	bl	8000108 <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	001a      	movs	r2, r3
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	4353      	muls	r3, r2
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
 800366e:	e008      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003674:	f7fc fd48 	bl	8000108 <__udivsi3>
 8003678:	0003      	movs	r3, r0
 800367a:	001a      	movs	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	4353      	muls	r3, r2
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003686:	e005      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800368c:	e002      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003692:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b00f      	add	sp, #60	; 0x3c
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	0800567c 	.word	0x0800567c
 80036a4:	0800568c 	.word	0x0800568c
 80036a8:	40021000 	.word	0x40021000
 80036ac:	007a1200 	.word	0x007a1200
 80036b0:	02dc6c00 	.word	0x02dc6c00

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000000 	.word	0x20000000

080036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80036cc:	f7ff fff2 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d0:	0001      	movs	r1, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	2207      	movs	r2, #7
 80036da:	4013      	ands	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	40d9      	lsrs	r1, r3
 80036e2:	000b      	movs	r3, r1
}    
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080056ec 	.word	0x080056ec

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	025b      	lsls	r3, r3, #9
 800370c:	4013      	ands	r3, r2
 800370e:	d100      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003710:	e08e      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003712:	2017      	movs	r0, #23
 8003714:	183b      	adds	r3, r7, r0
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	055b      	lsls	r3, r3, #21
 8003722:	4013      	ands	r3, r2
 8003724:	d110      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	0549      	lsls	r1, r1, #21
 8003730:	430a      	orrs	r2, r1
 8003732:	61da      	str	r2, [r3, #28]
 8003734:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	055b      	lsls	r3, r3, #21
 800373c:	4013      	ands	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003742:	183b      	adds	r3, r7, r0
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4013      	ands	r3, r2
 8003752:	d11a      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003754:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	0049      	lsls	r1, r1, #1
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7ff f873 	bl	800284c <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7ff f86e 	bl	800284c <HAL_GetTick>
 8003770:	0002      	movs	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0a6      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b56      	ldr	r3, [pc, #344]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4013      	ands	r3, r2
 8003788:	d0f0      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800378a:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	23c0      	movs	r3, #192	; 0xc0
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d034      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	23c0      	movs	r3, #192	; 0xc0
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4013      	ands	r3, r2
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d02c      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ac:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0249      	lsls	r1, r1, #9
 80037c0:	430a      	orrs	r2, r1
 80037c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037ca:	4945      	ldr	r1, [pc, #276]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff f835 	bl	800284c <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e009      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7ff f830 	bl	800284c <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a3c      	ldr	r2, [pc, #240]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e067      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2202      	movs	r2, #2
 8003802:	4013      	ands	r3, r2
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a34      	ldr	r2, [pc, #208]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003816:	430a      	orrs	r2, r1
 8003818:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800381a:	2317      	movs	r3, #23
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800382a:	492f      	ldr	r1, [pc, #188]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800382c:	400a      	ands	r2, r1
 800382e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	4013      	ands	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	2203      	movs	r2, #3
 8003840:	4393      	bics	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800384a:	430a      	orrs	r2, r1
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800385e:	4013      	ands	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003868:	430a      	orrs	r2, r1
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	4013      	ands	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003876:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	2210      	movs	r2, #16
 800387c:	4393      	bics	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003886:	430a      	orrs	r2, r1
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	029b      	lsls	r3, r3, #10
 8003892:	4013      	ands	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	4393      	bics	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4013      	ands	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	4393      	bics	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038c6:	430a      	orrs	r2, r1
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b006      	add	sp, #24
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	fffffcff 	.word	0xfffffcff
 80038e0:	fffeffff 	.word	0xfffeffff
 80038e4:	00001388 	.word	0x00001388
 80038e8:	efffffff 	.word	0xefffffff
 80038ec:	fffcffff 	.word	0xfffcffff

080038f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0a8      	b.n	8003a54 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	2382      	movs	r3, #130	; 0x82
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	429a      	cmp	r2, r3
 8003914:	d009      	beq.n	800392a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
 800391c:	e005      	b.n	800392a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	225d      	movs	r2, #93	; 0x5d
 8003934:	5c9b      	ldrb	r3, [r3, r2]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	225c      	movs	r2, #92	; 0x5c
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f7fe fcb8 	bl	80022bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	225d      	movs	r2, #93	; 0x5d
 8003950:	2102      	movs	r1, #2
 8003952:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2140      	movs	r1, #64	; 0x40
 8003960:	438a      	bics	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	23e0      	movs	r3, #224	; 0xe0
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	429a      	cmp	r2, r3
 800396e:	d902      	bls.n	8003976 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e002      	b.n	800397c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	23f0      	movs	r3, #240	; 0xf0
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	429a      	cmp	r2, r3
 8003986:	d008      	beq.n	800399a <HAL_SPI_Init+0xaa>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	23e0      	movs	r3, #224	; 0xe0
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	429a      	cmp	r2, r3
 8003992:	d002      	beq.n	800399a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	2382      	movs	r3, #130	; 0x82
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	401a      	ands	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	2384      	movs	r3, #132	; 0x84
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	400b      	ands	r3, r1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2102      	movs	r1, #2
 80039b6:	400b      	ands	r3, r1
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2101      	movs	r1, #1
 80039c0:	400b      	ands	r3, r1
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6999      	ldr	r1, [r3, #24]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	400b      	ands	r3, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2138      	movs	r1, #56	; 0x38
 80039d6:	400b      	ands	r3, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	400b      	ands	r3, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	0011      	movs	r1, r2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	2204      	movs	r2, #4
 8003a00:	401a      	ands	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2110      	movs	r1, #16
 8003a08:	400b      	ands	r3, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	2108      	movs	r1, #8
 8003a12:	400b      	ands	r3, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	23f0      	movs	r3, #240	; 0xf0
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	400b      	ands	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	0011      	movs	r1, r2
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	015b      	lsls	r3, r3, #5
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4907      	ldr	r1, [pc, #28]	; (8003a5c <HAL_SPI_Init+0x16c>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	225d      	movs	r2, #93	; 0x5d
 8003a4e:	2101      	movs	r1, #1
 8003a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fffff7ff 	.word	0xfffff7ff

08003a60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	1cbb      	adds	r3, r7, #2
 8003a70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a72:	2301      	movs	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a76:	2323      	movs	r3, #35	; 0x23
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	225c      	movs	r2, #92	; 0x5c
 8003a82:	5c9b      	ldrb	r3, [r3, r2]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x2c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e1b5      	b.n	8003df8 <HAL_SPI_TransmitReceive+0x398>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	225c      	movs	r2, #92	; 0x5c
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a94:	f7fe feda 	bl	800284c <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a9c:	201b      	movs	r0, #27
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	215d      	movs	r1, #93	; 0x5d
 8003aa4:	5c52      	ldrb	r2, [r2, r1]
 8003aa6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003aae:	2312      	movs	r3, #18
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d011      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x84>
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	2382      	movs	r3, #130	; 0x82
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d107      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x7a>
 8003ad2:	183b      	adds	r3, r7, r0
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d004      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003ada:	2323      	movs	r3, #35	; 0x23
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2202      	movs	r2, #2
 8003ae0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ae2:	e17e      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x98>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x98>
 8003af0:	1cbb      	adds	r3, r7, #2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003af8:	2323      	movs	r3, #35	; 0x23
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b00:	e16f      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	225d      	movs	r2, #93	; 0x5d
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d003      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	225d      	movs	r2, #93	; 0x5d
 8003b12:	2105      	movs	r1, #5
 8003b14:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1cba      	adds	r2, r7, #2
 8003b26:	2146      	movs	r1, #70	; 0x46
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1cba      	adds	r2, r7, #2
 8003b30:	2144      	movs	r1, #68	; 0x44
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1cba      	adds	r2, r7, #2
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1cba      	adds	r2, r7, #2
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	23e0      	movs	r3, #224	; 0xe0
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d908      	bls.n	8003b76 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	49a4      	ldr	r1, [pc, #656]	; (8003e00 <HAL_SPI_TransmitReceive+0x3a0>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	e008      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0149      	lsls	r1, r1, #5
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d007      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	23e0      	movs	r3, #224	; 0xe0
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d800      	bhi.n	8003bb4 <HAL_SPI_TransmitReceive+0x154>
 8003bb2:	e07f      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_SPI_TransmitReceive+0x168>
 8003bbc:	2312      	movs	r3, #18
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d000      	beq.n	8003bc8 <HAL_SPI_TransmitReceive+0x168>
 8003bc6:	e069      	b.n	8003c9c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bec:	e056      	b.n	8003c9c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d11b      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1d4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x1d4>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d113      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d11c      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x21c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2246      	movs	r2, #70	; 0x46
 8003c46:	5a9b      	ldrh	r3, [r3, r2]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2246      	movs	r2, #70	; 0x46
 8003c6a:	5a9b      	ldrh	r3, [r3, r2]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b299      	uxth	r1, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2246      	movs	r2, #70	; 0x46
 8003c76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c7c:	f7fe fde6 	bl	800284c <HAL_GetTick>
 8003c80:	0002      	movs	r2, r0
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d807      	bhi.n	8003c9c <HAL_SPI_TransmitReceive+0x23c>
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	3301      	adds	r3, #1
 8003c90:	d004      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003c92:	2323      	movs	r3, #35	; 0x23
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	2203      	movs	r2, #3
 8003c98:	701a      	strb	r2, [r3, #0]
        goto error;
 8003c9a:	e0a2      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1a3      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x18e>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2246      	movs	r2, #70	; 0x46
 8003caa:	5a9b      	ldrh	r3, [r3, r2]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d19d      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x18e>
 8003cb2:	e085      	b.n	8003dc0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x268>
 8003cbc:	2312      	movs	r3, #18
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d000      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x268>
 8003cc6:	e070      	b.n	8003daa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cee:	e05c      	b.n	8003daa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d11c      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2d8>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x2d8>
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d114      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d11e      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x324>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2246      	movs	r2, #70	; 0x46
 8003d4a:	5a9b      	ldrh	r3, [r3, r2]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	001a      	movs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2246      	movs	r2, #70	; 0x46
 8003d72:	5a9b      	ldrh	r3, [r3, r2]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b299      	uxth	r1, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2246      	movs	r2, #70	; 0x46
 8003d7e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d80:	2301      	movs	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d84:	f7fe fd62 	bl	800284c <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d802      	bhi.n	8003d9a <HAL_SPI_TransmitReceive+0x33a>
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	3301      	adds	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x340>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003da0:	2323      	movs	r3, #35	; 0x23
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2203      	movs	r2, #3
 8003da6:	701a      	strb	r2, [r3, #0]
        goto error;
 8003da8:	e01b      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d19d      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x290>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2246      	movs	r2, #70	; 0x46
 8003db8:	5a9b      	ldrh	r3, [r3, r2]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d197      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f000 f94c 	bl	8004064 <SPI_EndRxTxTransaction>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003dd0:	2323      	movs	r3, #35	; 0x23
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dde:	e000      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003de0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	225d      	movs	r2, #93	; 0x5d
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	225c      	movs	r2, #92	; 0x5c
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003df2:	2323      	movs	r3, #35	; 0x23
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	781b      	ldrb	r3, [r3, #0]
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b00a      	add	sp, #40	; 0x28
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	ffffefff 	.word	0xffffefff

08003e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e14:	f7fe fd1a 	bl	800284c <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	18d3      	adds	r3, r2, r3
 8003e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e24:	f7fe fd12 	bl	800284c <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	015b      	lsls	r3, r3, #5
 8003e32:	0d1b      	lsrs	r3, r3, #20
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	4353      	muls	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3a:	e058      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	d055      	beq.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e42:	f7fe fd03 	bl	800284c <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d902      	bls.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d142      	bne.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	21e0      	movs	r1, #224	; 0xe0
 8003e64:	438a      	bics	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	2382      	movs	r3, #130	; 0x82
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d113      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d005      	beq.n	8003e8c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d110      	bne.n	8003eca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	491a      	ldr	r1, [pc, #104]	; (8003f1c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	0189      	lsls	r1, r1, #6
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	225d      	movs	r2, #93	; 0x5d
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	225c      	movs	r2, #92	; 0x5c
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e017      	b.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	425a      	negs	r2, r3
 8003efe:	4153      	adcs	r3, r2
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	001a      	movs	r2, r3
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d197      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b008      	add	sp, #32
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	ffffdfff 	.word	0xffffdfff

08003f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f2e:	2317      	movs	r3, #23
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f36:	f7fe fc89 	bl	800284c <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	18d3      	adds	r3, r2, r3
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f46:	f7fe fc81 	bl	800284c <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f56:	4b41      	ldr	r3, [pc, #260]	; (800405c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	0013      	movs	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	00da      	lsls	r2, r3, #3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	0d1b      	lsrs	r3, r3, #20
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	4353      	muls	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f6c:	e068      	b.n	8004040 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	23c0      	movs	r3, #192	; 0xc0
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10a      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	2117      	movs	r1, #23
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	d055      	beq.n	8004040 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f94:	f7fe fc5a 	bl	800284c <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d902      	bls.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d142      	bne.n	8004030 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	21e0      	movs	r1, #224	; 0xe0
 8003fb6:	438a      	bics	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	2382      	movs	r3, #130	; 0x82
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d113      	bne.n	8003fee <SPI_WaitFifoStateUntilTimeout+0xce>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d005      	beq.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d107      	bne.n	8003fee <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	; 0x40
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d110      	bne.n	800401c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004006:	400a      	ands	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0189      	lsls	r1, r1, #6
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	225d      	movs	r2, #93	; 0x5d
 8004020:	2101      	movs	r1, #1
 8004022:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	225c      	movs	r2, #92	; 0x5c
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e010      	b.n	8004052 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3b01      	subs	r3, #1
 800403e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d18e      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b00a      	add	sp, #40	; 0x28
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	20000000 	.word	0x20000000
 8004060:	ffffdfff 	.word	0xffffdfff

08004064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	23c0      	movs	r3, #192	; 0xc0
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	0013      	movs	r3, r2
 800407e:	2200      	movs	r2, #0
 8004080:	f7ff ff4e 	bl	8003f20 <SPI_WaitFifoStateUntilTimeout>
 8004084:	1e03      	subs	r3, r0, #0
 8004086:	d007      	beq.n	8004098 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	2220      	movs	r2, #32
 800408e:	431a      	orrs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e027      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	0013      	movs	r3, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	f7ff fead 	bl	8003e04 <SPI_WaitFlagStateUntilTimeout>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d007      	beq.n	80040be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	2220      	movs	r2, #32
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e014      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	23c0      	movs	r3, #192	; 0xc0
 80040c2:	00d9      	lsls	r1, r3, #3
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	0013      	movs	r3, r2
 80040cc:	2200      	movs	r2, #0
 80040ce:	f7ff ff27 	bl	8003f20 <SPI_WaitFifoStateUntilTimeout>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d007      	beq.n	80040e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	2220      	movs	r2, #32
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e000      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b004      	add	sp, #16
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e042      	b.n	8004188 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	223d      	movs	r2, #61	; 0x3d
 8004106:	5c9b      	ldrb	r3, [r3, r2]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f7fe fa37 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223d      	movs	r2, #61	; 0x3d
 8004122:	2102      	movs	r1, #2
 8004124:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	0019      	movs	r1, r3
 8004130:	0010      	movs	r0, r2
 8004132:	f000 fad7 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2246      	movs	r2, #70	; 0x46
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	223e      	movs	r2, #62	; 0x3e
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223f      	movs	r2, #63	; 0x3f
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2240      	movs	r2, #64	; 0x40
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	; 0x41
 800415a:	2101      	movs	r1, #1
 800415c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2242      	movs	r2, #66	; 0x42
 8004162:	2101      	movs	r1, #1
 8004164:	5499      	strb	r1, [r3, r2]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2243      	movs	r2, #67	; 0x43
 800416a:	2101      	movs	r1, #1
 800416c:	5499      	strb	r1, [r3, r2]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2244      	movs	r2, #68	; 0x44
 8004172:	2101      	movs	r1, #1
 8004174:	5499      	strb	r1, [r3, r2]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2245      	movs	r2, #69	; 0x45
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	223d      	movs	r2, #61	; 0x3d
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e042      	b.n	8004228 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223d      	movs	r2, #61	; 0x3d
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	223c      	movs	r2, #60	; 0x3c
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f839 	bl	8004230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	223d      	movs	r2, #61	; 0x3d
 80041c2:	2102      	movs	r1, #2
 80041c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	0019      	movs	r1, r3
 80041d0:	0010      	movs	r0, r2
 80041d2:	f000 fa87 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2246      	movs	r2, #70	; 0x46
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223e      	movs	r2, #62	; 0x3e
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	223f      	movs	r2, #63	; 0x3f
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2241      	movs	r2, #65	; 0x41
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2242      	movs	r2, #66	; 0x42
 8004202:	2101      	movs	r1, #1
 8004204:	5499      	strb	r1, [r3, r2]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2243      	movs	r2, #67	; 0x43
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2244      	movs	r2, #68	; 0x44
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2245      	movs	r2, #69	; 0x45
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	223d      	movs	r2, #61	; 0x3d
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_TIM_PWM_Start+0x22>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	223e      	movs	r2, #62	; 0x3e
 8004254:	5c9b      	ldrb	r3, [r3, r2]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	4193      	sbcs	r3, r2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e01f      	b.n	80042a2 <HAL_TIM_PWM_Start+0x62>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d108      	bne.n	800427a <HAL_TIM_PWM_Start+0x3a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	223f      	movs	r2, #63	; 0x3f
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	1e5a      	subs	r2, r3, #1
 8004274:	4193      	sbcs	r3, r2
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e013      	b.n	80042a2 <HAL_TIM_PWM_Start+0x62>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d108      	bne.n	8004292 <HAL_TIM_PWM_Start+0x52>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	5c9b      	ldrb	r3, [r3, r2]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	4193      	sbcs	r3, r2
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e007      	b.n	80042a2 <HAL_TIM_PWM_Start+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2241      	movs	r2, #65	; 0x41
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	4193      	sbcs	r3, r2
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e074      	b.n	8004394 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0x7a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	223e      	movs	r2, #62	; 0x3e
 80042b4:	2102      	movs	r1, #2
 80042b6:	5499      	strb	r1, [r3, r2]
 80042b8:	e013      	b.n	80042e2 <HAL_TIM_PWM_Start+0xa2>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0x8a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	223f      	movs	r2, #63	; 0x3f
 80042c4:	2102      	movs	r1, #2
 80042c6:	5499      	strb	r1, [r3, r2]
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_PWM_Start+0xa2>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0x9a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	2102      	movs	r1, #2
 80042d6:	5499      	strb	r1, [r3, r2]
 80042d8:	e003      	b.n	80042e2 <HAL_TIM_PWM_Start+0xa2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2241      	movs	r2, #65	; 0x41
 80042de:	2102      	movs	r1, #2
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fd10 	bl	8004d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <HAL_TIM_PWM_Start+0x15c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_PWM_Start+0xd8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_TIM_PWM_Start+0x160>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIM_PWM_Start+0xd8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <HAL_TIM_PWM_Start+0x164>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_PWM_Start+0xd8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <HAL_TIM_PWM_Start+0x168>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_TIM_PWM_Start+0xdc>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_TIM_PWM_Start+0xde>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0209      	lsls	r1, r1, #8
 8004330:	430a      	orrs	r2, r1
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_TIM_PWM_Start+0x15c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00f      	beq.n	800435e <HAL_TIM_PWM_Start+0x11e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	05db      	lsls	r3, r3, #23
 8004346:	429a      	cmp	r2, r3
 8004348:	d009      	beq.n	800435e <HAL_TIM_PWM_Start+0x11e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_TIM_PWM_Start+0x16c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_TIM_PWM_Start+0x11e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <HAL_TIM_PWM_Start+0x160>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d111      	bne.n	8004382 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2207      	movs	r2, #7
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d010      	beq.n	8004392 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2101      	movs	r1, #1
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	e007      	b.n	8004392 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2101      	movs	r1, #1
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800
 80043ac:	40000400 	.word	0x40000400

080043b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2317      	movs	r3, #23
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	223c      	movs	r2, #60	; 0x3c
 80043c8:	5c9b      	ldrb	r3, [r3, r2]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0ad      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	223c      	movs	r2, #60	; 0x3c
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	d100      	bne.n	80043e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80043e0:	e076      	b.n	80044d0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d900      	bls.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043e8:	e095      	b.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d04e      	beq.n	800448e <HAL_TIM_PWM_ConfigChannel+0xde>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d900      	bls.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043f6:	e08e      	b.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_PWM_ConfigChannel+0x56>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d021      	beq.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004404:	e087      	b.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0011      	movs	r1, r2
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f9e8 	bl	80047e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2108      	movs	r1, #8
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2104      	movs	r1, #4
 8004430:	438a      	bics	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	619a      	str	r2, [r3, #24]
      break;
 8004446:	e06b      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fa4f 	bl	80048f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	0109      	lsls	r1, r1, #4
 8004464:	430a      	orrs	r2, r1
 8004466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4931      	ldr	r1, [pc, #196]	; (8004538 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004474:	400a      	ands	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	619a      	str	r2, [r3, #24]
      break;
 800448c:	e048      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f000 fab0 	bl	80049fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2108      	movs	r1, #8
 80044a8:	430a      	orrs	r2, r1
 80044aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2104      	movs	r1, #4
 80044b8:	438a      	bics	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69d9      	ldr	r1, [r3, #28]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	61da      	str	r2, [r3, #28]
      break;
 80044ce:	e027      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	0011      	movs	r1, r2
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 fb15 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	0109      	lsls	r1, r1, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	490f      	ldr	r1, [pc, #60]	; (8004538 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69d9      	ldr	r1, [r3, #28]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
      break;
 8004514:	e004      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004516:	2317      	movs	r3, #23
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
      break;
 800451e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	223c      	movs	r2, #60	; 0x3c
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

  return status;
 8004528:	2317      	movs	r3, #23
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	781b      	ldrb	r3, [r3, #0]
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b006      	add	sp, #24
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	fffffbff 	.word	0xfffffbff

0800453c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	223c      	movs	r2, #60	; 0x3c
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x20>
 8004558:	2302      	movs	r3, #2
 800455a:	e0bc      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x19a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	223c      	movs	r2, #60	; 0x3c
 8004560:	2101      	movs	r1, #1
 8004562:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	223d      	movs	r2, #61	; 0x3d
 8004568:	2102      	movs	r1, #2
 800456a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2277      	movs	r2, #119	; 0x77
 8004578:	4393      	bics	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004580:	4013      	ands	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	0192      	lsls	r2, r2, #6
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xde>
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0192      	lsls	r2, r2, #6
 800459c:	4293      	cmp	r3, r2
 800459e:	d900      	bls.n	80045a2 <HAL_TIM_ConfigClockSource+0x66>
 80045a0:	e088      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	0152      	lsls	r2, r2, #5
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d100      	bne.n	80045ac <HAL_TIM_ConfigClockSource+0x70>
 80045aa:	e088      	b.n	80046be <HAL_TIM_ConfigClockSource+0x182>
 80045ac:	2280      	movs	r2, #128	; 0x80
 80045ae:	0152      	lsls	r2, r2, #5
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d900      	bls.n	80045b6 <HAL_TIM_ConfigClockSource+0x7a>
 80045b4:	e07e      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045b6:	2b70      	cmp	r3, #112	; 0x70
 80045b8:	d018      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xb0>
 80045ba:	d900      	bls.n	80045be <HAL_TIM_ConfigClockSource+0x82>
 80045bc:	e07a      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045be:	2b60      	cmp	r3, #96	; 0x60
 80045c0:	d04f      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x126>
 80045c2:	d900      	bls.n	80045c6 <HAL_TIM_ConfigClockSource+0x8a>
 80045c4:	e076      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045c6:	2b50      	cmp	r3, #80	; 0x50
 80045c8:	d03b      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x106>
 80045ca:	d900      	bls.n	80045ce <HAL_TIM_ConfigClockSource+0x92>
 80045cc:	e072      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d057      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x146>
 80045d2:	d900      	bls.n	80045d6 <HAL_TIM_ConfigClockSource+0x9a>
 80045d4:	e06e      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045d6:	2b30      	cmp	r3, #48	; 0x30
 80045d8:	d063      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x166>
 80045da:	d86b      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d060      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x166>
 80045e0:	d868      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d05d      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x166>
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d05b      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x166>
 80045ea:	e063      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f000 fb68 	bl	8004cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2277      	movs	r2, #119	; 0x77
 800460c:	4313      	orrs	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e052      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f000 fb51 	bl	8004cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	01c9      	lsls	r1, r1, #7
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
      break;
 8004640:	e03e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	001a      	movs	r2, r3
 8004650:	f000 fac4 	bl	8004bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2150      	movs	r1, #80	; 0x50
 800465a:	0018      	movs	r0, r3
 800465c:	f000 fb1e 	bl	8004c9c <TIM_ITRx_SetConfig>
      break;
 8004660:	e02e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	001a      	movs	r2, r3
 8004670:	f000 fae2 	bl	8004c38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2160      	movs	r1, #96	; 0x60
 800467a:	0018      	movs	r0, r3
 800467c:	f000 fb0e 	bl	8004c9c <TIM_ITRx_SetConfig>
      break;
 8004680:	e01e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	001a      	movs	r2, r3
 8004690:	f000 faa4 	bl	8004bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fafe 	bl	8004c9c <TIM_ITRx_SetConfig>
      break;
 80046a0:	e00e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	0019      	movs	r1, r3
 80046ac:	0010      	movs	r0, r2
 80046ae:	f000 faf5 	bl	8004c9c <TIM_ITRx_SetConfig>
      break;
 80046b2:	e005      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046b4:	230f      	movs	r3, #15
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
      break;
 80046bc:	e000      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	223d      	movs	r2, #61	; 0x3d
 80046c4:	2101      	movs	r1, #1
 80046c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223c      	movs	r2, #60	; 0x3c
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

  return status;
 80046d0:	230f      	movs	r3, #15
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	ffff00ff 	.word	0xffff00ff

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a34      	ldr	r2, [pc, #208]	; (80047c8 <TIM_Base_SetConfig+0xe4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d008      	beq.n	800470e <TIM_Base_SetConfig+0x2a>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	05db      	lsls	r3, r3, #23
 8004702:	429a      	cmp	r2, r3
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x2a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a30      	ldr	r2, [pc, #192]	; (80047cc <TIM_Base_SetConfig+0xe8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d108      	bne.n	8004720 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2270      	movs	r2, #112	; 0x70
 8004712:	4393      	bics	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0xe4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	05db      	lsls	r3, r3, #23
 800472e:	429a      	cmp	r2, r3
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <TIM_Base_SetConfig+0xe8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <TIM_Base_SetConfig+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <TIM_Base_SetConfig+0xf0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a22      	ldr	r2, [pc, #136]	; (80047d8 <TIM_Base_SetConfig+0xf4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x76>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <TIM_Base_SetConfig+0xf8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <TIM_Base_SetConfig+0xfc>)
 800475e:	4013      	ands	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	4393      	bics	r3, r2
 8004772:	001a      	movs	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <TIM_Base_SetConfig+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0xce>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <TIM_Base_SetConfig+0xf0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0xce>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <TIM_Base_SetConfig+0xf4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0xce>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <TIM_Base_SetConfig+0xf8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d103      	bne.n	80047ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	615a      	str	r2, [r3, #20]
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40002000 	.word	0x40002000
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800
 80047e0:	fffffcff 	.word	0xfffffcff

080047e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	2201      	movs	r2, #1
 80047f4:	4393      	bics	r3, r2
 80047f6:	001a      	movs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2270      	movs	r2, #112	; 0x70
 8004812:	4393      	bics	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2203      	movs	r2, #3
 800481a:	4393      	bics	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2202      	movs	r2, #2
 800482c:	4393      	bics	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a27      	ldr	r2, [pc, #156]	; (80048dc <TIM_OC1_SetConfig+0xf8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_OC1_SetConfig+0x76>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <TIM_OC1_SetConfig+0xfc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_OC1_SetConfig+0x76>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <TIM_OC1_SetConfig+0x100>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_OC1_SetConfig+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <TIM_OC1_SetConfig+0x104>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10c      	bne.n	8004874 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2208      	movs	r2, #8
 800485e:	4393      	bics	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2204      	movs	r2, #4
 8004870:	4393      	bics	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a19      	ldr	r2, [pc, #100]	; (80048dc <TIM_OC1_SetConfig+0xf8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_OC1_SetConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <TIM_OC1_SetConfig+0xfc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_OC1_SetConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <TIM_OC1_SetConfig+0x100>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_OC1_SetConfig+0xb0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <TIM_OC1_SetConfig+0x104>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <TIM_OC1_SetConfig+0x108>)
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <TIM_OC1_SetConfig+0x10c>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b006      	add	sp, #24
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	fffffeff 	.word	0xfffffeff
 80048f0:	fffffdff 	.word	0xfffffdff

080048f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2210      	movs	r2, #16
 8004904:	4393      	bics	r3, r2
 8004906:	001a      	movs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a2e      	ldr	r2, [pc, #184]	; (80049dc <TIM_OC2_SetConfig+0xe8>)
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a2d      	ldr	r2, [pc, #180]	; (80049e0 <TIM_OC2_SetConfig+0xec>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2220      	movs	r2, #32
 800493e:	4393      	bics	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <TIM_OC2_SetConfig+0xf0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10d      	bne.n	8004972 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2280      	movs	r2, #128	; 0x80
 800495a:	4393      	bics	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	4393      	bics	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <TIM_OC2_SetConfig+0xf0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_OC2_SetConfig+0x9e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <TIM_OC2_SetConfig+0xf4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_OC2_SetConfig+0x9e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <TIM_OC2_SetConfig+0xf8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC2_SetConfig+0x9e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <TIM_OC2_SetConfig+0xfc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d113      	bne.n	80049ba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <TIM_OC2_SetConfig+0x100>)
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <TIM_OC2_SetConfig+0x104>)
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b006      	add	sp, #24
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	ffff8fff 	.word	0xffff8fff
 80049e0:	fffffcff 	.word	0xfffffcff
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800
 80049f4:	fffffbff 	.word	0xfffffbff
 80049f8:	fffff7ff 	.word	0xfffff7ff

080049fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <TIM_OC3_SetConfig+0xe4>)
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2270      	movs	r2, #112	; 0x70
 8004a28:	4393      	bics	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4393      	bics	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <TIM_OC3_SetConfig+0xe8>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <TIM_OC3_SetConfig+0xec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10d      	bne.n	8004a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	; (8004aec <TIM_OC3_SetConfig+0xf0>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <TIM_OC3_SetConfig+0xf4>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <TIM_OC3_SetConfig+0xec>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_OC3_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <TIM_OC3_SetConfig+0xf8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_OC3_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <TIM_OC3_SetConfig+0xfc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_OC3_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <TIM_OC3_SetConfig+0x100>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d113      	bne.n	8004abe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <TIM_OC3_SetConfig+0x104>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <TIM_OC3_SetConfig+0x108>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b006      	add	sp, #24
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	fffffeff 	.word	0xfffffeff
 8004ae4:	fffffdff 	.word	0xfffffdff
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	fffff7ff 	.word	0xfffff7ff
 8004af0:	fffffbff 	.word	0xfffffbff
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	ffffefff 	.word	0xffffefff
 8004b04:	ffffdfff 	.word	0xffffdfff

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <TIM_OC4_SetConfig+0xb0>)
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <TIM_OC4_SetConfig+0xb4>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <TIM_OC4_SetConfig+0xb8>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_OC4_SetConfig+0xbc>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_OC4_SetConfig+0xc0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_OC4_SetConfig+0x78>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <TIM_OC4_SetConfig+0xc4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_OC4_SetConfig+0x78>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <TIM_OC4_SetConfig+0xc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC4_SetConfig+0x78>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <TIM_OC4_SetConfig+0xcc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d109      	bne.n	8004b94 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <TIM_OC4_SetConfig+0xd0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b006      	add	sp, #24
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	ffffefff 	.word	0xffffefff
 8004bbc:	ffff8fff 	.word	0xffff8fff
 8004bc0:	fffffcff 	.word	0xfffffcff
 8004bc4:	ffffdfff 	.word	0xffffdfff
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	ffffbfff 	.word	0xffffbfff

08004bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	22f0      	movs	r2, #240	; 0xf0
 8004c06:	4393      	bics	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	220a      	movs	r2, #10
 8004c18:	4393      	bics	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b006      	add	sp, #24
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	2210      	movs	r2, #16
 8004c4a:	4393      	bics	r3, r2
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <TIM_TI2_ConfigInputStage+0x60>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	22a0      	movs	r2, #160	; 0xa0
 8004c74:	4393      	bics	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b006      	add	sp, #24
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	ffff0fff 	.word	0xffff0fff

08004c9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2270      	movs	r2, #112	; 0x70
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	2207      	movs	r2, #7
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	609a      	str	r2, [r3, #8]
}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b004      	add	sp, #16
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <TIM_ETR_SetConfig+0x3c>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b006      	add	sp, #24
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	ffff00ff 	.word	0xffff00ff

08004d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	221f      	movs	r2, #31
 8004d20:	4013      	ands	r3, r2
 8004d22:	2201      	movs	r2, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	0013      	movs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	43d2      	mvns	r2, r2
 8004d32:	401a      	ands	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	211f      	movs	r1, #31
 8004d40:	400b      	ands	r3, r1
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4099      	lsls	r1, r3
 8004d46:	000b      	movs	r3, r1
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b006      	add	sp, #24
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	223c      	movs	r2, #60	; 0x3c
 8004d66:	5c9b      	ldrb	r3, [r3, r2]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e047      	b.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223c      	movs	r2, #60	; 0x3c
 8004d74:	2101      	movs	r1, #1
 8004d76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	223d      	movs	r2, #61	; 0x3d
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2270      	movs	r2, #112	; 0x70
 8004d94:	4393      	bics	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d009      	beq.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10c      	bne.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	4393      	bics	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	223d      	movs	r2, #61	; 0x3d
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	223c      	movs	r2, #60	; 0x3c
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b004      	add	sp, #16
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40014000 	.word	0x40014000

08004e14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223c      	movs	r2, #60	; 0x3c
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e03e      	b.n	8004eae <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	223c      	movs	r2, #60	; 0x3c
 8004e34:	2101      	movs	r1, #1
 8004e36:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	22ff      	movs	r2, #255	; 0xff
 8004e3c:	4393      	bics	r3, r2
 8004e3e:	001a      	movs	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004e68:	401a      	ands	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004e76:	401a      	ands	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004e84:	401a      	ands	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004e92:	401a      	ands	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	223c      	movs	r2, #60	; 0x3c
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	fffffcff 	.word	0xfffffcff
 8004ebc:	fffffbff 	.word	0xfffffbff
 8004ec0:	fffff7ff 	.word	0xfffff7ff
 8004ec4:	ffffefff 	.word	0xffffefff
 8004ec8:	ffffdfff 	.word	0xffffdfff
 8004ecc:	ffffbfff 	.word	0xffffbfff

08004ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e044      	b.n	8004f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2274      	movs	r2, #116	; 0x74
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fd fbd9 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f830 	bl	8004f78 <UART_SetConfig>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e024      	b.n	8004f6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f000 f9ab 	bl	8005288 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	490d      	ldr	r1, [pc, #52]	; (8004f74 <HAL_UART_Init+0xa4>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	212a      	movs	r1, #42	; 0x2a
 8004f4e:	438a      	bics	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 fa43 	bl	80053f0 <UART_CheckIdleState>
 8004f6a:	0003      	movs	r3, r0
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	ffffb7ff 	.word	0xffffb7ff

08004f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f80:	231e      	movs	r3, #30
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4aaf      	ldr	r2, [pc, #700]	; (8005264 <UART_SetConfig+0x2ec>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	0019      	movs	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4aaa      	ldr	r2, [pc, #680]	; (8005268 <UART_SetConfig+0x2f0>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4aa1      	ldr	r2, [pc, #644]	; (800526c <UART_SetConfig+0x2f4>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a9d      	ldr	r2, [pc, #628]	; (8005270 <UART_SetConfig+0x2f8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d127      	bne.n	800504e <UART_SetConfig+0xd6>
 8004ffe:	4b9d      	ldr	r3, [pc, #628]	; (8005274 <UART_SetConfig+0x2fc>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	2203      	movs	r2, #3
 8005004:	4013      	ands	r3, r2
 8005006:	2b03      	cmp	r3, #3
 8005008:	d00d      	beq.n	8005026 <UART_SetConfig+0xae>
 800500a:	d81b      	bhi.n	8005044 <UART_SetConfig+0xcc>
 800500c:	2b02      	cmp	r3, #2
 800500e:	d014      	beq.n	800503a <UART_SetConfig+0xc2>
 8005010:	d818      	bhi.n	8005044 <UART_SetConfig+0xcc>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <UART_SetConfig+0xa4>
 8005016:	2b01      	cmp	r3, #1
 8005018:	d00a      	beq.n	8005030 <UART_SetConfig+0xb8>
 800501a:	e013      	b.n	8005044 <UART_SetConfig+0xcc>
 800501c:	231f      	movs	r3, #31
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e065      	b.n	80050f2 <UART_SetConfig+0x17a>
 8005026:	231f      	movs	r3, #31
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e060      	b.n	80050f2 <UART_SetConfig+0x17a>
 8005030:	231f      	movs	r3, #31
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	2204      	movs	r2, #4
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e05b      	b.n	80050f2 <UART_SetConfig+0x17a>
 800503a:	231f      	movs	r3, #31
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	2208      	movs	r2, #8
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e056      	b.n	80050f2 <UART_SetConfig+0x17a>
 8005044:	231f      	movs	r3, #31
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2210      	movs	r2, #16
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e051      	b.n	80050f2 <UART_SetConfig+0x17a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a89      	ldr	r2, [pc, #548]	; (8005278 <UART_SetConfig+0x300>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d134      	bne.n	80050c2 <UART_SetConfig+0x14a>
 8005058:	4b86      	ldr	r3, [pc, #536]	; (8005274 <UART_SetConfig+0x2fc>)
 800505a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505c:	23c0      	movs	r3, #192	; 0xc0
 800505e:	029b      	lsls	r3, r3, #10
 8005060:	4013      	ands	r3, r2
 8005062:	22c0      	movs	r2, #192	; 0xc0
 8005064:	0292      	lsls	r2, r2, #10
 8005066:	4293      	cmp	r3, r2
 8005068:	d017      	beq.n	800509a <UART_SetConfig+0x122>
 800506a:	22c0      	movs	r2, #192	; 0xc0
 800506c:	0292      	lsls	r2, r2, #10
 800506e:	4293      	cmp	r3, r2
 8005070:	d822      	bhi.n	80050b8 <UART_SetConfig+0x140>
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0292      	lsls	r2, r2, #10
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <UART_SetConfig+0x136>
 800507a:	2280      	movs	r2, #128	; 0x80
 800507c:	0292      	lsls	r2, r2, #10
 800507e:	4293      	cmp	r3, r2
 8005080:	d81a      	bhi.n	80050b8 <UART_SetConfig+0x140>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <UART_SetConfig+0x118>
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	0252      	lsls	r2, r2, #9
 800508a:	4293      	cmp	r3, r2
 800508c:	d00a      	beq.n	80050a4 <UART_SetConfig+0x12c>
 800508e:	e013      	b.n	80050b8 <UART_SetConfig+0x140>
 8005090:	231f      	movs	r3, #31
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e02b      	b.n	80050f2 <UART_SetConfig+0x17a>
 800509a:	231f      	movs	r3, #31
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	2202      	movs	r2, #2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e026      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050a4:	231f      	movs	r3, #31
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	2204      	movs	r2, #4
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e021      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050ae:	231f      	movs	r3, #31
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	2208      	movs	r2, #8
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e01c      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050b8:	231f      	movs	r3, #31
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2210      	movs	r2, #16
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e017      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6d      	ldr	r2, [pc, #436]	; (800527c <UART_SetConfig+0x304>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d104      	bne.n	80050d6 <UART_SetConfig+0x15e>
 80050cc:	231f      	movs	r3, #31
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a69      	ldr	r2, [pc, #420]	; (8005280 <UART_SetConfig+0x308>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d104      	bne.n	80050ea <UART_SetConfig+0x172>
 80050e0:	231f      	movs	r3, #31
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e003      	b.n	80050f2 <UART_SetConfig+0x17a>
 80050ea:	231f      	movs	r3, #31
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	2210      	movs	r2, #16
 80050f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d15d      	bne.n	80051ba <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80050fe:	231f      	movs	r3, #31
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d015      	beq.n	8005134 <UART_SetConfig+0x1bc>
 8005108:	dc18      	bgt.n	800513c <UART_SetConfig+0x1c4>
 800510a:	2b04      	cmp	r3, #4
 800510c:	d00d      	beq.n	800512a <UART_SetConfig+0x1b2>
 800510e:	dc15      	bgt.n	800513c <UART_SetConfig+0x1c4>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <UART_SetConfig+0x1a2>
 8005114:	2b02      	cmp	r3, #2
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0x1ac>
 8005118:	e010      	b.n	800513c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511a:	f7fe fad5 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 800511e:	0003      	movs	r3, r0
 8005120:	61bb      	str	r3, [r7, #24]
        break;
 8005122:	e012      	b.n	800514a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b57      	ldr	r3, [pc, #348]	; (8005284 <UART_SetConfig+0x30c>)
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e00f      	b.n	800514a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fe fa43 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 800512e:	0003      	movs	r3, r0
 8005130:	61bb      	str	r3, [r7, #24]
        break;
 8005132:	e00a      	b.n	800514a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	61bb      	str	r3, [r7, #24]
        break;
 800513a:	e006      	b.n	800514a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005140:	231e      	movs	r3, #30
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
        break;
 8005148:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d100      	bne.n	8005152 <UART_SetConfig+0x1da>
 8005150:	e07b      	b.n	800524a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	005a      	lsls	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	18d2      	adds	r2, r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0019      	movs	r1, r3
 8005164:	0010      	movs	r0, r2
 8005166:	f7fa ffcf 	bl	8000108 <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	b29b      	uxth	r3, r3
 800516e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b0f      	cmp	r3, #15
 8005174:	d91c      	bls.n	80051b0 <UART_SetConfig+0x238>
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	025b      	lsls	r3, r3, #9
 800517c:	429a      	cmp	r2, r3
 800517e:	d217      	bcs.n	80051b0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	b29a      	uxth	r2, r3
 8005184:	200e      	movs	r0, #14
 8005186:	183b      	adds	r3, r7, r0
 8005188:	210f      	movs	r1, #15
 800518a:	438a      	bics	r2, r1
 800518c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	2207      	movs	r2, #7
 8005196:	4013      	ands	r3, r2
 8005198:	b299      	uxth	r1, r3
 800519a:	183b      	adds	r3, r7, r0
 800519c:	183a      	adds	r2, r7, r0
 800519e:	8812      	ldrh	r2, [r2, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	183a      	adds	r2, r7, r0
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	e04c      	b.n	800524a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80051b0:	231e      	movs	r3, #30
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e047      	b.n	800524a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ba:	231f      	movs	r3, #31
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d015      	beq.n	80051f0 <UART_SetConfig+0x278>
 80051c4:	dc18      	bgt.n	80051f8 <UART_SetConfig+0x280>
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00d      	beq.n	80051e6 <UART_SetConfig+0x26e>
 80051ca:	dc15      	bgt.n	80051f8 <UART_SetConfig+0x280>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <UART_SetConfig+0x25e>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d005      	beq.n	80051e0 <UART_SetConfig+0x268>
 80051d4:	e010      	b.n	80051f8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7fe fa77 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 80051da:	0003      	movs	r3, r0
 80051dc:	61bb      	str	r3, [r7, #24]
        break;
 80051de:	e012      	b.n	8005206 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <UART_SetConfig+0x30c>)
 80051e2:	61bb      	str	r3, [r7, #24]
        break;
 80051e4:	e00f      	b.n	8005206 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe f9e5 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80051ea:	0003      	movs	r3, r0
 80051ec:	61bb      	str	r3, [r7, #24]
        break;
 80051ee:	e00a      	b.n	8005206 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	61bb      	str	r3, [r7, #24]
        break;
 80051f6:	e006      	b.n	8005206 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fc:	231e      	movs	r3, #30
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        break;
 8005204:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01e      	beq.n	800524a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	085a      	lsrs	r2, r3, #1
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	18d2      	adds	r2, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	0019      	movs	r1, r3
 800521c:	0010      	movs	r0, r2
 800521e:	f7fa ff73 	bl	8000108 <__udivsi3>
 8005222:	0003      	movs	r3, r0
 8005224:	b29b      	uxth	r3, r3
 8005226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d909      	bls.n	8005242 <UART_SetConfig+0x2ca>
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	025b      	lsls	r3, r3, #9
 8005234:	429a      	cmp	r2, r3
 8005236:	d204      	bcs.n	8005242 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e003      	b.n	800524a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005242:	231e      	movs	r3, #30
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	2201      	movs	r2, #1
 8005248:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005256:	231e      	movs	r3, #30
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	781b      	ldrb	r3, [r3, #0]
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b008      	add	sp, #32
 8005262:	bd80      	pop	{r7, pc}
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	ffffcfff 	.word	0xffffcfff
 800526c:	fffff4ff 	.word	0xfffff4ff
 8005270:	40013800 	.word	0x40013800
 8005274:	40021000 	.word	0x40021000
 8005278:	40004400 	.word	0x40004400
 800527c:	40004800 	.word	0x40004800
 8005280:	40004c00 	.word	0x40004c00
 8005284:	007a1200 	.word	0x007a1200

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2201      	movs	r2, #1
 8005296:	4013      	ands	r3, r2
 8005298:	d00b      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a4a      	ldr	r2, [pc, #296]	; (80053cc <UART_AdvFeatureConfig+0x144>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2202      	movs	r2, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4a43      	ldr	r2, [pc, #268]	; (80053d0 <UART_AdvFeatureConfig+0x148>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	2204      	movs	r2, #4
 80052da:	4013      	ands	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <UART_AdvFeatureConfig+0x14c>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	0019      	movs	r1, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2208      	movs	r2, #8
 80052fc:	4013      	ands	r3, r2
 80052fe:	d00b      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <UART_AdvFeatureConfig+0x150>)
 8005308:	4013      	ands	r3, r2
 800530a:	0019      	movs	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2210      	movs	r2, #16
 800531e:	4013      	ands	r3, r2
 8005320:	d00b      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a2c      	ldr	r2, [pc, #176]	; (80053dc <UART_AdvFeatureConfig+0x154>)
 800532a:	4013      	ands	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2220      	movs	r2, #32
 8005340:	4013      	ands	r3, r2
 8005342:	d00b      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <UART_AdvFeatureConfig+0x158>)
 800534c:	4013      	ands	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2240      	movs	r2, #64	; 0x40
 8005362:	4013      	ands	r3, r2
 8005364:	d01d      	beq.n	80053a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <UART_AdvFeatureConfig+0x15c>)
 800536e:	4013      	ands	r3, r2
 8005370:	0019      	movs	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	035b      	lsls	r3, r3, #13
 8005386:	429a      	cmp	r2, r3
 8005388:	d10b      	bne.n	80053a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <UART_AdvFeatureConfig+0x160>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	4013      	ands	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <UART_AdvFeatureConfig+0x164>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	fffdffff 	.word	0xfffdffff
 80053d0:	fffeffff 	.word	0xfffeffff
 80053d4:	fffbffff 	.word	0xfffbffff
 80053d8:	ffff7fff 	.word	0xffff7fff
 80053dc:	ffffefff 	.word	0xffffefff
 80053e0:	ffffdfff 	.word	0xffffdfff
 80053e4:	ffefffff 	.word	0xffefffff
 80053e8:	ff9fffff 	.word	0xff9fffff
 80053ec:	fff7ffff 	.word	0xfff7ffff

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	2100      	movs	r1, #0
 80053fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fd fa24 	bl	800284c <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2208      	movs	r2, #8
 8005410:	4013      	ands	r3, r2
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10c      	bne.n	8005430 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	0391      	lsls	r1, r2, #14
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <UART_CheckIdleState+0x8c>)
 8005420:	9200      	str	r2, [sp, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	f000 f82c 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 8005428:	1e03      	subs	r3, r0, #0
 800542a:	d001      	beq.n	8005430 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e021      	b.n	8005474 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2204      	movs	r2, #4
 8005438:	4013      	ands	r3, r2
 800543a:	2b04      	cmp	r3, #4
 800543c:	d10c      	bne.n	8005458 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2280      	movs	r2, #128	; 0x80
 8005442:	03d1      	lsls	r1, r2, #15
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <UART_CheckIdleState+0x8c>)
 8005448:	9200      	str	r2, [sp, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	f000 f818 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 8005450:	1e03      	subs	r3, r0, #0
 8005452:	d001      	beq.n	8005458 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e00d      	b.n	8005474 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2274      	movs	r2, #116	; 0x74
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b004      	add	sp, #16
 800547a:	bd80      	pop	{r7, pc}
 800547c:	01ffffff 	.word	0x01ffffff

08005480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b094      	sub	sp, #80	; 0x50
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005490:	e0a3      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005494:	3301      	adds	r3, #1
 8005496:	d100      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005498:	e09f      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fd f9d7 	bl	800284c <HAL_GetTick>
 800549e:	0002      	movs	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d13d      	bne.n	800552c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ba:	2301      	movs	r3, #1
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	494c      	ldr	r1, [pc, #304]	; (8005604 <UART_WaitOnFlagUntilTimeout+0x184>)
 80054d2:	400a      	ands	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e2:	f3ef 8310 	mrs	r3, PRIMASK
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
 80054ec:	2301      	movs	r3, #1
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	f383 8810 	msr	PRIMASK, r3
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2101      	movs	r1, #1
 8005504:	438a      	bics	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	f383 8810 	msr	PRIMASK, r3
}
 8005512:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2274      	movs	r2, #116	; 0x74
 8005524:	2100      	movs	r1, #0
 8005526:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e067      	b.n	80055fc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2204      	movs	r2, #4
 8005534:	4013      	ands	r3, r2
 8005536:	d050      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	401a      	ands	r2, r3
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	429a      	cmp	r2, r3
 800554a:	d146      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2280      	movs	r2, #128	; 0x80
 8005552:	0112      	lsls	r2, r2, #4
 8005554:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005556:	f3ef 8310 	mrs	r3, PRIMASK
 800555a:	613b      	str	r3, [r7, #16]
  return(result);
 800555c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f383 8810 	msr	PRIMASK, r3
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4923      	ldr	r1, [pc, #140]	; (8005604 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005578:	400a      	ands	r2, r1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005588:	f3ef 8310 	mrs	r3, PRIMASK
 800558c:	61fb      	str	r3, [r7, #28]
  return(result);
 800558e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
 8005592:	2301      	movs	r3, #1
 8005594:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f383 8810 	msr	PRIMASK, r3
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	438a      	bics	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	2120      	movs	r1, #32
 80055cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2274      	movs	r2, #116	; 0x74
 80055d2:	2100      	movs	r1, #0
 80055d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e010      	b.n	80055fc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	425a      	negs	r2, r3
 80055ea:	4153      	adcs	r3, r2
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	001a      	movs	r2, r3
 80055f0:	1dfb      	adds	r3, r7, #7
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d100      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x17a>
 80055f8:	e74b      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b014      	add	sp, #80	; 0x50
 8005602:	bd80      	pop	{r7, pc}
 8005604:	fffffe5f 	.word	0xfffffe5f

08005608 <memset>:
 8005608:	0003      	movs	r3, r0
 800560a:	1882      	adds	r2, r0, r2
 800560c:	4293      	cmp	r3, r2
 800560e:	d100      	bne.n	8005612 <memset+0xa>
 8005610:	4770      	bx	lr
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	e7f9      	b.n	800560c <memset+0x4>

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	2600      	movs	r6, #0
 800561c:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x38>)
 800561e:	4d0d      	ldr	r5, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	2600      	movs	r6, #0
 800562a:	f000 f819 	bl	8005660 <_init>
 800562e:	4c0a      	ldr	r4, [pc, #40]	; (8005658 <__libc_init_array+0x40>)
 8005630:	4d0a      	ldr	r5, [pc, #40]	; (800565c <__libc_init_array+0x44>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	00b3      	lsls	r3, r6, #2
 800563e:	58eb      	ldr	r3, [r5, r3]
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	00b3      	lsls	r3, r6, #2
 8005648:	58eb      	ldr	r3, [r5, r3]
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	080056f4 	.word	0x080056f4
 8005654:	080056f4 	.word	0x080056f4
 8005658:	080056f8 	.word	0x080056f8
 800565c:	080056f4 	.word	0x080056f4

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
