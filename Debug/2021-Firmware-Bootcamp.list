
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f24  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003fe4  08003fe4  00004fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004014  08004014  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004014  08004014  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004014  08004014  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800401c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08004028  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08004028  000060d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097d7  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a78  00000000  00000000  0000f80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00011288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00011d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018faa  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d624  00000000  00000000  0002b59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920ea  00000000  00000000  00038bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000cacec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000cd554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fcc 	.word	0x08003fcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003fcc 	.word	0x08003fcc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 ff0f 	bl	800104c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe75 	bl	8000f24 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fad2 	bl	80007ec <__aeabi_dsub>
 8000248:	f000 fe6c 	bl	8000f24 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	46de      	mov	lr, fp
 8000262:	464e      	mov	r6, r9
 8000264:	4645      	mov	r5, r8
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	001f      	movs	r7, r3
 800026a:	030b      	lsls	r3, r1, #12
 800026c:	0b1b      	lsrs	r3, r3, #12
 800026e:	0016      	movs	r6, r2
 8000270:	469a      	mov	sl, r3
 8000272:	0fca      	lsrs	r2, r1, #31
 8000274:	004b      	lsls	r3, r1, #1
 8000276:	0004      	movs	r4, r0
 8000278:	4693      	mov	fp, r2
 800027a:	b087      	sub	sp, #28
 800027c:	0d5b      	lsrs	r3, r3, #21
 800027e:	d100      	bne.n	8000282 <__aeabi_dmul+0x26>
 8000280:	e0d5      	b.n	800042e <__aeabi_dmul+0x1d2>
 8000282:	4abb      	ldr	r2, [pc, #748]	@ (8000570 <__aeabi_dmul+0x314>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d100      	bne.n	800028a <__aeabi_dmul+0x2e>
 8000288:	e0f8      	b.n	800047c <__aeabi_dmul+0x220>
 800028a:	4651      	mov	r1, sl
 800028c:	0f42      	lsrs	r2, r0, #29
 800028e:	00c9      	lsls	r1, r1, #3
 8000290:	430a      	orrs	r2, r1
 8000292:	2180      	movs	r1, #128	@ 0x80
 8000294:	0409      	lsls	r1, r1, #16
 8000296:	4311      	orrs	r1, r2
 8000298:	00c2      	lsls	r2, r0, #3
 800029a:	4691      	mov	r9, r2
 800029c:	4ab5      	ldr	r2, [pc, #724]	@ (8000574 <__aeabi_dmul+0x318>)
 800029e:	468a      	mov	sl, r1
 80002a0:	189d      	adds	r5, r3, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	4698      	mov	r8, r3
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	033c      	lsls	r4, r7, #12
 80002aa:	007b      	lsls	r3, r7, #1
 80002ac:	0ffa      	lsrs	r2, r7, #31
 80002ae:	0030      	movs	r0, r6
 80002b0:	0b24      	lsrs	r4, r4, #12
 80002b2:	0d5b      	lsrs	r3, r3, #21
 80002b4:	9200      	str	r2, [sp, #0]
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x5e>
 80002b8:	e096      	b.n	80003e8 <__aeabi_dmul+0x18c>
 80002ba:	4aad      	ldr	r2, [pc, #692]	@ (8000570 <__aeabi_dmul+0x314>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d031      	beq.n	8000324 <__aeabi_dmul+0xc8>
 80002c0:	0f72      	lsrs	r2, r6, #29
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	4322      	orrs	r2, r4
 80002c6:	2480      	movs	r4, #128	@ 0x80
 80002c8:	0424      	lsls	r4, r4, #16
 80002ca:	4314      	orrs	r4, r2
 80002cc:	4aa9      	ldr	r2, [pc, #676]	@ (8000574 <__aeabi_dmul+0x318>)
 80002ce:	00f0      	lsls	r0, r6, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	4463      	add	r3, ip
 80002d4:	195b      	adds	r3, r3, r5
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	9201      	str	r2, [sp, #4]
 80002da:	4642      	mov	r2, r8
 80002dc:	2600      	movs	r6, #0
 80002de:	2a0a      	cmp	r2, #10
 80002e0:	dc42      	bgt.n	8000368 <__aeabi_dmul+0x10c>
 80002e2:	465a      	mov	r2, fp
 80002e4:	9900      	ldr	r1, [sp, #0]
 80002e6:	404a      	eors	r2, r1
 80002e8:	4693      	mov	fp, r2
 80002ea:	4642      	mov	r2, r8
 80002ec:	2a02      	cmp	r2, #2
 80002ee:	dc32      	bgt.n	8000356 <__aeabi_dmul+0xfa>
 80002f0:	3a01      	subs	r2, #1
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	d900      	bls.n	80002f8 <__aeabi_dmul+0x9c>
 80002f6:	e149      	b.n	800058c <__aeabi_dmul+0x330>
 80002f8:	2e02      	cmp	r6, #2
 80002fa:	d100      	bne.n	80002fe <__aeabi_dmul+0xa2>
 80002fc:	e0ca      	b.n	8000494 <__aeabi_dmul+0x238>
 80002fe:	2e01      	cmp	r6, #1
 8000300:	d13d      	bne.n	800037e <__aeabi_dmul+0x122>
 8000302:	2300      	movs	r3, #0
 8000304:	2400      	movs	r4, #0
 8000306:	2200      	movs	r2, #0
 8000308:	0010      	movs	r0, r2
 800030a:	465a      	mov	r2, fp
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0019      	movs	r1, r3
 8000316:	b007      	add	sp, #28
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4b92      	ldr	r3, [pc, #584]	@ (8000570 <__aeabi_dmul+0x314>)
 8000326:	4326      	orrs	r6, r4
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0xd4>
 800032e:	e0bb      	b.n	80004a8 <__aeabi_dmul+0x24c>
 8000330:	2203      	movs	r2, #3
 8000332:	4641      	mov	r1, r8
 8000334:	4311      	orrs	r1, r2
 8000336:	465a      	mov	r2, fp
 8000338:	4688      	mov	r8, r1
 800033a:	9900      	ldr	r1, [sp, #0]
 800033c:	404a      	eors	r2, r1
 800033e:	2180      	movs	r1, #128	@ 0x80
 8000340:	0109      	lsls	r1, r1, #4
 8000342:	468c      	mov	ip, r1
 8000344:	0029      	movs	r1, r5
 8000346:	4461      	add	r1, ip
 8000348:	9101      	str	r1, [sp, #4]
 800034a:	4641      	mov	r1, r8
 800034c:	290a      	cmp	r1, #10
 800034e:	dd00      	ble.n	8000352 <__aeabi_dmul+0xf6>
 8000350:	e233      	b.n	80007ba <__aeabi_dmul+0x55e>
 8000352:	4693      	mov	fp, r2
 8000354:	2603      	movs	r6, #3
 8000356:	4642      	mov	r2, r8
 8000358:	2701      	movs	r7, #1
 800035a:	4097      	lsls	r7, r2
 800035c:	21a6      	movs	r1, #166	@ 0xa6
 800035e:	003a      	movs	r2, r7
 8000360:	00c9      	lsls	r1, r1, #3
 8000362:	400a      	ands	r2, r1
 8000364:	420f      	tst	r7, r1
 8000366:	d031      	beq.n	80003cc <__aeabi_dmul+0x170>
 8000368:	9e02      	ldr	r6, [sp, #8]
 800036a:	2e02      	cmp	r6, #2
 800036c:	d100      	bne.n	8000370 <__aeabi_dmul+0x114>
 800036e:	e235      	b.n	80007dc <__aeabi_dmul+0x580>
 8000370:	2e03      	cmp	r6, #3
 8000372:	d100      	bne.n	8000376 <__aeabi_dmul+0x11a>
 8000374:	e1d2      	b.n	800071c <__aeabi_dmul+0x4c0>
 8000376:	4654      	mov	r4, sl
 8000378:	4648      	mov	r0, r9
 800037a:	2e01      	cmp	r6, #1
 800037c:	d0c1      	beq.n	8000302 <__aeabi_dmul+0xa6>
 800037e:	9a01      	ldr	r2, [sp, #4]
 8000380:	4b7d      	ldr	r3, [pc, #500]	@ (8000578 <__aeabi_dmul+0x31c>)
 8000382:	4694      	mov	ip, r2
 8000384:	4463      	add	r3, ip
 8000386:	2b00      	cmp	r3, #0
 8000388:	dc00      	bgt.n	800038c <__aeabi_dmul+0x130>
 800038a:	e0c0      	b.n	800050e <__aeabi_dmul+0x2b2>
 800038c:	0742      	lsls	r2, r0, #29
 800038e:	d009      	beq.n	80003a4 <__aeabi_dmul+0x148>
 8000390:	220f      	movs	r2, #15
 8000392:	4002      	ands	r2, r0
 8000394:	2a04      	cmp	r2, #4
 8000396:	d005      	beq.n	80003a4 <__aeabi_dmul+0x148>
 8000398:	1d02      	adds	r2, r0, #4
 800039a:	4282      	cmp	r2, r0
 800039c:	4180      	sbcs	r0, r0
 800039e:	4240      	negs	r0, r0
 80003a0:	1824      	adds	r4, r4, r0
 80003a2:	0010      	movs	r0, r2
 80003a4:	01e2      	lsls	r2, r4, #7
 80003a6:	d506      	bpl.n	80003b6 <__aeabi_dmul+0x15a>
 80003a8:	4b74      	ldr	r3, [pc, #464]	@ (800057c <__aeabi_dmul+0x320>)
 80003aa:	9a01      	ldr	r2, [sp, #4]
 80003ac:	401c      	ands	r4, r3
 80003ae:	2380      	movs	r3, #128	@ 0x80
 80003b0:	4694      	mov	ip, r2
 80003b2:	00db      	lsls	r3, r3, #3
 80003b4:	4463      	add	r3, ip
 80003b6:	4a72      	ldr	r2, [pc, #456]	@ (8000580 <__aeabi_dmul+0x324>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	dc6b      	bgt.n	8000494 <__aeabi_dmul+0x238>
 80003bc:	0762      	lsls	r2, r4, #29
 80003be:	08c0      	lsrs	r0, r0, #3
 80003c0:	0264      	lsls	r4, r4, #9
 80003c2:	055b      	lsls	r3, r3, #21
 80003c4:	4302      	orrs	r2, r0
 80003c6:	0b24      	lsrs	r4, r4, #12
 80003c8:	0d5b      	lsrs	r3, r3, #21
 80003ca:	e79d      	b.n	8000308 <__aeabi_dmul+0xac>
 80003cc:	2190      	movs	r1, #144	@ 0x90
 80003ce:	0089      	lsls	r1, r1, #2
 80003d0:	420f      	tst	r7, r1
 80003d2:	d163      	bne.n	800049c <__aeabi_dmul+0x240>
 80003d4:	2288      	movs	r2, #136	@ 0x88
 80003d6:	423a      	tst	r2, r7
 80003d8:	d100      	bne.n	80003dc <__aeabi_dmul+0x180>
 80003da:	e0d7      	b.n	800058c <__aeabi_dmul+0x330>
 80003dc:	9b00      	ldr	r3, [sp, #0]
 80003de:	46a2      	mov	sl, r4
 80003e0:	469b      	mov	fp, r3
 80003e2:	4681      	mov	r9, r0
 80003e4:	9602      	str	r6, [sp, #8]
 80003e6:	e7bf      	b.n	8000368 <__aeabi_dmul+0x10c>
 80003e8:	0023      	movs	r3, r4
 80003ea:	4333      	orrs	r3, r6
 80003ec:	d100      	bne.n	80003f0 <__aeabi_dmul+0x194>
 80003ee:	e07f      	b.n	80004f0 <__aeabi_dmul+0x294>
 80003f0:	2c00      	cmp	r4, #0
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dmul+0x19a>
 80003f4:	e1ad      	b.n	8000752 <__aeabi_dmul+0x4f6>
 80003f6:	0020      	movs	r0, r4
 80003f8:	f000 fe32 	bl	8001060 <__clzsi2>
 80003fc:	0002      	movs	r2, r0
 80003fe:	0003      	movs	r3, r0
 8000400:	3a0b      	subs	r2, #11
 8000402:	201d      	movs	r0, #29
 8000404:	0019      	movs	r1, r3
 8000406:	1a82      	subs	r2, r0, r2
 8000408:	0030      	movs	r0, r6
 800040a:	3908      	subs	r1, #8
 800040c:	40d0      	lsrs	r0, r2
 800040e:	408c      	lsls	r4, r1
 8000410:	4304      	orrs	r4, r0
 8000412:	0030      	movs	r0, r6
 8000414:	4088      	lsls	r0, r1
 8000416:	4a5b      	ldr	r2, [pc, #364]	@ (8000584 <__aeabi_dmul+0x328>)
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	4694      	mov	ip, r2
 800041c:	4463      	add	r3, ip
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	4642      	mov	r2, r8
 8000424:	2600      	movs	r6, #0
 8000426:	2a0a      	cmp	r2, #10
 8000428:	dc00      	bgt.n	800042c <__aeabi_dmul+0x1d0>
 800042a:	e75a      	b.n	80002e2 <__aeabi_dmul+0x86>
 800042c:	e79c      	b.n	8000368 <__aeabi_dmul+0x10c>
 800042e:	4653      	mov	r3, sl
 8000430:	4303      	orrs	r3, r0
 8000432:	4699      	mov	r9, r3
 8000434:	d054      	beq.n	80004e0 <__aeabi_dmul+0x284>
 8000436:	4653      	mov	r3, sl
 8000438:	2b00      	cmp	r3, #0
 800043a:	d100      	bne.n	800043e <__aeabi_dmul+0x1e2>
 800043c:	e177      	b.n	800072e <__aeabi_dmul+0x4d2>
 800043e:	4650      	mov	r0, sl
 8000440:	f000 fe0e 	bl	8001060 <__clzsi2>
 8000444:	230b      	movs	r3, #11
 8000446:	425b      	negs	r3, r3
 8000448:	469c      	mov	ip, r3
 800044a:	0002      	movs	r2, r0
 800044c:	4484      	add	ip, r0
 800044e:	0011      	movs	r1, r2
 8000450:	4650      	mov	r0, sl
 8000452:	3908      	subs	r1, #8
 8000454:	4088      	lsls	r0, r1
 8000456:	231d      	movs	r3, #29
 8000458:	4680      	mov	r8, r0
 800045a:	4660      	mov	r0, ip
 800045c:	1a1b      	subs	r3, r3, r0
 800045e:	0020      	movs	r0, r4
 8000460:	40d8      	lsrs	r0, r3
 8000462:	0003      	movs	r3, r0
 8000464:	4640      	mov	r0, r8
 8000466:	4303      	orrs	r3, r0
 8000468:	469a      	mov	sl, r3
 800046a:	0023      	movs	r3, r4
 800046c:	408b      	lsls	r3, r1
 800046e:	4699      	mov	r9, r3
 8000470:	2300      	movs	r3, #0
 8000472:	4d44      	ldr	r5, [pc, #272]	@ (8000584 <__aeabi_dmul+0x328>)
 8000474:	4698      	mov	r8, r3
 8000476:	1aad      	subs	r5, r5, r2
 8000478:	9302      	str	r3, [sp, #8]
 800047a:	e715      	b.n	80002a8 <__aeabi_dmul+0x4c>
 800047c:	4652      	mov	r2, sl
 800047e:	4302      	orrs	r2, r0
 8000480:	4691      	mov	r9, r2
 8000482:	d126      	bne.n	80004d2 <__aeabi_dmul+0x276>
 8000484:	2200      	movs	r2, #0
 8000486:	001d      	movs	r5, r3
 8000488:	2302      	movs	r3, #2
 800048a:	4692      	mov	sl, r2
 800048c:	3208      	adds	r2, #8
 800048e:	4690      	mov	r8, r2
 8000490:	9302      	str	r3, [sp, #8]
 8000492:	e709      	b.n	80002a8 <__aeabi_dmul+0x4c>
 8000494:	2400      	movs	r4, #0
 8000496:	2200      	movs	r2, #0
 8000498:	4b35      	ldr	r3, [pc, #212]	@ (8000570 <__aeabi_dmul+0x314>)
 800049a:	e735      	b.n	8000308 <__aeabi_dmul+0xac>
 800049c:	2300      	movs	r3, #0
 800049e:	2480      	movs	r4, #128	@ 0x80
 80004a0:	469b      	mov	fp, r3
 80004a2:	0324      	lsls	r4, r4, #12
 80004a4:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <__aeabi_dmul+0x314>)
 80004a6:	e72f      	b.n	8000308 <__aeabi_dmul+0xac>
 80004a8:	2202      	movs	r2, #2
 80004aa:	4641      	mov	r1, r8
 80004ac:	4311      	orrs	r1, r2
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	0112      	lsls	r2, r2, #4
 80004b2:	4694      	mov	ip, r2
 80004b4:	002a      	movs	r2, r5
 80004b6:	4462      	add	r2, ip
 80004b8:	4688      	mov	r8, r1
 80004ba:	9201      	str	r2, [sp, #4]
 80004bc:	290a      	cmp	r1, #10
 80004be:	dd00      	ble.n	80004c2 <__aeabi_dmul+0x266>
 80004c0:	e752      	b.n	8000368 <__aeabi_dmul+0x10c>
 80004c2:	465a      	mov	r2, fp
 80004c4:	2000      	movs	r0, #0
 80004c6:	9900      	ldr	r1, [sp, #0]
 80004c8:	0004      	movs	r4, r0
 80004ca:	404a      	eors	r2, r1
 80004cc:	4693      	mov	fp, r2
 80004ce:	2602      	movs	r6, #2
 80004d0:	e70b      	b.n	80002ea <__aeabi_dmul+0x8e>
 80004d2:	220c      	movs	r2, #12
 80004d4:	001d      	movs	r5, r3
 80004d6:	2303      	movs	r3, #3
 80004d8:	4681      	mov	r9, r0
 80004da:	4690      	mov	r8, r2
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	e6e3      	b.n	80002a8 <__aeabi_dmul+0x4c>
 80004e0:	2300      	movs	r3, #0
 80004e2:	469a      	mov	sl, r3
 80004e4:	3304      	adds	r3, #4
 80004e6:	4698      	mov	r8, r3
 80004e8:	3b03      	subs	r3, #3
 80004ea:	2500      	movs	r5, #0
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	e6db      	b.n	80002a8 <__aeabi_dmul+0x4c>
 80004f0:	4642      	mov	r2, r8
 80004f2:	3301      	adds	r3, #1
 80004f4:	431a      	orrs	r2, r3
 80004f6:	002b      	movs	r3, r5
 80004f8:	4690      	mov	r8, r2
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	4642      	mov	r2, r8
 8000500:	2400      	movs	r4, #0
 8000502:	2000      	movs	r0, #0
 8000504:	2601      	movs	r6, #1
 8000506:	2a0a      	cmp	r2, #10
 8000508:	dc00      	bgt.n	800050c <__aeabi_dmul+0x2b0>
 800050a:	e6ea      	b.n	80002e2 <__aeabi_dmul+0x86>
 800050c:	e72c      	b.n	8000368 <__aeabi_dmul+0x10c>
 800050e:	2201      	movs	r2, #1
 8000510:	1ad2      	subs	r2, r2, r3
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dd00      	ble.n	8000518 <__aeabi_dmul+0x2bc>
 8000516:	e6f4      	b.n	8000302 <__aeabi_dmul+0xa6>
 8000518:	2a1f      	cmp	r2, #31
 800051a:	dc00      	bgt.n	800051e <__aeabi_dmul+0x2c2>
 800051c:	e12a      	b.n	8000774 <__aeabi_dmul+0x518>
 800051e:	211f      	movs	r1, #31
 8000520:	4249      	negs	r1, r1
 8000522:	1acb      	subs	r3, r1, r3
 8000524:	0021      	movs	r1, r4
 8000526:	40d9      	lsrs	r1, r3
 8000528:	000b      	movs	r3, r1
 800052a:	2a20      	cmp	r2, #32
 800052c:	d005      	beq.n	800053a <__aeabi_dmul+0x2de>
 800052e:	4a16      	ldr	r2, [pc, #88]	@ (8000588 <__aeabi_dmul+0x32c>)
 8000530:	9d01      	ldr	r5, [sp, #4]
 8000532:	4694      	mov	ip, r2
 8000534:	4465      	add	r5, ip
 8000536:	40ac      	lsls	r4, r5
 8000538:	4320      	orrs	r0, r4
 800053a:	1e42      	subs	r2, r0, #1
 800053c:	4190      	sbcs	r0, r2
 800053e:	4318      	orrs	r0, r3
 8000540:	2307      	movs	r3, #7
 8000542:	0019      	movs	r1, r3
 8000544:	2400      	movs	r4, #0
 8000546:	4001      	ands	r1, r0
 8000548:	4203      	tst	r3, r0
 800054a:	d00c      	beq.n	8000566 <__aeabi_dmul+0x30a>
 800054c:	230f      	movs	r3, #15
 800054e:	4003      	ands	r3, r0
 8000550:	2b04      	cmp	r3, #4
 8000552:	d100      	bne.n	8000556 <__aeabi_dmul+0x2fa>
 8000554:	e140      	b.n	80007d8 <__aeabi_dmul+0x57c>
 8000556:	1d03      	adds	r3, r0, #4
 8000558:	4283      	cmp	r3, r0
 800055a:	41a4      	sbcs	r4, r4
 800055c:	0018      	movs	r0, r3
 800055e:	4264      	negs	r4, r4
 8000560:	0761      	lsls	r1, r4, #29
 8000562:	0264      	lsls	r4, r4, #9
 8000564:	0b24      	lsrs	r4, r4, #12
 8000566:	08c2      	lsrs	r2, r0, #3
 8000568:	2300      	movs	r3, #0
 800056a:	430a      	orrs	r2, r1
 800056c:	e6cc      	b.n	8000308 <__aeabi_dmul+0xac>
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	000007ff 	.word	0x000007ff
 8000574:	fffffc01 	.word	0xfffffc01
 8000578:	000003ff 	.word	0x000003ff
 800057c:	feffffff 	.word	0xfeffffff
 8000580:	000007fe 	.word	0x000007fe
 8000584:	fffffc0d 	.word	0xfffffc0d
 8000588:	0000043e 	.word	0x0000043e
 800058c:	4649      	mov	r1, r9
 800058e:	464a      	mov	r2, r9
 8000590:	0409      	lsls	r1, r1, #16
 8000592:	0c09      	lsrs	r1, r1, #16
 8000594:	000d      	movs	r5, r1
 8000596:	0c16      	lsrs	r6, r2, #16
 8000598:	0c02      	lsrs	r2, r0, #16
 800059a:	0400      	lsls	r0, r0, #16
 800059c:	0c00      	lsrs	r0, r0, #16
 800059e:	4345      	muls	r5, r0
 80005a0:	46ac      	mov	ip, r5
 80005a2:	0005      	movs	r5, r0
 80005a4:	4375      	muls	r5, r6
 80005a6:	46a8      	mov	r8, r5
 80005a8:	0015      	movs	r5, r2
 80005aa:	000f      	movs	r7, r1
 80005ac:	4375      	muls	r5, r6
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9502      	str	r5, [sp, #8]
 80005b2:	002a      	movs	r2, r5
 80005b4:	9d00      	ldr	r5, [sp, #0]
 80005b6:	436f      	muls	r7, r5
 80005b8:	4665      	mov	r5, ip
 80005ba:	0c2d      	lsrs	r5, r5, #16
 80005bc:	46a9      	mov	r9, r5
 80005be:	4447      	add	r7, r8
 80005c0:	444f      	add	r7, r9
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d905      	bls.n	80005d2 <__aeabi_dmul+0x376>
 80005c6:	0015      	movs	r5, r2
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	0252      	lsls	r2, r2, #9
 80005cc:	4690      	mov	r8, r2
 80005ce:	4445      	add	r5, r8
 80005d0:	9502      	str	r5, [sp, #8]
 80005d2:	0c3d      	lsrs	r5, r7, #16
 80005d4:	9503      	str	r5, [sp, #12]
 80005d6:	4665      	mov	r5, ip
 80005d8:	042d      	lsls	r5, r5, #16
 80005da:	043f      	lsls	r7, r7, #16
 80005dc:	0c2d      	lsrs	r5, r5, #16
 80005de:	46ac      	mov	ip, r5
 80005e0:	003d      	movs	r5, r7
 80005e2:	4465      	add	r5, ip
 80005e4:	9504      	str	r5, [sp, #16]
 80005e6:	0c25      	lsrs	r5, r4, #16
 80005e8:	0424      	lsls	r4, r4, #16
 80005ea:	0c24      	lsrs	r4, r4, #16
 80005ec:	46ac      	mov	ip, r5
 80005ee:	0025      	movs	r5, r4
 80005f0:	4375      	muls	r5, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	4665      	mov	r5, ip
 80005f6:	000f      	movs	r7, r1
 80005f8:	4369      	muls	r1, r5
 80005fa:	4441      	add	r1, r8
 80005fc:	4689      	mov	r9, r1
 80005fe:	4367      	muls	r7, r4
 8000600:	0c39      	lsrs	r1, r7, #16
 8000602:	4449      	add	r1, r9
 8000604:	436e      	muls	r6, r5
 8000606:	4588      	cmp	r8, r1
 8000608:	d903      	bls.n	8000612 <__aeabi_dmul+0x3b6>
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	0252      	lsls	r2, r2, #9
 800060e:	4690      	mov	r8, r2
 8000610:	4446      	add	r6, r8
 8000612:	0c0d      	lsrs	r5, r1, #16
 8000614:	46a8      	mov	r8, r5
 8000616:	0035      	movs	r5, r6
 8000618:	4445      	add	r5, r8
 800061a:	9505      	str	r5, [sp, #20]
 800061c:	9d03      	ldr	r5, [sp, #12]
 800061e:	043f      	lsls	r7, r7, #16
 8000620:	46a8      	mov	r8, r5
 8000622:	0c3f      	lsrs	r7, r7, #16
 8000624:	0409      	lsls	r1, r1, #16
 8000626:	19c9      	adds	r1, r1, r7
 8000628:	4488      	add	r8, r1
 800062a:	4645      	mov	r5, r8
 800062c:	9503      	str	r5, [sp, #12]
 800062e:	4655      	mov	r5, sl
 8000630:	042e      	lsls	r6, r5, #16
 8000632:	0c36      	lsrs	r6, r6, #16
 8000634:	0c2f      	lsrs	r7, r5, #16
 8000636:	0035      	movs	r5, r6
 8000638:	4345      	muls	r5, r0
 800063a:	4378      	muls	r0, r7
 800063c:	4681      	mov	r9, r0
 800063e:	0038      	movs	r0, r7
 8000640:	46a8      	mov	r8, r5
 8000642:	0c2d      	lsrs	r5, r5, #16
 8000644:	46aa      	mov	sl, r5
 8000646:	9a00      	ldr	r2, [sp, #0]
 8000648:	4350      	muls	r0, r2
 800064a:	4372      	muls	r2, r6
 800064c:	444a      	add	r2, r9
 800064e:	4452      	add	r2, sl
 8000650:	4591      	cmp	r9, r2
 8000652:	d903      	bls.n	800065c <__aeabi_dmul+0x400>
 8000654:	2580      	movs	r5, #128	@ 0x80
 8000656:	026d      	lsls	r5, r5, #9
 8000658:	46a9      	mov	r9, r5
 800065a:	4448      	add	r0, r9
 800065c:	0c15      	lsrs	r5, r2, #16
 800065e:	46a9      	mov	r9, r5
 8000660:	4645      	mov	r5, r8
 8000662:	042d      	lsls	r5, r5, #16
 8000664:	0c2d      	lsrs	r5, r5, #16
 8000666:	46a8      	mov	r8, r5
 8000668:	4665      	mov	r5, ip
 800066a:	437d      	muls	r5, r7
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	4448      	add	r0, r9
 8000670:	4490      	add	r8, r2
 8000672:	46a9      	mov	r9, r5
 8000674:	0032      	movs	r2, r6
 8000676:	4665      	mov	r5, ip
 8000678:	4362      	muls	r2, r4
 800067a:	436e      	muls	r6, r5
 800067c:	437c      	muls	r4, r7
 800067e:	0c17      	lsrs	r7, r2, #16
 8000680:	1936      	adds	r6, r6, r4
 8000682:	19bf      	adds	r7, r7, r6
 8000684:	42bc      	cmp	r4, r7
 8000686:	d903      	bls.n	8000690 <__aeabi_dmul+0x434>
 8000688:	2480      	movs	r4, #128	@ 0x80
 800068a:	0264      	lsls	r4, r4, #9
 800068c:	46a4      	mov	ip, r4
 800068e:	44e1      	add	r9, ip
 8000690:	9c02      	ldr	r4, [sp, #8]
 8000692:	9e03      	ldr	r6, [sp, #12]
 8000694:	46a4      	mov	ip, r4
 8000696:	9d05      	ldr	r5, [sp, #20]
 8000698:	4466      	add	r6, ip
 800069a:	428e      	cmp	r6, r1
 800069c:	4189      	sbcs	r1, r1
 800069e:	46ac      	mov	ip, r5
 80006a0:	0412      	lsls	r2, r2, #16
 80006a2:	043c      	lsls	r4, r7, #16
 80006a4:	0c12      	lsrs	r2, r2, #16
 80006a6:	18a2      	adds	r2, r4, r2
 80006a8:	4462      	add	r2, ip
 80006aa:	4249      	negs	r1, r1
 80006ac:	1854      	adds	r4, r2, r1
 80006ae:	4446      	add	r6, r8
 80006b0:	46a4      	mov	ip, r4
 80006b2:	4546      	cmp	r6, r8
 80006b4:	41a4      	sbcs	r4, r4
 80006b6:	4682      	mov	sl, r0
 80006b8:	4264      	negs	r4, r4
 80006ba:	46a0      	mov	r8, r4
 80006bc:	42aa      	cmp	r2, r5
 80006be:	4192      	sbcs	r2, r2
 80006c0:	458c      	cmp	ip, r1
 80006c2:	4189      	sbcs	r1, r1
 80006c4:	44e2      	add	sl, ip
 80006c6:	44d0      	add	r8, sl
 80006c8:	4249      	negs	r1, r1
 80006ca:	4252      	negs	r2, r2
 80006cc:	430a      	orrs	r2, r1
 80006ce:	45a0      	cmp	r8, r4
 80006d0:	41a4      	sbcs	r4, r4
 80006d2:	4582      	cmp	sl, r0
 80006d4:	4189      	sbcs	r1, r1
 80006d6:	4264      	negs	r4, r4
 80006d8:	4249      	negs	r1, r1
 80006da:	430c      	orrs	r4, r1
 80006dc:	4641      	mov	r1, r8
 80006de:	0c3f      	lsrs	r7, r7, #16
 80006e0:	19d2      	adds	r2, r2, r7
 80006e2:	1912      	adds	r2, r2, r4
 80006e4:	0dcc      	lsrs	r4, r1, #23
 80006e6:	9904      	ldr	r1, [sp, #16]
 80006e8:	0270      	lsls	r0, r6, #9
 80006ea:	4308      	orrs	r0, r1
 80006ec:	1e41      	subs	r1, r0, #1
 80006ee:	4188      	sbcs	r0, r1
 80006f0:	4641      	mov	r1, r8
 80006f2:	444a      	add	r2, r9
 80006f4:	0df6      	lsrs	r6, r6, #23
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	4330      	orrs	r0, r6
 80006fa:	0249      	lsls	r1, r1, #9
 80006fc:	4314      	orrs	r4, r2
 80006fe:	4308      	orrs	r0, r1
 8000700:	01d2      	lsls	r2, r2, #7
 8000702:	d535      	bpl.n	8000770 <__aeabi_dmul+0x514>
 8000704:	2201      	movs	r2, #1
 8000706:	0843      	lsrs	r3, r0, #1
 8000708:	4002      	ands	r2, r0
 800070a:	4313      	orrs	r3, r2
 800070c:	07e0      	lsls	r0, r4, #31
 800070e:	4318      	orrs	r0, r3
 8000710:	0864      	lsrs	r4, r4, #1
 8000712:	e634      	b.n	800037e <__aeabi_dmul+0x122>
 8000714:	9b00      	ldr	r3, [sp, #0]
 8000716:	46a2      	mov	sl, r4
 8000718:	469b      	mov	fp, r3
 800071a:	4681      	mov	r9, r0
 800071c:	2480      	movs	r4, #128	@ 0x80
 800071e:	4653      	mov	r3, sl
 8000720:	0324      	lsls	r4, r4, #12
 8000722:	431c      	orrs	r4, r3
 8000724:	0324      	lsls	r4, r4, #12
 8000726:	464a      	mov	r2, r9
 8000728:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <__aeabi_dmul+0x588>)
 800072a:	0b24      	lsrs	r4, r4, #12
 800072c:	e5ec      	b.n	8000308 <__aeabi_dmul+0xac>
 800072e:	f000 fc97 	bl	8001060 <__clzsi2>
 8000732:	2315      	movs	r3, #21
 8000734:	469c      	mov	ip, r3
 8000736:	4484      	add	ip, r0
 8000738:	0002      	movs	r2, r0
 800073a:	4663      	mov	r3, ip
 800073c:	3220      	adds	r2, #32
 800073e:	2b1c      	cmp	r3, #28
 8000740:	dc00      	bgt.n	8000744 <__aeabi_dmul+0x4e8>
 8000742:	e684      	b.n	800044e <__aeabi_dmul+0x1f2>
 8000744:	2300      	movs	r3, #0
 8000746:	4699      	mov	r9, r3
 8000748:	0023      	movs	r3, r4
 800074a:	3808      	subs	r0, #8
 800074c:	4083      	lsls	r3, r0
 800074e:	469a      	mov	sl, r3
 8000750:	e68e      	b.n	8000470 <__aeabi_dmul+0x214>
 8000752:	f000 fc85 	bl	8001060 <__clzsi2>
 8000756:	0002      	movs	r2, r0
 8000758:	0003      	movs	r3, r0
 800075a:	3215      	adds	r2, #21
 800075c:	3320      	adds	r3, #32
 800075e:	2a1c      	cmp	r2, #28
 8000760:	dc00      	bgt.n	8000764 <__aeabi_dmul+0x508>
 8000762:	e64e      	b.n	8000402 <__aeabi_dmul+0x1a6>
 8000764:	0002      	movs	r2, r0
 8000766:	0034      	movs	r4, r6
 8000768:	3a08      	subs	r2, #8
 800076a:	2000      	movs	r0, #0
 800076c:	4094      	lsls	r4, r2
 800076e:	e652      	b.n	8000416 <__aeabi_dmul+0x1ba>
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	e604      	b.n	800037e <__aeabi_dmul+0x122>
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <__aeabi_dmul+0x58c>)
 8000776:	0021      	movs	r1, r4
 8000778:	469c      	mov	ip, r3
 800077a:	0003      	movs	r3, r0
 800077c:	9d01      	ldr	r5, [sp, #4]
 800077e:	40d3      	lsrs	r3, r2
 8000780:	4465      	add	r5, ip
 8000782:	40a9      	lsls	r1, r5
 8000784:	4319      	orrs	r1, r3
 8000786:	0003      	movs	r3, r0
 8000788:	40ab      	lsls	r3, r5
 800078a:	1e58      	subs	r0, r3, #1
 800078c:	4183      	sbcs	r3, r0
 800078e:	4319      	orrs	r1, r3
 8000790:	0008      	movs	r0, r1
 8000792:	40d4      	lsrs	r4, r2
 8000794:	074b      	lsls	r3, r1, #29
 8000796:	d009      	beq.n	80007ac <__aeabi_dmul+0x550>
 8000798:	230f      	movs	r3, #15
 800079a:	400b      	ands	r3, r1
 800079c:	2b04      	cmp	r3, #4
 800079e:	d005      	beq.n	80007ac <__aeabi_dmul+0x550>
 80007a0:	1d0b      	adds	r3, r1, #4
 80007a2:	428b      	cmp	r3, r1
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	4240      	negs	r0, r0
 80007a8:	1824      	adds	r4, r4, r0
 80007aa:	0018      	movs	r0, r3
 80007ac:	0223      	lsls	r3, r4, #8
 80007ae:	d400      	bmi.n	80007b2 <__aeabi_dmul+0x556>
 80007b0:	e6d6      	b.n	8000560 <__aeabi_dmul+0x304>
 80007b2:	2301      	movs	r3, #1
 80007b4:	2400      	movs	r4, #0
 80007b6:	2200      	movs	r2, #0
 80007b8:	e5a6      	b.n	8000308 <__aeabi_dmul+0xac>
 80007ba:	290f      	cmp	r1, #15
 80007bc:	d1aa      	bne.n	8000714 <__aeabi_dmul+0x4b8>
 80007be:	2380      	movs	r3, #128	@ 0x80
 80007c0:	4652      	mov	r2, sl
 80007c2:	031b      	lsls	r3, r3, #12
 80007c4:	421a      	tst	r2, r3
 80007c6:	d0a9      	beq.n	800071c <__aeabi_dmul+0x4c0>
 80007c8:	421c      	tst	r4, r3
 80007ca:	d1a7      	bne.n	800071c <__aeabi_dmul+0x4c0>
 80007cc:	431c      	orrs	r4, r3
 80007ce:	9b00      	ldr	r3, [sp, #0]
 80007d0:	0002      	movs	r2, r0
 80007d2:	469b      	mov	fp, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <__aeabi_dmul+0x588>)
 80007d6:	e597      	b.n	8000308 <__aeabi_dmul+0xac>
 80007d8:	2400      	movs	r4, #0
 80007da:	e6c1      	b.n	8000560 <__aeabi_dmul+0x304>
 80007dc:	2400      	movs	r4, #0
 80007de:	4b01      	ldr	r3, [pc, #4]	@ (80007e4 <__aeabi_dmul+0x588>)
 80007e0:	0022      	movs	r2, r4
 80007e2:	e591      	b.n	8000308 <__aeabi_dmul+0xac>
 80007e4:	000007ff 	.word	0x000007ff
 80007e8:	0000041e 	.word	0x0000041e

080007ec <__aeabi_dsub>:
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	464e      	mov	r6, r9
 80007f0:	4645      	mov	r5, r8
 80007f2:	46de      	mov	lr, fp
 80007f4:	4657      	mov	r7, sl
 80007f6:	b5e0      	push	{r5, r6, r7, lr}
 80007f8:	b085      	sub	sp, #20
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004f      	lsls	r7, r1, #1
 8000802:	0fce      	lsrs	r6, r1, #31
 8000804:	0a61      	lsrs	r1, r4, #9
 8000806:	9c00      	ldr	r4, [sp, #0]
 8000808:	46b0      	mov	r8, r6
 800080a:	0f64      	lsrs	r4, r4, #29
 800080c:	430c      	orrs	r4, r1
 800080e:	9900      	ldr	r1, [sp, #0]
 8000810:	0d7f      	lsrs	r7, r7, #21
 8000812:	00c8      	lsls	r0, r1, #3
 8000814:	0011      	movs	r1, r2
 8000816:	001a      	movs	r2, r3
 8000818:	031b      	lsls	r3, r3, #12
 800081a:	469c      	mov	ip, r3
 800081c:	9100      	str	r1, [sp, #0]
 800081e:	9201      	str	r2, [sp, #4]
 8000820:	0051      	lsls	r1, r2, #1
 8000822:	0d4b      	lsrs	r3, r1, #21
 8000824:	4699      	mov	r9, r3
 8000826:	9b01      	ldr	r3, [sp, #4]
 8000828:	9d00      	ldr	r5, [sp, #0]
 800082a:	0fd9      	lsrs	r1, r3, #31
 800082c:	4663      	mov	r3, ip
 800082e:	0f6a      	lsrs	r2, r5, #29
 8000830:	0a5b      	lsrs	r3, r3, #9
 8000832:	4313      	orrs	r3, r2
 8000834:	00ea      	lsls	r2, r5, #3
 8000836:	4694      	mov	ip, r2
 8000838:	4693      	mov	fp, r2
 800083a:	4ac1      	ldr	r2, [pc, #772]	@ (8000b40 <__aeabi_dsub+0x354>)
 800083c:	9003      	str	r0, [sp, #12]
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	4591      	cmp	r9, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dsub+0x5a>
 8000844:	e0cd      	b.n	80009e2 <__aeabi_dsub+0x1f6>
 8000846:	2501      	movs	r5, #1
 8000848:	4069      	eors	r1, r5
 800084a:	464d      	mov	r5, r9
 800084c:	1b7d      	subs	r5, r7, r5
 800084e:	46aa      	mov	sl, r5
 8000850:	428e      	cmp	r6, r1
 8000852:	d100      	bne.n	8000856 <__aeabi_dsub+0x6a>
 8000854:	e080      	b.n	8000958 <__aeabi_dsub+0x16c>
 8000856:	2d00      	cmp	r5, #0
 8000858:	dc00      	bgt.n	800085c <__aeabi_dsub+0x70>
 800085a:	e335      	b.n	8000ec8 <__aeabi_dsub+0x6dc>
 800085c:	4649      	mov	r1, r9
 800085e:	2900      	cmp	r1, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_dsub+0x78>
 8000862:	e0df      	b.n	8000a24 <__aeabi_dsub+0x238>
 8000864:	4297      	cmp	r7, r2
 8000866:	d100      	bne.n	800086a <__aeabi_dsub+0x7e>
 8000868:	e194      	b.n	8000b94 <__aeabi_dsub+0x3a8>
 800086a:	4652      	mov	r2, sl
 800086c:	2501      	movs	r5, #1
 800086e:	2a38      	cmp	r2, #56	@ 0x38
 8000870:	dc19      	bgt.n	80008a6 <__aeabi_dsub+0xba>
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	9b02      	ldr	r3, [sp, #8]
 8000876:	0412      	lsls	r2, r2, #16
 8000878:	4313      	orrs	r3, r2
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	4652      	mov	r2, sl
 800087e:	2a1f      	cmp	r2, #31
 8000880:	dd00      	ble.n	8000884 <__aeabi_dsub+0x98>
 8000882:	e1e3      	b.n	8000c4c <__aeabi_dsub+0x460>
 8000884:	4653      	mov	r3, sl
 8000886:	2220      	movs	r2, #32
 8000888:	4661      	mov	r1, ip
 800088a:	9d02      	ldr	r5, [sp, #8]
 800088c:	1ad2      	subs	r2, r2, r3
 800088e:	4095      	lsls	r5, r2
 8000890:	40d9      	lsrs	r1, r3
 8000892:	430d      	orrs	r5, r1
 8000894:	4661      	mov	r1, ip
 8000896:	4091      	lsls	r1, r2
 8000898:	000a      	movs	r2, r1
 800089a:	1e51      	subs	r1, r2, #1
 800089c:	418a      	sbcs	r2, r1
 800089e:	4315      	orrs	r5, r2
 80008a0:	9a02      	ldr	r2, [sp, #8]
 80008a2:	40da      	lsrs	r2, r3
 80008a4:	1aa4      	subs	r4, r4, r2
 80008a6:	1b45      	subs	r5, r0, r5
 80008a8:	42a8      	cmp	r0, r5
 80008aa:	4180      	sbcs	r0, r0
 80008ac:	4240      	negs	r0, r0
 80008ae:	1a24      	subs	r4, r4, r0
 80008b0:	0223      	lsls	r3, r4, #8
 80008b2:	d400      	bmi.n	80008b6 <__aeabi_dsub+0xca>
 80008b4:	e13d      	b.n	8000b32 <__aeabi_dsub+0x346>
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	0a64      	lsrs	r4, r4, #9
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dsub+0xd4>
 80008be:	e147      	b.n	8000b50 <__aeabi_dsub+0x364>
 80008c0:	0020      	movs	r0, r4
 80008c2:	f000 fbcd 	bl	8001060 <__clzsi2>
 80008c6:	0003      	movs	r3, r0
 80008c8:	3b08      	subs	r3, #8
 80008ca:	2120      	movs	r1, #32
 80008cc:	0028      	movs	r0, r5
 80008ce:	1aca      	subs	r2, r1, r3
 80008d0:	40d0      	lsrs	r0, r2
 80008d2:	409c      	lsls	r4, r3
 80008d4:	0002      	movs	r2, r0
 80008d6:	409d      	lsls	r5, r3
 80008d8:	4322      	orrs	r2, r4
 80008da:	429f      	cmp	r7, r3
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dsub+0xf4>
 80008de:	e177      	b.n	8000bd0 <__aeabi_dsub+0x3e4>
 80008e0:	1bd8      	subs	r0, r3, r7
 80008e2:	3001      	adds	r0, #1
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	002c      	movs	r4, r5
 80008e8:	408d      	lsls	r5, r1
 80008ea:	40c4      	lsrs	r4, r0
 80008ec:	1e6b      	subs	r3, r5, #1
 80008ee:	419d      	sbcs	r5, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	40c2      	lsrs	r2, r0
 80008f4:	408b      	lsls	r3, r1
 80008f6:	4325      	orrs	r5, r4
 80008f8:	2700      	movs	r7, #0
 80008fa:	0014      	movs	r4, r2
 80008fc:	431d      	orrs	r5, r3
 80008fe:	076b      	lsls	r3, r5, #29
 8000900:	d009      	beq.n	8000916 <__aeabi_dsub+0x12a>
 8000902:	230f      	movs	r3, #15
 8000904:	402b      	ands	r3, r5
 8000906:	2b04      	cmp	r3, #4
 8000908:	d005      	beq.n	8000916 <__aeabi_dsub+0x12a>
 800090a:	1d2b      	adds	r3, r5, #4
 800090c:	42ab      	cmp	r3, r5
 800090e:	41ad      	sbcs	r5, r5
 8000910:	426d      	negs	r5, r5
 8000912:	1964      	adds	r4, r4, r5
 8000914:	001d      	movs	r5, r3
 8000916:	0223      	lsls	r3, r4, #8
 8000918:	d400      	bmi.n	800091c <__aeabi_dsub+0x130>
 800091a:	e140      	b.n	8000b9e <__aeabi_dsub+0x3b2>
 800091c:	4a88      	ldr	r2, [pc, #544]	@ (8000b40 <__aeabi_dsub+0x354>)
 800091e:	3701      	adds	r7, #1
 8000920:	4297      	cmp	r7, r2
 8000922:	d100      	bne.n	8000926 <__aeabi_dsub+0x13a>
 8000924:	e101      	b.n	8000b2a <__aeabi_dsub+0x33e>
 8000926:	2601      	movs	r6, #1
 8000928:	4643      	mov	r3, r8
 800092a:	4986      	ldr	r1, [pc, #536]	@ (8000b44 <__aeabi_dsub+0x358>)
 800092c:	08ed      	lsrs	r5, r5, #3
 800092e:	4021      	ands	r1, r4
 8000930:	074a      	lsls	r2, r1, #29
 8000932:	432a      	orrs	r2, r5
 8000934:	057c      	lsls	r4, r7, #21
 8000936:	024d      	lsls	r5, r1, #9
 8000938:	0b2d      	lsrs	r5, r5, #12
 800093a:	0d64      	lsrs	r4, r4, #21
 800093c:	401e      	ands	r6, r3
 800093e:	0524      	lsls	r4, r4, #20
 8000940:	432c      	orrs	r4, r5
 8000942:	07f6      	lsls	r6, r6, #31
 8000944:	4334      	orrs	r4, r6
 8000946:	0010      	movs	r0, r2
 8000948:	0021      	movs	r1, r4
 800094a:	b005      	add	sp, #20
 800094c:	bcf0      	pop	{r4, r5, r6, r7}
 800094e:	46bb      	mov	fp, r7
 8000950:	46b2      	mov	sl, r6
 8000952:	46a9      	mov	r9, r5
 8000954:	46a0      	mov	r8, r4
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	2d00      	cmp	r5, #0
 800095a:	dc00      	bgt.n	800095e <__aeabi_dsub+0x172>
 800095c:	e2d0      	b.n	8000f00 <__aeabi_dsub+0x714>
 800095e:	4649      	mov	r1, r9
 8000960:	2900      	cmp	r1, #0
 8000962:	d000      	beq.n	8000966 <__aeabi_dsub+0x17a>
 8000964:	e0d4      	b.n	8000b10 <__aeabi_dsub+0x324>
 8000966:	4661      	mov	r1, ip
 8000968:	9b02      	ldr	r3, [sp, #8]
 800096a:	4319      	orrs	r1, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dsub+0x184>
 800096e:	e12b      	b.n	8000bc8 <__aeabi_dsub+0x3dc>
 8000970:	1e69      	subs	r1, r5, #1
 8000972:	2d01      	cmp	r5, #1
 8000974:	d100      	bne.n	8000978 <__aeabi_dsub+0x18c>
 8000976:	e1d9      	b.n	8000d2c <__aeabi_dsub+0x540>
 8000978:	4295      	cmp	r5, r2
 800097a:	d100      	bne.n	800097e <__aeabi_dsub+0x192>
 800097c:	e10a      	b.n	8000b94 <__aeabi_dsub+0x3a8>
 800097e:	2501      	movs	r5, #1
 8000980:	2938      	cmp	r1, #56	@ 0x38
 8000982:	dc17      	bgt.n	80009b4 <__aeabi_dsub+0x1c8>
 8000984:	468a      	mov	sl, r1
 8000986:	4653      	mov	r3, sl
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dd00      	ble.n	800098e <__aeabi_dsub+0x1a2>
 800098c:	e1e7      	b.n	8000d5e <__aeabi_dsub+0x572>
 800098e:	2220      	movs	r2, #32
 8000990:	1ad2      	subs	r2, r2, r3
 8000992:	9b02      	ldr	r3, [sp, #8]
 8000994:	4661      	mov	r1, ip
 8000996:	4093      	lsls	r3, r2
 8000998:	001d      	movs	r5, r3
 800099a:	4653      	mov	r3, sl
 800099c:	40d9      	lsrs	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	4093      	lsls	r3, r2
 80009a2:	001a      	movs	r2, r3
 80009a4:	430d      	orrs	r5, r1
 80009a6:	1e51      	subs	r1, r2, #1
 80009a8:	418a      	sbcs	r2, r1
 80009aa:	4653      	mov	r3, sl
 80009ac:	4315      	orrs	r5, r2
 80009ae:	9a02      	ldr	r2, [sp, #8]
 80009b0:	40da      	lsrs	r2, r3
 80009b2:	18a4      	adds	r4, r4, r2
 80009b4:	182d      	adds	r5, r5, r0
 80009b6:	4285      	cmp	r5, r0
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	4240      	negs	r0, r0
 80009bc:	1824      	adds	r4, r4, r0
 80009be:	0223      	lsls	r3, r4, #8
 80009c0:	d400      	bmi.n	80009c4 <__aeabi_dsub+0x1d8>
 80009c2:	e0b6      	b.n	8000b32 <__aeabi_dsub+0x346>
 80009c4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b40 <__aeabi_dsub+0x354>)
 80009c6:	3701      	adds	r7, #1
 80009c8:	429f      	cmp	r7, r3
 80009ca:	d100      	bne.n	80009ce <__aeabi_dsub+0x1e2>
 80009cc:	e0ad      	b.n	8000b2a <__aeabi_dsub+0x33e>
 80009ce:	2101      	movs	r1, #1
 80009d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000b44 <__aeabi_dsub+0x358>)
 80009d2:	086a      	lsrs	r2, r5, #1
 80009d4:	401c      	ands	r4, r3
 80009d6:	4029      	ands	r1, r5
 80009d8:	430a      	orrs	r2, r1
 80009da:	07e5      	lsls	r5, r4, #31
 80009dc:	4315      	orrs	r5, r2
 80009de:	0864      	lsrs	r4, r4, #1
 80009e0:	e78d      	b.n	80008fe <__aeabi_dsub+0x112>
 80009e2:	4a59      	ldr	r2, [pc, #356]	@ (8000b48 <__aeabi_dsub+0x35c>)
 80009e4:	9b02      	ldr	r3, [sp, #8]
 80009e6:	4692      	mov	sl, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	44ba      	add	sl, r7
 80009ec:	431a      	orrs	r2, r3
 80009ee:	d02c      	beq.n	8000a4a <__aeabi_dsub+0x25e>
 80009f0:	428e      	cmp	r6, r1
 80009f2:	d02e      	beq.n	8000a52 <__aeabi_dsub+0x266>
 80009f4:	4652      	mov	r2, sl
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d060      	beq.n	8000abc <__aeabi_dsub+0x2d0>
 80009fa:	2f00      	cmp	r7, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dsub+0x214>
 80009fe:	e0db      	b.n	8000bb8 <__aeabi_dsub+0x3cc>
 8000a00:	4663      	mov	r3, ip
 8000a02:	000e      	movs	r6, r1
 8000a04:	9c02      	ldr	r4, [sp, #8]
 8000a06:	08d8      	lsrs	r0, r3, #3
 8000a08:	0762      	lsls	r2, r4, #29
 8000a0a:	4302      	orrs	r2, r0
 8000a0c:	08e4      	lsrs	r4, r4, #3
 8000a0e:	0013      	movs	r3, r2
 8000a10:	4323      	orrs	r3, r4
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dsub+0x22a>
 8000a14:	e254      	b.n	8000ec0 <__aeabi_dsub+0x6d4>
 8000a16:	2580      	movs	r5, #128	@ 0x80
 8000a18:	032d      	lsls	r5, r5, #12
 8000a1a:	4325      	orrs	r5, r4
 8000a1c:	032d      	lsls	r5, r5, #12
 8000a1e:	4c48      	ldr	r4, [pc, #288]	@ (8000b40 <__aeabi_dsub+0x354>)
 8000a20:	0b2d      	lsrs	r5, r5, #12
 8000a22:	e78c      	b.n	800093e <__aeabi_dsub+0x152>
 8000a24:	4661      	mov	r1, ip
 8000a26:	9b02      	ldr	r3, [sp, #8]
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dsub+0x242>
 8000a2c:	e0cc      	b.n	8000bc8 <__aeabi_dsub+0x3dc>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	3901      	subs	r1, #1
 8000a32:	2d01      	cmp	r5, #1
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x24c>
 8000a36:	e188      	b.n	8000d4a <__aeabi_dsub+0x55e>
 8000a38:	4295      	cmp	r5, r2
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x252>
 8000a3c:	e0aa      	b.n	8000b94 <__aeabi_dsub+0x3a8>
 8000a3e:	2501      	movs	r5, #1
 8000a40:	2938      	cmp	r1, #56	@ 0x38
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_dsub+0x25a>
 8000a44:	e72f      	b.n	80008a6 <__aeabi_dsub+0xba>
 8000a46:	468a      	mov	sl, r1
 8000a48:	e718      	b.n	800087c <__aeabi_dsub+0x90>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4051      	eors	r1, r2
 8000a4e:	428e      	cmp	r6, r1
 8000a50:	d1d0      	bne.n	80009f4 <__aeabi_dsub+0x208>
 8000a52:	4653      	mov	r3, sl
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dsub+0x26e>
 8000a58:	e0be      	b.n	8000bd8 <__aeabi_dsub+0x3ec>
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dsub+0x274>
 8000a5e:	e138      	b.n	8000cd2 <__aeabi_dsub+0x4e6>
 8000a60:	46ca      	mov	sl, r9
 8000a62:	0022      	movs	r2, r4
 8000a64:	4302      	orrs	r2, r0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dsub+0x27e>
 8000a68:	e1e2      	b.n	8000e30 <__aeabi_dsub+0x644>
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	1e59      	subs	r1, r3, #1
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dsub+0x288>
 8000a72:	e20d      	b.n	8000e90 <__aeabi_dsub+0x6a4>
 8000a74:	4a32      	ldr	r2, [pc, #200]	@ (8000b40 <__aeabi_dsub+0x354>)
 8000a76:	4592      	cmp	sl, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dsub+0x290>
 8000a7a:	e1d2      	b.n	8000e22 <__aeabi_dsub+0x636>
 8000a7c:	2701      	movs	r7, #1
 8000a7e:	2938      	cmp	r1, #56	@ 0x38
 8000a80:	dc13      	bgt.n	8000aaa <__aeabi_dsub+0x2be>
 8000a82:	291f      	cmp	r1, #31
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_dsub+0x29c>
 8000a86:	e1ee      	b.n	8000e66 <__aeabi_dsub+0x67a>
 8000a88:	2220      	movs	r2, #32
 8000a8a:	9b02      	ldr	r3, [sp, #8]
 8000a8c:	1a52      	subs	r2, r2, r1
 8000a8e:	0025      	movs	r5, r4
 8000a90:	0007      	movs	r7, r0
 8000a92:	469a      	mov	sl, r3
 8000a94:	40cc      	lsrs	r4, r1
 8000a96:	4090      	lsls	r0, r2
 8000a98:	4095      	lsls	r5, r2
 8000a9a:	40cf      	lsrs	r7, r1
 8000a9c:	44a2      	add	sl, r4
 8000a9e:	1e42      	subs	r2, r0, #1
 8000aa0:	4190      	sbcs	r0, r2
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	432f      	orrs	r7, r5
 8000aa6:	4307      	orrs	r7, r0
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	003d      	movs	r5, r7
 8000aac:	4465      	add	r5, ip
 8000aae:	4565      	cmp	r5, ip
 8000ab0:	4192      	sbcs	r2, r2
 8000ab2:	9b02      	ldr	r3, [sp, #8]
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	18d4      	adds	r4, r2, r3
 8000aba:	e780      	b.n	80009be <__aeabi_dsub+0x1d2>
 8000abc:	4a23      	ldr	r2, [pc, #140]	@ (8000b4c <__aeabi_dsub+0x360>)
 8000abe:	1c7d      	adds	r5, r7, #1
 8000ac0:	4215      	tst	r5, r2
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dsub+0x2da>
 8000ac4:	e0aa      	b.n	8000c1c <__aeabi_dsub+0x430>
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	0025      	movs	r5, r4
 8000aca:	9b02      	ldr	r3, [sp, #8]
 8000acc:	4305      	orrs	r5, r0
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	2f00      	cmp	r7, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dsub+0x2ea>
 8000ad4:	e0f5      	b.n	8000cc2 <__aeabi_dsub+0x4d6>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x2f0>
 8000ada:	e16b      	b.n	8000db4 <__aeabi_dsub+0x5c8>
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dsub+0x2f6>
 8000ae0:	e152      	b.n	8000d88 <__aeabi_dsub+0x59c>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	1ac5      	subs	r5, r0, r3
 8000ae6:	9b02      	ldr	r3, [sp, #8]
 8000ae8:	1ae2      	subs	r2, r4, r3
 8000aea:	42a8      	cmp	r0, r5
 8000aec:	419b      	sbcs	r3, r3
 8000aee:	425b      	negs	r3, r3
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	021a      	lsls	r2, r3, #8
 8000af4:	d400      	bmi.n	8000af8 <__aeabi_dsub+0x30c>
 8000af6:	e1d5      	b.n	8000ea4 <__aeabi_dsub+0x6b8>
 8000af8:	4663      	mov	r3, ip
 8000afa:	1a1d      	subs	r5, r3, r0
 8000afc:	45ac      	cmp	ip, r5
 8000afe:	4192      	sbcs	r2, r2
 8000b00:	2601      	movs	r6, #1
 8000b02:	9b02      	ldr	r3, [sp, #8]
 8000b04:	4252      	negs	r2, r2
 8000b06:	1b1c      	subs	r4, r3, r4
 8000b08:	4688      	mov	r8, r1
 8000b0a:	1aa4      	subs	r4, r4, r2
 8000b0c:	400e      	ands	r6, r1
 8000b0e:	e6f6      	b.n	80008fe <__aeabi_dsub+0x112>
 8000b10:	4297      	cmp	r7, r2
 8000b12:	d03f      	beq.n	8000b94 <__aeabi_dsub+0x3a8>
 8000b14:	4652      	mov	r2, sl
 8000b16:	2501      	movs	r5, #1
 8000b18:	2a38      	cmp	r2, #56	@ 0x38
 8000b1a:	dd00      	ble.n	8000b1e <__aeabi_dsub+0x332>
 8000b1c:	e74a      	b.n	80009b4 <__aeabi_dsub+0x1c8>
 8000b1e:	2280      	movs	r2, #128	@ 0x80
 8000b20:	9b02      	ldr	r3, [sp, #8]
 8000b22:	0412      	lsls	r2, r2, #16
 8000b24:	4313      	orrs	r3, r2
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	e72d      	b.n	8000986 <__aeabi_dsub+0x19a>
 8000b2a:	003c      	movs	r4, r7
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	e705      	b.n	800093e <__aeabi_dsub+0x152>
 8000b32:	2307      	movs	r3, #7
 8000b34:	402b      	ands	r3, r5
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b3a:	e6e2      	b.n	8000902 <__aeabi_dsub+0x116>
 8000b3c:	e06b      	b.n	8000c16 <__aeabi_dsub+0x42a>
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	000007ff 	.word	0x000007ff
 8000b44:	ff7fffff 	.word	0xff7fffff
 8000b48:	fffff801 	.word	0xfffff801
 8000b4c:	000007fe 	.word	0x000007fe
 8000b50:	0028      	movs	r0, r5
 8000b52:	f000 fa85 	bl	8001060 <__clzsi2>
 8000b56:	0003      	movs	r3, r0
 8000b58:	3318      	adds	r3, #24
 8000b5a:	2b1f      	cmp	r3, #31
 8000b5c:	dc00      	bgt.n	8000b60 <__aeabi_dsub+0x374>
 8000b5e:	e6b4      	b.n	80008ca <__aeabi_dsub+0xde>
 8000b60:	002a      	movs	r2, r5
 8000b62:	3808      	subs	r0, #8
 8000b64:	4082      	lsls	r2, r0
 8000b66:	429f      	cmp	r7, r3
 8000b68:	dd00      	ble.n	8000b6c <__aeabi_dsub+0x380>
 8000b6a:	e0b9      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	1c58      	adds	r0, r3, #1
 8000b70:	281f      	cmp	r0, #31
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_dsub+0x38a>
 8000b74:	e1a0      	b.n	8000eb8 <__aeabi_dsub+0x6cc>
 8000b76:	0015      	movs	r5, r2
 8000b78:	3b1f      	subs	r3, #31
 8000b7a:	40dd      	lsrs	r5, r3
 8000b7c:	2820      	cmp	r0, #32
 8000b7e:	d005      	beq.n	8000b8c <__aeabi_dsub+0x3a0>
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	1a1b      	subs	r3, r3, r0
 8000b84:	409a      	lsls	r2, r3
 8000b86:	1e53      	subs	r3, r2, #1
 8000b88:	419a      	sbcs	r2, r3
 8000b8a:	4315      	orrs	r5, r2
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	2700      	movs	r7, #0
 8000b90:	402b      	ands	r3, r5
 8000b92:	e7d0      	b.n	8000b36 <__aeabi_dsub+0x34a>
 8000b94:	08c0      	lsrs	r0, r0, #3
 8000b96:	0762      	lsls	r2, r4, #29
 8000b98:	4302      	orrs	r2, r0
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e737      	b.n	8000a0e <__aeabi_dsub+0x222>
 8000b9e:	08ea      	lsrs	r2, r5, #3
 8000ba0:	0763      	lsls	r3, r4, #29
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	4bd3      	ldr	r3, [pc, #844]	@ (8000ef4 <__aeabi_dsub+0x708>)
 8000ba6:	08e4      	lsrs	r4, r4, #3
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	d100      	bne.n	8000bae <__aeabi_dsub+0x3c2>
 8000bac:	e72f      	b.n	8000a0e <__aeabi_dsub+0x222>
 8000bae:	0324      	lsls	r4, r4, #12
 8000bb0:	0b25      	lsrs	r5, r4, #12
 8000bb2:	057c      	lsls	r4, r7, #21
 8000bb4:	0d64      	lsrs	r4, r4, #21
 8000bb6:	e6c2      	b.n	800093e <__aeabi_dsub+0x152>
 8000bb8:	46ca      	mov	sl, r9
 8000bba:	0022      	movs	r2, r4
 8000bbc:	4302      	orrs	r2, r0
 8000bbe:	d158      	bne.n	8000c72 <__aeabi_dsub+0x486>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	000e      	movs	r6, r1
 8000bc4:	9c02      	ldr	r4, [sp, #8]
 8000bc6:	9303      	str	r3, [sp, #12]
 8000bc8:	9b03      	ldr	r3, [sp, #12]
 8000bca:	4657      	mov	r7, sl
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	e7e7      	b.n	8000ba0 <__aeabi_dsub+0x3b4>
 8000bd0:	4cc9      	ldr	r4, [pc, #804]	@ (8000ef8 <__aeabi_dsub+0x70c>)
 8000bd2:	1aff      	subs	r7, r7, r3
 8000bd4:	4014      	ands	r4, r2
 8000bd6:	e692      	b.n	80008fe <__aeabi_dsub+0x112>
 8000bd8:	4dc8      	ldr	r5, [pc, #800]	@ (8000efc <__aeabi_dsub+0x710>)
 8000bda:	1c7a      	adds	r2, r7, #1
 8000bdc:	422a      	tst	r2, r5
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dsub+0x3f6>
 8000be0:	e084      	b.n	8000cec <__aeabi_dsub+0x500>
 8000be2:	0022      	movs	r2, r4
 8000be4:	4302      	orrs	r2, r0
 8000be6:	2f00      	cmp	r7, #0
 8000be8:	d000      	beq.n	8000bec <__aeabi_dsub+0x400>
 8000bea:	e0ef      	b.n	8000dcc <__aeabi_dsub+0x5e0>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dsub+0x406>
 8000bf0:	e0e5      	b.n	8000dbe <__aeabi_dsub+0x5d2>
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	9902      	ldr	r1, [sp, #8]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dsub+0x410>
 8000bfa:	e0c5      	b.n	8000d88 <__aeabi_dsub+0x59c>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	18c5      	adds	r5, r0, r3
 8000c00:	468c      	mov	ip, r1
 8000c02:	4285      	cmp	r5, r0
 8000c04:	4180      	sbcs	r0, r0
 8000c06:	4464      	add	r4, ip
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1824      	adds	r4, r4, r0
 8000c0c:	0223      	lsls	r3, r4, #8
 8000c0e:	d502      	bpl.n	8000c16 <__aeabi_dsub+0x42a>
 8000c10:	4bb9      	ldr	r3, [pc, #740]	@ (8000ef8 <__aeabi_dsub+0x70c>)
 8000c12:	3701      	adds	r7, #1
 8000c14:	401c      	ands	r4, r3
 8000c16:	46ba      	mov	sl, r7
 8000c18:	9503      	str	r5, [sp, #12]
 8000c1a:	e7d5      	b.n	8000bc8 <__aeabi_dsub+0x3dc>
 8000c1c:	4662      	mov	r2, ip
 8000c1e:	1a85      	subs	r5, r0, r2
 8000c20:	42a8      	cmp	r0, r5
 8000c22:	4192      	sbcs	r2, r2
 8000c24:	4252      	negs	r2, r2
 8000c26:	4691      	mov	r9, r2
 8000c28:	9b02      	ldr	r3, [sp, #8]
 8000c2a:	1ae3      	subs	r3, r4, r3
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	464b      	mov	r3, r9
 8000c30:	1ad2      	subs	r2, r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	4691      	mov	r9, r2
 8000c36:	021a      	lsls	r2, r3, #8
 8000c38:	d46c      	bmi.n	8000d14 <__aeabi_dsub+0x528>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	464c      	mov	r4, r9
 8000c3e:	432a      	orrs	r2, r5
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dsub+0x458>
 8000c42:	e63a      	b.n	80008ba <__aeabi_dsub+0xce>
 8000c44:	2600      	movs	r6, #0
 8000c46:	2400      	movs	r4, #0
 8000c48:	2500      	movs	r5, #0
 8000c4a:	e678      	b.n	800093e <__aeabi_dsub+0x152>
 8000c4c:	9902      	ldr	r1, [sp, #8]
 8000c4e:	4653      	mov	r3, sl
 8000c50:	000d      	movs	r5, r1
 8000c52:	3a20      	subs	r2, #32
 8000c54:	40d5      	lsrs	r5, r2
 8000c56:	2b20      	cmp	r3, #32
 8000c58:	d006      	beq.n	8000c68 <__aeabi_dsub+0x47c>
 8000c5a:	2240      	movs	r2, #64	@ 0x40
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	000b      	movs	r3, r1
 8000c60:	4093      	lsls	r3, r2
 8000c62:	4662      	mov	r2, ip
 8000c64:	431a      	orrs	r2, r3
 8000c66:	4693      	mov	fp, r2
 8000c68:	465b      	mov	r3, fp
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	431d      	orrs	r5, r3
 8000c70:	e619      	b.n	80008a6 <__aeabi_dsub+0xba>
 8000c72:	4653      	mov	r3, sl
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dsub+0x490>
 8000c7a:	e0c6      	b.n	8000e0a <__aeabi_dsub+0x61e>
 8000c7c:	4e9d      	ldr	r6, [pc, #628]	@ (8000ef4 <__aeabi_dsub+0x708>)
 8000c7e:	45b2      	cmp	sl, r6
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dsub+0x498>
 8000c82:	e6bd      	b.n	8000a00 <__aeabi_dsub+0x214>
 8000c84:	4688      	mov	r8, r1
 8000c86:	000e      	movs	r6, r1
 8000c88:	2501      	movs	r5, #1
 8000c8a:	2a38      	cmp	r2, #56	@ 0x38
 8000c8c:	dc10      	bgt.n	8000cb0 <__aeabi_dsub+0x4c4>
 8000c8e:	2a1f      	cmp	r2, #31
 8000c90:	dc7f      	bgt.n	8000d92 <__aeabi_dsub+0x5a6>
 8000c92:	2120      	movs	r1, #32
 8000c94:	0025      	movs	r5, r4
 8000c96:	1a89      	subs	r1, r1, r2
 8000c98:	0007      	movs	r7, r0
 8000c9a:	4088      	lsls	r0, r1
 8000c9c:	408d      	lsls	r5, r1
 8000c9e:	40d7      	lsrs	r7, r2
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	1e41      	subs	r1, r0, #1
 8000ca4:	4188      	sbcs	r0, r1
 8000ca6:	9b02      	ldr	r3, [sp, #8]
 8000ca8:	433d      	orrs	r5, r7
 8000caa:	1b1b      	subs	r3, r3, r4
 8000cac:	4305      	orrs	r5, r0
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	1b55      	subs	r5, r2, r5
 8000cb4:	45ac      	cmp	ip, r5
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	9b02      	ldr	r3, [sp, #8]
 8000cba:	4252      	negs	r2, r2
 8000cbc:	464f      	mov	r7, r9
 8000cbe:	1a9c      	subs	r4, r3, r2
 8000cc0:	e5f6      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dsub+0x4dc>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dsub+0x64c>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_dsub+0x4e2>
 8000ccc:	e0f0      	b.n	8000eb0 <__aeabi_dsub+0x6c4>
 8000cce:	2601      	movs	r6, #1
 8000cd0:	400e      	ands	r6, r1
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	9802      	ldr	r0, [sp, #8]
 8000cd6:	08d9      	lsrs	r1, r3, #3
 8000cd8:	0742      	lsls	r2, r0, #29
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	08c4      	lsrs	r4, r0, #3
 8000cde:	e696      	b.n	8000a0e <__aeabi_dsub+0x222>
 8000ce0:	4c85      	ldr	r4, [pc, #532]	@ (8000ef8 <__aeabi_dsub+0x70c>)
 8000ce2:	1aff      	subs	r7, r7, r3
 8000ce4:	4014      	ands	r4, r2
 8000ce6:	0762      	lsls	r2, r4, #29
 8000ce8:	08e4      	lsrs	r4, r4, #3
 8000cea:	e760      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000cec:	4981      	ldr	r1, [pc, #516]	@ (8000ef4 <__aeabi_dsub+0x708>)
 8000cee:	428a      	cmp	r2, r1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dsub+0x508>
 8000cf2:	e0c9      	b.n	8000e88 <__aeabi_dsub+0x69c>
 8000cf4:	4663      	mov	r3, ip
 8000cf6:	18c1      	adds	r1, r0, r3
 8000cf8:	4281      	cmp	r1, r0
 8000cfa:	4180      	sbcs	r0, r0
 8000cfc:	9b02      	ldr	r3, [sp, #8]
 8000cfe:	4240      	negs	r0, r0
 8000d00:	18e3      	adds	r3, r4, r3
 8000d02:	181b      	adds	r3, r3, r0
 8000d04:	07dd      	lsls	r5, r3, #31
 8000d06:	085c      	lsrs	r4, r3, #1
 8000d08:	2307      	movs	r3, #7
 8000d0a:	0849      	lsrs	r1, r1, #1
 8000d0c:	430d      	orrs	r5, r1
 8000d0e:	0017      	movs	r7, r2
 8000d10:	402b      	ands	r3, r5
 8000d12:	e710      	b.n	8000b36 <__aeabi_dsub+0x34a>
 8000d14:	4663      	mov	r3, ip
 8000d16:	1a1d      	subs	r5, r3, r0
 8000d18:	45ac      	cmp	ip, r5
 8000d1a:	4192      	sbcs	r2, r2
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	9b02      	ldr	r3, [sp, #8]
 8000d20:	4252      	negs	r2, r2
 8000d22:	1b1c      	subs	r4, r3, r4
 8000d24:	4688      	mov	r8, r1
 8000d26:	1aa4      	subs	r4, r4, r2
 8000d28:	400e      	ands	r6, r1
 8000d2a:	e5c6      	b.n	80008ba <__aeabi_dsub+0xce>
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	18c5      	adds	r5, r0, r3
 8000d30:	9b02      	ldr	r3, [sp, #8]
 8000d32:	4285      	cmp	r5, r0
 8000d34:	4180      	sbcs	r0, r0
 8000d36:	469c      	mov	ip, r3
 8000d38:	4240      	negs	r0, r0
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1824      	adds	r4, r4, r0
 8000d3e:	2701      	movs	r7, #1
 8000d40:	0223      	lsls	r3, r4, #8
 8000d42:	d400      	bmi.n	8000d46 <__aeabi_dsub+0x55a>
 8000d44:	e6f5      	b.n	8000b32 <__aeabi_dsub+0x346>
 8000d46:	2702      	movs	r7, #2
 8000d48:	e641      	b.n	80009ce <__aeabi_dsub+0x1e2>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	1ac5      	subs	r5, r0, r3
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	4180      	sbcs	r0, r0
 8000d52:	9b02      	ldr	r3, [sp, #8]
 8000d54:	4240      	negs	r0, r0
 8000d56:	1ae4      	subs	r4, r4, r3
 8000d58:	2701      	movs	r7, #1
 8000d5a:	1a24      	subs	r4, r4, r0
 8000d5c:	e5a8      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000d5e:	9d02      	ldr	r5, [sp, #8]
 8000d60:	4652      	mov	r2, sl
 8000d62:	002b      	movs	r3, r5
 8000d64:	3a20      	subs	r2, #32
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	0019      	movs	r1, r3
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d006      	beq.n	8000d7e <__aeabi_dsub+0x592>
 8000d70:	2240      	movs	r2, #64	@ 0x40
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	002b      	movs	r3, r5
 8000d76:	4093      	lsls	r3, r2
 8000d78:	4662      	mov	r2, ip
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	465d      	mov	r5, fp
 8000d80:	1e6b      	subs	r3, r5, #1
 8000d82:	419d      	sbcs	r5, r3
 8000d84:	430d      	orrs	r5, r1
 8000d86:	e615      	b.n	80009b4 <__aeabi_dsub+0x1c8>
 8000d88:	0762      	lsls	r2, r4, #29
 8000d8a:	08c0      	lsrs	r0, r0, #3
 8000d8c:	4302      	orrs	r2, r0
 8000d8e:	08e4      	lsrs	r4, r4, #3
 8000d90:	e70d      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000d92:	0011      	movs	r1, r2
 8000d94:	0027      	movs	r7, r4
 8000d96:	3920      	subs	r1, #32
 8000d98:	40cf      	lsrs	r7, r1
 8000d9a:	2a20      	cmp	r2, #32
 8000d9c:	d005      	beq.n	8000daa <__aeabi_dsub+0x5be>
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	1a8a      	subs	r2, r1, r2
 8000da2:	4094      	lsls	r4, r2
 8000da4:	0025      	movs	r5, r4
 8000da6:	4305      	orrs	r5, r0
 8000da8:	9503      	str	r5, [sp, #12]
 8000daa:	9d03      	ldr	r5, [sp, #12]
 8000dac:	1e6a      	subs	r2, r5, #1
 8000dae:	4195      	sbcs	r5, r2
 8000db0:	433d      	orrs	r5, r7
 8000db2:	e77d      	b.n	8000cb0 <__aeabi_dsub+0x4c4>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_dsub+0x5ce>
 8000db8:	e744      	b.n	8000c44 <__aeabi_dsub+0x458>
 8000dba:	2601      	movs	r6, #1
 8000dbc:	400e      	ands	r6, r1
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	08d9      	lsrs	r1, r3, #3
 8000dc2:	9b02      	ldr	r3, [sp, #8]
 8000dc4:	075a      	lsls	r2, r3, #29
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	08dc      	lsrs	r4, r3, #3
 8000dca:	e6f0      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d028      	beq.n	8000e22 <__aeabi_dsub+0x636>
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	9f02      	ldr	r7, [sp, #8]
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	433a      	orrs	r2, r7
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dsub+0x5f0>
 8000dda:	e6dc      	b.n	8000b96 <__aeabi_dsub+0x3aa>
 8000ddc:	0762      	lsls	r2, r4, #29
 8000dde:	4310      	orrs	r0, r2
 8000de0:	2280      	movs	r2, #128	@ 0x80
 8000de2:	08e4      	lsrs	r4, r4, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4214      	tst	r4, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dsub+0x612>
 8000dea:	08fd      	lsrs	r5, r7, #3
 8000dec:	4215      	tst	r5, r2
 8000dee:	d106      	bne.n	8000dfe <__aeabi_dsub+0x612>
 8000df0:	4663      	mov	r3, ip
 8000df2:	2601      	movs	r6, #1
 8000df4:	002c      	movs	r4, r5
 8000df6:	08d8      	lsrs	r0, r3, #3
 8000df8:	077b      	lsls	r3, r7, #29
 8000dfa:	4318      	orrs	r0, r3
 8000dfc:	400e      	ands	r6, r1
 8000dfe:	0f42      	lsrs	r2, r0, #29
 8000e00:	00c0      	lsls	r0, r0, #3
 8000e02:	08c0      	lsrs	r0, r0, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4302      	orrs	r2, r0
 8000e08:	e601      	b.n	8000a0e <__aeabi_dsub+0x222>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	1a1d      	subs	r5, r3, r0
 8000e0e:	45ac      	cmp	ip, r5
 8000e10:	4192      	sbcs	r2, r2
 8000e12:	9b02      	ldr	r3, [sp, #8]
 8000e14:	4252      	negs	r2, r2
 8000e16:	1b1c      	subs	r4, r3, r4
 8000e18:	000e      	movs	r6, r1
 8000e1a:	4688      	mov	r8, r1
 8000e1c:	2701      	movs	r7, #1
 8000e1e:	1aa4      	subs	r4, r4, r2
 8000e20:	e546      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000e22:	4663      	mov	r3, ip
 8000e24:	08d9      	lsrs	r1, r3, #3
 8000e26:	9b02      	ldr	r3, [sp, #8]
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	08dc      	lsrs	r4, r3, #3
 8000e2e:	e5ee      	b.n	8000a0e <__aeabi_dsub+0x222>
 8000e30:	4663      	mov	r3, ip
 8000e32:	9c02      	ldr	r4, [sp, #8]
 8000e34:	9303      	str	r3, [sp, #12]
 8000e36:	e6c7      	b.n	8000bc8 <__aeabi_dsub+0x3dc>
 8000e38:	08c0      	lsrs	r0, r0, #3
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dsub+0x654>
 8000e3e:	e6aa      	b.n	8000b96 <__aeabi_dsub+0x3aa>
 8000e40:	0762      	lsls	r2, r4, #29
 8000e42:	4310      	orrs	r0, r2
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	08e4      	lsrs	r4, r4, #3
 8000e48:	0312      	lsls	r2, r2, #12
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d0d7      	beq.n	8000dfe <__aeabi_dsub+0x612>
 8000e4e:	9f02      	ldr	r7, [sp, #8]
 8000e50:	08fd      	lsrs	r5, r7, #3
 8000e52:	4215      	tst	r5, r2
 8000e54:	d1d3      	bne.n	8000dfe <__aeabi_dsub+0x612>
 8000e56:	4663      	mov	r3, ip
 8000e58:	2601      	movs	r6, #1
 8000e5a:	08d8      	lsrs	r0, r3, #3
 8000e5c:	077b      	lsls	r3, r7, #29
 8000e5e:	002c      	movs	r4, r5
 8000e60:	4318      	orrs	r0, r3
 8000e62:	400e      	ands	r6, r1
 8000e64:	e7cb      	b.n	8000dfe <__aeabi_dsub+0x612>
 8000e66:	000a      	movs	r2, r1
 8000e68:	0027      	movs	r7, r4
 8000e6a:	3a20      	subs	r2, #32
 8000e6c:	40d7      	lsrs	r7, r2
 8000e6e:	2920      	cmp	r1, #32
 8000e70:	d005      	beq.n	8000e7e <__aeabi_dsub+0x692>
 8000e72:	2240      	movs	r2, #64	@ 0x40
 8000e74:	1a52      	subs	r2, r2, r1
 8000e76:	4094      	lsls	r4, r2
 8000e78:	0025      	movs	r5, r4
 8000e7a:	4305      	orrs	r5, r0
 8000e7c:	9503      	str	r5, [sp, #12]
 8000e7e:	9d03      	ldr	r5, [sp, #12]
 8000e80:	1e6a      	subs	r2, r5, #1
 8000e82:	4195      	sbcs	r5, r2
 8000e84:	432f      	orrs	r7, r5
 8000e86:	e610      	b.n	8000aaa <__aeabi_dsub+0x2be>
 8000e88:	0014      	movs	r4, r2
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e556      	b.n	800093e <__aeabi_dsub+0x152>
 8000e90:	9b02      	ldr	r3, [sp, #8]
 8000e92:	4460      	add	r0, ip
 8000e94:	4699      	mov	r9, r3
 8000e96:	4560      	cmp	r0, ip
 8000e98:	4192      	sbcs	r2, r2
 8000e9a:	444c      	add	r4, r9
 8000e9c:	4252      	negs	r2, r2
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	18a4      	adds	r4, r4, r2
 8000ea2:	e74c      	b.n	8000d3e <__aeabi_dsub+0x552>
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	001c      	movs	r4, r3
 8000ea8:	432a      	orrs	r2, r5
 8000eaa:	d000      	beq.n	8000eae <__aeabi_dsub+0x6c2>
 8000eac:	e6b3      	b.n	8000c16 <__aeabi_dsub+0x42a>
 8000eae:	e6c9      	b.n	8000c44 <__aeabi_dsub+0x458>
 8000eb0:	2480      	movs	r4, #128	@ 0x80
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	0324      	lsls	r4, r4, #12
 8000eb6:	e5ae      	b.n	8000a16 <__aeabi_dsub+0x22a>
 8000eb8:	2120      	movs	r1, #32
 8000eba:	2500      	movs	r5, #0
 8000ebc:	1a09      	subs	r1, r1, r0
 8000ebe:	e517      	b.n	80008f0 <__aeabi_dsub+0x104>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8000ef4 <__aeabi_dsub+0x708>)
 8000ec6:	e53a      	b.n	800093e <__aeabi_dsub+0x152>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_dsub+0x6e2>
 8000ecc:	e5f6      	b.n	8000abc <__aeabi_dsub+0x2d0>
 8000ece:	464b      	mov	r3, r9
 8000ed0:	1bda      	subs	r2, r3, r7
 8000ed2:	4692      	mov	sl, r2
 8000ed4:	2f00      	cmp	r7, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dsub+0x6ee>
 8000ed8:	e66f      	b.n	8000bba <__aeabi_dsub+0x3ce>
 8000eda:	2a38      	cmp	r2, #56	@ 0x38
 8000edc:	dc05      	bgt.n	8000eea <__aeabi_dsub+0x6fe>
 8000ede:	2680      	movs	r6, #128	@ 0x80
 8000ee0:	0436      	lsls	r6, r6, #16
 8000ee2:	4334      	orrs	r4, r6
 8000ee4:	4688      	mov	r8, r1
 8000ee6:	000e      	movs	r6, r1
 8000ee8:	e6d1      	b.n	8000c8e <__aeabi_dsub+0x4a2>
 8000eea:	4688      	mov	r8, r1
 8000eec:	000e      	movs	r6, r1
 8000eee:	2501      	movs	r5, #1
 8000ef0:	e6de      	b.n	8000cb0 <__aeabi_dsub+0x4c4>
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	000007ff 	.word	0x000007ff
 8000ef8:	ff7fffff 	.word	0xff7fffff
 8000efc:	000007fe 	.word	0x000007fe
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dsub+0x71a>
 8000f04:	e668      	b.n	8000bd8 <__aeabi_dsub+0x3ec>
 8000f06:	464b      	mov	r3, r9
 8000f08:	1bd9      	subs	r1, r3, r7
 8000f0a:	2f00      	cmp	r7, #0
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_dsub+0x726>
 8000f0e:	468a      	mov	sl, r1
 8000f10:	e5a7      	b.n	8000a62 <__aeabi_dsub+0x276>
 8000f12:	2701      	movs	r7, #1
 8000f14:	2938      	cmp	r1, #56	@ 0x38
 8000f16:	dd00      	ble.n	8000f1a <__aeabi_dsub+0x72e>
 8000f18:	e5c7      	b.n	8000aaa <__aeabi_dsub+0x2be>
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	0412      	lsls	r2, r2, #16
 8000f1e:	4314      	orrs	r4, r2
 8000f20:	e5af      	b.n	8000a82 <__aeabi_dsub+0x296>
 8000f22:	46c0      	nop			@ (mov r8, r8)

08000f24 <__aeabi_d2iz>:
 8000f24:	000b      	movs	r3, r1
 8000f26:	0002      	movs	r2, r0
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4d16      	ldr	r5, [pc, #88]	@ (8000f84 <__aeabi_d2iz+0x60>)
 8000f2c:	030c      	lsls	r4, r1, #12
 8000f2e:	b082      	sub	sp, #8
 8000f30:	0049      	lsls	r1, r1, #1
 8000f32:	2000      	movs	r0, #0
 8000f34:	9200      	str	r2, [sp, #0]
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	0b24      	lsrs	r4, r4, #12
 8000f3a:	0d49      	lsrs	r1, r1, #21
 8000f3c:	0fde      	lsrs	r6, r3, #31
 8000f3e:	42a9      	cmp	r1, r5
 8000f40:	dd04      	ble.n	8000f4c <__aeabi_d2iz+0x28>
 8000f42:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <__aeabi_d2iz+0x64>)
 8000f44:	4281      	cmp	r1, r0
 8000f46:	dd03      	ble.n	8000f50 <__aeabi_d2iz+0x2c>
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <__aeabi_d2iz+0x68>)
 8000f4a:	18f0      	adds	r0, r6, r3
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	2080      	movs	r0, #128	@ 0x80
 8000f52:	0340      	lsls	r0, r0, #13
 8000f54:	4320      	orrs	r0, r4
 8000f56:	4c0e      	ldr	r4, [pc, #56]	@ (8000f90 <__aeabi_d2iz+0x6c>)
 8000f58:	1a64      	subs	r4, r4, r1
 8000f5a:	2c1f      	cmp	r4, #31
 8000f5c:	dd08      	ble.n	8000f70 <__aeabi_d2iz+0x4c>
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <__aeabi_d2iz+0x70>)
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	0003      	movs	r3, r0
 8000f66:	4258      	negs	r0, r3
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d1ef      	bne.n	8000f4c <__aeabi_d2iz+0x28>
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	e7ed      	b.n	8000f4c <__aeabi_d2iz+0x28>
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <__aeabi_d2iz+0x74>)
 8000f72:	9a00      	ldr	r2, [sp, #0]
 8000f74:	469c      	mov	ip, r3
 8000f76:	0003      	movs	r3, r0
 8000f78:	4461      	add	r1, ip
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	40e2      	lsrs	r2, r4
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	e7f1      	b.n	8000f66 <__aeabi_d2iz+0x42>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	000003fe 	.word	0x000003fe
 8000f88:	0000041d 	.word	0x0000041d
 8000f8c:	7fffffff 	.word	0x7fffffff
 8000f90:	00000433 	.word	0x00000433
 8000f94:	00000413 	.word	0x00000413
 8000f98:	fffffbed 	.word	0xfffffbed

08000f9c <__aeabi_ui2d>:
 8000f9c:	b510      	push	{r4, lr}
 8000f9e:	1e04      	subs	r4, r0, #0
 8000fa0:	d010      	beq.n	8000fc4 <__aeabi_ui2d+0x28>
 8000fa2:	f000 f85d 	bl	8001060 <__clzsi2>
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <__aeabi_ui2d+0x44>)
 8000fa8:	1a1b      	subs	r3, r3, r0
 8000faa:	055b      	lsls	r3, r3, #21
 8000fac:	0d5b      	lsrs	r3, r3, #21
 8000fae:	280a      	cmp	r0, #10
 8000fb0:	dc0f      	bgt.n	8000fd2 <__aeabi_ui2d+0x36>
 8000fb2:	220b      	movs	r2, #11
 8000fb4:	0021      	movs	r1, r4
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d1      	lsrs	r1, r2
 8000fba:	3015      	adds	r0, #21
 8000fbc:	030a      	lsls	r2, r1, #12
 8000fbe:	4084      	lsls	r4, r0
 8000fc0:	0b12      	lsrs	r2, r2, #12
 8000fc2:	e001      	b.n	8000fc8 <__aeabi_ui2d+0x2c>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	051b      	lsls	r3, r3, #20
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	0020      	movs	r0, r4
 8000fce:	0019      	movs	r1, r3
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	0022      	movs	r2, r4
 8000fd4:	380b      	subs	r0, #11
 8000fd6:	4082      	lsls	r2, r0
 8000fd8:	0312      	lsls	r2, r2, #12
 8000fda:	2400      	movs	r4, #0
 8000fdc:	0b12      	lsrs	r2, r2, #12
 8000fde:	e7f3      	b.n	8000fc8 <__aeabi_ui2d+0x2c>
 8000fe0:	0000041e 	.word	0x0000041e

08000fe4 <__aeabi_cdrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	0010      	movs	r0, r2
 8000fe8:	4662      	mov	r2, ip
 8000fea:	468c      	mov	ip, r1
 8000fec:	0019      	movs	r1, r3
 8000fee:	4663      	mov	r3, ip
 8000ff0:	e000      	b.n	8000ff4 <__aeabi_cdcmpeq>
 8000ff2:	46c0      	nop			@ (mov r8, r8)

08000ff4 <__aeabi_cdcmpeq>:
 8000ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ff6:	f000 f909 	bl	800120c <__ledf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d401      	bmi.n	8001002 <__aeabi_cdcmpeq+0xe>
 8000ffe:	2100      	movs	r1, #0
 8001000:	42c8      	cmn	r0, r1
 8001002:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001004 <__aeabi_dcmpeq>:
 8001004:	b510      	push	{r4, lr}
 8001006:	f000 f849 	bl	800109c <__eqdf2>
 800100a:	4240      	negs	r0, r0
 800100c:	3001      	adds	r0, #1
 800100e:	bd10      	pop	{r4, pc}

08001010 <__aeabi_dcmplt>:
 8001010:	b510      	push	{r4, lr}
 8001012:	f000 f8fb 	bl	800120c <__ledf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	db01      	blt.n	800101e <__aeabi_dcmplt+0xe>
 800101a:	2000      	movs	r0, #0
 800101c:	bd10      	pop	{r4, pc}
 800101e:	2001      	movs	r0, #1
 8001020:	bd10      	pop	{r4, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)

08001024 <__aeabi_dcmple>:
 8001024:	b510      	push	{r4, lr}
 8001026:	f000 f8f1 	bl	800120c <__ledf2>
 800102a:	2800      	cmp	r0, #0
 800102c:	dd01      	ble.n	8001032 <__aeabi_dcmple+0xe>
 800102e:	2000      	movs	r0, #0
 8001030:	bd10      	pop	{r4, pc}
 8001032:	2001      	movs	r0, #1
 8001034:	bd10      	pop	{r4, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)

08001038 <__aeabi_dcmpgt>:
 8001038:	b510      	push	{r4, lr}
 800103a:	f000 f873 	bl	8001124 <__gedf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	dc01      	bgt.n	8001046 <__aeabi_dcmpgt+0xe>
 8001042:	2000      	movs	r0, #0
 8001044:	bd10      	pop	{r4, pc}
 8001046:	2001      	movs	r0, #1
 8001048:	bd10      	pop	{r4, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)

0800104c <__aeabi_dcmpge>:
 800104c:	b510      	push	{r4, lr}
 800104e:	f000 f869 	bl	8001124 <__gedf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	da01      	bge.n	800105a <__aeabi_dcmpge+0xe>
 8001056:	2000      	movs	r0, #0
 8001058:	bd10      	pop	{r4, pc}
 800105a:	2001      	movs	r0, #1
 800105c:	bd10      	pop	{r4, pc}
 800105e:	46c0      	nop			@ (mov r8, r8)

08001060 <__clzsi2>:
 8001060:	211c      	movs	r1, #28
 8001062:	2301      	movs	r3, #1
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	4298      	cmp	r0, r3
 8001068:	d301      	bcc.n	800106e <__clzsi2+0xe>
 800106a:	0c00      	lsrs	r0, r0, #16
 800106c:	3910      	subs	r1, #16
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	4298      	cmp	r0, r3
 8001072:	d301      	bcc.n	8001078 <__clzsi2+0x18>
 8001074:	0a00      	lsrs	r0, r0, #8
 8001076:	3908      	subs	r1, #8
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	4298      	cmp	r0, r3
 800107c:	d301      	bcc.n	8001082 <__clzsi2+0x22>
 800107e:	0900      	lsrs	r0, r0, #4
 8001080:	3904      	subs	r1, #4
 8001082:	a202      	add	r2, pc, #8	@ (adr r2, 800108c <__clzsi2+0x2c>)
 8001084:	5c10      	ldrb	r0, [r2, r0]
 8001086:	1840      	adds	r0, r0, r1
 8001088:	4770      	bx	lr
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	02020304 	.word	0x02020304
 8001090:	01010101 	.word	0x01010101
	...

0800109c <__eqdf2>:
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109e:	4657      	mov	r7, sl
 80010a0:	46de      	mov	lr, fp
 80010a2:	464e      	mov	r6, r9
 80010a4:	4645      	mov	r5, r8
 80010a6:	b5e0      	push	{r5, r6, r7, lr}
 80010a8:	000d      	movs	r5, r1
 80010aa:	0004      	movs	r4, r0
 80010ac:	0fe8      	lsrs	r0, r5, #31
 80010ae:	4683      	mov	fp, r0
 80010b0:	0309      	lsls	r1, r1, #12
 80010b2:	0fd8      	lsrs	r0, r3, #31
 80010b4:	0b09      	lsrs	r1, r1, #12
 80010b6:	4682      	mov	sl, r0
 80010b8:	4819      	ldr	r0, [pc, #100]	@ (8001120 <__eqdf2+0x84>)
 80010ba:	468c      	mov	ip, r1
 80010bc:	031f      	lsls	r7, r3, #12
 80010be:	0069      	lsls	r1, r5, #1
 80010c0:	005e      	lsls	r6, r3, #1
 80010c2:	0d49      	lsrs	r1, r1, #21
 80010c4:	0b3f      	lsrs	r7, r7, #12
 80010c6:	0d76      	lsrs	r6, r6, #21
 80010c8:	4281      	cmp	r1, r0
 80010ca:	d018      	beq.n	80010fe <__eqdf2+0x62>
 80010cc:	4286      	cmp	r6, r0
 80010ce:	d00f      	beq.n	80010f0 <__eqdf2+0x54>
 80010d0:	2001      	movs	r0, #1
 80010d2:	42b1      	cmp	r1, r6
 80010d4:	d10d      	bne.n	80010f2 <__eqdf2+0x56>
 80010d6:	45bc      	cmp	ip, r7
 80010d8:	d10b      	bne.n	80010f2 <__eqdf2+0x56>
 80010da:	4294      	cmp	r4, r2
 80010dc:	d109      	bne.n	80010f2 <__eqdf2+0x56>
 80010de:	45d3      	cmp	fp, sl
 80010e0:	d01c      	beq.n	800111c <__eqdf2+0x80>
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d105      	bne.n	80010f2 <__eqdf2+0x56>
 80010e6:	4660      	mov	r0, ip
 80010e8:	4320      	orrs	r0, r4
 80010ea:	1e43      	subs	r3, r0, #1
 80010ec:	4198      	sbcs	r0, r3
 80010ee:	e000      	b.n	80010f2 <__eqdf2+0x56>
 80010f0:	2001      	movs	r0, #1
 80010f2:	bcf0      	pop	{r4, r5, r6, r7}
 80010f4:	46bb      	mov	fp, r7
 80010f6:	46b2      	mov	sl, r6
 80010f8:	46a9      	mov	r9, r5
 80010fa:	46a0      	mov	r8, r4
 80010fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fe:	2001      	movs	r0, #1
 8001100:	428e      	cmp	r6, r1
 8001102:	d1f6      	bne.n	80010f2 <__eqdf2+0x56>
 8001104:	4661      	mov	r1, ip
 8001106:	4339      	orrs	r1, r7
 8001108:	000f      	movs	r7, r1
 800110a:	4317      	orrs	r7, r2
 800110c:	4327      	orrs	r7, r4
 800110e:	d1f0      	bne.n	80010f2 <__eqdf2+0x56>
 8001110:	465b      	mov	r3, fp
 8001112:	4652      	mov	r2, sl
 8001114:	1a98      	subs	r0, r3, r2
 8001116:	1e43      	subs	r3, r0, #1
 8001118:	4198      	sbcs	r0, r3
 800111a:	e7ea      	b.n	80010f2 <__eqdf2+0x56>
 800111c:	2000      	movs	r0, #0
 800111e:	e7e8      	b.n	80010f2 <__eqdf2+0x56>
 8001120:	000007ff 	.word	0x000007ff

08001124 <__gedf2>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	4657      	mov	r7, sl
 8001128:	464e      	mov	r6, r9
 800112a:	4645      	mov	r5, r8
 800112c:	46de      	mov	lr, fp
 800112e:	b5e0      	push	{r5, r6, r7, lr}
 8001130:	000d      	movs	r5, r1
 8001132:	030f      	lsls	r7, r1, #12
 8001134:	0b39      	lsrs	r1, r7, #12
 8001136:	b083      	sub	sp, #12
 8001138:	0004      	movs	r4, r0
 800113a:	4680      	mov	r8, r0
 800113c:	9101      	str	r1, [sp, #4]
 800113e:	0058      	lsls	r0, r3, #1
 8001140:	0fe9      	lsrs	r1, r5, #31
 8001142:	4f31      	ldr	r7, [pc, #196]	@ (8001208 <__gedf2+0xe4>)
 8001144:	0d40      	lsrs	r0, r0, #21
 8001146:	468c      	mov	ip, r1
 8001148:	006e      	lsls	r6, r5, #1
 800114a:	0319      	lsls	r1, r3, #12
 800114c:	4682      	mov	sl, r0
 800114e:	4691      	mov	r9, r2
 8001150:	0d76      	lsrs	r6, r6, #21
 8001152:	0b09      	lsrs	r1, r1, #12
 8001154:	0fd8      	lsrs	r0, r3, #31
 8001156:	42be      	cmp	r6, r7
 8001158:	d01f      	beq.n	800119a <__gedf2+0x76>
 800115a:	45ba      	cmp	sl, r7
 800115c:	d00f      	beq.n	800117e <__gedf2+0x5a>
 800115e:	2e00      	cmp	r6, #0
 8001160:	d12f      	bne.n	80011c2 <__gedf2+0x9e>
 8001162:	4655      	mov	r5, sl
 8001164:	9e01      	ldr	r6, [sp, #4]
 8001166:	4334      	orrs	r4, r6
 8001168:	2d00      	cmp	r5, #0
 800116a:	d127      	bne.n	80011bc <__gedf2+0x98>
 800116c:	430a      	orrs	r2, r1
 800116e:	d03a      	beq.n	80011e6 <__gedf2+0xc2>
 8001170:	2c00      	cmp	r4, #0
 8001172:	d145      	bne.n	8001200 <__gedf2+0xdc>
 8001174:	2800      	cmp	r0, #0
 8001176:	d11a      	bne.n	80011ae <__gedf2+0x8a>
 8001178:	2001      	movs	r0, #1
 800117a:	4240      	negs	r0, r0
 800117c:	e017      	b.n	80011ae <__gedf2+0x8a>
 800117e:	4311      	orrs	r1, r2
 8001180:	d13b      	bne.n	80011fa <__gedf2+0xd6>
 8001182:	2e00      	cmp	r6, #0
 8001184:	d102      	bne.n	800118c <__gedf2+0x68>
 8001186:	9f01      	ldr	r7, [sp, #4]
 8001188:	4327      	orrs	r7, r4
 800118a:	d0f3      	beq.n	8001174 <__gedf2+0x50>
 800118c:	4584      	cmp	ip, r0
 800118e:	d109      	bne.n	80011a4 <__gedf2+0x80>
 8001190:	4663      	mov	r3, ip
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <__gedf2+0x54>
 8001196:	4660      	mov	r0, ip
 8001198:	e009      	b.n	80011ae <__gedf2+0x8a>
 800119a:	9f01      	ldr	r7, [sp, #4]
 800119c:	4327      	orrs	r7, r4
 800119e:	d12c      	bne.n	80011fa <__gedf2+0xd6>
 80011a0:	45b2      	cmp	sl, r6
 80011a2:	d024      	beq.n	80011ee <__gedf2+0xca>
 80011a4:	4663      	mov	r3, ip
 80011a6:	2002      	movs	r0, #2
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4018      	ands	r0, r3
 80011ac:	3801      	subs	r0, #1
 80011ae:	b003      	add	sp, #12
 80011b0:	bcf0      	pop	{r4, r5, r6, r7}
 80011b2:	46bb      	mov	fp, r7
 80011b4:	46b2      	mov	sl, r6
 80011b6:	46a9      	mov	r9, r5
 80011b8:	46a0      	mov	r8, r4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d0d9      	beq.n	8001174 <__gedf2+0x50>
 80011c0:	e7e4      	b.n	800118c <__gedf2+0x68>
 80011c2:	4654      	mov	r4, sl
 80011c4:	2c00      	cmp	r4, #0
 80011c6:	d0ed      	beq.n	80011a4 <__gedf2+0x80>
 80011c8:	4584      	cmp	ip, r0
 80011ca:	d1eb      	bne.n	80011a4 <__gedf2+0x80>
 80011cc:	4556      	cmp	r6, sl
 80011ce:	dce9      	bgt.n	80011a4 <__gedf2+0x80>
 80011d0:	dbde      	blt.n	8001190 <__gedf2+0x6c>
 80011d2:	9b01      	ldr	r3, [sp, #4]
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d8e5      	bhi.n	80011a4 <__gedf2+0x80>
 80011d8:	d1da      	bne.n	8001190 <__gedf2+0x6c>
 80011da:	45c8      	cmp	r8, r9
 80011dc:	d8e2      	bhi.n	80011a4 <__gedf2+0x80>
 80011de:	2000      	movs	r0, #0
 80011e0:	45c8      	cmp	r8, r9
 80011e2:	d2e4      	bcs.n	80011ae <__gedf2+0x8a>
 80011e4:	e7d4      	b.n	8001190 <__gedf2+0x6c>
 80011e6:	2000      	movs	r0, #0
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	d0e0      	beq.n	80011ae <__gedf2+0x8a>
 80011ec:	e7da      	b.n	80011a4 <__gedf2+0x80>
 80011ee:	4311      	orrs	r1, r2
 80011f0:	d103      	bne.n	80011fa <__gedf2+0xd6>
 80011f2:	4584      	cmp	ip, r0
 80011f4:	d1d6      	bne.n	80011a4 <__gedf2+0x80>
 80011f6:	2000      	movs	r0, #0
 80011f8:	e7d9      	b.n	80011ae <__gedf2+0x8a>
 80011fa:	2002      	movs	r0, #2
 80011fc:	4240      	negs	r0, r0
 80011fe:	e7d6      	b.n	80011ae <__gedf2+0x8a>
 8001200:	4584      	cmp	ip, r0
 8001202:	d0e6      	beq.n	80011d2 <__gedf2+0xae>
 8001204:	e7ce      	b.n	80011a4 <__gedf2+0x80>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff

0800120c <__ledf2>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	4657      	mov	r7, sl
 8001210:	464e      	mov	r6, r9
 8001212:	4645      	mov	r5, r8
 8001214:	46de      	mov	lr, fp
 8001216:	b5e0      	push	{r5, r6, r7, lr}
 8001218:	000d      	movs	r5, r1
 800121a:	030f      	lsls	r7, r1, #12
 800121c:	0004      	movs	r4, r0
 800121e:	4680      	mov	r8, r0
 8001220:	0fe8      	lsrs	r0, r5, #31
 8001222:	0b39      	lsrs	r1, r7, #12
 8001224:	4684      	mov	ip, r0
 8001226:	b083      	sub	sp, #12
 8001228:	0058      	lsls	r0, r3, #1
 800122a:	4f30      	ldr	r7, [pc, #192]	@ (80012ec <__ledf2+0xe0>)
 800122c:	0d40      	lsrs	r0, r0, #21
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	031e      	lsls	r6, r3, #12
 8001232:	0069      	lsls	r1, r5, #1
 8001234:	4682      	mov	sl, r0
 8001236:	4691      	mov	r9, r2
 8001238:	0d49      	lsrs	r1, r1, #21
 800123a:	0b36      	lsrs	r6, r6, #12
 800123c:	0fd8      	lsrs	r0, r3, #31
 800123e:	42b9      	cmp	r1, r7
 8001240:	d020      	beq.n	8001284 <__ledf2+0x78>
 8001242:	45ba      	cmp	sl, r7
 8001244:	d00f      	beq.n	8001266 <__ledf2+0x5a>
 8001246:	2900      	cmp	r1, #0
 8001248:	d12b      	bne.n	80012a2 <__ledf2+0x96>
 800124a:	9901      	ldr	r1, [sp, #4]
 800124c:	430c      	orrs	r4, r1
 800124e:	4651      	mov	r1, sl
 8001250:	2900      	cmp	r1, #0
 8001252:	d137      	bne.n	80012c4 <__ledf2+0xb8>
 8001254:	4332      	orrs	r2, r6
 8001256:	d038      	beq.n	80012ca <__ledf2+0xbe>
 8001258:	2c00      	cmp	r4, #0
 800125a:	d144      	bne.n	80012e6 <__ledf2+0xda>
 800125c:	2800      	cmp	r0, #0
 800125e:	d119      	bne.n	8001294 <__ledf2+0x88>
 8001260:	2001      	movs	r0, #1
 8001262:	4240      	negs	r0, r0
 8001264:	e016      	b.n	8001294 <__ledf2+0x88>
 8001266:	4316      	orrs	r6, r2
 8001268:	d113      	bne.n	8001292 <__ledf2+0x86>
 800126a:	2900      	cmp	r1, #0
 800126c:	d102      	bne.n	8001274 <__ledf2+0x68>
 800126e:	9f01      	ldr	r7, [sp, #4]
 8001270:	4327      	orrs	r7, r4
 8001272:	d0f3      	beq.n	800125c <__ledf2+0x50>
 8001274:	4584      	cmp	ip, r0
 8001276:	d020      	beq.n	80012ba <__ledf2+0xae>
 8001278:	4663      	mov	r3, ip
 800127a:	2002      	movs	r0, #2
 800127c:	3b01      	subs	r3, #1
 800127e:	4018      	ands	r0, r3
 8001280:	3801      	subs	r0, #1
 8001282:	e007      	b.n	8001294 <__ledf2+0x88>
 8001284:	9f01      	ldr	r7, [sp, #4]
 8001286:	4327      	orrs	r7, r4
 8001288:	d103      	bne.n	8001292 <__ledf2+0x86>
 800128a:	458a      	cmp	sl, r1
 800128c:	d1f4      	bne.n	8001278 <__ledf2+0x6c>
 800128e:	4316      	orrs	r6, r2
 8001290:	d01f      	beq.n	80012d2 <__ledf2+0xc6>
 8001292:	2002      	movs	r0, #2
 8001294:	b003      	add	sp, #12
 8001296:	bcf0      	pop	{r4, r5, r6, r7}
 8001298:	46bb      	mov	fp, r7
 800129a:	46b2      	mov	sl, r6
 800129c:	46a9      	mov	r9, r5
 800129e:	46a0      	mov	r8, r4
 80012a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a2:	4654      	mov	r4, sl
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d0e7      	beq.n	8001278 <__ledf2+0x6c>
 80012a8:	4584      	cmp	ip, r0
 80012aa:	d1e5      	bne.n	8001278 <__ledf2+0x6c>
 80012ac:	4551      	cmp	r1, sl
 80012ae:	dce3      	bgt.n	8001278 <__ledf2+0x6c>
 80012b0:	db03      	blt.n	80012ba <__ledf2+0xae>
 80012b2:	9b01      	ldr	r3, [sp, #4]
 80012b4:	42b3      	cmp	r3, r6
 80012b6:	d8df      	bhi.n	8001278 <__ledf2+0x6c>
 80012b8:	d00f      	beq.n	80012da <__ledf2+0xce>
 80012ba:	4663      	mov	r3, ip
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0cf      	beq.n	8001260 <__ledf2+0x54>
 80012c0:	4660      	mov	r0, ip
 80012c2:	e7e7      	b.n	8001294 <__ledf2+0x88>
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0c9      	beq.n	800125c <__ledf2+0x50>
 80012c8:	e7d4      	b.n	8001274 <__ledf2+0x68>
 80012ca:	2000      	movs	r0, #0
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0e1      	beq.n	8001294 <__ledf2+0x88>
 80012d0:	e7d2      	b.n	8001278 <__ledf2+0x6c>
 80012d2:	4584      	cmp	ip, r0
 80012d4:	d1d0      	bne.n	8001278 <__ledf2+0x6c>
 80012d6:	2000      	movs	r0, #0
 80012d8:	e7dc      	b.n	8001294 <__ledf2+0x88>
 80012da:	45c8      	cmp	r8, r9
 80012dc:	d8cc      	bhi.n	8001278 <__ledf2+0x6c>
 80012de:	2000      	movs	r0, #0
 80012e0:	45c8      	cmp	r8, r9
 80012e2:	d2d7      	bcs.n	8001294 <__ledf2+0x88>
 80012e4:	e7e9      	b.n	80012ba <__ledf2+0xae>
 80012e6:	4584      	cmp	ip, r0
 80012e8:	d0e3      	beq.n	80012b2 <__ledf2+0xa6>
 80012ea:	e7c5      	b.n	8001278 <__ledf2+0x6c>
 80012ec:	000007ff 	.word	0x000007ff

080012f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	240c      	movs	r4, #12
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	0018      	movs	r0, r3
 80012fc:	2314      	movs	r3, #20
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f002 fe37 	bl	8003f74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	0289      	lsls	r1, r1, #10
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	02c9      	lsls	r1, r1, #11
 800132c:	430a      	orrs	r2, r1
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_GPIO_Init+0xc0>)
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	02db      	lsls	r3, r3, #11
 8001338:	4013      	ands	r3, r2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133e:	2390      	movs	r3, #144	@ 0x90
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	2200      	movs	r2, #0
 8001344:	2120      	movs	r1, #32
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fe26 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <MX_GPIO_Init+0xc4>)
 8001352:	2200      	movs	r2, #0
 8001354:	0019      	movs	r1, r3
 8001356:	f000 fe1f 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2220      	movs	r2, #32
 800135e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2201      	movs	r2, #1
 8001364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	2390      	movs	r3, #144	@ 0x90
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fc94 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001380:	0021      	movs	r1, r4
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	0052      	lsls	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	187b      	adds	r3, r7, r1
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <MX_GPIO_Init+0xc4>)
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f000 fc80 	bl	8001ca8 <HAL_GPIO_Init>

}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b009      	add	sp, #36	@ 0x24
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013be:	f000 fb37 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c2:	f000 f81f 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c6:	f7ff ff93 	bl	80012f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013ca:	f000 f8ff 	bl	80015cc <MX_SPI1_Init>
  MX_TIM1_Init();
 80013ce:	f000 f9ef 	bl	80017b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <main+0x48>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 ff84 	bl	80032e4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t adc_value = readADC(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f84d 	bl	800147c <readADC>
 80013e2:	0003      	movs	r3, r0
 80013e4:	001a      	movs	r2, r3
 80013e6:	1dbb      	adds	r3, r7, #6
 80013e8:	801a      	strh	r2, [r3, #0]
	  setPWMDutyCycle(adc_value);
 80013ea:	1dbb      	adds	r3, r7, #6
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 f89c 	bl	800152c <setPWMDutyCycle>
	  HAL_Delay(10);
 80013f4:	200a      	movs	r0, #10
 80013f6:	f000 fb7f 	bl	8001af8 <HAL_Delay>
  {
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	e7ee      	b.n	80013dc <main+0x24>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	2000008c 	.word	0x2000008c

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b093      	sub	sp, #76	@ 0x4c
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	2414      	movs	r4, #20
 800140c:	193b      	adds	r3, r7, r4
 800140e:	0018      	movs	r0, r3
 8001410:	2334      	movs	r3, #52	@ 0x34
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f002 fdad 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	0018      	movs	r0, r3
 800141e:	2310      	movs	r3, #16
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f002 fda6 	bl	8003f74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2220      	movs	r2, #32
 800142c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2201      	movs	r2, #1
 8001432:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	193b      	adds	r3, r7, r4
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fdc9 	bl	8001fd4 <HAL_RCC_OscConfig>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001446:	f000 f8bb 	bl	80015c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2203      	movs	r2, #3
 8001454:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2101      	movs	r1, #1
 8001466:	0018      	movs	r0, r3
 8001468:	f001 f93a 	bl	80026e0 <HAL_RCC_ClockConfig>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001470:	f000 f8a6 	bl	80015c0 <Error_Handler>
  }
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b013      	add	sp, #76	@ 0x4c
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <readADC>:

/* USER CODE BEGIN 4 */
uint8_t readADC (uint8_t channel){
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af02      	add	r7, sp, #8
 8001482:	0002      	movs	r2, r0
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	701a      	strb	r2, [r3, #0]
	uint8_t controlByte = 0x01;
 8001488:	2117      	movs	r1, #23
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
	controlByte |= (channel & 0x07) << 4;
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	b25b      	sxtb	r3, r3
 8001498:	2270      	movs	r2, #112	@ 0x70
 800149a:	4013      	ands	r3, r2
 800149c:	b25a      	sxtb	r2, r3
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	701a      	strb	r2, [r3, #0]

	uint8_t receivedData[2] = {0};
 80014ac:	2410      	movs	r4, #16
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
	uint8_t transmitData[3] = {controlByte, 0x00, 0x00};
 80014b4:	250c      	movs	r5, #12
 80014b6:	197b      	adds	r3, r7, r5
 80014b8:	187a      	adds	r2, r7, r1
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	197b      	adds	r3, r7, r5
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]
 80014c4:	197b      	adds	r3, r7, r5
 80014c6:	2200      	movs	r2, #0
 80014c8:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET); //start transmission going low
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <readADC+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	2110      	movs	r1, #16
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fd61 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, transmitData, receivedData, 3, HAL_MAX_DELAY);
 80014d6:	193a      	adds	r2, r7, r4
 80014d8:	1979      	adds	r1, r7, r5
 80014da:	4813      	ldr	r0, [pc, #76]	@ (8001528 <readADC+0xac>)
 80014dc:	2301      	movs	r3, #1
 80014de:	425b      	negs	r3, r3
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2303      	movs	r3, #3
 80014e4:	f001 fb0e 	bl	8002b04 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <readADC+0xa8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	2110      	movs	r1, #16
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 fd52 	bl	8001f98 <HAL_GPIO_WritePin>

    uint16_t result = ((receivedData[1] & 0x03) << 8) | receivedData[2];
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	23c0      	movs	r3, #192	@ 0xc0
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4013      	ands	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	193b      	adds	r3, r7, r4
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21a      	sxth	r2, r3
 800150e:	2114      	movs	r1, #20
 8001510:	187b      	adds	r3, r7, r1
 8001512:	801a      	strh	r2, [r3, #0]
    return result;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3

}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bdb0      	pop	{r4, r5, r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	48000400 	.word	0x48000400
 8001528:	20000028 	.word	0x20000028

0800152c <setPWMDutyCycle>:

void setPWMDutyCycle(uint16_t adc_value) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	801a      	strh	r2, [r3, #0]
	uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001538:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <setPWMDutyCycle+0x80>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	617b      	str	r3, [r7, #20]
	uint32_t min_duty_cycle = 0.05 * period;
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff fd2b 	bl	8000f9c <__aeabi_ui2d>
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <setPWMDutyCycle+0x84>)
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <setPWMDutyCycle+0x88>)
 800154a:	f7fe fe87 	bl	800025c <__aeabi_dmul>
 800154e:	0002      	movs	r2, r0
 8001550:	000b      	movs	r3, r1
 8001552:	0010      	movs	r0, r2
 8001554:	0019      	movs	r1, r3
 8001556:	f7fe fe63 	bl	8000220 <__aeabi_d2uiz>
 800155a:	0003      	movs	r3, r0
 800155c:	613b      	str	r3, [r7, #16]
	uint32_t max_duty_cycle = 0.10 * period;
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff fd1c 	bl	8000f9c <__aeabi_ui2d>
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <setPWMDutyCycle+0x84>)
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <setPWMDutyCycle+0x8c>)
 8001568:	f7fe fe78 	bl	800025c <__aeabi_dmul>
 800156c:	0002      	movs	r2, r0
 800156e:	000b      	movs	r3, r1
 8001570:	0010      	movs	r0, r2
 8001572:	0019      	movs	r1, r3
 8001574:	f7fe fe54 	bl	8000220 <__aeabi_d2uiz>
 8001578:	0003      	movs	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]


	uint32_t compare_value = min_duty_cycle + ((adc_value * (max_duty_cycle - min_duty_cycle)) / 1023);
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	1a8a      	subs	r2, r1, r2
 8001586:	4353      	muls	r3, r2
 8001588:	490c      	ldr	r1, [pc, #48]	@ (80015bc <setPWMDutyCycle+0x90>)
 800158a:	0018      	movs	r0, r3
 800158c:	f7fe fdbc 	bl	8000108 <__udivsi3>
 8001590:	0003      	movs	r3, r0
 8001592:	001a      	movs	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	189b      	adds	r3, r3, r2
 8001598:	60bb      	str	r3, [r7, #8]


	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 800159a:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <setPWMDutyCycle+0x80>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b006      	add	sp, #24
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	2000008c 	.word	0x2000008c
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fa99999 	.word	0x3fa99999
 80015b8:	3fb99999 	.word	0x3fb99999
 80015bc:	000003ff 	.word	0x000003ff

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	e7fd      	b.n	80015c8 <Error_Handler+0x8>

080015cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <MX_SPI1_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015d8:	2282      	movs	r2, #130	@ 0x82
 80015da:	0052      	lsls	r2, r2, #1
 80015dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015e6:	22e0      	movs	r2, #224	@ 0xe0
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_SPI1_Init+0x74>)
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_SPI1_Init+0x74>)
 8001602:	2218      	movs	r2, #24
 8001604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_SPI1_Init+0x74>)
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_SPI1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <MX_SPI1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_SPI1_Init+0x74>)
 800161a:	2207      	movs	r2, #7
 800161c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_SPI1_Init+0x74>)
 8001626:	2208      	movs	r2, #8
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <MX_SPI1_Init+0x74>)
 800162c:	0018      	movs	r0, r3
 800162e:	f001 f9b1 	bl	8002994 <HAL_SPI_Init>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d001      	beq.n	800163a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001636:	f7ff ffc3 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000028 	.word	0x20000028
 8001644:	40013000 	.word	0x40013000

08001648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b08b      	sub	sp, #44	@ 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	2414      	movs	r4, #20
 8001652:	193b      	adds	r3, r7, r4
 8001654:	0018      	movs	r0, r3
 8001656:	2314      	movs	r3, #20
 8001658:	001a      	movs	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f002 fc8a 	bl	8003f74 <memset>
  if(spiHandle->Instance==SPI1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2e      	ldr	r2, [pc, #184]	@ (8001720 <HAL_SPI_MspInit+0xd8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d155      	bne.n	8001716 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166a:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0149      	lsls	r1, r1, #5
 8001674:	430a      	orrs	r2, r1
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	0289      	lsls	r1, r1, #10
 8001690:	430a      	orrs	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	02c9      	lsls	r1, r1, #11
 80016ac:	430a      	orrs	r2, r1
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_SPI_MspInit+0xdc>)
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	02db      	lsls	r3, r3, #11
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	22c0      	movs	r2, #192	@ 0xc0
 80016c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	2202      	movs	r2, #2
 80016c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	2203      	movs	r2, #3
 80016d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	193a      	adds	r2, r7, r4
 80016de:	2390      	movs	r3, #144	@ 0x90
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 fadf 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ea:	0021      	movs	r1, r4
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2208      	movs	r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2202      	movs	r2, #2
 80016f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2203      	movs	r2, #3
 8001702:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	187b      	adds	r3, r7, r1
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_SPI_MspInit+0xe0>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f000 fac9 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b00b      	add	sp, #44	@ 0x2c
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000
 8001728:	48000400 	.word	0x48000400

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_MspInit+0x44>)
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_MspInit+0x44>)
 8001738:	2101      	movs	r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_MspInit+0x44>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_MspInit+0x44>)
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_MspInit+0x44>)
 8001750:	2180      	movs	r1, #128	@ 0x80
 8001752:	0549      	lsls	r1, r1, #21
 8001754:	430a      	orrs	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_MspInit+0x44>)
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	4013      	ands	r3, r2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f990 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b096      	sub	sp, #88	@ 0x58
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	2348      	movs	r3, #72	@ 0x48
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	0018      	movs	r0, r3
 80017bc:	2310      	movs	r3, #16
 80017be:	001a      	movs	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f002 fbd7 	bl	8003f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	0018      	movs	r0, r3
 80017cc:	2308      	movs	r3, #8
 80017ce:	001a      	movs	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f002 fbcf 	bl	8003f74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	2324      	movs	r3, #36	@ 0x24
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	0018      	movs	r0, r3
 80017dc:	231c      	movs	r3, #28
 80017de:	001a      	movs	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f002 fbc7 	bl	8003f74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	0018      	movs	r0, r3
 80017ea:	2320      	movs	r3, #32
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f002 fbc0 	bl	8003f74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f4:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <MX_TIM1_Init+0x160>)
 80017f6:	4a47      	ldr	r2, [pc, #284]	@ (8001914 <MX_TIM1_Init+0x164>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 80017fa:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <MX_TIM1_Init+0x160>)
 80017fc:	220e      	movs	r2, #14
 80017fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <MX_TIM1_Init+0x160>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001806:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <MX_TIM1_Init+0x160>)
 8001808:	4a43      	ldr	r2, [pc, #268]	@ (8001918 <MX_TIM1_Init+0x168>)
 800180a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <MX_TIM1_Init+0x160>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001812:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <MX_TIM1_Init+0x160>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001818:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <MX_TIM1_Init+0x160>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181e:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <MX_TIM1_Init+0x160>)
 8001820:	0018      	movs	r0, r3
 8001822:	f001 fcb7 	bl	8003194 <HAL_TIM_Base_Init>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800182a:	f7ff fec9 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	2148      	movs	r1, #72	@ 0x48
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	0152      	lsls	r2, r2, #5
 8001836:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001838:	187a      	adds	r2, r7, r1
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <MX_TIM1_Init+0x160>)
 800183c:	0011      	movs	r1, r2
 800183e:	0018      	movs	r0, r3
 8001840:	f001 fece 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001848:	f7ff feba 	bl	80015c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184c:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <MX_TIM1_Init+0x160>)
 800184e:	0018      	movs	r0, r3
 8001850:	f001 fcf0 	bl	8003234 <HAL_TIM_PWM_Init>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001858:	f7ff feb2 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2140      	movs	r1, #64	@ 0x40
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186a:	187a      	adds	r2, r7, r1
 800186c:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <MX_TIM1_Init+0x160>)
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f002 fac3 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800187a:	f7ff fea1 	bl	80015c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2124      	movs	r1, #36	@ 0x24
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2260      	movs	r2, #96	@ 0x60
 8001884:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018aa:	1879      	adds	r1, r7, r1
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <MX_TIM1_Init+0x160>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 fdcf 	bl	8003454 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80018ba:	f7ff fe81 	bl	80015c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	0192      	lsls	r2, r2, #6
 80018e2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ea:	1d3a      	adds	r2, r7, #4
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <MX_TIM1_Init+0x160>)
 80018ee:	0011      	movs	r1, r2
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 fae1 	bl	8003eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80018fa:	f7ff fe61 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <MX_TIM1_Init+0x160>)
 8001900:	0018      	movs	r0, r3
 8001902:	f000 f82b 	bl	800195c <HAL_TIM_MspPostInit>

}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b016      	add	sp, #88	@ 0x58
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	2000008c 	.word	0x2000008c
 8001914:	40012c00 	.word	0x40012c00
 8001918:	0000ea60 	.word	0x0000ea60

0800191c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_TIM_Base_MspInit+0x38>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10d      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0109      	lsls	r1, r1, #4
 8001938:	430a      	orrs	r2, r1
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	240c      	movs	r4, #12
 8001966:	193b      	adds	r3, r7, r4
 8001968:	0018      	movs	r0, r3
 800196a:	2314      	movs	r3, #20
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f002 fb00 	bl	8003f74 <memset>
  if(timHandle->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_TIM_MspPostInit+0x78>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d125      	bne.n	80019ca <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_TIM_MspPostInit+0x7c>)
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_TIM_MspPostInit+0x7c>)
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0289      	lsls	r1, r1, #10
 8001988:	430a      	orrs	r2, r1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_TIM_MspPostInit+0x7c>)
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	0021      	movs	r1, r4
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2202      	movs	r2, #2
 80019a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2202      	movs	r2, #2
 80019ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	187a      	adds	r2, r7, r1
 80019be:	2390      	movs	r3, #144	@ 0x90
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f96f 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b009      	add	sp, #36	@ 0x24
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40021000 	.word	0x40021000

080019dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019dc:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	@ (8001a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <LoopForever+0xe>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	@ (8001a28 <LoopForever+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a06:	f7ff fece 	bl	80017a6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a0a:	f002 fabb 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0e:	f7ff fcd3 	bl	80013b8 <main>

08001a12 <LoopForever>:

LoopForever:
    b LoopForever
 8001a12:	e7fe      	b.n	8001a12 <LoopForever>
  ldr   r0, =_estack
 8001a14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a20:	0800401c 	.word	0x0800401c
  ldr r2, =_sbss
 8001a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a28:	200000d8 	.word	0x200000d8

08001a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_COMP_IRQHandler>
	...

08001a30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_Init+0x24>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_Init+0x24>)
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f809 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a46:	f7ff fe71 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_InitTick+0x5c>)
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_InitTick+0x60>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	23fa      	movs	r3, #250	@ 0xfa
 8001a6c:	0098      	lsls	r0, r3, #2
 8001a6e:	f7fe fb4b 	bl	8000108 <__udivsi3>
 8001a72:	0003      	movs	r3, r0
 8001a74:	0019      	movs	r1, r3
 8001a76:	0020      	movs	r0, r4
 8001a78:	f7fe fb46 	bl	8000108 <__udivsi3>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f905 	bl	8001c8e <HAL_SYSTICK_Config>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e00f      	b.n	8001aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d80b      	bhi.n	8001aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	2301      	movs	r3, #1
 8001a96:	425b      	negs	r3, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f8e2 	bl	8001c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_InitTick+0x64>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	001a      	movs	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	18d2      	adds	r2, r2, r3
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	200000d4 	.word	0x200000d4

08001ae4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	200000d4 	.word	0x200000d4

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	001a      	movs	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	189b      	adds	r3, r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	f7ff ffe0 	bl	8001ae4 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	0002      	movs	r2, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b54:	d828      	bhi.n	8001ba8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b56:	4a2f      	ldr	r2, [pc, #188]	@ (8001c14 <__NVIC_SetPriority+0xd4>)
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	33c0      	adds	r3, #192	@ 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	589b      	ldr	r3, [r3, r2]
 8001b66:	1dfa      	adds	r2, r7, #7
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	400a      	ands	r2, r1
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	21ff      	movs	r1, #255	@ 0xff
 8001b74:	4091      	lsls	r1, r2
 8001b76:	000a      	movs	r2, r1
 8001b78:	43d2      	mvns	r2, r2
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	401a      	ands	r2, r3
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	4003      	ands	r3, r0
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b94:	481f      	ldr	r0, [pc, #124]	@ (8001c14 <__NVIC_SetPriority+0xd4>)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	33c0      	adds	r3, #192	@ 0xc0
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ba6:	e031      	b.n	8001c0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <__NVIC_SetPriority+0xd8>)
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	0019      	movs	r1, r3
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	3b08      	subs	r3, #8
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3306      	adds	r3, #6
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1dfa      	adds	r2, r7, #7
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	2203      	movs	r2, #3
 8001bca:	400a      	ands	r2, r1
 8001bcc:	00d2      	lsls	r2, r2, #3
 8001bce:	21ff      	movs	r1, #255	@ 0xff
 8001bd0:	4091      	lsls	r1, r2
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	43d2      	mvns	r2, r2
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	401a      	ands	r2, r3
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	2303      	movs	r3, #3
 8001bea:	4003      	ands	r3, r0
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf0:	4809      	ldr	r0, [pc, #36]	@ (8001c18 <__NVIC_SetPriority+0xd8>)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	001c      	movs	r4, r3
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	4023      	ands	r3, r4
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	430a      	orrs	r2, r1
 8001c02:	3306      	adds	r3, #6
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	18c3      	adds	r3, r0, r3
 8001c08:	3304      	adds	r3, #4
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b003      	add	sp, #12
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1e5a      	subs	r2, r3, #1
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	045b      	lsls	r3, r3, #17
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d301      	bcc.n	8001c34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c30:	2301      	movs	r3, #1
 8001c32:	e010      	b.n	8001c56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <SysTick_Config+0x44>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	425b      	negs	r3, r3
 8001c40:	2103      	movs	r1, #3
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff ff7c 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <SysTick_Config+0x44>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <SysTick_Config+0x44>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	210f      	movs	r1, #15
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b004      	add	sp, #16
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ffbf 	bl	8001c1c <SysTick_Config>
 8001c9e:	0003      	movs	r3, r0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e155      	b.n	8001f64 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4091      	lsls	r1, r2
 8001cc2:	000a      	movs	r2, r1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d100      	bne.n	8001cd0 <HAL_GPIO_Init+0x28>
 8001cce:	e146      	b.n	8001f5e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d130      	bne.n	8001d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1e:	2201      	movs	r2, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	2201      	movs	r2, #1
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d017      	beq.n	8001d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	43da      	mvns	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d123      	bne.n	8001dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	58d3      	ldr	r3, [r2, r3]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	23c0      	movs	r3, #192	@ 0xc0
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d100      	bne.n	8001e1c <HAL_GPIO_Init+0x174>
 8001e1a:	e0a0      	b.n	8001f5e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	4b57      	ldr	r3, [pc, #348]	@ (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	4b56      	ldr	r3, [pc, #344]	@ (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e34:	4a52      	ldr	r2, [pc, #328]	@ (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	589b      	ldr	r3, [r3, r2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	43da      	mvns	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	2390      	movs	r3, #144	@ 0x90
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a47      	ldr	r2, [pc, #284]	@ (8001f84 <HAL_GPIO_Init+0x2dc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x1ea>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a46      	ldr	r2, [pc, #280]	@ (8001f88 <HAL_GPIO_Init+0x2e0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x1e6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a45      	ldr	r2, [pc, #276]	@ (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x1e2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a44      	ldr	r2, [pc, #272]	@ (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x1de>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e96:	2300      	movs	r3, #0
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	@ (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	035b      	lsls	r3, r3, #13
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	40da      	lsrs	r2, r3
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	d000      	beq.n	8001f72 <HAL_GPIO_Init+0x2ca>
 8001f70:	e6a2      	b.n	8001cb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	0008      	movs	r0, r1
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	1cbb      	adds	r3, r7, #2
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	1c7b      	adds	r3, r7, #1
 8001fac:	1c0a      	adds	r2, r1, #0
 8001fae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb0:	1c7b      	adds	r3, r7, #1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb8:	1cbb      	adds	r3, r7, #2
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f000 fb76 	bl	80026d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x20>
 8001ff2:	e08e      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff4:	4bc5      	ldr	r3, [pc, #788]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00e      	beq.n	800201e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4bc2      	ldr	r3, [pc, #776]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	220c      	movs	r2, #12
 8002006:	4013      	ands	r3, r2
 8002008:	2b08      	cmp	r3, #8
 800200a:	d117      	bne.n	800203c <HAL_RCC_OscConfig+0x68>
 800200c:	4bbf      	ldr	r3, [pc, #764]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	23c0      	movs	r3, #192	@ 0xc0
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	401a      	ands	r2, r3
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	429a      	cmp	r2, r3
 800201c:	d10e      	bne.n	800203c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201e:	4bbb      	ldr	r3, [pc, #748]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	4013      	ands	r3, r2
 8002028:	d100      	bne.n	800202c <HAL_RCC_OscConfig+0x58>
 800202a:	e071      	b.n	8002110 <HAL_RCC_OscConfig+0x13c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d000      	beq.n	8002036 <HAL_RCC_OscConfig+0x62>
 8002034:	e06c      	b.n	8002110 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f000 fb4c 	bl	80026d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_RCC_OscConfig+0x80>
 8002044:	4bb1      	ldr	r3, [pc, #708]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4bb0      	ldr	r3, [pc, #704]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	0249      	lsls	r1, r1, #9
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e02f      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_OscConfig+0xa2>
 800205c:	4bab      	ldr	r3, [pc, #684]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4baa      	ldr	r3, [pc, #680]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002062:	49ab      	ldr	r1, [pc, #684]	@ (8002310 <HAL_RCC_OscConfig+0x33c>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4ba8      	ldr	r3, [pc, #672]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4ba7      	ldr	r3, [pc, #668]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800206e:	49a9      	ldr	r1, [pc, #676]	@ (8002314 <HAL_RCC_OscConfig+0x340>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e01e      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0xc8>
 800207e:	4ba3      	ldr	r3, [pc, #652]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4ba2      	ldr	r3, [pc, #648]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	02c9      	lsls	r1, r1, #11
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	4b9f      	ldr	r3, [pc, #636]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b9e      	ldr	r3, [pc, #632]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	0249      	lsls	r1, r1, #9
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 800209c:	4b9b      	ldr	r3, [pc, #620]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b9a      	ldr	r3, [pc, #616]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80020a2:	499b      	ldr	r1, [pc, #620]	@ (8002310 <HAL_RCC_OscConfig+0x33c>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b98      	ldr	r3, [pc, #608]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b97      	ldr	r3, [pc, #604]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80020ae:	4999      	ldr	r1, [pc, #612]	@ (8002314 <HAL_RCC_OscConfig+0x340>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d014      	beq.n	80020e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fd12 	bl	8001ae4 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c6:	f7ff fd0d 	bl	8001ae4 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2fd      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d8:	4b8c      	ldr	r3, [pc, #560]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0xf2>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fcfd 	bl	8001ae4 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff fcf8 	bl	8001ae4 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e2e8      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b82      	ldr	r3, [pc, #520]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	029b      	lsls	r3, r3, #10
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x11c>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x14a>
 800211c:	e06c      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800211e:	4b7b      	ldr	r3, [pc, #492]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	220c      	movs	r2, #12
 8002124:	4013      	ands	r3, r2
 8002126:	d00e      	beq.n	8002146 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002128:	4b78      	ldr	r3, [pc, #480]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	220c      	movs	r2, #12
 800212e:	4013      	ands	r3, r2
 8002130:	2b08      	cmp	r3, #8
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x1a0>
 8002134:	4b75      	ldr	r3, [pc, #468]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	23c0      	movs	r3, #192	@ 0xc0
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	401a      	ands	r2, r3
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	429a      	cmp	r2, r3
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b71      	ldr	r3, [pc, #452]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x188>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2bb      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b6b      	ldr	r3, [pc, #428]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	22f8      	movs	r2, #248	@ 0xf8
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00da      	lsls	r2, r3, #3
 800216c:	4b67      	ldr	r3, [pc, #412]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e041      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d024      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b62      	ldr	r3, [pc, #392]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002182:	2101      	movs	r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fcac 	bl	8001ae4 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fca7 	bl	8001ae4 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e297      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b59      	ldr	r3, [pc, #356]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0f1      	beq.n	8002192 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b57      	ldr	r3, [pc, #348]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	22f8      	movs	r2, #248	@ 0xf8
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00da      	lsls	r2, r3, #3
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e018      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b51      	ldr	r3, [pc, #324]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b50      	ldr	r3, [pc, #320]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	438a      	bics	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fc87 	bl	8001ae4 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc82 	bl	8001ae4 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e272      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d1f1      	bne.n	80021dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2208      	movs	r2, #8
 80021fe:	4013      	ands	r3, r2
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b40      	ldr	r3, [pc, #256]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 800220c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800220e:	4b3f      	ldr	r3, [pc, #252]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002210:	2101      	movs	r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fc65 	bl	8001ae4 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fc60 	bl	8001ae4 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e250      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b36      	ldr	r3, [pc, #216]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x24c>
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b33      	ldr	r3, [pc, #204]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002242:	4b32      	ldr	r3, [pc, #200]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002244:	2101      	movs	r1, #1
 8002246:	438a      	bics	r2, r1
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fc4b 	bl	8001ae4 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fc46 	bl	8001ae4 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e236      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d1f1      	bne.n	8002254 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2204      	movs	r2, #4
 8002276:	4013      	ands	r3, r2
 8002278:	d100      	bne.n	800227c <HAL_RCC_OscConfig+0x2a8>
 800227a:	e0b5      	b.n	80023e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227c:	201f      	movs	r0, #31
 800227e:	183b      	adds	r3, r7, r0
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	4013      	ands	r3, r2
 800228e:	d110      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	4b1d      	ldr	r3, [pc, #116]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	0549      	lsls	r1, r1, #21
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	055b      	lsls	r3, r3, #21
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCC_OscConfig+0x344>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	d11a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <HAL_RCC_OscConfig+0x344>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_RCC_OscConfig+0x344>)
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc0a 	bl	8001ae4 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fc05 	bl	8001ae4 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	@ 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1f5      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCC_OscConfig+0x344>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_OscConfig+0x348>
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4b02      	ldr	r3, [pc, #8]	@ (800230c <HAL_RCC_OscConfig+0x338>)
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
 8002308:	e036      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	fffbffff 	.word	0xfffbffff
 8002318:	40007000 	.word	0x40007000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x36a>
 8002324:	4bca      	ldr	r3, [pc, #808]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4bc9      	ldr	r3, [pc, #804]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800232a:	2101      	movs	r1, #1
 800232c:	438a      	bics	r2, r1
 800232e:	621a      	str	r2, [r3, #32]
 8002330:	4bc7      	ldr	r3, [pc, #796]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	4bc6      	ldr	r3, [pc, #792]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002336:	2104      	movs	r1, #4
 8002338:	438a      	bics	r2, r1
 800233a:	621a      	str	r2, [r3, #32]
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x38c>
 8002346:	4bc2      	ldr	r3, [pc, #776]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	4bc1      	ldr	r3, [pc, #772]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800234c:	2104      	movs	r1, #4
 800234e:	430a      	orrs	r2, r1
 8002350:	621a      	str	r2, [r3, #32]
 8002352:	4bbf      	ldr	r3, [pc, #764]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	4bbe      	ldr	r3, [pc, #760]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	621a      	str	r2, [r3, #32]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 8002360:	4bbb      	ldr	r3, [pc, #748]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4bba      	ldr	r3, [pc, #744]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002366:	2101      	movs	r1, #1
 8002368:	438a      	bics	r2, r1
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	4bb8      	ldr	r3, [pc, #736]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	4bb7      	ldr	r3, [pc, #732]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002372:	2104      	movs	r1, #4
 8002374:	438a      	bics	r2, r1
 8002376:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d014      	beq.n	80023aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fbb0 	bl	8001ae4 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e009      	b.n	800239e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff fbab 	bl	8001ae4 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4aaf      	ldr	r2, [pc, #700]	@ (8002654 <HAL_RCC_OscConfig+0x680>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e19a      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	4bac      	ldr	r3, [pc, #688]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x3b6>
 80023a8:	e013      	b.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fb9b 	bl	8001ae4 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	e009      	b.n	80023c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff fb96 	bl	8001ae4 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	4aa5      	ldr	r2, [pc, #660]	@ (8002654 <HAL_RCC_OscConfig+0x680>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e185      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4ba1      	ldr	r3, [pc, #644]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	4b9b      	ldr	r3, [pc, #620]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	499d      	ldr	r1, [pc, #628]	@ (8002658 <HAL_RCC_OscConfig+0x684>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4013      	ands	r3, r2
 80023f0:	d063      	beq.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d12a      	bne.n	8002450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023fa:	4b95      	ldr	r3, [pc, #596]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023fe:	4b94      	ldr	r3, [pc, #592]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002400:	2104      	movs	r1, #4
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002406:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240a:	4b91      	ldr	r3, [pc, #580]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800240c:	2101      	movs	r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb67 	bl	8001ae4 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800241c:	f7ff fb62 	bl	8001ae4 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e152      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d0f1      	beq.n	800241c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002438:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243c:	22f8      	movs	r2, #248	@ 0xf8
 800243e:	4393      	bics	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	00da      	lsls	r2, r3, #3
 8002448:	4b81      	ldr	r3, [pc, #516]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34
 800244e:	e034      	b.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	3305      	adds	r3, #5
 8002456:	d111      	bne.n	800247c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002458:	4b7d      	ldr	r3, [pc, #500]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800245a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245c:	4b7c      	ldr	r3, [pc, #496]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800245e:	2104      	movs	r1, #4
 8002460:	438a      	bics	r2, r1
 8002462:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002464:	4b7a      	ldr	r3, [pc, #488]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002468:	22f8      	movs	r2, #248	@ 0xf8
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	@ 0x34
 800247a:	e01e      	b.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800247c:	4b74      	ldr	r3, [pc, #464]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002480:	4b73      	ldr	r3, [pc, #460]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002482:	2104      	movs	r1, #4
 8002484:	430a      	orrs	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002488:	4b71      	ldr	r3, [pc, #452]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800248a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248c:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fb26 	bl	8001ae4 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800249e:	f7ff fb21 	bl	8001ae4 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e111      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024b0:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2220      	movs	r2, #32
 80024c0:	4013      	ands	r3, r2
 80024c2:	d05c      	beq.n	800257e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024c4:	4b62      	ldr	r3, [pc, #392]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d00e      	beq.n	80024ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	220c      	movs	r2, #12
 80024d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d114      	bne.n	8002506 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	23c0      	movs	r3, #192	@ 0xc0
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	401a      	ands	r2, r3
 80024e6:	23c0      	movs	r3, #192	@ 0xc0
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	4013      	ands	r3, r2
 80024f8:	d040      	beq.n	800257c <HAL_RCC_OscConfig+0x5a8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d03c      	beq.n	800257c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e6      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01b      	beq.n	8002546 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800250e:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002512:	4b4f      	ldr	r3, [pc, #316]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0249      	lsls	r1, r1, #9
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fae2 	bl	8001ae4 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002526:	f7ff fadd 	bl	8001ae4 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0cd      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002538:	4b45      	ldr	r3, [pc, #276]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	4013      	ands	r3, r2
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x552>
 8002544:	e01b      	b.n	800257e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002546:	4b42      	ldr	r3, [pc, #264]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800254c:	4943      	ldr	r1, [pc, #268]	@ (800265c <HAL_RCC_OscConfig+0x688>)
 800254e:	400a      	ands	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fac7 	bl	8001ae4 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255c:	f7ff fac2 	bl	8001ae4 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0b2      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800256e:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x588>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800257c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x5b4>
 8002586:	e0a4      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b31      	ldr	r3, [pc, #196]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	220c      	movs	r2, #12
 800258e:	4013      	ands	r3, r2
 8002590:	2b08      	cmp	r3, #8
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x5c2>
 8002594:	e078      	b.n	8002688 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	2b02      	cmp	r3, #2
 800259c:	d14c      	bne.n	8002638 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	492e      	ldr	r1, [pc, #184]	@ (8002660 <HAL_RCC_OscConfig+0x68c>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fa9b 	bl	8001ae4 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff fa96 	bl	8001ae4 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e086      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	049b      	lsls	r3, r3, #18
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	220f      	movs	r2, #15
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002664 <HAL_RCC_OscConfig+0x690>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	0449      	lsls	r1, r1, #17
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fa69 	bl	8001ae4 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff fa64 	bl	8001ae4 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e054      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	049b      	lsls	r3, r3, #18
 8002632:	4013      	ands	r3, r2
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x644>
 8002636:	e04c      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <HAL_RCC_OscConfig+0x67c>)
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <HAL_RCC_OscConfig+0x68c>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fa4e 	bl	8001ae4 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x6a6>
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	40021000 	.word	0x40021000
 8002654:	00001388 	.word	0x00001388
 8002658:	efffffff 	.word	0xefffffff
 800265c:	fffeffff 	.word	0xfffeffff
 8002660:	feffffff 	.word	0xfeffffff
 8002664:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fa3c 	bl	8001ae4 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e02c      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <HAL_RCC_OscConfig+0x708>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	049b      	lsls	r3, r3, #18
 8002682:	4013      	ands	r3, r2
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x694>
 8002686:	e024      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e01f      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_OscConfig+0x708>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_RCC_OscConfig+0x708>)
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	23c0      	movs	r3, #192	@ 0xc0
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	401a      	ands	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10e      	bne.n	80026ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	220f      	movs	r2, #15
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	23f0      	movs	r3, #240	@ 0xf0
 80026c2:	039b      	lsls	r3, r3, #14
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b008      	add	sp, #32
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0bf      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d911      	bls.n	8002726 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0a6      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d015      	beq.n	800275c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2204      	movs	r2, #4
 8002736:	4013      	ands	r3, r2
 8002738:	d006      	beq.n	8002748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800273a:	4b51      	ldr	r3, [pc, #324]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002740:	21e0      	movs	r1, #224	@ 0xe0
 8002742:	00c9      	lsls	r1, r1, #3
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	22f0      	movs	r2, #240	@ 0xf0
 800274e:	4393      	bics	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d04c      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	4013      	ands	r3, r2
 8002778:	d120      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07a      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	049b      	lsls	r3, r3, #18
 800278e:	4013      	ands	r3, r2
 8002790:	d114      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06e      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800279e:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	025b      	lsls	r3, r3, #9
 80027a6:	4013      	ands	r3, r2
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e062      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e05b      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027bc:	4b30      	ldr	r3, [pc, #192]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f988 	bl	8001ae4 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	e009      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027da:	f7ff f983 	bl	8001ae4 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_RCC_ClockConfig+0x1a4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e042      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	220c      	movs	r2, #12
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1ec      	bne.n	80027da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d211      	bcs.n	8002832 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002820:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e020      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	4013      	ands	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_RCC_ClockConfig+0x1a8>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002850:	f000 f820 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002854:	0001      	movs	r1, r0
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	220f      	movs	r2, #15
 800285e:	4013      	ands	r3, r2
 8002860:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_RCC_ClockConfig+0x1ac>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	000a      	movs	r2, r1
 8002866:	40da      	lsrs	r2, r3
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_RCC_ClockConfig+0x1b0>)
 800286a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff f8f3 	bl	8001a58 <HAL_InitTick>
  
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	00001388 	.word	0x00001388
 8002888:	fffff8ff 	.word	0xfffff8ff
 800288c:	08004004 	.word	0x08004004
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b08f      	sub	sp, #60	@ 0x3c
 8002898:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800289a:	2314      	movs	r3, #20
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	4a38      	ldr	r2, [pc, #224]	@ (8002980 <HAL_RCC_GetSysClockFreq+0xec>)
 80028a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028a2:	c313      	stmia	r3!, {r0, r1, r4}
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4a36      	ldr	r2, [pc, #216]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ae:	c313      	stmia	r3!, {r0, r1, r4}
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 80028c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d0:	220c      	movs	r2, #12
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d047      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0xd4>
 80028d8:	d849      	bhi.n	800296e <HAL_RCC_GetSysClockFreq+0xda>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x50>
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x56>
 80028e2:	e044      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80028e8:	e044      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	0c9b      	lsrs	r3, r3, #18
 80028ee:	220f      	movs	r2, #15
 80028f0:	4013      	ands	r3, r2
 80028f2:	2214      	movs	r2, #20
 80028f4:	18ba      	adds	r2, r7, r2
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028fa:	4b23      	ldr	r3, [pc, #140]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	220f      	movs	r2, #15
 8002900:	4013      	ands	r3, r2
 8002902:	1d3a      	adds	r2, r7, #4
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290a:	23c0      	movs	r3, #192	@ 0xc0
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	401a      	ands	r2, r3
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	429a      	cmp	r2, r3
 8002916:	d109      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291a:	481c      	ldr	r0, [pc, #112]	@ (800298c <HAL_RCC_GetSysClockFreq+0xf8>)
 800291c:	f7fd fbf4 	bl	8000108 <__udivsi3>
 8002920:	0003      	movs	r3, r0
 8002922:	001a      	movs	r2, r3
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	4353      	muls	r3, r2
 8002928:	637b      	str	r3, [r7, #52]	@ 0x34
 800292a:	e01a      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800292c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292e:	23c0      	movs	r3, #192	@ 0xc0
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	401a      	ands	r2, r3
 8002934:	23c0      	movs	r3, #192	@ 0xc0
 8002936:	025b      	lsls	r3, r3, #9
 8002938:	429a      	cmp	r2, r3
 800293a:	d109      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800293c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800293e:	4814      	ldr	r0, [pc, #80]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002940:	f7fd fbe2 	bl	8000108 <__udivsi3>
 8002944:	0003      	movs	r3, r0
 8002946:	001a      	movs	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	4353      	muls	r3, r2
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
 800294e:	e008      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002952:	480e      	ldr	r0, [pc, #56]	@ (800298c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002954:	f7fd fbd8 	bl	8000108 <__udivsi3>
 8002958:	0003      	movs	r3, r0
 800295a:	001a      	movs	r2, r3
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	4353      	muls	r3, r2
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002964:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002966:	e005      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002968:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xfc>)
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800296c:	e002      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002972:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b00f      	add	sp, #60	@ 0x3c
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	08003fe4 	.word	0x08003fe4
 8002984:	08003ff4 	.word	0x08003ff4
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	02dc6c00 	.word	0x02dc6c00

08002994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0a8      	b.n	8002af8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	2382      	movs	r3, #130	@ 0x82
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d009      	beq.n	80029ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
 80029c0:	e005      	b.n	80029ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	225d      	movs	r2, #93	@ 0x5d
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	225c      	movs	r2, #92	@ 0x5c
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fe fe2c 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	225d      	movs	r2, #93	@ 0x5d
 80029f4:	2102      	movs	r1, #2
 80029f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	438a      	bics	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	23e0      	movs	r3, #224	@ 0xe0
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d902      	bls.n	8002a1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e002      	b.n	8002a20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	015b      	lsls	r3, r3, #5
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	23f0      	movs	r3, #240	@ 0xf0
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d008      	beq.n	8002a3e <HAL_SPI_Init+0xaa>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	23e0      	movs	r3, #224	@ 0xe0
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	2382      	movs	r3, #130	@ 0x82
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	2384      	movs	r3, #132	@ 0x84
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	400b      	ands	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2102      	movs	r1, #2
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2101      	movs	r1, #1
 8002a64:	400b      	ands	r3, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6999      	ldr	r1, [r3, #24]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	400b      	ands	r3, r1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2138      	movs	r1, #56	@ 0x38
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	400b      	ands	r3, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	0011      	movs	r1, r2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2110      	movs	r1, #16
 8002aac:	400b      	ands	r3, r1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	2108      	movs	r1, #8
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68d9      	ldr	r1, [r3, #12]
 8002abe:	23f0      	movs	r3, #240	@ 0xf0
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <HAL_SPI_Init+0x16c>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	225d      	movs	r2, #93	@ 0x5d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b004      	add	sp, #16
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	fffff7ff 	.word	0xfffff7ff

08002b04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	001a      	movs	r2, r3
 8002b12:	1cbb      	adds	r3, r7, #2
 8002b14:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b16:	2301      	movs	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b1a:	2323      	movs	r3, #35	@ 0x23
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	225c      	movs	r2, #92	@ 0x5c
 8002b26:	5c9b      	ldrb	r3, [r3, r2]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x2c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e1b5      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x398>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	225c      	movs	r2, #92	@ 0x5c
 8002b34:	2101      	movs	r1, #1
 8002b36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b38:	f7fe ffd4 	bl	8001ae4 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b40:	201b      	movs	r0, #27
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	215d      	movs	r1, #93	@ 0x5d
 8002b48:	5c52      	ldrb	r2, [r2, r1]
 8002b4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002b52:	2312      	movs	r3, #18
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	1cba      	adds	r2, r7, #2
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b5c:	183b      	adds	r3, r7, r0
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d011      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x84>
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	2382      	movs	r3, #130	@ 0x82
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d107      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x7a>
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d004      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002b7e:	2323      	movs	r3, #35	@ 0x23
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b86:	e17e      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_SPI_TransmitReceive+0x98>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_SPI_TransmitReceive+0x98>
 8002b94:	1cbb      	adds	r3, r7, #2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002b9c:	2323      	movs	r3, #35	@ 0x23
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ba4:	e16f      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	225d      	movs	r2, #93	@ 0x5d
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d003      	beq.n	8002bba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	225d      	movs	r2, #93	@ 0x5d
 8002bb6:	2105      	movs	r1, #5
 8002bb8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1cba      	adds	r2, r7, #2
 8002bca:	2146      	movs	r1, #70	@ 0x46
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1cba      	adds	r2, r7, #2
 8002bd4:	2144      	movs	r1, #68	@ 0x44
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1cba      	adds	r2, r7, #2
 8002be4:	8812      	ldrh	r2, [r2, #0]
 8002be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1cba      	adds	r2, r7, #2
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	23e0      	movs	r3, #224	@ 0xe0
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d908      	bls.n	8002c1a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	49a4      	ldr	r1, [pc, #656]	@ (8002ea4 <HAL_SPI_TransmitReceive+0x3a0>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e008      	b.n	8002c2c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2180      	movs	r1, #128	@ 0x80
 8002c26:	0149      	lsls	r1, r1, #5
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b40      	cmp	r3, #64	@ 0x40
 8002c38:	d007      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2140      	movs	r1, #64	@ 0x40
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	23e0      	movs	r3, #224	@ 0xe0
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d800      	bhi.n	8002c58 <HAL_SPI_TransmitReceive+0x154>
 8002c56:	e07f      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x168>
 8002c60:	2312      	movs	r3, #18
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d000      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x168>
 8002c6a:	e069      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	881a      	ldrh	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c90:	e056      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x1d4>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x1d4>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d113      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	881a      	ldrh	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	1c9a      	adds	r2, r3, #2
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d11c      	bne.n	8002d20 <HAL_SPI_TransmitReceive+0x21c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2246      	movs	r2, #70	@ 0x46
 8002cea:	5a9b      	ldrh	r3, [r3, r2]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	1c9a      	adds	r2, r3, #2
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2246      	movs	r2, #70	@ 0x46
 8002d0e:	5a9b      	ldrh	r3, [r3, r2]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b299      	uxth	r1, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2246      	movs	r2, #70	@ 0x46
 8002d1a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d20:	f7fe fee0 	bl	8001ae4 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d807      	bhi.n	8002d40 <HAL_SPI_TransmitReceive+0x23c>
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	3301      	adds	r3, #1
 8002d34:	d004      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002d36:	2323      	movs	r3, #35	@ 0x23
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d3e:	e0a2      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1a3      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x18e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2246      	movs	r2, #70	@ 0x46
 8002d4e:	5a9b      	ldrh	r3, [r3, r2]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d19d      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x18e>
 8002d56:	e085      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x268>
 8002d60:	2312      	movs	r3, #18
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d000      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x268>
 8002d6a:	e070      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d92:	e05c      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d11c      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x2d8>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x2d8>
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d114      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d11e      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x324>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2246      	movs	r2, #70	@ 0x46
 8002dee:	5a9b      	ldrh	r3, [r3, r2]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2246      	movs	r2, #70	@ 0x46
 8002e16:	5a9b      	ldrh	r3, [r3, r2]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b299      	uxth	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2246      	movs	r2, #70	@ 0x46
 8002e22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e28:	f7fe fe5c 	bl	8001ae4 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d802      	bhi.n	8002e3e <HAL_SPI_TransmitReceive+0x33a>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x340>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002e44:	2323      	movs	r3, #35	@ 0x23
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2203      	movs	r2, #3
 8002e4a:	701a      	strb	r2, [r3, #0]
        goto error;
 8002e4c:	e01b      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d19d      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x290>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2246      	movs	r2, #70	@ 0x46
 8002e5c:	5a9b      	ldrh	r3, [r3, r2]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d197      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f94c 	bl	8003108 <SPI_EndRxTxTransaction>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002e74:	2323      	movs	r3, #35	@ 0x23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e82:	e000      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002e84:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	225d      	movs	r2, #93	@ 0x5d
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	225c      	movs	r2, #92	@ 0x5c
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e96:	2323      	movs	r3, #35	@ 0x23
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b00a      	add	sp, #40	@ 0x28
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffffefff 	.word	0xffffefff

08002ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb8:	f7fe fe14 	bl	8001ae4 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	18d3      	adds	r3, r2, r3
 8002ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ec8:	f7fe fe0c 	bl	8001ae4 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fbc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	0d1b      	lsrs	r3, r3, #20
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	4353      	muls	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ede:	e058      	b.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	d055      	beq.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee6:	f7fe fdfd 	bl	8001ae4 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d902      	bls.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x54>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d142      	bne.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	21e0      	movs	r1, #224	@ 0xe0
 8002f08:	438a      	bics	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	2382      	movs	r3, #130	@ 0x82
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d113      	bne.n	8002f40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d005      	beq.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d107      	bne.n	8002f40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2140      	movs	r1, #64	@ 0x40
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	019b      	lsls	r3, r3, #6
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d110      	bne.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	491a      	ldr	r1, [pc, #104]	@ (8002fc0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2180      	movs	r1, #128	@ 0x80
 8002f68:	0189      	lsls	r1, r1, #6
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	225d      	movs	r2, #93	@ 0x5d
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	225c      	movs	r2, #92	@ 0x5c
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e017      	b.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	425a      	negs	r2, r3
 8002fa2:	4153      	adcs	r3, r2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d197      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b008      	add	sp, #32
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	ffffdfff 	.word	0xffffdfff

08002fc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fda:	f7fe fd83 	bl	8001ae4 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002fea:	f7fe fd7b 	bl	8001ae4 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ffa:	4b41      	ldr	r3, [pc, #260]	@ (8003100 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	0013      	movs	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	189b      	adds	r3, r3, r2
 8003004:	00da      	lsls	r2, r3, #3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	0d1b      	lsrs	r3, r3, #20
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	4353      	muls	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003010:	e068      	b.n	80030e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	23c0      	movs	r3, #192	@ 0xc0
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	429a      	cmp	r2, r3
 800301a:	d10a      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	2117      	movs	r1, #23
 800302a:	187b      	adds	r3, r7, r1
 800302c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800302e:	187b      	adds	r3, r7, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	d055      	beq.n	80030e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003038:	f7fe fd54 	bl	8001ae4 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	429a      	cmp	r2, r3
 8003046:	d902      	bls.n	800304e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d142      	bne.n	80030d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	21e0      	movs	r1, #224	@ 0xe0
 800305a:	438a      	bics	r2, r1
 800305c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	2382      	movs	r3, #130	@ 0x82
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	429a      	cmp	r2, r3
 8003068:	d113      	bne.n	8003092 <SPI_WaitFifoStateUntilTimeout+0xce>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	2380      	movs	r3, #128	@ 0x80
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	429a      	cmp	r2, r3
 8003074:	d005      	beq.n	8003082 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	429a      	cmp	r2, r3
 8003080:	d107      	bne.n	8003092 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2140      	movs	r1, #64	@ 0x40
 800308e:	438a      	bics	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	429a      	cmp	r2, r3
 800309c:	d110      	bne.n	80030c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4916      	ldr	r1, [pc, #88]	@ (8003104 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	0189      	lsls	r1, r1, #6
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	225d      	movs	r2, #93	@ 0x5d
 80030c4:	2101      	movs	r1, #1
 80030c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	225c      	movs	r2, #92	@ 0x5c
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e010      	b.n	80030f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }      
      count--;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d18e      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b00a      	add	sp, #40	@ 0x28
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	20000000 	.word	0x20000000
 8003104:	ffffdfff 	.word	0xffffdfff

08003108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	23c0      	movs	r3, #192	@ 0xc0
 8003118:	0159      	lsls	r1, r3, #5
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	0013      	movs	r3, r2
 8003122:	2200      	movs	r2, #0
 8003124:	f7ff ff4e 	bl	8002fc4 <SPI_WaitFifoStateUntilTimeout>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d007      	beq.n	800313c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003130:	2220      	movs	r2, #32
 8003132:	431a      	orrs	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e027      	b.n	800318c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	0013      	movs	r3, r2
 8003146:	2200      	movs	r2, #0
 8003148:	2180      	movs	r1, #128	@ 0x80
 800314a:	f7ff fead 	bl	8002ea8 <SPI_WaitFlagStateUntilTimeout>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d007      	beq.n	8003162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	2220      	movs	r2, #32
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e014      	b.n	800318c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	23c0      	movs	r3, #192	@ 0xc0
 8003166:	00d9      	lsls	r1, r3, #3
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	0013      	movs	r3, r2
 8003170:	2200      	movs	r2, #0
 8003172:	f7ff ff27 	bl	8002fc4 <SPI_WaitFifoStateUntilTimeout>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d007      	beq.n	800318a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	2220      	movs	r2, #32
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e000      	b.n	800318c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b004      	add	sp, #16
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e042      	b.n	800322c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	223d      	movs	r2, #61	@ 0x3d
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	223c      	movs	r2, #60	@ 0x3c
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fe fbad 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	223d      	movs	r2, #61	@ 0x3d
 80031c6:	2102      	movs	r1, #2
 80031c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	0019      	movs	r1, r3
 80031d4:	0010      	movs	r0, r2
 80031d6:	f000 fad7 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2246      	movs	r2, #70	@ 0x46
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223e      	movs	r2, #62	@ 0x3e
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	223f      	movs	r2, #63	@ 0x3f
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2240      	movs	r2, #64	@ 0x40
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2241      	movs	r2, #65	@ 0x41
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2242      	movs	r2, #66	@ 0x42
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2243      	movs	r2, #67	@ 0x43
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2244      	movs	r2, #68	@ 0x44
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2245      	movs	r2, #69	@ 0x45
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	@ 0x3d
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e042      	b.n	80032cc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223d      	movs	r2, #61	@ 0x3d
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223c      	movs	r2, #60	@ 0x3c
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f839 	bl	80032d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	223d      	movs	r2, #61	@ 0x3d
 8003266:	2102      	movs	r1, #2
 8003268:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f000 fa87 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2246      	movs	r2, #70	@ 0x46
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223e      	movs	r2, #62	@ 0x3e
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223f      	movs	r2, #63	@ 0x3f
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2240      	movs	r2, #64	@ 0x40
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2241      	movs	r2, #65	@ 0x41
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2242      	movs	r2, #66	@ 0x42
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2243      	movs	r2, #67	@ 0x43
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2244      	movs	r2, #68	@ 0x44
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2245      	movs	r2, #69	@ 0x45
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223d      	movs	r2, #61	@ 0x3d
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d108      	bne.n	8003306 <HAL_TIM_PWM_Start+0x22>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	223e      	movs	r2, #62	@ 0x3e
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	1e5a      	subs	r2, r3, #1
 8003300:	4193      	sbcs	r3, r2
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e01f      	b.n	8003346 <HAL_TIM_PWM_Start+0x62>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d108      	bne.n	800331e <HAL_TIM_PWM_Start+0x3a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	223f      	movs	r2, #63	@ 0x3f
 8003310:	5c9b      	ldrb	r3, [r3, r2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	4193      	sbcs	r3, r2
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e013      	b.n	8003346 <HAL_TIM_PWM_Start+0x62>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d108      	bne.n	8003336 <HAL_TIM_PWM_Start+0x52>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2240      	movs	r2, #64	@ 0x40
 8003328:	5c9b      	ldrb	r3, [r3, r2]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	1e5a      	subs	r2, r3, #1
 8003330:	4193      	sbcs	r3, r2
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e007      	b.n	8003346 <HAL_TIM_PWM_Start+0x62>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2241      	movs	r2, #65	@ 0x41
 800333a:	5c9b      	ldrb	r3, [r3, r2]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	4193      	sbcs	r3, r2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e074      	b.n	8003438 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0x7a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223e      	movs	r2, #62	@ 0x3e
 8003358:	2102      	movs	r1, #2
 800335a:	5499      	strb	r1, [r3, r2]
 800335c:	e013      	b.n	8003386 <HAL_TIM_PWM_Start+0xa2>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0x8a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223f      	movs	r2, #63	@ 0x3f
 8003368:	2102      	movs	r1, #2
 800336a:	5499      	strb	r1, [r3, r2]
 800336c:	e00b      	b.n	8003386 <HAL_TIM_PWM_Start+0xa2>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0x9a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2240      	movs	r2, #64	@ 0x40
 8003378:	2102      	movs	r1, #2
 800337a:	5499      	strb	r1, [r3, r2]
 800337c:	e003      	b.n	8003386 <HAL_TIM_PWM_Start+0xa2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2241      	movs	r2, #65	@ 0x41
 8003382:	2102      	movs	r1, #2
 8003384:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6839      	ldr	r1, [r7, #0]
 800338c:	2201      	movs	r2, #1
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fd10 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <HAL_TIM_PWM_Start+0x15c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <HAL_TIM_PWM_Start+0xd8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a28      	ldr	r2, [pc, #160]	@ (8003444 <HAL_TIM_PWM_Start+0x160>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_TIM_PWM_Start+0xd8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_TIM_PWM_Start+0x164>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_TIM_PWM_Start+0xd8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a25      	ldr	r2, [pc, #148]	@ (800344c <HAL_TIM_PWM_Start+0x168>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_TIM_PWM_Start+0xdc>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_TIM_PWM_Start+0xde>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	0209      	lsls	r1, r1, #8
 80033d4:	430a      	orrs	r2, r1
 80033d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a18      	ldr	r2, [pc, #96]	@ (8003440 <HAL_TIM_PWM_Start+0x15c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <HAL_TIM_PWM_Start+0x11e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d009      	beq.n	8003402 <HAL_TIM_PWM_Start+0x11e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_TIM_PWM_Start+0x16c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_TIM_PWM_Start+0x11e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_TIM_PWM_Start+0x160>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d111      	bne.n	8003426 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2207      	movs	r2, #7
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b06      	cmp	r3, #6
 8003412:	d010      	beq.n	8003436 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	e007      	b.n	8003436 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40000400 	.word	0x40000400

08003454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2317      	movs	r3, #23
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	223c      	movs	r2, #60	@ 0x3c
 800346c:	5c9b      	ldrb	r3, [r3, r2]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003472:	2302      	movs	r3, #2
 8003474:	e0ad      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	223c      	movs	r2, #60	@ 0x3c
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d100      	bne.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003484:	e076      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d900      	bls.n	800348e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800348c:	e095      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d04e      	beq.n	8003532 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d900      	bls.n	800349c <HAL_TIM_PWM_ConfigChannel+0x48>
 800349a:	e08e      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d021      	beq.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80034a8:	e087      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f9e8 	bl	8003888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2108      	movs	r1, #8
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2104      	movs	r1, #4
 80034d4:	438a      	bics	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	619a      	str	r2, [r3, #24]
      break;
 80034ea:	e06b      	b.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	0011      	movs	r1, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 fa4f 	bl	8003998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	0109      	lsls	r1, r1, #4
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4931      	ldr	r1, [pc, #196]	@ (80035dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003518:	400a      	ands	r2, r1
 800351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	619a      	str	r2, [r3, #24]
      break;
 8003530:	e048      	b.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fab0 	bl	8003aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2108      	movs	r1, #8
 800354c:	430a      	orrs	r2, r1
 800354e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2104      	movs	r1, #4
 800355c:	438a      	bics	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69d9      	ldr	r1, [r3, #28]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	61da      	str	r2, [r3, #28]
      break;
 8003572:	e027      	b.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f000 fb15 	bl	8003bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2180      	movs	r1, #128	@ 0x80
 800358e:	0109      	lsls	r1, r1, #4
 8003590:	430a      	orrs	r2, r1
 8003592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	490f      	ldr	r1, [pc, #60]	@ (80035dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69d9      	ldr	r1, [r3, #28]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	61da      	str	r2, [r3, #28]
      break;
 80035b8:	e004      	b.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80035ba:	2317      	movs	r3, #23
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
      break;
 80035c2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	223c      	movs	r2, #60	@ 0x3c
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

  return status;
 80035cc:	2317      	movs	r3, #23
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b006      	add	sp, #24
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	fffffbff 	.word	0xfffffbff

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	230f      	movs	r3, #15
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223c      	movs	r2, #60	@ 0x3c
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_ConfigClockSource+0x20>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0bc      	b.n	800377a <HAL_TIM_ConfigClockSource+0x19a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	223c      	movs	r2, #60	@ 0x3c
 8003604:	2101      	movs	r1, #1
 8003606:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223d      	movs	r2, #61	@ 0x3d
 800360c:	2102      	movs	r1, #2
 800360e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2277      	movs	r2, #119	@ 0x77
 800361c:	4393      	bics	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a58      	ldr	r2, [pc, #352]	@ (8003784 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	0192      	lsls	r2, r2, #6
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xde>
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	0192      	lsls	r2, r2, #6
 8003640:	4293      	cmp	r3, r2
 8003642:	d900      	bls.n	8003646 <HAL_TIM_ConfigClockSource+0x66>
 8003644:	e088      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	0152      	lsls	r2, r2, #5
 800364a:	4293      	cmp	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_TIM_ConfigClockSource+0x70>
 800364e:	e088      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x182>
 8003650:	2280      	movs	r2, #128	@ 0x80
 8003652:	0152      	lsls	r2, r2, #5
 8003654:	4293      	cmp	r3, r2
 8003656:	d900      	bls.n	800365a <HAL_TIM_ConfigClockSource+0x7a>
 8003658:	e07e      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800365a:	2b70      	cmp	r3, #112	@ 0x70
 800365c:	d018      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xb0>
 800365e:	d900      	bls.n	8003662 <HAL_TIM_ConfigClockSource+0x82>
 8003660:	e07a      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003662:	2b60      	cmp	r3, #96	@ 0x60
 8003664:	d04f      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x126>
 8003666:	d900      	bls.n	800366a <HAL_TIM_ConfigClockSource+0x8a>
 8003668:	e076      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800366a:	2b50      	cmp	r3, #80	@ 0x50
 800366c:	d03b      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x106>
 800366e:	d900      	bls.n	8003672 <HAL_TIM_ConfigClockSource+0x92>
 8003670:	e072      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d057      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x146>
 8003676:	d900      	bls.n	800367a <HAL_TIM_ConfigClockSource+0x9a>
 8003678:	e06e      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800367a:	2b30      	cmp	r3, #48	@ 0x30
 800367c:	d063      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 8003684:	d868      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d05d      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800368a:	2b10      	cmp	r3, #16
 800368c:	d05b      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800368e:	e063      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f000 fb68 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2277      	movs	r2, #119	@ 0x77
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e052      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f000 fb51 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	01c9      	lsls	r1, r1, #7
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	001a      	movs	r2, r3
 80036f4:	f000 fac4 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	@ 0x50
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fb1e 	bl	8003d40 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	001a      	movs	r2, r3
 8003714:	f000 fae2 	bl	8003cdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	@ 0x60
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fb0e 	bl	8003d40 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	001a      	movs	r2, r3
 8003734:	f000 faa4 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	@ 0x40
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fafe 	bl	8003d40 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 faf5 	bl	8003d40 <TIM_ITRx_SetConfig>
      break;
 8003756:	e005      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003758:	230f      	movs	r3, #15
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003762:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	223d      	movs	r2, #61	@ 0x3d
 8003768:	2101      	movs	r1, #1
 800376a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	223c      	movs	r2, #60	@ 0x3c
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

  return status;
 8003774:	230f      	movs	r3, #15
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	ffff00ff 	.word	0xffff00ff

08003788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a34      	ldr	r2, [pc, #208]	@ (800386c <TIM_Base_SetConfig+0xe4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d008      	beq.n	80037b2 <TIM_Base_SetConfig+0x2a>
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x2a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a30      	ldr	r2, [pc, #192]	@ (8003870 <TIM_Base_SetConfig+0xe8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2270      	movs	r2, #112	@ 0x70
 80037b6:	4393      	bics	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a29      	ldr	r2, [pc, #164]	@ (800386c <TIM_Base_SetConfig+0xe4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	05db      	lsls	r3, r3, #23
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d013      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <TIM_Base_SetConfig+0xe8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00f      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a24      	ldr	r2, [pc, #144]	@ (8003874 <TIM_Base_SetConfig+0xec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a23      	ldr	r2, [pc, #140]	@ (8003878 <TIM_Base_SetConfig+0xf0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a22      	ldr	r2, [pc, #136]	@ (800387c <TIM_Base_SetConfig+0xf4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0x76>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <TIM_Base_SetConfig+0xf8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <TIM_Base_SetConfig+0xfc>)
 8003802:	4013      	ands	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2280      	movs	r2, #128	@ 0x80
 8003814:	4393      	bics	r3, r2
 8003816:	001a      	movs	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <TIM_Base_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_Base_SetConfig+0xce>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a0d      	ldr	r2, [pc, #52]	@ (8003878 <TIM_Base_SetConfig+0xf0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_Base_SetConfig+0xce>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <TIM_Base_SetConfig+0xf4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0xce>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <TIM_Base_SetConfig+0xf8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d103      	bne.n	800385e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	615a      	str	r2, [r3, #20]
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40000400 	.word	0x40000400
 8003874:	40002000 	.word	0x40002000
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800
 8003884:	fffffcff 	.word	0xfffffcff

08003888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	2201      	movs	r2, #1
 8003898:	4393      	bics	r3, r2
 800389a:	001a      	movs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2270      	movs	r2, #112	@ 0x70
 80038b6:	4393      	bics	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2203      	movs	r2, #3
 80038be:	4393      	bics	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2202      	movs	r2, #2
 80038d0:	4393      	bics	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <TIM_OC1_SetConfig+0xf8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_OC1_SetConfig+0x76>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	@ (8003984 <TIM_OC1_SetConfig+0xfc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_OC1_SetConfig+0x76>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	@ (8003988 <TIM_OC1_SetConfig+0x100>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_OC1_SetConfig+0x76>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a24      	ldr	r2, [pc, #144]	@ (800398c <TIM_OC1_SetConfig+0x104>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10c      	bne.n	8003918 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2208      	movs	r2, #8
 8003902:	4393      	bics	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2204      	movs	r2, #4
 8003914:	4393      	bics	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <TIM_OC1_SetConfig+0xf8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_OC1_SetConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <TIM_OC1_SetConfig+0xfc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_OC1_SetConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_OC1_SetConfig+0x100>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC1_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_OC1_SetConfig+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_OC1_SetConfig+0x108>)
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_OC1_SetConfig+0x10c>)
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	fffffeff 	.word	0xfffffeff
 8003994:	fffffdff 	.word	0xfffffdff

08003998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	2210      	movs	r2, #16
 80039a8:	4393      	bics	r3, r2
 80039aa:	001a      	movs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a80 <TIM_OC2_SetConfig+0xe8>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a84 <TIM_OC2_SetConfig+0xec>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2220      	movs	r2, #32
 80039e2:	4393      	bics	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a24      	ldr	r2, [pc, #144]	@ (8003a88 <TIM_OC2_SetConfig+0xf0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10d      	bne.n	8003a16 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	4393      	bics	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	4393      	bics	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <TIM_OC2_SetConfig+0xf0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_OC2_SetConfig+0x9e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <TIM_OC2_SetConfig+0xf4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_OC2_SetConfig+0x9e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <TIM_OC2_SetConfig+0xf8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC2_SetConfig+0x9e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <TIM_OC2_SetConfig+0xfc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d113      	bne.n	8003a5e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <TIM_OC2_SetConfig+0x100>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <TIM_OC2_SetConfig+0x104>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b006      	add	sp, #24
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	ffff8fff 	.word	0xffff8fff
 8003a84:	fffffcff 	.word	0xfffffcff
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800
 8003a98:	fffffbff 	.word	0xfffffbff
 8003a9c:	fffff7ff 	.word	0xfffff7ff

08003aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <TIM_OC3_SetConfig+0xe4>)
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2270      	movs	r2, #112	@ 0x70
 8003acc:	4393      	bics	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	@ (8003b88 <TIM_OC3_SetConfig+0xe8>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a24      	ldr	r2, [pc, #144]	@ (8003b8c <TIM_OC3_SetConfig+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10d      	bne.n	8003b1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4a23      	ldr	r2, [pc, #140]	@ (8003b90 <TIM_OC3_SetConfig+0xf0>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <TIM_OC3_SetConfig+0xf4>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b8c <TIM_OC3_SetConfig+0xec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <TIM_OC3_SetConfig+0xf8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b9c <TIM_OC3_SetConfig+0xfc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <TIM_OC3_SetConfig+0x100>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <TIM_OC3_SetConfig+0x104>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4a18      	ldr	r2, [pc, #96]	@ (8003ba8 <TIM_OC3_SetConfig+0x108>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b006      	add	sp, #24
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fffffeff 	.word	0xfffffeff
 8003b88:	fffffdff 	.word	0xfffffdff
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	fffff7ff 	.word	0xfffff7ff
 8003b94:	fffffbff 	.word	0xfffffbff
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800
 8003ba4:	ffffefff 	.word	0xffffefff
 8003ba8:	ffffdfff 	.word	0xffffdfff

08003bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <TIM_OC4_SetConfig+0xb0>)
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a22      	ldr	r2, [pc, #136]	@ (8003c60 <TIM_OC4_SetConfig+0xb4>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a21      	ldr	r2, [pc, #132]	@ (8003c64 <TIM_OC4_SetConfig+0xb8>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <TIM_OC4_SetConfig+0xbc>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	031b      	lsls	r3, r3, #12
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <TIM_OC4_SetConfig+0xc0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <TIM_OC4_SetConfig+0x78>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a18      	ldr	r2, [pc, #96]	@ (8003c70 <TIM_OC4_SetConfig+0xc4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_OC4_SetConfig+0x78>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <TIM_OC4_SetConfig+0xc8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC4_SetConfig+0x78>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <TIM_OC4_SetConfig+0xcc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d109      	bne.n	8003c38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <TIM_OC4_SetConfig+0xd0>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b006      	add	sp, #24
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	ffffefff 	.word	0xffffefff
 8003c60:	ffff8fff 	.word	0xffff8fff
 8003c64:	fffffcff 	.word	0xfffffcff
 8003c68:	ffffdfff 	.word	0xffffdfff
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800
 8003c7c:	ffffbfff 	.word	0xffffbfff

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	2201      	movs	r2, #1
 8003c98:	4393      	bics	r3, r2
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	22f0      	movs	r2, #240	@ 0xf0
 8003caa:	4393      	bics	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	220a      	movs	r2, #10
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	2210      	movs	r2, #16
 8003cee:	4393      	bics	r3, r2
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <TIM_TI2_ConfigInputStage+0x60>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	22a0      	movs	r2, #160	@ 0xa0
 8003d18:	4393      	bics	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b006      	add	sp, #24
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	ffff0fff 	.word	0xffff0fff

08003d40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2270      	movs	r2, #112	@ 0x70
 8003d54:	4393      	bics	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	2207      	movs	r2, #7
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	609a      	str	r2, [r3, #8]
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4a09      	ldr	r2, [pc, #36]	@ (8003db0 <TIM_ETR_SetConfig+0x3c>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	ffff00ff 	.word	0xffff00ff

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	221f      	movs	r2, #31
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	0013      	movs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	43d2      	mvns	r2, r2
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	211f      	movs	r1, #31
 8003de4:	400b      	ands	r3, r1
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4099      	lsls	r1, r3
 8003dea:	000b      	movs	r3, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b006      	add	sp, #24
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	223c      	movs	r2, #60	@ 0x3c
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e047      	b.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	223c      	movs	r2, #60	@ 0x3c
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223d      	movs	r2, #61	@ 0x3d
 8003e20:	2102      	movs	r1, #2
 8003e22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2270      	movs	r2, #112	@ 0x70
 8003e38:	4393      	bics	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d009      	beq.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a11      	ldr	r2, [pc, #68]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10c      	bne.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2280      	movs	r2, #128	@ 0x80
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223d      	movs	r2, #61	@ 0x3d
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223c      	movs	r2, #60	@ 0x3c
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223c      	movs	r2, #60	@ 0x3c
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e03e      	b.n	8003f52 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223c      	movs	r2, #60	@ 0x3c
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003efe:	401a      	ands	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a13      	ldr	r2, [pc, #76]	@ (8003f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003f28:	401a      	ands	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a0e      	ldr	r2, [pc, #56]	@ (8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003f36:	401a      	ands	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	223c      	movs	r2, #60	@ 0x3c
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	fffffcff 	.word	0xfffffcff
 8003f60:	fffffbff 	.word	0xfffffbff
 8003f64:	fffff7ff 	.word	0xfffff7ff
 8003f68:	ffffefff 	.word	0xffffefff
 8003f6c:	ffffdfff 	.word	0xffffdfff
 8003f70:	ffffbfff 	.word	0xffffbfff

08003f74 <memset>:
 8003f74:	0003      	movs	r3, r0
 8003f76:	1882      	adds	r2, r0, r2
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	2600      	movs	r6, #0
 8003f88:	4c0c      	ldr	r4, [pc, #48]	@ (8003fbc <__libc_init_array+0x38>)
 8003f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003fc0 <__libc_init_array+0x3c>)
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	42a6      	cmp	r6, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	2600      	movs	r6, #0
 8003f96:	f000 f819 	bl	8003fcc <_init>
 8003f9a:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc4 <__libc_init_array+0x40>)
 8003f9c:	4d0a      	ldr	r5, [pc, #40]	@ (8003fc8 <__libc_init_array+0x44>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	42a6      	cmp	r6, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	00b3      	lsls	r3, r6, #2
 8003faa:	58eb      	ldr	r3, [r5, r3]
 8003fac:	4798      	blx	r3
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	00b3      	lsls	r3, r6, #2
 8003fb4:	58eb      	ldr	r3, [r5, r3]
 8003fb6:	4798      	blx	r3
 8003fb8:	3601      	adds	r6, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	08004014 	.word	0x08004014
 8003fc0:	08004014 	.word	0x08004014
 8003fc4:	08004018 	.word	0x08004018
 8003fc8:	08004014 	.word	0x08004014

08003fcc <_init>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr

08003fd8 <_fini>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr
