
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  2000000c  0800309c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000015c  0800309c  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e290  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001f60  00000000  00000000  0002e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000db0  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cc8  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00019c67  00000000  00000000  00031ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001109b  00000000  00000000  0004b907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00096bd6  00000000  00000000  0005c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000f3578  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030b0  00000000  00000000  000f35c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003038 	.word	0x08003038

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003038 	.word	0x08003038

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fef9 	bl	8003028 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b41      	ldr	r3, [pc, #260]	; (800033c <MX_GPIO_Init+0x11c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b40      	ldr	r3, [pc, #256]	; (800033c <MX_GPIO_Init+0x11c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <MX_GPIO_Init+0x11c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <MX_GPIO_Init+0x11c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x11c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x11c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <MX_GPIO_Init+0x11c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b32      	ldr	r3, [pc, #200]	; (800033c <MX_GPIO_Init+0x11c>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b2f      	ldr	r3, [pc, #188]	; (800033c <MX_GPIO_Init+0x11c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b2c      	ldr	r3, [pc, #176]	; (800033c <MX_GPIO_Init+0x11c>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <MX_GPIO_Init+0x11c>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b28      	ldr	r3, [pc, #160]	; (800033c <MX_GPIO_Init+0x11c>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fe12 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	4821      	ldr	r0, [pc, #132]	; (8000340 <MX_GPIO_Init+0x120>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0019      	movs	r1, r3
 80002be:	f000 fe0b 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0192      	lsls	r2, r2, #6
 80002c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2284      	movs	r2, #132	; 0x84
 80002ce:	0392      	lsls	r2, r2, #14
 80002d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_GPIO_Init+0x124>)
 80002dc:	0019      	movs	r1, r3
 80002de:	0010      	movs	r0, r2
 80002e0:	f000 fc82 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2220      	movs	r2, #32
 80002e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2201      	movs	r2, #1
 80002ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	193a      	adds	r2, r7, r4
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fc6f 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800030a:	0021      	movs	r1, r4
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	187b      	adds	r3, r7, r1
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <MX_GPIO_Init+0x120>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f000 fc5b 	bl	8000be8 <HAL_GPIO_Init>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b00b      	add	sp, #44	; 0x2c
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400
 8000344:	48000800 	.word	0x48000800

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 fb10 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f80c 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f7ff ff64 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000358:	f000 fa64 	bl	8000824 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800035c:	f000 f85e 	bl	800041c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000360:	f000 f94c 	bl	80005fc <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(10);
 8000364:	200a      	movs	r0, #10
 8000366:	f000 fb67 	bl	8000a38 <HAL_Delay>
 800036a:	e7fb      	b.n	8000364 <main+0x1c>

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b099      	sub	sp, #100	; 0x64
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	242c      	movs	r4, #44	; 0x2c
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2334      	movs	r3, #52	; 0x34
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fe53 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	231c      	movs	r3, #28
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	2310      	movs	r3, #16
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f002 fe4b 	bl	8003028 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000392:	003b      	movs	r3, r7
 8000394:	0018      	movs	r0, r3
 8000396:	231c      	movs	r3, #28
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f002 fe44 	bl	8003028 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2220      	movs	r2, #32
 80003a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	2201      	movs	r2, #1
 80003aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fdad 	bl	8000f14 <HAL_RCC_OscConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003be:	f000 f828 	bl	8000412 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	211c      	movs	r1, #28
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2207      	movs	r2, #7
 80003c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2203      	movs	r2, #3
 80003ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2101      	movs	r1, #1
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 f91d 	bl	8001620 <HAL_RCC_ClockConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ea:	f000 f812 	bl	8000412 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2202      	movs	r2, #2
 80003f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fa89 	bl	8001914 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000406:	f000 f804 	bl	8000412 <Error_Handler>
  }
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b019      	add	sp, #100	; 0x64
 8000410:	bd90      	pop	{r4, r7, pc}

08000412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000416:	b672      	cpsid	i
}
 8000418:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041a:	e7fe      	b.n	800041a <Error_Handler+0x8>

0800041c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_SPI1_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_SPI1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_SPI1_Init+0x74>)
 8000428:	2282      	movs	r2, #130	; 0x82
 800042a:	0052      	lsls	r2, r2, #1
 800042c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_SPI1_Init+0x74>)
 8000436:	22e0      	movs	r2, #224	; 0xe0
 8000438:	00d2      	lsls	r2, r2, #3
 800043a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_SPI1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_SPI1_Init+0x74>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_SPI1_Init+0x74>)
 8000452:	2218      	movs	r2, #24
 8000454:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_SPI1_Init+0x74>)
 800046a:	2207      	movs	r2, #7
 800046c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_SPI1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_SPI1_Init+0x74>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fb47 	bl	8001b10 <HAL_SPI_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f7ff ffc4 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028
 8000494:	40013000 	.word	0x40013000

08000498 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b08b      	sub	sp, #44	; 0x2c
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	2414      	movs	r4, #20
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	0018      	movs	r0, r3
 80004a6:	2314      	movs	r3, #20
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 fdbc 	bl	8003028 <memset>
  if(spiHandle->Instance==SPI1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <HAL_SPI_MspInit+0xd8>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d155      	bne.n	8000566 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ba:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0149      	lsls	r1, r1, #5
 80004c4:	430a      	orrs	r2, r1
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004ca:	699a      	ldr	r2, [r3, #24]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	015b      	lsls	r3, r3, #5
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0289      	lsls	r1, r1, #10
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	029b      	lsls	r3, r3, #10
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	02c9      	lsls	r1, r1, #11
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <HAL_SPI_MspInit+0xdc>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	02db      	lsls	r3, r3, #11
 8000508:	4013      	ands	r3, r2
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	22c0      	movs	r2, #192	; 0xc0
 8000512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2202      	movs	r2, #2
 8000518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2390      	movs	r3, #144	; 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fb57 	bl	8000be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2208      	movs	r2, #8
 8000540:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2202      	movs	r2, #2
 8000546:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2203      	movs	r2, #3
 8000552:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	187b      	adds	r3, r7, r1
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_SPI_MspInit+0xe0>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f000 fb41 	bl	8000be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b00b      	add	sp, #44	; 0x2c
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40013000 	.word	0x40013000
 8000574:	40021000 	.word	0x40021000
 8000578:	48000400 	.word	0x48000400

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0549      	lsls	r1, r1, #21
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_MspInit+0x44>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	4013      	ands	r3, r2
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 fa0a 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	2348      	movs	r3, #72	; 0x48
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	0018      	movs	r0, r3
 8000608:	2310      	movs	r3, #16
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f002 fd0b 	bl	8003028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	0018      	movs	r0, r3
 8000618:	2308      	movs	r3, #8
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f002 fd03 	bl	8003028 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	2324      	movs	r3, #36	; 0x24
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	231c      	movs	r3, #28
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fcfb 	bl	8003028 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	0018      	movs	r0, r3
 8000636:	2320      	movs	r3, #32
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f002 fcf4 	bl	8003028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <MX_TIM1_Init+0x160>)
 8000642:	4a47      	ldr	r2, [pc, #284]	; (8000760 <MX_TIM1_Init+0x164>)
 8000644:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000646:	4b45      	ldr	r3, [pc, #276]	; (800075c <MX_TIM1_Init+0x160>)
 8000648:	220f      	movs	r2, #15
 800064a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b43      	ldr	r3, [pc, #268]	; (800075c <MX_TIM1_Init+0x160>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8000652:	4b42      	ldr	r3, [pc, #264]	; (800075c <MX_TIM1_Init+0x160>)
 8000654:	22fa      	movs	r2, #250	; 0xfa
 8000656:	0212      	lsls	r2, r2, #8
 8000658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065a:	4b40      	ldr	r3, [pc, #256]	; (800075c <MX_TIM1_Init+0x160>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <MX_TIM1_Init+0x160>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b3d      	ldr	r3, [pc, #244]	; (800075c <MX_TIM1_Init+0x160>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800066c:	4b3b      	ldr	r3, [pc, #236]	; (800075c <MX_TIM1_Init+0x160>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fb06 	bl	8001c80 <HAL_TIM_Base_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000678:	f7ff fecb 	bl	8000412 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	2148      	movs	r1, #72	; 0x48
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000686:	187a      	adds	r2, r7, r1
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <MX_TIM1_Init+0x160>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fc65 	bl	8001f5c <HAL_TIM_ConfigClockSource>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000696:	f7ff febc 	bl	8000412 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <MX_TIM1_Init+0x160>)
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fb3f 	bl	8001d20 <HAL_TIM_PWM_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006a6:	f7ff feb4 	bl	8000412 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_TIM1_Init+0x160>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 f836 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80006c8:	f7ff fea3 	bl	8000412 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006cc:	2124      	movs	r1, #36	; 0x24
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2260      	movs	r2, #96	; 0x60
 80006d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	1879      	adds	r1, r7, r1
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM1_Init+0x160>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fb66 	bl	8001dd0 <HAL_TIM_PWM_ConfigChannel>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000708:	f7ff fe83 	bl	8000412 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0192      	lsls	r2, r2, #6
 8000730:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000738:	1d3a      	adds	r2, r7, #4
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_TIM1_Init+0x160>)
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f002 f854 	bl	80027ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000748:	f7ff fe63 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <MX_TIM1_Init+0x160>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f828 	bl	80007a4 <HAL_TIM_MspPostInit>

}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b016      	add	sp, #88	; 0x58
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40012c00 	.word	0x40012c00

08000764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_TIM_Base_MspInit+0x38>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d10d      	bne.n	8000792 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_TIM_Base_MspInit+0x3c>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0109      	lsls	r1, r1, #4
 8000780:	430a      	orrs	r2, r1
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000786:	699a      	ldr	r2, [r3, #24]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b004      	add	sp, #16
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40012c00 	.word	0x40012c00
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	240c      	movs	r4, #12
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2314      	movs	r3, #20
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 fc36 	bl	8003028 <memset>
  if(timHandle->Instance==TIM1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_TIM_MspPostInit+0x78>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d125      	bne.n	8000812 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_TIM_MspPostInit+0x7c>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_TIM_MspPostInit+0x7c>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_TIM_MspPostInit+0x7c>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2202      	movs	r2, #2
 80007f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	187a      	adds	r2, r7, r1
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f000 f9eb 	bl	8000be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	; 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40012c00 	.word	0x40012c00
 8000820:	40021000 	.word	0x40021000

08000824 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	2296      	movs	r2, #150	; 0x96
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	0018      	movs	r0, r3
 800086a:	f002 f81d 	bl	80028a8 <HAL_UART_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f7ff fdce 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000d4 	.word	0x200000d4
 8000880:	40004400 	.word	0x40004400

08000884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	2414      	movs	r4, #20
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 fbc6 	bl	8003028 <memset>
  if(uartHandle->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <HAL_UART_MspInit+0x90>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d132      	bne.n	800090c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f96e 	bl	8000be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00b      	add	sp, #44	; 0x2c
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000946:	f7ff fe54 	bl	80005f2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800094a:	f002 fb49 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fcfb 	bl	8000348 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	2000015c 	.word	0x2000015c

0800096c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_COMP_IRQHandler>
	...

08000970 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_Init+0x24>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_Init+0x24>)
 800097a:	2110      	movs	r1, #16
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f809 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000986:	f7ff fdf9 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_InitTick+0x5c>)
 80009a2:	681c      	ldr	r4, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_InitTick+0x60>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	0019      	movs	r1, r3
 80009aa:	23fa      	movs	r3, #250	; 0xfa
 80009ac:	0098      	lsls	r0, r3, #2
 80009ae:	f7ff fbab 	bl	8000108 <__udivsi3>
 80009b2:	0003      	movs	r3, r0
 80009b4:	0019      	movs	r1, r3
 80009b6:	0020      	movs	r0, r4
 80009b8:	f7ff fba6 	bl	8000108 <__udivsi3>
 80009bc:	0003      	movs	r3, r0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f905 	bl	8000bce <HAL_SYSTICK_Config>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e00f      	b.n	80009ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d80b      	bhi.n	80009ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f8e2 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_InitTick+0x64>)
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	18d2      	adds	r2, r2, r3
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_IncTick+0x20>)
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000158 	.word	0x20000158

08000a24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_GetTick+0x10>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000158 	.word	0x20000158

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fff0 	bl	8000a24 <HAL_GetTick>
 8000a44:	0003      	movs	r3, r0
 8000a46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	001a      	movs	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	189b      	adds	r3, r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	f7ff ffe0 	bl	8000a24 <HAL_GetTick>
 8000a64:	0002      	movs	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d828      	bhi.n	8000ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	589b      	ldr	r3, [r3, r2]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	33c0      	adds	r3, #192	; 0xc0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae6:	e031      	b.n	8000b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	400b      	ands	r3, r1
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001c      	movs	r4, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4023      	ands	r3, r4
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	3306      	adds	r3, #6
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18c3      	adds	r3, r0, r3
 8000b48:	3304      	adds	r3, #4
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	045b      	lsls	r3, r3, #17
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d301      	bcc.n	8000b74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b70:	2301      	movs	r3, #1
 8000b72:	e010      	b.n	8000b96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SysTick_Config+0x44>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2103      	movs	r1, #3
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff7c 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x44>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x44>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffbf 	bl	8000b5c <SysTick_Config>
 8000bde:	0003      	movs	r3, r0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e155      	b.n	8000ea4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <HAL_GPIO_Init+0x28>
 8000c0e:	e146      	b.n	8000e9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	2201      	movs	r2, #1
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	58d3      	ldr	r3, [r2, r3]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2207      	movs	r2, #7
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	400b      	ands	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	6939      	ldr	r1, [r7, #16]
 8000d18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	23c0      	movs	r3, #192	; 0xc0
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d100      	bne.n	8000d5c <HAL_GPIO_Init+0x174>
 8000d5a:	e0a0      	b.n	8000e9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	430a      	orrs	r2, r1
 8000d66:	619a      	str	r2, [r3, #24]
 8000d68:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	589b      	ldr	r3, [r3, r2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	2390      	movs	r3, #144	; 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1ea>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a46      	ldr	r2, [pc, #280]	; (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1e6>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_GPIO_Init+0x2e4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a44      	ldr	r2, [pc, #272]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1de>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	400a      	ands	r2, r1
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	035b      	lsls	r3, r3, #13
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	1e13      	subs	r3, r2, #0
 8000eae:	d000      	beq.n	8000eb2 <HAL_GPIO_Init+0x2ca>
 8000eb0:	e6a2      	b.n	8000bf8 <HAL_GPIO_Init+0x10>
  } 
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b006      	add	sp, #24
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	48001000 	.word	0x48001000
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	0008      	movs	r0, r1
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	1c02      	adds	r2, r0, #0
 8000ee8:	801a      	strh	r2, [r3, #0]
 8000eea:	1c7b      	adds	r3, r7, #1
 8000eec:	1c0a      	adds	r2, r1, #0
 8000eee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef0:	1c7b      	adds	r3, r7, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef8:	1cbb      	adds	r3, r7, #2
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f02:	1cbb      	adds	r3, r7, #2
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f000 fb76 	bl	8001614 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_RCC_OscConfig+0x20>
 8000f32:	e08e      	b.n	8001052 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f34:	4bc5      	ldr	r3, [pc, #788]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	220c      	movs	r2, #12
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00e      	beq.n	8000f5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4bc2      	ldr	r3, [pc, #776]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	220c      	movs	r2, #12
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d117      	bne.n	8000f7c <HAL_RCC_OscConfig+0x68>
 8000f4c:	4bbf      	ldr	r3, [pc, #764]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	025b      	lsls	r3, r3, #9
 8000f54:	401a      	ands	r2, r3
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d10e      	bne.n	8000f7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4bbb      	ldr	r3, [pc, #748]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	029b      	lsls	r3, r3, #10
 8000f66:	4013      	ands	r3, r2
 8000f68:	d100      	bne.n	8000f6c <HAL_RCC_OscConfig+0x58>
 8000f6a:	e071      	b.n	8001050 <HAL_RCC_OscConfig+0x13c>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d000      	beq.n	8000f76 <HAL_RCC_OscConfig+0x62>
 8000f74:	e06c      	b.n	8001050 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f000 fb4c 	bl	8001614 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d107      	bne.n	8000f94 <HAL_RCC_OscConfig+0x80>
 8000f84:	4bb1      	ldr	r3, [pc, #708]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4bb0      	ldr	r3, [pc, #704]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e02f      	b.n	8000ff4 <HAL_RCC_OscConfig+0xe0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xa2>
 8000f9c:	4bab      	ldr	r3, [pc, #684]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4baa      	ldr	r3, [pc, #680]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fa2:	49ab      	ldr	r1, [pc, #684]	; (8001250 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	4ba8      	ldr	r3, [pc, #672]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4ba7      	ldr	r3, [pc, #668]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fae:	49a9      	ldr	r1, [pc, #676]	; (8001254 <HAL_RCC_OscConfig+0x340>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e01e      	b.n	8000ff4 <HAL_RCC_OscConfig+0xe0>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d10e      	bne.n	8000fdc <HAL_RCC_OscConfig+0xc8>
 8000fbe:	4ba3      	ldr	r3, [pc, #652]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4ba2      	ldr	r3, [pc, #648]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	02c9      	lsls	r1, r1, #11
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	4b9f      	ldr	r3, [pc, #636]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	0249      	lsls	r1, r1, #9
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xe0>
 8000fdc:	4b9b      	ldr	r3, [pc, #620]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b9a      	ldr	r3, [pc, #616]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fe2:	499b      	ldr	r1, [pc, #620]	; (8001250 <HAL_RCC_OscConfig+0x33c>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	4b98      	ldr	r3, [pc, #608]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b97      	ldr	r3, [pc, #604]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8000fee:	4999      	ldr	r1, [pc, #612]	; (8001254 <HAL_RCC_OscConfig+0x340>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d014      	beq.n	8001026 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fd12 	bl	8000a24 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff fd0d 	bl	8000a24 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e2fd      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0xf2>
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fcfd 	bl	8000a24 <HAL_GetTick>
 800102a:	0003      	movs	r3, r0
 800102c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fcf8 	bl	8000a24 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e2e8      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x11c>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d100      	bne.n	800105e <HAL_RCC_OscConfig+0x14a>
 800105c:	e06c      	b.n	8001138 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	220c      	movs	r2, #12
 8001064:	4013      	ands	r3, r2
 8001066:	d00e      	beq.n	8001086 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001068:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	220c      	movs	r2, #12
 800106e:	4013      	ands	r3, r2
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11f      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1a0>
 8001074:	4b75      	ldr	r3, [pc, #468]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	401a      	ands	r2, r3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	429a      	cmp	r2, r3
 8001084:	d116      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b71      	ldr	r3, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2202      	movs	r2, #2
 800108c:	4013      	ands	r3, r2
 800108e:	d005      	beq.n	800109c <HAL_RCC_OscConfig+0x188>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d001      	beq.n	800109c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e2bb      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	22f8      	movs	r2, #248	; 0xf8
 80010a2:	4393      	bics	r3, r2
 80010a4:	0019      	movs	r1, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	00da      	lsls	r2, r3, #3
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	e041      	b.n	8001138 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d024      	beq.n	8001106 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010bc:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcac 	bl	8000a24 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fca7 	bl	8000a24 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e297      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d0f1      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b57      	ldr	r3, [pc, #348]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	22f8      	movs	r2, #248	; 0xf8
 80010f4:	4393      	bics	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	00da      	lsls	r2, r3, #3
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e018      	b.n	8001138 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800110c:	2101      	movs	r1, #1
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc87 	bl	8000a24 <HAL_GetTick>
 8001116:	0003      	movs	r3, r0
 8001118:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fc82 	bl	8000a24 <HAL_GetTick>
 8001120:	0002      	movs	r2, r0
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e272      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2202      	movs	r2, #2
 8001134:	4013      	ands	r3, r2
 8001136:	d1f1      	bne.n	800111c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2208      	movs	r2, #8
 800113e:	4013      	ands	r3, r2
 8001140:	d036      	beq.n	80011b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d019      	beq.n	800117e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b40      	ldr	r3, [pc, #256]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800114c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fc65 	bl	8000a24 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fc60 	bl	8000a24 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e250      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b36      	ldr	r3, [pc, #216]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d0f1      	beq.n	8001160 <HAL_RCC_OscConfig+0x24c>
 800117c:	e018      	b.n	80011b0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001184:	2101      	movs	r1, #1
 8001186:	438a      	bics	r2, r1
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fc4b 	bl	8000a24 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc46 	bl	8000a24 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e236      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	2202      	movs	r2, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	d1f1      	bne.n	8001194 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2204      	movs	r2, #4
 80011b6:	4013      	ands	r3, r2
 80011b8:	d100      	bne.n	80011bc <HAL_RCC_OscConfig+0x2a8>
 80011ba:	e0b5      	b.n	8001328 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011bc:	201f      	movs	r0, #31
 80011be:	183b      	adds	r3, r7, r0
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	4013      	ands	r3, r2
 80011ce:	d110      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80011d2:	69da      	ldr	r2, [r3, #28]
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	0549      	lsls	r1, r1, #21
 80011da:	430a      	orrs	r2, r1
 80011dc:	61da      	str	r2, [r3, #28]
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_RCC_OscConfig+0x338>)
 80011e0:	69da      	ldr	r2, [r3, #28]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	055b      	lsls	r3, r3, #21
 80011e6:	4013      	ands	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ec:	183b      	adds	r3, r7, r0
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_RCC_OscConfig+0x344>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d11a      	bne.n	8001234 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_RCC_OscConfig+0x344>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_RCC_OscConfig+0x344>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0049      	lsls	r1, r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120c:	f7ff fc0a 	bl	8000a24 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fc05 	bl	8000a24 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1f5      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x344>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10f      	bne.n	800125c <HAL_RCC_OscConfig+0x348>
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_RCC_OscConfig+0x338>)
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_RCC_OscConfig+0x338>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	621a      	str	r2, [r3, #32]
 8001248:	e036      	b.n	80012b8 <HAL_RCC_OscConfig+0x3a4>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40021000 	.word	0x40021000
 8001250:	fffeffff 	.word	0xfffeffff
 8001254:	fffbffff 	.word	0xfffbffff
 8001258:	40007000 	.word	0x40007000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x36a>
 8001264:	4bca      	ldr	r3, [pc, #808]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4bc9      	ldr	r3, [pc, #804]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800126a:	2101      	movs	r1, #1
 800126c:	438a      	bics	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	4bc7      	ldr	r3, [pc, #796]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	4bc6      	ldr	r3, [pc, #792]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001276:	2104      	movs	r1, #4
 8001278:	438a      	bics	r2, r1
 800127a:	621a      	str	r2, [r3, #32]
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x3a4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x38c>
 8001286:	4bc2      	ldr	r3, [pc, #776]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	4bc1      	ldr	r3, [pc, #772]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800128c:	2104      	movs	r1, #4
 800128e:	430a      	orrs	r2, r1
 8001290:	621a      	str	r2, [r3, #32]
 8001292:	4bbf      	ldr	r3, [pc, #764]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	4bbe      	ldr	r3, [pc, #760]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0x3a4>
 80012a0:	4bbb      	ldr	r3, [pc, #748]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	4bba      	ldr	r3, [pc, #744]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	438a      	bics	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	4bb8      	ldr	r3, [pc, #736]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	4bb7      	ldr	r3, [pc, #732]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	2104      	movs	r1, #4
 80012b4:	438a      	bics	r2, r1
 80012b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d014      	beq.n	80012ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbb0 	bl	8000a24 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e009      	b.n	80012de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fbab 	bl	8000a24 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4aaf      	ldr	r2, [pc, #700]	; (8001594 <HAL_RCC_OscConfig+0x680>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e19a      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	4bac      	ldr	r3, [pc, #688]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x3b6>
 80012e8:	e013      	b.n	8001312 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb9b 	bl	8000a24 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	e009      	b.n	8001308 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb96 	bl	8000a24 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4aa5      	ldr	r2, [pc, #660]	; (8001594 <HAL_RCC_OscConfig+0x680>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e185      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001312:	231f      	movs	r3, #31
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800131e:	69da      	ldr	r2, [r3, #28]
 8001320:	4b9b      	ldr	r3, [pc, #620]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001322:	499d      	ldr	r1, [pc, #628]	; (8001598 <HAL_RCC_OscConfig+0x684>)
 8001324:	400a      	ands	r2, r1
 8001326:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2210      	movs	r2, #16
 800132e:	4013      	ands	r3, r2
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d12a      	bne.n	8001390 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133e:	4b94      	ldr	r3, [pc, #592]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001340:	2104      	movs	r1, #4
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001346:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134a:	4b91      	ldr	r3, [pc, #580]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fb67 	bl	8000a24 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800135c:	f7ff fb62 	bl	8000a24 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e152      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800136e:	4b88      	ldr	r3, [pc, #544]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d0f1      	beq.n	800135c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001378:	4b85      	ldr	r3, [pc, #532]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	22f8      	movs	r2, #248	; 0xf8
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	00da      	lsls	r2, r3, #3
 8001388:	4b81      	ldr	r3, [pc, #516]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e034      	b.n	80013fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	3305      	adds	r3, #5
 8001396:	d111      	bne.n	80013bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139c:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800139e:	2104      	movs	r1, #4
 80013a0:	438a      	bics	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013a4:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	22f8      	movs	r2, #248	; 0xf8
 80013aa:	4393      	bics	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	00da      	lsls	r2, r3, #3
 80013b4:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ba:	e01e      	b.n	80013fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013bc:	4b74      	ldr	r3, [pc, #464]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	2104      	movs	r1, #4
 80013c4:	430a      	orrs	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013c8:	4b71      	ldr	r3, [pc, #452]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013cc:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb26 	bl	8000a24 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013de:	f7ff fb21 	bl	8000a24 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e111      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013f0:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d1f1      	bne.n	80013de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2220      	movs	r2, #32
 8001400:	4013      	ands	r3, r2
 8001402:	d05c      	beq.n	80014be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	220c      	movs	r2, #12
 800140a:	4013      	ands	r3, r2
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d00e      	beq.n	800142e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	220c      	movs	r2, #12
 8001416:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001418:	2b08      	cmp	r3, #8
 800141a:	d114      	bne.n	8001446 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800141c:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	401a      	ands	r2, r3
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	429a      	cmp	r2, r3
 800142c:	d10b      	bne.n	8001446 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	4013      	ands	r3, r2
 8001438:	d040      	beq.n	80014bc <HAL_RCC_OscConfig+0x5a8>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d03c      	beq.n	80014bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0e6      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01b      	beq.n	8001486 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800144e:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001452:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0249      	lsls	r1, r1, #9
 8001458:	430a      	orrs	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fae2 	bl	8000a24 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001466:	f7ff fadd 	bl	8000a24 <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0cd      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001478:	4b45      	ldr	r3, [pc, #276]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x552>
 8001484:	e01b      	b.n	80014be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001486:	4b42      	ldr	r3, [pc, #264]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800148c:	4943      	ldr	r1, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x688>)
 800148e:	400a      	ands	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fac7 	bl	8000a24 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800149c:	f7ff fac2 	bl	8000a24 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0b2      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x588>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5b4>
 80014c6:	e0a4      	b.n	8001612 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d100      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5c2>
 80014d4:	e078      	b.n	80015c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d14c      	bne.n	8001578 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	492e      	ldr	r1, [pc, #184]	; (80015a0 <HAL_RCC_OscConfig+0x68c>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fa9b 	bl	8000a24 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fa96 	bl	8000a24 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e086      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	049b      	lsls	r3, r3, #18
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	220f      	movs	r2, #15
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001522:	430a      	orrs	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_RCC_OscConfig+0x690>)
 800152c:	4013      	ands	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	431a      	orrs	r2, r3
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0449      	lsls	r1, r1, #17
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fa69 	bl	8000a24 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fa64 	bl	8000a24 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e054      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x644>
 8001576:	e04c      	b.n	8001612 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_RCC_OscConfig+0x67c>)
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <HAL_RCC_OscConfig+0x68c>)
 8001580:	400a      	ands	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fa4e 	bl	8000a24 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x6a6>
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40021000 	.word	0x40021000
 8001594:	00001388 	.word	0x00001388
 8001598:	efffffff 	.word	0xefffffff
 800159c:	fffeffff 	.word	0xfffeffff
 80015a0:	feffffff 	.word	0xfeffffff
 80015a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fa3c 	bl	8000a24 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e02c      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_RCC_OscConfig+0x708>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	049b      	lsls	r3, r3, #18
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x694>
 80015c6:	e024      	b.n	8001612 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e01f      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_RCC_OscConfig+0x708>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_RCC_OscConfig+0x708>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10e      	bne.n	800160e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	220f      	movs	r2, #15
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d107      	bne.n	800160e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	23f0      	movs	r3, #240	; 0xf0
 8001602:	039b      	lsls	r3, r3, #14
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b008      	add	sp, #32
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0bf      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b61      	ldr	r3, [pc, #388]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d911      	bls.n	8001666 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b5e      	ldr	r3, [pc, #376]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0a6      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d015      	beq.n	800169c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d006      	beq.n	8001688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001680:	21e0      	movs	r1, #224	; 0xe0
 8001682:	00c9      	lsls	r1, r1, #3
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	22f0      	movs	r2, #240	; 0xf0
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	d04c      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d120      	bne.n	80016fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07a      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	049b      	lsls	r3, r3, #18
 80016ce:	4013      	ands	r3, r2
 80016d0:	d114      	bne.n	80016fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06e      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 80016e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4013      	ands	r3, r2
 80016e8:	d108      	bne.n	80016fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e062      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e05b      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	4393      	bics	r3, r2
 8001704:	0019      	movs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff f988 	bl	8000a24 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001718:	e009      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f7ff f983 	bl	8000a24 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <HAL_RCC_ClockConfig+0x1a4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e042      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	220c      	movs	r2, #12
 8001734:	401a      	ands	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1ec      	bne.n	800171a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d211      	bcs.n	8001772 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	4393      	bics	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_RCC_ClockConfig+0x19c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e020      	b.n	80017b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	4013      	ands	r3, r2
 800177a:	d009      	beq.n	8001790 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_RCC_ClockConfig+0x1a8>)
 8001782:	4013      	ands	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001790:	f000 f820 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001794:	0001      	movs	r1, r0
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	220f      	movs	r2, #15
 800179e:	4013      	ands	r3, r2
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x1ac>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	000a      	movs	r2, r1
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1b0>)
 80017aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff f8f3 	bl	8000998 <HAL_InitTick>
  
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b004      	add	sp, #16
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40022000 	.word	0x40022000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	00001388 	.word	0x00001388
 80017c8:	fffff8ff 	.word	0xfffff8ff
 80017cc:	08003070 	.word	0x08003070
 80017d0:	20000000 	.word	0x20000000

080017d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b08f      	sub	sp, #60	; 0x3c
 80017d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017da:	2314      	movs	r3, #20
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xec>)
 80017e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017e2:	c313      	stmia	r3!, {r0, r1, r4}
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ee:	c313      	stmia	r3!, {r0, r1, r4}
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
 8001814:	2b0c      	cmp	r3, #12
 8001816:	d047      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001818:	d849      	bhi.n	80018ae <HAL_RCC_GetSysClockFreq+0xda>
 800181a:	2b04      	cmp	r3, #4
 800181c:	d002      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x50>
 800181e:	2b08      	cmp	r3, #8
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x56>
 8001822:	e044      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001828:	e044      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	220f      	movs	r2, #15
 8001830:	4013      	ands	r3, r2
 8001832:	2214      	movs	r2, #20
 8001834:	18ba      	adds	r2, r7, r2
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	220f      	movs	r2, #15
 8001840:	4013      	ands	r3, r2
 8001842:	1d3a      	adds	r2, r7, #4
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	23c0      	movs	r3, #192	; 0xc0
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	401a      	ands	r2, r3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	429a      	cmp	r2, r3
 8001856:	d109      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800185a:	481c      	ldr	r0, [pc, #112]	; (80018cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800185c:	f7fe fc54 	bl	8000108 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	001a      	movs	r2, r3
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	4353      	muls	r3, r2
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	e01a      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	401a      	ands	r2, r3
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	025b      	lsls	r3, r3, #9
 8001878:	429a      	cmp	r2, r3
 800187a:	d109      	bne.n	8001890 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800187c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001880:	f7fe fc42 	bl	8000108 <__udivsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	001a      	movs	r2, r3
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	4353      	muls	r3, r2
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
 800188e:	e008      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001894:	f7fe fc38 	bl	8000108 <__udivsi3>
 8001898:	0003      	movs	r3, r0
 800189a:	001a      	movs	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	4353      	muls	r3, r2
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018a6:	e005      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ac:	e002      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b00f      	add	sp, #60	; 0x3c
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	08003050 	.word	0x08003050
 80018c4:	08003060 	.word	0x08003060
 80018c8:	40021000 	.word	0x40021000
 80018cc:	007a1200 	.word	0x007a1200
 80018d0:	02dc6c00 	.word	0x02dc6c00

080018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	20000000 	.word	0x20000000

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018ec:	f7ff fff2 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80018f0:	0001      	movs	r1, r0
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	2207      	movs	r2, #7
 80018fa:	4013      	ands	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	40d9      	lsrs	r1, r3
 8001902:	000b      	movs	r3, r1
}    
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	08003080 	.word	0x08003080

08001914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	4013      	ands	r3, r2
 800192e:	d100      	bne.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001930:	e08e      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2017      	movs	r0, #23
 8001934:	183b      	adds	r3, r7, r0
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b6e      	ldr	r3, [pc, #440]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	055b      	lsls	r3, r3, #21
 8001942:	4013      	ands	r3, r2
 8001944:	d110      	bne.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0549      	lsls	r1, r1, #21
 8001950:	430a      	orrs	r2, r1
 8001952:	61da      	str	r2, [r3, #28]
 8001954:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	055b      	lsls	r3, r3, #21
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	183b      	adds	r3, r7, r0
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d11a      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	0049      	lsls	r1, r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7ff f84f 	bl	8000a24 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	e008      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff f84a 	bl	8000a24 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0a6      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f0      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d034      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	23c0      	movs	r3, #192	; 0xc0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d02c      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0249      	lsls	r1, r1, #9
 80019e0:	430a      	orrs	r2, r1
 80019e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ea:	4945      	ldr	r1, [pc, #276]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f811 	bl	8000a24 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	e009      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f80c 	bl	8000a24 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e067      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a34      	ldr	r2, [pc, #208]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a3a:	2317      	movs	r3, #23
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4a:	492f      	ldr	r1, [pc, #188]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d009      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	2203      	movs	r2, #3
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	d009      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2220      	movs	r2, #32
 8001a92:	4013      	ands	r3, r2
 8001a94:	d009      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b006      	add	sp, #24
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
 8001afc:	fffffcff 	.word	0xfffffcff
 8001b00:	fffeffff 	.word	0xfffeffff
 8001b04:	00001388 	.word	0x00001388
 8001b08:	efffffff 	.word	0xefffffff
 8001b0c:	fffcffff 	.word	0xfffcffff

08001b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0a8      	b.n	8001c74 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	2382      	movs	r3, #130	; 0x82
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d009      	beq.n	8001b4a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
 8001b3c:	e005      	b.n	8001b4a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	225d      	movs	r2, #93	; 0x5d
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	225c      	movs	r2, #92	; 0x5c
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fc96 	bl	8000498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	225d      	movs	r2, #93	; 0x5d
 8001b70:	2102      	movs	r1, #2
 8001b72:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	438a      	bics	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	23e0      	movs	r3, #224	; 0xe0
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d902      	bls.n	8001b96 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e002      	b.n	8001b9c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	015b      	lsls	r3, r3, #5
 8001b9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	23f0      	movs	r3, #240	; 0xf0
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d008      	beq.n	8001bba <HAL_SPI_Init+0xaa>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	23e0      	movs	r3, #224	; 0xe0
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2382      	movs	r3, #130	; 0x82
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	2384      	movs	r3, #132	; 0x84
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2101      	movs	r1, #1
 8001be0:	400b      	ands	r3, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6999      	ldr	r1, [r3, #24]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	400b      	ands	r3, r1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2138      	movs	r1, #56	; 0x38
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	400b      	ands	r3, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	0011      	movs	r1, r2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	2204      	movs	r2, #4
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2110      	movs	r1, #16
 8001c28:	400b      	ands	r3, r1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	2108      	movs	r1, #8
 8001c32:	400b      	ands	r3, r1
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	23f0      	movs	r3, #240	; 0xf0
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	400b      	ands	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4907      	ldr	r1, [pc, #28]	; (8001c7c <HAL_SPI_Init+0x16c>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	225d      	movs	r2, #93	; 0x5d
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	fffff7ff 	.word	0xfffff7ff

08001c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e042      	b.n	8001d18 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	; 0x3d
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223c      	movs	r2, #60	; 0x3c
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fd5b 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223d      	movs	r2, #61	; 0x3d
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	f000 fa1f 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2246      	movs	r2, #70	; 0x46
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223e      	movs	r2, #62	; 0x3e
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223f      	movs	r2, #63	; 0x3f
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2241      	movs	r2, #65	; 0x41
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2242      	movs	r2, #66	; 0x42
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2243      	movs	r2, #67	; 0x43
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2244      	movs	r2, #68	; 0x44
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2245      	movs	r2, #69	; 0x45
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223d      	movs	r2, #61	; 0x3d
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	; 0x3d
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f839 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223d      	movs	r2, #61	; 0x3d
 8001d52:	2102      	movs	r1, #2
 8001d54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f000 f9cf 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2246      	movs	r2, #70	; 0x46
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223e      	movs	r2, #62	; 0x3e
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2241      	movs	r2, #65	; 0x41
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2242      	movs	r2, #66	; 0x42
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2243      	movs	r2, #67	; 0x43
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2244      	movs	r2, #68	; 0x44
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2245      	movs	r2, #69	; 0x45
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223d      	movs	r2, #61	; 0x3d
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	223c      	movs	r2, #60	; 0x3c
 8001de8:	5c9b      	ldrb	r3, [r3, r2]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0ad      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	223c      	movs	r2, #60	; 0x3c
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d100      	bne.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e00:	e076      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d900      	bls.n	8001e0a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001e08:	e095      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d04e      	beq.n	8001eae <HAL_TIM_PWM_ConfigChannel+0xde>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d900      	bls.n	8001e18 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001e16:	e08e      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d021      	beq.n	8001e68 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001e24:	e087      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f9e8 	bl	8002204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2108      	movs	r1, #8
 8001e40:	430a      	orrs	r2, r1
 8001e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2104      	movs	r1, #4
 8001e50:	438a      	bics	r2, r1
 8001e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6999      	ldr	r1, [r3, #24]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	619a      	str	r2, [r3, #24]
      break;
 8001e66:	e06b      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 fa4f 	bl	8002314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0109      	lsls	r1, r1, #4
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4931      	ldr	r1, [pc, #196]	; (8001f58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6999      	ldr	r1, [r3, #24]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	021a      	lsls	r2, r3, #8
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
      break;
 8001eac:	e048      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fab0 	bl	800241c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	438a      	bics	r2, r1
 8001eda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69d9      	ldr	r1, [r3, #28]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	61da      	str	r2, [r3, #28]
      break;
 8001eee:	e027      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fb15 	bl	8002528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0109      	lsls	r1, r1, #4
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	490f      	ldr	r1, [pc, #60]	; (8001f58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69d9      	ldr	r1, [r3, #28]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
      break;
 8001f34:	e004      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001f36:	2317      	movs	r3, #23
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
      break;
 8001f3e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	223c      	movs	r2, #60	; 0x3c
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

  return status;
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b006      	add	sp, #24
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	fffffbff 	.word	0xfffffbff

08001f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223c      	movs	r2, #60	; 0x3c
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_TIM_ConfigClockSource+0x20>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0bc      	b.n	80020f6 <HAL_TIM_ConfigClockSource+0x19a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	223c      	movs	r2, #60	; 0x3c
 8001f80:	2101      	movs	r1, #1
 8001f82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	223d      	movs	r2, #61	; 0x3d
 8001f88:	2102      	movs	r1, #2
 8001f8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2277      	movs	r2, #119	; 0x77
 8001f98:	4393      	bics	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	0192      	lsls	r2, r2, #6
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d040      	beq.n	800203a <HAL_TIM_ConfigClockSource+0xde>
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0192      	lsls	r2, r2, #6
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d900      	bls.n	8001fc2 <HAL_TIM_ConfigClockSource+0x66>
 8001fc0:	e088      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	0152      	lsls	r2, r2, #5
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d100      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x70>
 8001fca:	e088      	b.n	80020de <HAL_TIM_ConfigClockSource+0x182>
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0152      	lsls	r2, r2, #5
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d900      	bls.n	8001fd6 <HAL_TIM_ConfigClockSource+0x7a>
 8001fd4:	e07e      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001fd6:	2b70      	cmp	r3, #112	; 0x70
 8001fd8:	d018      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xb0>
 8001fda:	d900      	bls.n	8001fde <HAL_TIM_ConfigClockSource+0x82>
 8001fdc:	e07a      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001fde:	2b60      	cmp	r3, #96	; 0x60
 8001fe0:	d04f      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x126>
 8001fe2:	d900      	bls.n	8001fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8001fe4:	e076      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001fe6:	2b50      	cmp	r3, #80	; 0x50
 8001fe8:	d03b      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x106>
 8001fea:	d900      	bls.n	8001fee <HAL_TIM_ConfigClockSource+0x92>
 8001fec:	e072      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d057      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x146>
 8001ff2:	d900      	bls.n	8001ff6 <HAL_TIM_ConfigClockSource+0x9a>
 8001ff4:	e06e      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001ff6:	2b30      	cmp	r3, #48	; 0x30
 8001ff8:	d063      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x166>
 8001ffa:	d86b      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d060      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x166>
 8002000:	d868      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d05d      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x166>
 8002006:	2b10      	cmp	r3, #16
 8002008:	d05b      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x166>
 800200a:	e063      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f000 fb68 	bl	80026f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2277      	movs	r2, #119	; 0x77
 800202c:	4313      	orrs	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
      break;
 8002038:	e052      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f000 fb51 	bl	80026f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	01c9      	lsls	r1, r1, #7
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
      break;
 8002060:	e03e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	001a      	movs	r2, r3
 8002070:	f000 fac4 	bl	80025fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2150      	movs	r1, #80	; 0x50
 800207a:	0018      	movs	r0, r3
 800207c:	f000 fb1e 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 8002080:	e02e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	001a      	movs	r2, r3
 8002090:	f000 fae2 	bl	8002658 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2160      	movs	r1, #96	; 0x60
 800209a:	0018      	movs	r0, r3
 800209c:	f000 fb0e 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020a0:	e01e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	001a      	movs	r2, r3
 80020b0:	f000 faa4 	bl	80025fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2140      	movs	r1, #64	; 0x40
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fafe 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020c0:	e00e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0019      	movs	r1, r3
 80020cc:	0010      	movs	r0, r2
 80020ce:	f000 faf5 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80020d2:	e005      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80020d4:	230f      	movs	r3, #15
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
      break;
 80020dc:	e000      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80020de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	223d      	movs	r2, #61	; 0x3d
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	223c      	movs	r2, #60	; 0x3c
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

  return status;
 80020f0:	230f      	movs	r3, #15
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	781b      	ldrb	r3, [r3, #0]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	ffff00ff 	.word	0xffff00ff

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d008      	beq.n	800212e <TIM_Base_SetConfig+0x2a>
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	05db      	lsls	r3, r3, #23
 8002122:	429a      	cmp	r2, r3
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0x2a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a30      	ldr	r2, [pc, #192]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2270      	movs	r2, #112	; 0x70
 8002132:	4393      	bics	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d018      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	05db      	lsls	r3, r3, #23
 800214e:	429a      	cmp	r2, r3
 8002150:	d013      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00f      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <TIM_Base_SetConfig+0xec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00b      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <TIM_Base_SetConfig+0xf4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <TIM_Base_SetConfig+0x76>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <TIM_Base_SetConfig+0xf8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <TIM_Base_SetConfig+0xfc>)
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	4393      	bics	r3, r2
 8002192:	001a      	movs	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0xce>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0xce>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <TIM_Base_SetConfig+0xf4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0xce>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <TIM_Base_SetConfig+0xf8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	615a      	str	r2, [r3, #20]
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40002000 	.word	0x40002000
 80021f4:	40014000 	.word	0x40014000
 80021f8:	40014400 	.word	0x40014400
 80021fc:	40014800 	.word	0x40014800
 8002200:	fffffcff 	.word	0xfffffcff

08002204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	2201      	movs	r2, #1
 8002214:	4393      	bics	r3, r2
 8002216:	001a      	movs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2270      	movs	r2, #112	; 0x70
 8002232:	4393      	bics	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2203      	movs	r2, #3
 800223a:	4393      	bics	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2202      	movs	r2, #2
 800224c:	4393      	bics	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <TIM_OC1_SetConfig+0xf8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_OC1_SetConfig+0x76>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <TIM_OC1_SetConfig+0xfc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <TIM_OC1_SetConfig+0x76>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <TIM_OC1_SetConfig+0x100>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_OC1_SetConfig+0x76>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <TIM_OC1_SetConfig+0x104>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d10c      	bne.n	8002294 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2208      	movs	r2, #8
 800227e:	4393      	bics	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2204      	movs	r2, #4
 8002290:	4393      	bics	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <TIM_OC1_SetConfig+0xf8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00b      	beq.n	80022b4 <TIM_OC1_SetConfig+0xb0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a18      	ldr	r2, [pc, #96]	; (8002300 <TIM_OC1_SetConfig+0xfc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d007      	beq.n	80022b4 <TIM_OC1_SetConfig+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <TIM_OC1_SetConfig+0x100>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d003      	beq.n	80022b4 <TIM_OC1_SetConfig+0xb0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <TIM_OC1_SetConfig+0x104>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <TIM_OC1_SetConfig+0x108>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <TIM_OC1_SetConfig+0x10c>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	621a      	str	r2, [r3, #32]
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b006      	add	sp, #24
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40014000 	.word	0x40014000
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800
 800230c:	fffffeff 	.word	0xfffffeff
 8002310:	fffffdff 	.word	0xfffffdff

08002314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	2210      	movs	r2, #16
 8002324:	4393      	bics	r3, r2
 8002326:	001a      	movs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <TIM_OC2_SetConfig+0xe8>)
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <TIM_OC2_SetConfig+0xec>)
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2220      	movs	r2, #32
 800235e:	4393      	bics	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a24      	ldr	r2, [pc, #144]	; (8002404 <TIM_OC2_SetConfig+0xf0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10d      	bne.n	8002392 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	4393      	bics	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	4393      	bics	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <TIM_OC2_SetConfig+0xf0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <TIM_OC2_SetConfig+0x9e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <TIM_OC2_SetConfig+0xf4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <TIM_OC2_SetConfig+0x9e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <TIM_OC2_SetConfig+0xf8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_OC2_SetConfig+0x9e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <TIM_OC2_SetConfig+0xfc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d113      	bne.n	80023da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <TIM_OC2_SetConfig+0x100>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <TIM_OC2_SetConfig+0x104>)
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b006      	add	sp, #24
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	ffff8fff 	.word	0xffff8fff
 8002400:	fffffcff 	.word	0xfffffcff
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40014000 	.word	0x40014000
 800240c:	40014400 	.word	0x40014400
 8002410:	40014800 	.word	0x40014800
 8002414:	fffffbff 	.word	0xfffffbff
 8002418:	fffff7ff 	.word	0xfffff7ff

0800241c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a35      	ldr	r2, [pc, #212]	; (8002500 <TIM_OC3_SetConfig+0xe4>)
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2270      	movs	r2, #112	; 0x70
 8002448:	4393      	bics	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2203      	movs	r2, #3
 8002450:	4393      	bics	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4a28      	ldr	r2, [pc, #160]	; (8002504 <TIM_OC3_SetConfig+0xe8>)
 8002462:	4013      	ands	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <TIM_OC3_SetConfig+0xec>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10d      	bne.n	8002496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <TIM_OC3_SetConfig+0xf0>)
 800247e:	4013      	ands	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <TIM_OC3_SetConfig+0xf4>)
 8002492:	4013      	ands	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <TIM_OC3_SetConfig+0xec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_OC3_SetConfig+0x9a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <TIM_OC3_SetConfig+0xf8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_OC3_SetConfig+0x9a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <TIM_OC3_SetConfig+0xfc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_OC3_SetConfig+0x9a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <TIM_OC3_SetConfig+0x100>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <TIM_OC3_SetConfig+0x104>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <TIM_OC3_SetConfig+0x108>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	621a      	str	r2, [r3, #32]
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b006      	add	sp, #24
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	fffffeff 	.word	0xfffffeff
 8002504:	fffffdff 	.word	0xfffffdff
 8002508:	40012c00 	.word	0x40012c00
 800250c:	fffff7ff 	.word	0xfffff7ff
 8002510:	fffffbff 	.word	0xfffffbff
 8002514:	40014000 	.word	0x40014000
 8002518:	40014400 	.word	0x40014400
 800251c:	40014800 	.word	0x40014800
 8002520:	ffffefff 	.word	0xffffefff
 8002524:	ffffdfff 	.word	0xffffdfff

08002528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <TIM_OC4_SetConfig+0xb0>)
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <TIM_OC4_SetConfig+0xb4>)
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <TIM_OC4_SetConfig+0xb8>)
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <TIM_OC4_SetConfig+0xbc>)
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <TIM_OC4_SetConfig+0xc0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00b      	beq.n	80025a0 <TIM_OC4_SetConfig+0x78>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <TIM_OC4_SetConfig+0xc4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <TIM_OC4_SetConfig+0x78>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <TIM_OC4_SetConfig+0xc8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_OC4_SetConfig+0x78>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <TIM_OC4_SetConfig+0xcc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d109      	bne.n	80025b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <TIM_OC4_SetConfig+0xd0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	ffffefff 	.word	0xffffefff
 80025dc:	ffff8fff 	.word	0xffff8fff
 80025e0:	fffffcff 	.word	0xfffffcff
 80025e4:	ffffdfff 	.word	0xffffdfff
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800
 80025f8:	ffffbfff 	.word	0xffffbfff

080025fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2201      	movs	r2, #1
 8002614:	4393      	bics	r3, r2
 8002616:	001a      	movs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	22f0      	movs	r2, #240	; 0xf0
 8002626:	4393      	bics	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	220a      	movs	r2, #10
 8002638:	4393      	bics	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b006      	add	sp, #24
 8002656:	bd80      	pop	{r7, pc}

08002658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	2210      	movs	r2, #16
 800266a:	4393      	bics	r3, r2
 800266c:	001a      	movs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <TIM_TI2_ConfigInputStage+0x60>)
 8002682:	4013      	ands	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	22a0      	movs	r2, #160	; 0xa0
 8002694:	4393      	bics	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	ffff0fff 	.word	0xffff0fff

080026bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2270      	movs	r2, #112	; 0x70
 80026d0:	4393      	bics	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	2207      	movs	r2, #7
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <TIM_ETR_SetConfig+0x3c>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffff00ff 	.word	0xffff00ff

08002730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223c      	movs	r2, #60	; 0x3c
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e047      	b.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	223c      	movs	r2, #60	; 0x3c
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	223d      	movs	r2, #61	; 0x3d
 8002754:	2102      	movs	r1, #2
 8002756:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2270      	movs	r2, #112	; 0x70
 800276c:	4393      	bics	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00f      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	429a      	cmp	r2, r3
 8002796:	d009      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10c      	bne.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	4393      	bics	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223d      	movs	r2, #61	; 0x3d
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	; 0x3c
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40014000 	.word	0x40014000

080027ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223c      	movs	r2, #60	; 0x3c
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e03e      	b.n	8002886 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223c      	movs	r2, #60	; 0x3c
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	22ff      	movs	r2, #255	; 0xff
 8002814:	4393      	bics	r3, r2
 8002816:	001a      	movs	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002824:	401a      	ands	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002832:	401a      	ands	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002840:	401a      	ands	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800284e:	401a      	ands	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800285c:	401a      	ands	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800286a:	401a      	ands	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	223c      	movs	r2, #60	; 0x3c
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	fffffcff 	.word	0xfffffcff
 8002894:	fffffbff 	.word	0xfffffbff
 8002898:	fffff7ff 	.word	0xfffff7ff
 800289c:	ffffefff 	.word	0xffffefff
 80028a0:	ffffdfff 	.word	0xffffdfff
 80028a4:	ffffbfff 	.word	0xffffbfff

080028a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e044      	b.n	8002944 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2274      	movs	r2, #116	; 0x74
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7fd ffd9 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f830 	bl	8002950 <UART_SetConfig>
 80028f0:	0003      	movs	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e024      	b.n	8002944 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f9ab 	bl	8002c60 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	490d      	ldr	r1, [pc, #52]	; (800294c <HAL_UART_Init+0xa4>)
 8002916:	400a      	ands	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	212a      	movs	r1, #42	; 0x2a
 8002926:	438a      	bics	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fa43 	bl	8002dc8 <UART_CheckIdleState>
 8002942:	0003      	movs	r3, r0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	ffffb7ff 	.word	0xffffb7ff

08002950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002958:	231e      	movs	r3, #30
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4aaf      	ldr	r2, [pc, #700]	; (8002c3c <UART_SetConfig+0x2ec>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4aaa      	ldr	r2, [pc, #680]	; (8002c40 <UART_SetConfig+0x2f0>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4aa1      	ldr	r2, [pc, #644]	; (8002c44 <UART_SetConfig+0x2f4>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a9d      	ldr	r2, [pc, #628]	; (8002c48 <UART_SetConfig+0x2f8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d127      	bne.n	8002a26 <UART_SetConfig+0xd6>
 80029d6:	4b9d      	ldr	r3, [pc, #628]	; (8002c4c <UART_SetConfig+0x2fc>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d00d      	beq.n	80029fe <UART_SetConfig+0xae>
 80029e2:	d81b      	bhi.n	8002a1c <UART_SetConfig+0xcc>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d014      	beq.n	8002a12 <UART_SetConfig+0xc2>
 80029e8:	d818      	bhi.n	8002a1c <UART_SetConfig+0xcc>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <UART_SetConfig+0xa4>
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00a      	beq.n	8002a08 <UART_SetConfig+0xb8>
 80029f2:	e013      	b.n	8002a1c <UART_SetConfig+0xcc>
 80029f4:	231f      	movs	r3, #31
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e065      	b.n	8002aca <UART_SetConfig+0x17a>
 80029fe:	231f      	movs	r3, #31
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2202      	movs	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e060      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a08:	231f      	movs	r3, #31
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e05b      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a12:	231f      	movs	r3, #31
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2208      	movs	r2, #8
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e056      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2210      	movs	r2, #16
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e051      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a89      	ldr	r2, [pc, #548]	; (8002c50 <UART_SetConfig+0x300>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d134      	bne.n	8002a9a <UART_SetConfig+0x14a>
 8002a30:	4b86      	ldr	r3, [pc, #536]	; (8002c4c <UART_SetConfig+0x2fc>)
 8002a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a34:	23c0      	movs	r3, #192	; 0xc0
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	4013      	ands	r3, r2
 8002a3a:	22c0      	movs	r2, #192	; 0xc0
 8002a3c:	0292      	lsls	r2, r2, #10
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <UART_SetConfig+0x122>
 8002a42:	22c0      	movs	r2, #192	; 0xc0
 8002a44:	0292      	lsls	r2, r2, #10
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d822      	bhi.n	8002a90 <UART_SetConfig+0x140>
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	0292      	lsls	r2, r2, #10
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <UART_SetConfig+0x136>
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0292      	lsls	r2, r2, #10
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d81a      	bhi.n	8002a90 <UART_SetConfig+0x140>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <UART_SetConfig+0x118>
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0252      	lsls	r2, r2, #9
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00a      	beq.n	8002a7c <UART_SetConfig+0x12c>
 8002a66:	e013      	b.n	8002a90 <UART_SetConfig+0x140>
 8002a68:	231f      	movs	r3, #31
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e02b      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a72:	231f      	movs	r3, #31
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e026      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a7c:	231f      	movs	r3, #31
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2204      	movs	r2, #4
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e021      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a86:	231f      	movs	r3, #31
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e01c      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a90:	231f      	movs	r3, #31
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2210      	movs	r2, #16
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e017      	b.n	8002aca <UART_SetConfig+0x17a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6d      	ldr	r2, [pc, #436]	; (8002c54 <UART_SetConfig+0x304>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d104      	bne.n	8002aae <UART_SetConfig+0x15e>
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e00d      	b.n	8002aca <UART_SetConfig+0x17a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <UART_SetConfig+0x308>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d104      	bne.n	8002ac2 <UART_SetConfig+0x172>
 8002ab8:	231f      	movs	r3, #31
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e003      	b.n	8002aca <UART_SetConfig+0x17a>
 8002ac2:	231f      	movs	r3, #31
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d15d      	bne.n	8002b92 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d015      	beq.n	8002b0c <UART_SetConfig+0x1bc>
 8002ae0:	dc18      	bgt.n	8002b14 <UART_SetConfig+0x1c4>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d00d      	beq.n	8002b02 <UART_SetConfig+0x1b2>
 8002ae6:	dc15      	bgt.n	8002b14 <UART_SetConfig+0x1c4>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <UART_SetConfig+0x1a2>
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d005      	beq.n	8002afc <UART_SetConfig+0x1ac>
 8002af0:	e010      	b.n	8002b14 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af2:	f7fe fef9 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002af6:	0003      	movs	r3, r0
 8002af8:	61bb      	str	r3, [r7, #24]
        break;
 8002afa:	e012      	b.n	8002b22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002afc:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <UART_SetConfig+0x30c>)
 8002afe:	61bb      	str	r3, [r7, #24]
        break;
 8002b00:	e00f      	b.n	8002b22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b02:	f7fe fe67 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	61bb      	str	r3, [r7, #24]
        break;
 8002b0a:	e00a      	b.n	8002b22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	61bb      	str	r3, [r7, #24]
        break;
 8002b12:	e006      	b.n	8002b22 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b18:	231e      	movs	r3, #30
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
        break;
 8002b20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d100      	bne.n	8002b2a <UART_SetConfig+0x1da>
 8002b28:	e07b      	b.n	8002c22 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	18d2      	adds	r2, r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f7fd fae3 	bl	8000108 <__udivsi3>
 8002b42:	0003      	movs	r3, r0
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d91c      	bls.n	8002b88 <UART_SetConfig+0x238>
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d217      	bcs.n	8002b88 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	200e      	movs	r0, #14
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	210f      	movs	r1, #15
 8002b62:	438a      	bics	r2, r1
 8002b64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b299      	uxth	r1, r3
 8002b72:	183b      	adds	r3, r7, r0
 8002b74:	183a      	adds	r2, r7, r0
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	183a      	adds	r2, r7, r0
 8002b82:	8812      	ldrh	r2, [r2, #0]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	e04c      	b.n	8002c22 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002b88:	231e      	movs	r3, #30
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e047      	b.n	8002c22 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b92:	231f      	movs	r3, #31
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d015      	beq.n	8002bc8 <UART_SetConfig+0x278>
 8002b9c:	dc18      	bgt.n	8002bd0 <UART_SetConfig+0x280>
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d00d      	beq.n	8002bbe <UART_SetConfig+0x26e>
 8002ba2:	dc15      	bgt.n	8002bd0 <UART_SetConfig+0x280>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <UART_SetConfig+0x25e>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d005      	beq.n	8002bb8 <UART_SetConfig+0x268>
 8002bac:	e010      	b.n	8002bd0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bae:	f7fe fe9b 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	61bb      	str	r3, [r7, #24]
        break;
 8002bb6:	e012      	b.n	8002bde <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <UART_SetConfig+0x30c>)
 8002bba:	61bb      	str	r3, [r7, #24]
        break;
 8002bbc:	e00f      	b.n	8002bde <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bbe:	f7fe fe09 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]
        break;
 8002bc6:	e00a      	b.n	8002bde <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	61bb      	str	r3, [r7, #24]
        break;
 8002bce:	e006      	b.n	8002bde <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bd4:	231e      	movs	r3, #30
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
        break;
 8002bdc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01e      	beq.n	8002c22 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	085a      	lsrs	r2, r3, #1
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	18d2      	adds	r2, r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f7fd fa87 	bl	8000108 <__udivsi3>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d909      	bls.n	8002c1a <UART_SetConfig+0x2ca>
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d204      	bcs.n	8002c1a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	e003      	b.n	8002c22 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002c1a:	231e      	movs	r3, #30
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c2e:	231e      	movs	r3, #30
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b008      	add	sp, #32
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	efff69f3 	.word	0xefff69f3
 8002c40:	ffffcfff 	.word	0xffffcfff
 8002c44:	fffff4ff 	.word	0xfffff4ff
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40004400 	.word	0x40004400
 8002c54:	40004800 	.word	0x40004800
 8002c58:	40004c00 	.word	0x40004c00
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a4a      	ldr	r2, [pc, #296]	; (8002da4 <UART_AdvFeatureConfig+0x144>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d00b      	beq.n	8002cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <UART_AdvFeatureConfig+0x148>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <UART_AdvFeatureConfig+0x14c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <UART_AdvFeatureConfig+0x150>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <UART_AdvFeatureConfig+0x154>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2220      	movs	r2, #32
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <UART_AdvFeatureConfig+0x158>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <UART_AdvFeatureConfig+0x15c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	035b      	lsls	r3, r3, #13
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10b      	bne.n	8002d7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <UART_AdvFeatureConfig+0x160>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	4013      	ands	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <UART_AdvFeatureConfig+0x164>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	fffdffff 	.word	0xfffdffff
 8002da8:	fffeffff 	.word	0xfffeffff
 8002dac:	fffbffff 	.word	0xfffbffff
 8002db0:	ffff7fff 	.word	0xffff7fff
 8002db4:	ffffefff 	.word	0xffffefff
 8002db8:	ffffdfff 	.word	0xffffdfff
 8002dbc:	ffefffff 	.word	0xffefffff
 8002dc0:	ff9fffff 	.word	0xff9fffff
 8002dc4:	fff7ffff 	.word	0xfff7ffff

08002dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dd8:	f7fd fe24 	bl	8000a24 <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2208      	movs	r2, #8
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d10c      	bne.n	8002e08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	0391      	lsls	r1, r2, #14
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <UART_CheckIdleState+0x8c>)
 8002df8:	9200      	str	r2, [sp, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f000 f82c 	bl	8002e58 <UART_WaitOnFlagUntilTimeout>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e021      	b.n	8002e4c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d10c      	bne.n	8002e30 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	03d1      	lsls	r1, r2, #15
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <UART_CheckIdleState+0x8c>)
 8002e20:	9200      	str	r2, [sp, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f000 f818 	bl	8002e58 <UART_WaitOnFlagUntilTimeout>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e00d      	b.n	8002e4c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2274      	movs	r2, #116	; 0x74
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	01ffffff 	.word	0x01ffffff

08002e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	; 0x50
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e68:	e0a3      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	d100      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e70:	e09f      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7fd fdd7 	bl	8000a24 <HAL_GetTick>
 8002e76:	0002      	movs	r2, r0
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d13d      	bne.n	8002f04 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
 8002e92:	2301      	movs	r3, #1
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	494c      	ldr	r1, [pc, #304]	; (8002fdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eba:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	438a      	bics	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2274      	movs	r2, #116	; 0x74
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e067      	b.n	8002fd4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d050      	beq.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d146      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f32:	613b      	str	r3, [r7, #16]
  return(result);
 8002f34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f383 8810 	msr	PRIMASK, r3
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4923      	ldr	r1, [pc, #140]	; (8002fdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f66:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	438a      	bics	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2274      	movs	r2, #116	; 0x74
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e010      	b.n	8002fd4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	425a      	negs	r2, r3
 8002fc2:	4153      	adcs	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	001a      	movs	r2, r3
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d100      	bne.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002fd0:	e74b      	b.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b014      	add	sp, #80	; 0x50
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	fffffe5f 	.word	0xfffffe5f

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	4d0c      	ldr	r5, [pc, #48]	; (8003018 <__libc_init_array+0x38>)
 8002fe6:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	f000 f821 	bl	8003038 <_init>
 8002ff6:	4d0a      	ldr	r5, [pc, #40]	; (8003020 <__libc_init_array+0x40>)
 8002ff8:	4c0a      	ldr	r4, [pc, #40]	; (8003024 <__libc_init_array+0x44>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	00b3      	lsls	r3, r6, #2
 8003006:	58eb      	ldr	r3, [r5, r3]
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	00b3      	lsls	r3, r6, #2
 8003010:	58eb      	ldr	r3, [r5, r3]
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	08003088 	.word	0x08003088
 800301c:	08003088 	.word	0x08003088
 8003020:	08003088 	.word	0x08003088
 8003024:	0800308c 	.word	0x0800308c

08003028 <memset>:
 8003028:	0003      	movs	r3, r0
 800302a:	1882      	adds	r2, r0, r2
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	7019      	strb	r1, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
