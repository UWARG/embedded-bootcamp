
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004970  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a70  08004a70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a70  08004a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004a84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004a84  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2eb  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cb  00000000  00000000  0002e362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cfb  00000000  00000000  00031ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a4c  00000000  00000000  0004b99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009708f  00000000  00000000  0005d3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a8  00000000  00000000  000f4478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f7620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a18 	.word	0x08004a18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004a18 	.word	0x08004a18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4645      	mov	r5, r8
 80003f8:	46de      	mov	lr, fp
 80003fa:	4657      	mov	r7, sl
 80003fc:	464e      	mov	r6, r9
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	001f      	movs	r7, r3
 8000402:	030b      	lsls	r3, r1, #12
 8000404:	0b1b      	lsrs	r3, r3, #12
 8000406:	469b      	mov	fp, r3
 8000408:	004d      	lsls	r5, r1, #1
 800040a:	0fcb      	lsrs	r3, r1, #31
 800040c:	0004      	movs	r4, r0
 800040e:	4691      	mov	r9, r2
 8000410:	4698      	mov	r8, r3
 8000412:	b087      	sub	sp, #28
 8000414:	0d6d      	lsrs	r5, r5, #21
 8000416:	d100      	bne.n	800041a <__aeabi_dmul+0x26>
 8000418:	e1cd      	b.n	80007b6 <__aeabi_dmul+0x3c2>
 800041a:	4bce      	ldr	r3, [pc, #824]	; (8000754 <__aeabi_dmul+0x360>)
 800041c:	429d      	cmp	r5, r3
 800041e:	d100      	bne.n	8000422 <__aeabi_dmul+0x2e>
 8000420:	e1e9      	b.n	80007f6 <__aeabi_dmul+0x402>
 8000422:	465a      	mov	r2, fp
 8000424:	0f43      	lsrs	r3, r0, #29
 8000426:	00d2      	lsls	r2, r2, #3
 8000428:	4313      	orrs	r3, r2
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	0412      	lsls	r2, r2, #16
 800042e:	431a      	orrs	r2, r3
 8000430:	00c3      	lsls	r3, r0, #3
 8000432:	469a      	mov	sl, r3
 8000434:	4bc8      	ldr	r3, [pc, #800]	; (8000758 <__aeabi_dmul+0x364>)
 8000436:	4693      	mov	fp, r2
 8000438:	469c      	mov	ip, r3
 800043a:	2300      	movs	r3, #0
 800043c:	2600      	movs	r6, #0
 800043e:	4465      	add	r5, ip
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	033c      	lsls	r4, r7, #12
 8000444:	007b      	lsls	r3, r7, #1
 8000446:	4648      	mov	r0, r9
 8000448:	0b24      	lsrs	r4, r4, #12
 800044a:	0d5b      	lsrs	r3, r3, #21
 800044c:	0fff      	lsrs	r7, r7, #31
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_dmul+0x60>
 8000452:	e189      	b.n	8000768 <__aeabi_dmul+0x374>
 8000454:	4abf      	ldr	r2, [pc, #764]	; (8000754 <__aeabi_dmul+0x360>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d019      	beq.n	800048e <__aeabi_dmul+0x9a>
 800045a:	0f42      	lsrs	r2, r0, #29
 800045c:	00e4      	lsls	r4, r4, #3
 800045e:	4322      	orrs	r2, r4
 8000460:	2480      	movs	r4, #128	; 0x80
 8000462:	0424      	lsls	r4, r4, #16
 8000464:	4314      	orrs	r4, r2
 8000466:	4abc      	ldr	r2, [pc, #752]	; (8000758 <__aeabi_dmul+0x364>)
 8000468:	2100      	movs	r1, #0
 800046a:	4694      	mov	ip, r2
 800046c:	4642      	mov	r2, r8
 800046e:	4463      	add	r3, ip
 8000470:	195b      	adds	r3, r3, r5
 8000472:	9301      	str	r3, [sp, #4]
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	407a      	eors	r2, r7
 8000478:	3301      	adds	r3, #1
 800047a:	00c0      	lsls	r0, r0, #3
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	9302      	str	r3, [sp, #8]
 8000480:	2e0a      	cmp	r6, #10
 8000482:	dd1c      	ble.n	80004be <__aeabi_dmul+0xca>
 8000484:	003a      	movs	r2, r7
 8000486:	2e0b      	cmp	r6, #11
 8000488:	d05e      	beq.n	8000548 <__aeabi_dmul+0x154>
 800048a:	4647      	mov	r7, r8
 800048c:	e056      	b.n	800053c <__aeabi_dmul+0x148>
 800048e:	4649      	mov	r1, r9
 8000490:	4bb0      	ldr	r3, [pc, #704]	; (8000754 <__aeabi_dmul+0x360>)
 8000492:	4321      	orrs	r1, r4
 8000494:	18eb      	adds	r3, r5, r3
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2900      	cmp	r1, #0
 800049a:	d12a      	bne.n	80004f2 <__aeabi_dmul+0xfe>
 800049c:	2080      	movs	r0, #128	; 0x80
 800049e:	2202      	movs	r2, #2
 80004a0:	0100      	lsls	r0, r0, #4
 80004a2:	002b      	movs	r3, r5
 80004a4:	4684      	mov	ip, r0
 80004a6:	4316      	orrs	r6, r2
 80004a8:	4642      	mov	r2, r8
 80004aa:	4463      	add	r3, ip
 80004ac:	407a      	eors	r2, r7
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	9302      	str	r3, [sp, #8]
 80004b2:	2e0a      	cmp	r6, #10
 80004b4:	dd00      	ble.n	80004b8 <__aeabi_dmul+0xc4>
 80004b6:	e231      	b.n	800091c <__aeabi_dmul+0x528>
 80004b8:	2000      	movs	r0, #0
 80004ba:	2400      	movs	r4, #0
 80004bc:	2102      	movs	r1, #2
 80004be:	2e02      	cmp	r6, #2
 80004c0:	dc26      	bgt.n	8000510 <__aeabi_dmul+0x11c>
 80004c2:	3e01      	subs	r6, #1
 80004c4:	2e01      	cmp	r6, #1
 80004c6:	d852      	bhi.n	800056e <__aeabi_dmul+0x17a>
 80004c8:	2902      	cmp	r1, #2
 80004ca:	d04c      	beq.n	8000566 <__aeabi_dmul+0x172>
 80004cc:	2901      	cmp	r1, #1
 80004ce:	d000      	beq.n	80004d2 <__aeabi_dmul+0xde>
 80004d0:	e118      	b.n	8000704 <__aeabi_dmul+0x310>
 80004d2:	2300      	movs	r3, #0
 80004d4:	2400      	movs	r4, #0
 80004d6:	2500      	movs	r5, #0
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b007      	add	sp, #28
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	2203      	movs	r2, #3
 80004f6:	0109      	lsls	r1, r1, #4
 80004f8:	002b      	movs	r3, r5
 80004fa:	468c      	mov	ip, r1
 80004fc:	4316      	orrs	r6, r2
 80004fe:	4642      	mov	r2, r8
 8000500:	4463      	add	r3, ip
 8000502:	407a      	eors	r2, r7
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	9302      	str	r3, [sp, #8]
 8000508:	2e0a      	cmp	r6, #10
 800050a:	dd00      	ble.n	800050e <__aeabi_dmul+0x11a>
 800050c:	e228      	b.n	8000960 <__aeabi_dmul+0x56c>
 800050e:	2103      	movs	r1, #3
 8000510:	2501      	movs	r5, #1
 8000512:	40b5      	lsls	r5, r6
 8000514:	46ac      	mov	ip, r5
 8000516:	26a6      	movs	r6, #166	; 0xa6
 8000518:	4663      	mov	r3, ip
 800051a:	00f6      	lsls	r6, r6, #3
 800051c:	4035      	ands	r5, r6
 800051e:	4233      	tst	r3, r6
 8000520:	d10b      	bne.n	800053a <__aeabi_dmul+0x146>
 8000522:	2690      	movs	r6, #144	; 0x90
 8000524:	00b6      	lsls	r6, r6, #2
 8000526:	4233      	tst	r3, r6
 8000528:	d118      	bne.n	800055c <__aeabi_dmul+0x168>
 800052a:	3eb9      	subs	r6, #185	; 0xb9
 800052c:	3eff      	subs	r6, #255	; 0xff
 800052e:	421e      	tst	r6, r3
 8000530:	d01d      	beq.n	800056e <__aeabi_dmul+0x17a>
 8000532:	46a3      	mov	fp, r4
 8000534:	4682      	mov	sl, r0
 8000536:	9100      	str	r1, [sp, #0]
 8000538:	e000      	b.n	800053c <__aeabi_dmul+0x148>
 800053a:	0017      	movs	r7, r2
 800053c:	9900      	ldr	r1, [sp, #0]
 800053e:	003a      	movs	r2, r7
 8000540:	2902      	cmp	r1, #2
 8000542:	d010      	beq.n	8000566 <__aeabi_dmul+0x172>
 8000544:	465c      	mov	r4, fp
 8000546:	4650      	mov	r0, sl
 8000548:	2903      	cmp	r1, #3
 800054a:	d1bf      	bne.n	80004cc <__aeabi_dmul+0xd8>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	031b      	lsls	r3, r3, #12
 8000550:	431c      	orrs	r4, r3
 8000552:	0324      	lsls	r4, r4, #12
 8000554:	0005      	movs	r5, r0
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <__aeabi_dmul+0x360>)
 8000558:	0b24      	lsrs	r4, r4, #12
 800055a:	e7bd      	b.n	80004d8 <__aeabi_dmul+0xe4>
 800055c:	2480      	movs	r4, #128	; 0x80
 800055e:	2200      	movs	r2, #0
 8000560:	4b7c      	ldr	r3, [pc, #496]	; (8000754 <__aeabi_dmul+0x360>)
 8000562:	0324      	lsls	r4, r4, #12
 8000564:	e7b8      	b.n	80004d8 <__aeabi_dmul+0xe4>
 8000566:	2400      	movs	r4, #0
 8000568:	2500      	movs	r5, #0
 800056a:	4b7a      	ldr	r3, [pc, #488]	; (8000754 <__aeabi_dmul+0x360>)
 800056c:	e7b4      	b.n	80004d8 <__aeabi_dmul+0xe4>
 800056e:	4653      	mov	r3, sl
 8000570:	041e      	lsls	r6, r3, #16
 8000572:	0c36      	lsrs	r6, r6, #16
 8000574:	0c1f      	lsrs	r7, r3, #16
 8000576:	0033      	movs	r3, r6
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	0400      	lsls	r0, r0, #16
 800057c:	0c00      	lsrs	r0, r0, #16
 800057e:	4343      	muls	r3, r0
 8000580:	4698      	mov	r8, r3
 8000582:	0003      	movs	r3, r0
 8000584:	437b      	muls	r3, r7
 8000586:	4699      	mov	r9, r3
 8000588:	0033      	movs	r3, r6
 800058a:	434b      	muls	r3, r1
 800058c:	469c      	mov	ip, r3
 800058e:	4643      	mov	r3, r8
 8000590:	000d      	movs	r5, r1
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	469a      	mov	sl, r3
 8000596:	437d      	muls	r5, r7
 8000598:	44cc      	add	ip, r9
 800059a:	44d4      	add	ip, sl
 800059c:	9500      	str	r5, [sp, #0]
 800059e:	45e1      	cmp	r9, ip
 80005a0:	d904      	bls.n	80005ac <__aeabi_dmul+0x1b8>
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	025b      	lsls	r3, r3, #9
 80005a6:	4699      	mov	r9, r3
 80005a8:	444d      	add	r5, r9
 80005aa:	9500      	str	r5, [sp, #0]
 80005ac:	4663      	mov	r3, ip
 80005ae:	0c1b      	lsrs	r3, r3, #16
 80005b0:	001d      	movs	r5, r3
 80005b2:	4663      	mov	r3, ip
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	469c      	mov	ip, r3
 80005b8:	4643      	mov	r3, r8
 80005ba:	041b      	lsls	r3, r3, #16
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	4698      	mov	r8, r3
 80005c0:	4663      	mov	r3, ip
 80005c2:	4443      	add	r3, r8
 80005c4:	9303      	str	r3, [sp, #12]
 80005c6:	0c23      	lsrs	r3, r4, #16
 80005c8:	4698      	mov	r8, r3
 80005ca:	0033      	movs	r3, r6
 80005cc:	0424      	lsls	r4, r4, #16
 80005ce:	0c24      	lsrs	r4, r4, #16
 80005d0:	4363      	muls	r3, r4
 80005d2:	469c      	mov	ip, r3
 80005d4:	0023      	movs	r3, r4
 80005d6:	437b      	muls	r3, r7
 80005d8:	4699      	mov	r9, r3
 80005da:	4643      	mov	r3, r8
 80005dc:	435e      	muls	r6, r3
 80005de:	435f      	muls	r7, r3
 80005e0:	444e      	add	r6, r9
 80005e2:	4663      	mov	r3, ip
 80005e4:	46b2      	mov	sl, r6
 80005e6:	0c1e      	lsrs	r6, r3, #16
 80005e8:	4456      	add	r6, sl
 80005ea:	45b1      	cmp	r9, r6
 80005ec:	d903      	bls.n	80005f6 <__aeabi_dmul+0x202>
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	025b      	lsls	r3, r3, #9
 80005f2:	4699      	mov	r9, r3
 80005f4:	444f      	add	r7, r9
 80005f6:	0c33      	lsrs	r3, r6, #16
 80005f8:	4699      	mov	r9, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	444b      	add	r3, r9
 80005fe:	9305      	str	r3, [sp, #20]
 8000600:	4663      	mov	r3, ip
 8000602:	46ac      	mov	ip, r5
 8000604:	041f      	lsls	r7, r3, #16
 8000606:	0c3f      	lsrs	r7, r7, #16
 8000608:	0436      	lsls	r6, r6, #16
 800060a:	19f6      	adds	r6, r6, r7
 800060c:	44b4      	add	ip, r6
 800060e:	4663      	mov	r3, ip
 8000610:	9304      	str	r3, [sp, #16]
 8000612:	465b      	mov	r3, fp
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	469c      	mov	ip, r3
 8000618:	465b      	mov	r3, fp
 800061a:	041f      	lsls	r7, r3, #16
 800061c:	0c3f      	lsrs	r7, r7, #16
 800061e:	003b      	movs	r3, r7
 8000620:	4343      	muls	r3, r0
 8000622:	4699      	mov	r9, r3
 8000624:	4663      	mov	r3, ip
 8000626:	4343      	muls	r3, r0
 8000628:	469a      	mov	sl, r3
 800062a:	464b      	mov	r3, r9
 800062c:	4660      	mov	r0, ip
 800062e:	0c1b      	lsrs	r3, r3, #16
 8000630:	469b      	mov	fp, r3
 8000632:	4348      	muls	r0, r1
 8000634:	4379      	muls	r1, r7
 8000636:	4451      	add	r1, sl
 8000638:	4459      	add	r1, fp
 800063a:	458a      	cmp	sl, r1
 800063c:	d903      	bls.n	8000646 <__aeabi_dmul+0x252>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	025b      	lsls	r3, r3, #9
 8000642:	469a      	mov	sl, r3
 8000644:	4450      	add	r0, sl
 8000646:	0c0b      	lsrs	r3, r1, #16
 8000648:	469a      	mov	sl, r3
 800064a:	464b      	mov	r3, r9
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	0c1b      	lsrs	r3, r3, #16
 8000650:	4699      	mov	r9, r3
 8000652:	003b      	movs	r3, r7
 8000654:	4363      	muls	r3, r4
 8000656:	0409      	lsls	r1, r1, #16
 8000658:	4645      	mov	r5, r8
 800065a:	4449      	add	r1, r9
 800065c:	4699      	mov	r9, r3
 800065e:	4663      	mov	r3, ip
 8000660:	435c      	muls	r4, r3
 8000662:	436b      	muls	r3, r5
 8000664:	469c      	mov	ip, r3
 8000666:	464b      	mov	r3, r9
 8000668:	0c1b      	lsrs	r3, r3, #16
 800066a:	4698      	mov	r8, r3
 800066c:	436f      	muls	r7, r5
 800066e:	193f      	adds	r7, r7, r4
 8000670:	4447      	add	r7, r8
 8000672:	4450      	add	r0, sl
 8000674:	42bc      	cmp	r4, r7
 8000676:	d903      	bls.n	8000680 <__aeabi_dmul+0x28c>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	025b      	lsls	r3, r3, #9
 800067c:	4698      	mov	r8, r3
 800067e:	44c4      	add	ip, r8
 8000680:	9b04      	ldr	r3, [sp, #16]
 8000682:	9d00      	ldr	r5, [sp, #0]
 8000684:	4698      	mov	r8, r3
 8000686:	4445      	add	r5, r8
 8000688:	42b5      	cmp	r5, r6
 800068a:	41b6      	sbcs	r6, r6
 800068c:	4273      	negs	r3, r6
 800068e:	4698      	mov	r8, r3
 8000690:	464b      	mov	r3, r9
 8000692:	041e      	lsls	r6, r3, #16
 8000694:	9b05      	ldr	r3, [sp, #20]
 8000696:	043c      	lsls	r4, r7, #16
 8000698:	4699      	mov	r9, r3
 800069a:	0c36      	lsrs	r6, r6, #16
 800069c:	19a4      	adds	r4, r4, r6
 800069e:	444c      	add	r4, r9
 80006a0:	46a1      	mov	r9, r4
 80006a2:	4683      	mov	fp, r0
 80006a4:	186e      	adds	r6, r5, r1
 80006a6:	44c1      	add	r9, r8
 80006a8:	428e      	cmp	r6, r1
 80006aa:	4189      	sbcs	r1, r1
 80006ac:	44cb      	add	fp, r9
 80006ae:	465d      	mov	r5, fp
 80006b0:	4249      	negs	r1, r1
 80006b2:	186d      	adds	r5, r5, r1
 80006b4:	429c      	cmp	r4, r3
 80006b6:	41a4      	sbcs	r4, r4
 80006b8:	45c1      	cmp	r9, r8
 80006ba:	419b      	sbcs	r3, r3
 80006bc:	4583      	cmp	fp, r0
 80006be:	4180      	sbcs	r0, r0
 80006c0:	428d      	cmp	r5, r1
 80006c2:	4189      	sbcs	r1, r1
 80006c4:	425b      	negs	r3, r3
 80006c6:	4264      	negs	r4, r4
 80006c8:	431c      	orrs	r4, r3
 80006ca:	4240      	negs	r0, r0
 80006cc:	9b03      	ldr	r3, [sp, #12]
 80006ce:	4249      	negs	r1, r1
 80006d0:	4301      	orrs	r1, r0
 80006d2:	0270      	lsls	r0, r6, #9
 80006d4:	0c3f      	lsrs	r7, r7, #16
 80006d6:	4318      	orrs	r0, r3
 80006d8:	19e4      	adds	r4, r4, r7
 80006da:	1e47      	subs	r7, r0, #1
 80006dc:	41b8      	sbcs	r0, r7
 80006de:	1864      	adds	r4, r4, r1
 80006e0:	4464      	add	r4, ip
 80006e2:	0df6      	lsrs	r6, r6, #23
 80006e4:	0261      	lsls	r1, r4, #9
 80006e6:	4330      	orrs	r0, r6
 80006e8:	0dec      	lsrs	r4, r5, #23
 80006ea:	026e      	lsls	r6, r5, #9
 80006ec:	430c      	orrs	r4, r1
 80006ee:	4330      	orrs	r0, r6
 80006f0:	01c9      	lsls	r1, r1, #7
 80006f2:	d400      	bmi.n	80006f6 <__aeabi_dmul+0x302>
 80006f4:	e0f1      	b.n	80008da <__aeabi_dmul+0x4e6>
 80006f6:	2101      	movs	r1, #1
 80006f8:	0843      	lsrs	r3, r0, #1
 80006fa:	4001      	ands	r1, r0
 80006fc:	430b      	orrs	r3, r1
 80006fe:	07e0      	lsls	r0, r4, #31
 8000700:	4318      	orrs	r0, r3
 8000702:	0864      	lsrs	r4, r4, #1
 8000704:	4915      	ldr	r1, [pc, #84]	; (800075c <__aeabi_dmul+0x368>)
 8000706:	9b02      	ldr	r3, [sp, #8]
 8000708:	468c      	mov	ip, r1
 800070a:	4463      	add	r3, ip
 800070c:	2b00      	cmp	r3, #0
 800070e:	dc00      	bgt.n	8000712 <__aeabi_dmul+0x31e>
 8000710:	e097      	b.n	8000842 <__aeabi_dmul+0x44e>
 8000712:	0741      	lsls	r1, r0, #29
 8000714:	d009      	beq.n	800072a <__aeabi_dmul+0x336>
 8000716:	210f      	movs	r1, #15
 8000718:	4001      	ands	r1, r0
 800071a:	2904      	cmp	r1, #4
 800071c:	d005      	beq.n	800072a <__aeabi_dmul+0x336>
 800071e:	1d01      	adds	r1, r0, #4
 8000720:	4281      	cmp	r1, r0
 8000722:	4180      	sbcs	r0, r0
 8000724:	4240      	negs	r0, r0
 8000726:	1824      	adds	r4, r4, r0
 8000728:	0008      	movs	r0, r1
 800072a:	01e1      	lsls	r1, r4, #7
 800072c:	d506      	bpl.n	800073c <__aeabi_dmul+0x348>
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	00c9      	lsls	r1, r1, #3
 8000732:	468c      	mov	ip, r1
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <__aeabi_dmul+0x36c>)
 8000736:	401c      	ands	r4, r3
 8000738:	9b02      	ldr	r3, [sp, #8]
 800073a:	4463      	add	r3, ip
 800073c:	4909      	ldr	r1, [pc, #36]	; (8000764 <__aeabi_dmul+0x370>)
 800073e:	428b      	cmp	r3, r1
 8000740:	dd00      	ble.n	8000744 <__aeabi_dmul+0x350>
 8000742:	e710      	b.n	8000566 <__aeabi_dmul+0x172>
 8000744:	0761      	lsls	r1, r4, #29
 8000746:	08c5      	lsrs	r5, r0, #3
 8000748:	0264      	lsls	r4, r4, #9
 800074a:	055b      	lsls	r3, r3, #21
 800074c:	430d      	orrs	r5, r1
 800074e:	0b24      	lsrs	r4, r4, #12
 8000750:	0d5b      	lsrs	r3, r3, #21
 8000752:	e6c1      	b.n	80004d8 <__aeabi_dmul+0xe4>
 8000754:	000007ff 	.word	0x000007ff
 8000758:	fffffc01 	.word	0xfffffc01
 800075c:	000003ff 	.word	0x000003ff
 8000760:	feffffff 	.word	0xfeffffff
 8000764:	000007fe 	.word	0x000007fe
 8000768:	464b      	mov	r3, r9
 800076a:	4323      	orrs	r3, r4
 800076c:	d059      	beq.n	8000822 <__aeabi_dmul+0x42e>
 800076e:	2c00      	cmp	r4, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_dmul+0x380>
 8000772:	e0a3      	b.n	80008bc <__aeabi_dmul+0x4c8>
 8000774:	0020      	movs	r0, r4
 8000776:	f000 fce7 	bl	8001148 <__clzsi2>
 800077a:	0001      	movs	r1, r0
 800077c:	0003      	movs	r3, r0
 800077e:	390b      	subs	r1, #11
 8000780:	221d      	movs	r2, #29
 8000782:	1a52      	subs	r2, r2, r1
 8000784:	4649      	mov	r1, r9
 8000786:	0018      	movs	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	464a      	mov	r2, r9
 800078c:	3808      	subs	r0, #8
 800078e:	4082      	lsls	r2, r0
 8000790:	4084      	lsls	r4, r0
 8000792:	0010      	movs	r0, r2
 8000794:	430c      	orrs	r4, r1
 8000796:	4a74      	ldr	r2, [pc, #464]	; (8000968 <__aeabi_dmul+0x574>)
 8000798:	1aeb      	subs	r3, r5, r3
 800079a:	4694      	mov	ip, r2
 800079c:	4642      	mov	r2, r8
 800079e:	4463      	add	r3, ip
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	9b01      	ldr	r3, [sp, #4]
 80007a4:	407a      	eors	r2, r7
 80007a6:	3301      	adds	r3, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2e0a      	cmp	r6, #10
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dmul+0x3c0>
 80007b2:	e667      	b.n	8000484 <__aeabi_dmul+0x90>
 80007b4:	e683      	b.n	80004be <__aeabi_dmul+0xca>
 80007b6:	465b      	mov	r3, fp
 80007b8:	4303      	orrs	r3, r0
 80007ba:	469a      	mov	sl, r3
 80007bc:	d02a      	beq.n	8000814 <__aeabi_dmul+0x420>
 80007be:	465b      	mov	r3, fp
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d06d      	beq.n	80008a0 <__aeabi_dmul+0x4ac>
 80007c4:	4658      	mov	r0, fp
 80007c6:	f000 fcbf 	bl	8001148 <__clzsi2>
 80007ca:	0001      	movs	r1, r0
 80007cc:	0003      	movs	r3, r0
 80007ce:	390b      	subs	r1, #11
 80007d0:	221d      	movs	r2, #29
 80007d2:	1a52      	subs	r2, r2, r1
 80007d4:	0021      	movs	r1, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	465d      	mov	r5, fp
 80007da:	40d1      	lsrs	r1, r2
 80007dc:	3808      	subs	r0, #8
 80007de:	4085      	lsls	r5, r0
 80007e0:	000a      	movs	r2, r1
 80007e2:	4084      	lsls	r4, r0
 80007e4:	432a      	orrs	r2, r5
 80007e6:	4693      	mov	fp, r2
 80007e8:	46a2      	mov	sl, r4
 80007ea:	4d5f      	ldr	r5, [pc, #380]	; (8000968 <__aeabi_dmul+0x574>)
 80007ec:	2600      	movs	r6, #0
 80007ee:	1aed      	subs	r5, r5, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	e625      	b.n	8000442 <__aeabi_dmul+0x4e>
 80007f6:	465b      	mov	r3, fp
 80007f8:	4303      	orrs	r3, r0
 80007fa:	469a      	mov	sl, r3
 80007fc:	d105      	bne.n	800080a <__aeabi_dmul+0x416>
 80007fe:	2300      	movs	r3, #0
 8000800:	469b      	mov	fp, r3
 8000802:	3302      	adds	r3, #2
 8000804:	2608      	movs	r6, #8
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	e61b      	b.n	8000442 <__aeabi_dmul+0x4e>
 800080a:	2303      	movs	r3, #3
 800080c:	4682      	mov	sl, r0
 800080e:	260c      	movs	r6, #12
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	e616      	b.n	8000442 <__aeabi_dmul+0x4e>
 8000814:	2300      	movs	r3, #0
 8000816:	469b      	mov	fp, r3
 8000818:	3301      	adds	r3, #1
 800081a:	2604      	movs	r6, #4
 800081c:	2500      	movs	r5, #0
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	e60f      	b.n	8000442 <__aeabi_dmul+0x4e>
 8000822:	4642      	mov	r2, r8
 8000824:	3301      	adds	r3, #1
 8000826:	9501      	str	r5, [sp, #4]
 8000828:	431e      	orrs	r6, r3
 800082a:	9b01      	ldr	r3, [sp, #4]
 800082c:	407a      	eors	r2, r7
 800082e:	3301      	adds	r3, #1
 8000830:	2400      	movs	r4, #0
 8000832:	2000      	movs	r0, #0
 8000834:	2101      	movs	r1, #1
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2e0a      	cmp	r6, #10
 800083c:	dd00      	ble.n	8000840 <__aeabi_dmul+0x44c>
 800083e:	e621      	b.n	8000484 <__aeabi_dmul+0x90>
 8000840:	e63d      	b.n	80004be <__aeabi_dmul+0xca>
 8000842:	2101      	movs	r1, #1
 8000844:	1ac9      	subs	r1, r1, r3
 8000846:	2938      	cmp	r1, #56	; 0x38
 8000848:	dd00      	ble.n	800084c <__aeabi_dmul+0x458>
 800084a:	e642      	b.n	80004d2 <__aeabi_dmul+0xde>
 800084c:	291f      	cmp	r1, #31
 800084e:	dd47      	ble.n	80008e0 <__aeabi_dmul+0x4ec>
 8000850:	261f      	movs	r6, #31
 8000852:	0025      	movs	r5, r4
 8000854:	4276      	negs	r6, r6
 8000856:	1af3      	subs	r3, r6, r3
 8000858:	40dd      	lsrs	r5, r3
 800085a:	002b      	movs	r3, r5
 800085c:	2920      	cmp	r1, #32
 800085e:	d005      	beq.n	800086c <__aeabi_dmul+0x478>
 8000860:	4942      	ldr	r1, [pc, #264]	; (800096c <__aeabi_dmul+0x578>)
 8000862:	9d02      	ldr	r5, [sp, #8]
 8000864:	468c      	mov	ip, r1
 8000866:	4465      	add	r5, ip
 8000868:	40ac      	lsls	r4, r5
 800086a:	4320      	orrs	r0, r4
 800086c:	1e41      	subs	r1, r0, #1
 800086e:	4188      	sbcs	r0, r1
 8000870:	4318      	orrs	r0, r3
 8000872:	2307      	movs	r3, #7
 8000874:	001d      	movs	r5, r3
 8000876:	2400      	movs	r4, #0
 8000878:	4005      	ands	r5, r0
 800087a:	4203      	tst	r3, r0
 800087c:	d04a      	beq.n	8000914 <__aeabi_dmul+0x520>
 800087e:	230f      	movs	r3, #15
 8000880:	2400      	movs	r4, #0
 8000882:	4003      	ands	r3, r0
 8000884:	2b04      	cmp	r3, #4
 8000886:	d042      	beq.n	800090e <__aeabi_dmul+0x51a>
 8000888:	1d03      	adds	r3, r0, #4
 800088a:	4283      	cmp	r3, r0
 800088c:	4180      	sbcs	r0, r0
 800088e:	4240      	negs	r0, r0
 8000890:	1824      	adds	r4, r4, r0
 8000892:	0018      	movs	r0, r3
 8000894:	0223      	lsls	r3, r4, #8
 8000896:	d53a      	bpl.n	800090e <__aeabi_dmul+0x51a>
 8000898:	2301      	movs	r3, #1
 800089a:	2400      	movs	r4, #0
 800089c:	2500      	movs	r5, #0
 800089e:	e61b      	b.n	80004d8 <__aeabi_dmul+0xe4>
 80008a0:	f000 fc52 	bl	8001148 <__clzsi2>
 80008a4:	0001      	movs	r1, r0
 80008a6:	0003      	movs	r3, r0
 80008a8:	3115      	adds	r1, #21
 80008aa:	3320      	adds	r3, #32
 80008ac:	291c      	cmp	r1, #28
 80008ae:	dd8f      	ble.n	80007d0 <__aeabi_dmul+0x3dc>
 80008b0:	3808      	subs	r0, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	4084      	lsls	r4, r0
 80008b6:	4692      	mov	sl, r2
 80008b8:	46a3      	mov	fp, r4
 80008ba:	e796      	b.n	80007ea <__aeabi_dmul+0x3f6>
 80008bc:	f000 fc44 	bl	8001148 <__clzsi2>
 80008c0:	0001      	movs	r1, r0
 80008c2:	0003      	movs	r3, r0
 80008c4:	3115      	adds	r1, #21
 80008c6:	3320      	adds	r3, #32
 80008c8:	291c      	cmp	r1, #28
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dmul+0x4da>
 80008cc:	e758      	b.n	8000780 <__aeabi_dmul+0x38c>
 80008ce:	0002      	movs	r2, r0
 80008d0:	464c      	mov	r4, r9
 80008d2:	3a08      	subs	r2, #8
 80008d4:	2000      	movs	r0, #0
 80008d6:	4094      	lsls	r4, r2
 80008d8:	e75d      	b.n	8000796 <__aeabi_dmul+0x3a2>
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	e711      	b.n	8000704 <__aeabi_dmul+0x310>
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <__aeabi_dmul+0x57c>)
 80008e2:	0026      	movs	r6, r4
 80008e4:	469c      	mov	ip, r3
 80008e6:	0003      	movs	r3, r0
 80008e8:	9d02      	ldr	r5, [sp, #8]
 80008ea:	40cb      	lsrs	r3, r1
 80008ec:	4465      	add	r5, ip
 80008ee:	40ae      	lsls	r6, r5
 80008f0:	431e      	orrs	r6, r3
 80008f2:	0003      	movs	r3, r0
 80008f4:	40ab      	lsls	r3, r5
 80008f6:	1e58      	subs	r0, r3, #1
 80008f8:	4183      	sbcs	r3, r0
 80008fa:	0030      	movs	r0, r6
 80008fc:	4318      	orrs	r0, r3
 80008fe:	40cc      	lsrs	r4, r1
 8000900:	0743      	lsls	r3, r0, #29
 8000902:	d0c7      	beq.n	8000894 <__aeabi_dmul+0x4a0>
 8000904:	230f      	movs	r3, #15
 8000906:	4003      	ands	r3, r0
 8000908:	2b04      	cmp	r3, #4
 800090a:	d1bd      	bne.n	8000888 <__aeabi_dmul+0x494>
 800090c:	e7c2      	b.n	8000894 <__aeabi_dmul+0x4a0>
 800090e:	0765      	lsls	r5, r4, #29
 8000910:	0264      	lsls	r4, r4, #9
 8000912:	0b24      	lsrs	r4, r4, #12
 8000914:	08c0      	lsrs	r0, r0, #3
 8000916:	2300      	movs	r3, #0
 8000918:	4305      	orrs	r5, r0
 800091a:	e5dd      	b.n	80004d8 <__aeabi_dmul+0xe4>
 800091c:	2500      	movs	r5, #0
 800091e:	2302      	movs	r3, #2
 8000920:	2e0f      	cmp	r6, #15
 8000922:	d10c      	bne.n	800093e <__aeabi_dmul+0x54a>
 8000924:	2480      	movs	r4, #128	; 0x80
 8000926:	465b      	mov	r3, fp
 8000928:	0324      	lsls	r4, r4, #12
 800092a:	4223      	tst	r3, r4
 800092c:	d00e      	beq.n	800094c <__aeabi_dmul+0x558>
 800092e:	4221      	tst	r1, r4
 8000930:	d10c      	bne.n	800094c <__aeabi_dmul+0x558>
 8000932:	430c      	orrs	r4, r1
 8000934:	0324      	lsls	r4, r4, #12
 8000936:	003a      	movs	r2, r7
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <__aeabi_dmul+0x580>)
 800093a:	0b24      	lsrs	r4, r4, #12
 800093c:	e5cc      	b.n	80004d8 <__aeabi_dmul+0xe4>
 800093e:	2e0b      	cmp	r6, #11
 8000940:	d000      	beq.n	8000944 <__aeabi_dmul+0x550>
 8000942:	e5a2      	b.n	800048a <__aeabi_dmul+0x96>
 8000944:	468b      	mov	fp, r1
 8000946:	46aa      	mov	sl, r5
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	e5f7      	b.n	800053c <__aeabi_dmul+0x148>
 800094c:	2480      	movs	r4, #128	; 0x80
 800094e:	465b      	mov	r3, fp
 8000950:	0324      	lsls	r4, r4, #12
 8000952:	431c      	orrs	r4, r3
 8000954:	0324      	lsls	r4, r4, #12
 8000956:	4642      	mov	r2, r8
 8000958:	4655      	mov	r5, sl
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <__aeabi_dmul+0x580>)
 800095c:	0b24      	lsrs	r4, r4, #12
 800095e:	e5bb      	b.n	80004d8 <__aeabi_dmul+0xe4>
 8000960:	464d      	mov	r5, r9
 8000962:	0021      	movs	r1, r4
 8000964:	2303      	movs	r3, #3
 8000966:	e7db      	b.n	8000920 <__aeabi_dmul+0x52c>
 8000968:	fffffc0d 	.word	0xfffffc0d
 800096c:	0000043e 	.word	0x0000043e
 8000970:	0000041e 	.word	0x0000041e
 8000974:	000007ff 	.word	0x000007ff

08000978 <__aeabi_dsub>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	4657      	mov	r7, sl
 800097c:	464e      	mov	r6, r9
 800097e:	4645      	mov	r5, r8
 8000980:	46de      	mov	lr, fp
 8000982:	b5e0      	push	{r5, r6, r7, lr}
 8000984:	000d      	movs	r5, r1
 8000986:	0004      	movs	r4, r0
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	032b      	lsls	r3, r5, #12
 800098e:	0a5b      	lsrs	r3, r3, #9
 8000990:	0f62      	lsrs	r2, r4, #29
 8000992:	431a      	orrs	r2, r3
 8000994:	00e3      	lsls	r3, r4, #3
 8000996:	030c      	lsls	r4, r1, #12
 8000998:	0a64      	lsrs	r4, r4, #9
 800099a:	0f47      	lsrs	r7, r0, #29
 800099c:	4327      	orrs	r7, r4
 800099e:	4cd0      	ldr	r4, [pc, #832]	; (8000ce0 <__aeabi_dsub+0x368>)
 80009a0:	006e      	lsls	r6, r5, #1
 80009a2:	4691      	mov	r9, r2
 80009a4:	b083      	sub	sp, #12
 80009a6:	004a      	lsls	r2, r1, #1
 80009a8:	00c0      	lsls	r0, r0, #3
 80009aa:	4698      	mov	r8, r3
 80009ac:	46a2      	mov	sl, r4
 80009ae:	0d76      	lsrs	r6, r6, #21
 80009b0:	0fed      	lsrs	r5, r5, #31
 80009b2:	0d52      	lsrs	r2, r2, #21
 80009b4:	0fc9      	lsrs	r1, r1, #31
 80009b6:	9001      	str	r0, [sp, #4]
 80009b8:	42a2      	cmp	r2, r4
 80009ba:	d100      	bne.n	80009be <__aeabi_dsub+0x46>
 80009bc:	e0b9      	b.n	8000b32 <__aeabi_dsub+0x1ba>
 80009be:	2401      	movs	r4, #1
 80009c0:	4061      	eors	r1, r4
 80009c2:	468b      	mov	fp, r1
 80009c4:	428d      	cmp	r5, r1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x52>
 80009c8:	e08d      	b.n	8000ae6 <__aeabi_dsub+0x16e>
 80009ca:	1ab4      	subs	r4, r6, r2
 80009cc:	46a4      	mov	ip, r4
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	dc00      	bgt.n	80009d4 <__aeabi_dsub+0x5c>
 80009d2:	e0b7      	b.n	8000b44 <__aeabi_dsub+0x1cc>
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_dsub+0x62>
 80009d8:	e0cb      	b.n	8000b72 <__aeabi_dsub+0x1fa>
 80009da:	4ac1      	ldr	r2, [pc, #772]	; (8000ce0 <__aeabi_dsub+0x368>)
 80009dc:	4296      	cmp	r6, r2
 80009de:	d100      	bne.n	80009e2 <__aeabi_dsub+0x6a>
 80009e0:	e186      	b.n	8000cf0 <__aeabi_dsub+0x378>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0412      	lsls	r2, r2, #16
 80009e6:	4317      	orrs	r7, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	2a38      	cmp	r2, #56	; 0x38
 80009ec:	dd00      	ble.n	80009f0 <__aeabi_dsub+0x78>
 80009ee:	e1a4      	b.n	8000d3a <__aeabi_dsub+0x3c2>
 80009f0:	2a1f      	cmp	r2, #31
 80009f2:	dd00      	ble.n	80009f6 <__aeabi_dsub+0x7e>
 80009f4:	e21d      	b.n	8000e32 <__aeabi_dsub+0x4ba>
 80009f6:	4661      	mov	r1, ip
 80009f8:	2220      	movs	r2, #32
 80009fa:	003c      	movs	r4, r7
 80009fc:	1a52      	subs	r2, r2, r1
 80009fe:	0001      	movs	r1, r0
 8000a00:	4090      	lsls	r0, r2
 8000a02:	4094      	lsls	r4, r2
 8000a04:	1e42      	subs	r2, r0, #1
 8000a06:	4190      	sbcs	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	46a0      	mov	r8, r4
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	40d7      	lsrs	r7, r2
 8000a10:	464a      	mov	r2, r9
 8000a12:	40e1      	lsrs	r1, r4
 8000a14:	4644      	mov	r4, r8
 8000a16:	1bd2      	subs	r2, r2, r7
 8000a18:	4691      	mov	r9, r2
 8000a1a:	430c      	orrs	r4, r1
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	1b1c      	subs	r4, r3, r4
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	4192      	sbcs	r2, r2
 8000a24:	464b      	mov	r3, r9
 8000a26:	4252      	negs	r2, r2
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	d400      	bmi.n	8000a34 <__aeabi_dsub+0xbc>
 8000a32:	e12b      	b.n	8000c8c <__aeabi_dsub+0x314>
 8000a34:	4653      	mov	r3, sl
 8000a36:	025a      	lsls	r2, r3, #9
 8000a38:	0a53      	lsrs	r3, r2, #9
 8000a3a:	469a      	mov	sl, r3
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dsub+0xcc>
 8000a42:	e166      	b.n	8000d12 <__aeabi_dsub+0x39a>
 8000a44:	4650      	mov	r0, sl
 8000a46:	f000 fb7f 	bl	8001148 <__clzsi2>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	3b08      	subs	r3, #8
 8000a4e:	2220      	movs	r2, #32
 8000a50:	0020      	movs	r0, r4
 8000a52:	1ad2      	subs	r2, r2, r3
 8000a54:	4651      	mov	r1, sl
 8000a56:	40d0      	lsrs	r0, r2
 8000a58:	4099      	lsls	r1, r3
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	409c      	lsls	r4, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	429e      	cmp	r6, r3
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_dsub+0xee>
 8000a64:	e164      	b.n	8000d30 <__aeabi_dsub+0x3b8>
 8000a66:	1b9b      	subs	r3, r3, r6
 8000a68:	1c59      	adds	r1, r3, #1
 8000a6a:	291f      	cmp	r1, #31
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_dsub+0xf8>
 8000a6e:	e0fe      	b.n	8000c6e <__aeabi_dsub+0x2f6>
 8000a70:	2320      	movs	r3, #32
 8000a72:	0010      	movs	r0, r2
 8000a74:	0026      	movs	r6, r4
 8000a76:	1a5b      	subs	r3, r3, r1
 8000a78:	409c      	lsls	r4, r3
 8000a7a:	4098      	lsls	r0, r3
 8000a7c:	40ce      	lsrs	r6, r1
 8000a7e:	40ca      	lsrs	r2, r1
 8000a80:	1e63      	subs	r3, r4, #1
 8000a82:	419c      	sbcs	r4, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	4692      	mov	sl, r2
 8000a88:	2600      	movs	r6, #0
 8000a8a:	4304      	orrs	r4, r0
 8000a8c:	0763      	lsls	r3, r4, #29
 8000a8e:	d009      	beq.n	8000aa4 <__aeabi_dsub+0x12c>
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d005      	beq.n	8000aa4 <__aeabi_dsub+0x12c>
 8000a98:	1d23      	adds	r3, r4, #4
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	41a4      	sbcs	r4, r4
 8000a9e:	4264      	negs	r4, r4
 8000aa0:	44a2      	add	sl, r4
 8000aa2:	001c      	movs	r4, r3
 8000aa4:	4653      	mov	r3, sl
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	d400      	bmi.n	8000aac <__aeabi_dsub+0x134>
 8000aaa:	e0f2      	b.n	8000c92 <__aeabi_dsub+0x31a>
 8000aac:	4b8c      	ldr	r3, [pc, #560]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000aae:	3601      	adds	r6, #1
 8000ab0:	429e      	cmp	r6, r3
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dsub+0x13e>
 8000ab4:	e10f      	b.n	8000cd6 <__aeabi_dsub+0x35e>
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	498a      	ldr	r1, [pc, #552]	; (8000ce4 <__aeabi_dsub+0x36c>)
 8000aba:	08e4      	lsrs	r4, r4, #3
 8000abc:	400b      	ands	r3, r1
 8000abe:	0019      	movs	r1, r3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	0572      	lsls	r2, r6, #21
 8000ac6:	024c      	lsls	r4, r1, #9
 8000ac8:	0b24      	lsrs	r4, r4, #12
 8000aca:	0d52      	lsrs	r2, r2, #21
 8000acc:	0512      	lsls	r2, r2, #20
 8000ace:	4322      	orrs	r2, r4
 8000ad0:	07ed      	lsls	r5, r5, #31
 8000ad2:	432a      	orrs	r2, r5
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	b003      	add	sp, #12
 8000ada:	bcf0      	pop	{r4, r5, r6, r7}
 8000adc:	46bb      	mov	fp, r7
 8000ade:	46b2      	mov	sl, r6
 8000ae0:	46a9      	mov	r9, r5
 8000ae2:	46a0      	mov	r8, r4
 8000ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae6:	1ab4      	subs	r4, r6, r2
 8000ae8:	46a4      	mov	ip, r4
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	dd59      	ble.n	8000ba2 <__aeabi_dsub+0x22a>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dsub+0x17c>
 8000af2:	e0b0      	b.n	8000c56 <__aeabi_dsub+0x2de>
 8000af4:	4556      	cmp	r6, sl
 8000af6:	d100      	bne.n	8000afa <__aeabi_dsub+0x182>
 8000af8:	e0fa      	b.n	8000cf0 <__aeabi_dsub+0x378>
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0412      	lsls	r2, r2, #16
 8000afe:	4317      	orrs	r7, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	2a38      	cmp	r2, #56	; 0x38
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_dsub+0x190>
 8000b06:	e0d4      	b.n	8000cb2 <__aeabi_dsub+0x33a>
 8000b08:	2a1f      	cmp	r2, #31
 8000b0a:	dc00      	bgt.n	8000b0e <__aeabi_dsub+0x196>
 8000b0c:	e1c0      	b.n	8000e90 <__aeabi_dsub+0x518>
 8000b0e:	0039      	movs	r1, r7
 8000b10:	3a20      	subs	r2, #32
 8000b12:	40d1      	lsrs	r1, r2
 8000b14:	4662      	mov	r2, ip
 8000b16:	2a20      	cmp	r2, #32
 8000b18:	d006      	beq.n	8000b28 <__aeabi_dsub+0x1b0>
 8000b1a:	4664      	mov	r4, ip
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	1b12      	subs	r2, r2, r4
 8000b20:	003c      	movs	r4, r7
 8000b22:	4094      	lsls	r4, r2
 8000b24:	4304      	orrs	r4, r0
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	9c01      	ldr	r4, [sp, #4]
 8000b2a:	1e62      	subs	r2, r4, #1
 8000b2c:	4194      	sbcs	r4, r2
 8000b2e:	430c      	orrs	r4, r1
 8000b30:	e0c3      	b.n	8000cba <__aeabi_dsub+0x342>
 8000b32:	003c      	movs	r4, r7
 8000b34:	4304      	orrs	r4, r0
 8000b36:	d02b      	beq.n	8000b90 <__aeabi_dsub+0x218>
 8000b38:	468b      	mov	fp, r1
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	d02e      	beq.n	8000b9c <__aeabi_dsub+0x224>
 8000b3e:	4c6a      	ldr	r4, [pc, #424]	; (8000ce8 <__aeabi_dsub+0x370>)
 8000b40:	46a4      	mov	ip, r4
 8000b42:	44b4      	add	ip, r6
 8000b44:	4664      	mov	r4, ip
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d05f      	beq.n	8000c0a <__aeabi_dsub+0x292>
 8000b4a:	1b94      	subs	r4, r2, r6
 8000b4c:	46a4      	mov	ip, r4
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_dsub+0x1dc>
 8000b52:	e120      	b.n	8000d96 <__aeabi_dsub+0x41e>
 8000b54:	464c      	mov	r4, r9
 8000b56:	431c      	orrs	r4, r3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dsub+0x1e4>
 8000b5a:	e1c7      	b.n	8000eec <__aeabi_dsub+0x574>
 8000b5c:	4661      	mov	r1, ip
 8000b5e:	1e4c      	subs	r4, r1, #1
 8000b60:	2901      	cmp	r1, #1
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dsub+0x1ee>
 8000b64:	e223      	b.n	8000fae <__aeabi_dsub+0x636>
 8000b66:	4d5e      	ldr	r5, [pc, #376]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000b68:	45ac      	cmp	ip, r5
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dsub+0x1f6>
 8000b6c:	e1d8      	b.n	8000f20 <__aeabi_dsub+0x5a8>
 8000b6e:	46a4      	mov	ip, r4
 8000b70:	e11a      	b.n	8000da8 <__aeabi_dsub+0x430>
 8000b72:	003a      	movs	r2, r7
 8000b74:	4302      	orrs	r2, r0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dsub+0x202>
 8000b78:	e0e4      	b.n	8000d44 <__aeabi_dsub+0x3cc>
 8000b7a:	0022      	movs	r2, r4
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	2c01      	cmp	r4, #1
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dsub+0x20c>
 8000b82:	e1c3      	b.n	8000f0c <__aeabi_dsub+0x594>
 8000b84:	4956      	ldr	r1, [pc, #344]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000b86:	428c      	cmp	r4, r1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dsub+0x214>
 8000b8a:	e0b1      	b.n	8000cf0 <__aeabi_dsub+0x378>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	e72b      	b.n	80009e8 <__aeabi_dsub+0x70>
 8000b90:	2401      	movs	r4, #1
 8000b92:	4061      	eors	r1, r4
 8000b94:	468b      	mov	fp, r1
 8000b96:	428d      	cmp	r5, r1
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dsub+0x224>
 8000b9a:	e716      	b.n	80009ca <__aeabi_dsub+0x52>
 8000b9c:	4952      	ldr	r1, [pc, #328]	; (8000ce8 <__aeabi_dsub+0x370>)
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	44b4      	add	ip, r6
 8000ba2:	4664      	mov	r4, ip
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dsub+0x232>
 8000ba8:	e0d3      	b.n	8000d52 <__aeabi_dsub+0x3da>
 8000baa:	1b91      	subs	r1, r2, r6
 8000bac:	468c      	mov	ip, r1
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dsub+0x23c>
 8000bb2:	e15e      	b.n	8000e72 <__aeabi_dsub+0x4fa>
 8000bb4:	494a      	ldr	r1, [pc, #296]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dsub+0x244>
 8000bba:	e1be      	b.n	8000f3a <__aeabi_dsub+0x5c2>
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	464c      	mov	r4, r9
 8000bc0:	0409      	lsls	r1, r1, #16
 8000bc2:	430c      	orrs	r4, r1
 8000bc4:	46a1      	mov	r9, r4
 8000bc6:	4661      	mov	r1, ip
 8000bc8:	2938      	cmp	r1, #56	; 0x38
 8000bca:	dd00      	ble.n	8000bce <__aeabi_dsub+0x256>
 8000bcc:	e1ba      	b.n	8000f44 <__aeabi_dsub+0x5cc>
 8000bce:	291f      	cmp	r1, #31
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dsub+0x25c>
 8000bd2:	e227      	b.n	8001024 <__aeabi_dsub+0x6ac>
 8000bd4:	2420      	movs	r4, #32
 8000bd6:	1a64      	subs	r4, r4, r1
 8000bd8:	4649      	mov	r1, r9
 8000bda:	40a1      	lsls	r1, r4
 8000bdc:	001e      	movs	r6, r3
 8000bde:	4688      	mov	r8, r1
 8000be0:	4661      	mov	r1, ip
 8000be2:	40a3      	lsls	r3, r4
 8000be4:	40ce      	lsrs	r6, r1
 8000be6:	4641      	mov	r1, r8
 8000be8:	1e5c      	subs	r4, r3, #1
 8000bea:	41a3      	sbcs	r3, r4
 8000bec:	4331      	orrs	r1, r6
 8000bee:	4319      	orrs	r1, r3
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	4649      	mov	r1, r9
 8000bf6:	40d9      	lsrs	r1, r3
 8000bf8:	187f      	adds	r7, r7, r1
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	4284      	cmp	r4, r0
 8000bfe:	419b      	sbcs	r3, r3
 8000c00:	425b      	negs	r3, r3
 8000c02:	469a      	mov	sl, r3
 8000c04:	0016      	movs	r6, r2
 8000c06:	44ba      	add	sl, r7
 8000c08:	e05d      	b.n	8000cc6 <__aeabi_dsub+0x34e>
 8000c0a:	4c38      	ldr	r4, [pc, #224]	; (8000cec <__aeabi_dsub+0x374>)
 8000c0c:	1c72      	adds	r2, r6, #1
 8000c0e:	4222      	tst	r2, r4
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dsub+0x29c>
 8000c12:	e0df      	b.n	8000dd4 <__aeabi_dsub+0x45c>
 8000c14:	464a      	mov	r2, r9
 8000c16:	431a      	orrs	r2, r3
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_dsub+0x2a6>
 8000c1c:	e15c      	b.n	8000ed8 <__aeabi_dsub+0x560>
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dsub+0x2ac>
 8000c22:	e1cf      	b.n	8000fc4 <__aeabi_dsub+0x64c>
 8000c24:	003a      	movs	r2, r7
 8000c26:	4302      	orrs	r2, r0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dsub+0x2b4>
 8000c2a:	e17f      	b.n	8000f2c <__aeabi_dsub+0x5b4>
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	464a      	mov	r2, r9
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	4189      	sbcs	r1, r1
 8000c34:	1bd2      	subs	r2, r2, r7
 8000c36:	4249      	negs	r1, r1
 8000c38:	1a52      	subs	r2, r2, r1
 8000c3a:	4692      	mov	sl, r2
 8000c3c:	0212      	lsls	r2, r2, #8
 8000c3e:	d400      	bmi.n	8000c42 <__aeabi_dsub+0x2ca>
 8000c40:	e20a      	b.n	8001058 <__aeabi_dsub+0x6e0>
 8000c42:	1ac4      	subs	r4, r0, r3
 8000c44:	42a0      	cmp	r0, r4
 8000c46:	4180      	sbcs	r0, r0
 8000c48:	464b      	mov	r3, r9
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	1aff      	subs	r7, r7, r3
 8000c4e:	1a3b      	subs	r3, r7, r0
 8000c50:	469a      	mov	sl, r3
 8000c52:	465d      	mov	r5, fp
 8000c54:	e71a      	b.n	8000a8c <__aeabi_dsub+0x114>
 8000c56:	003a      	movs	r2, r7
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	d073      	beq.n	8000d44 <__aeabi_dsub+0x3cc>
 8000c5c:	0022      	movs	r2, r4
 8000c5e:	3a01      	subs	r2, #1
 8000c60:	2c01      	cmp	r4, #1
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dsub+0x2ee>
 8000c64:	e0cb      	b.n	8000dfe <__aeabi_dsub+0x486>
 8000c66:	4554      	cmp	r4, sl
 8000c68:	d042      	beq.n	8000cf0 <__aeabi_dsub+0x378>
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	e748      	b.n	8000b00 <__aeabi_dsub+0x188>
 8000c6e:	0010      	movs	r0, r2
 8000c70:	3b1f      	subs	r3, #31
 8000c72:	40d8      	lsrs	r0, r3
 8000c74:	2920      	cmp	r1, #32
 8000c76:	d003      	beq.n	8000c80 <__aeabi_dsub+0x308>
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	1a5b      	subs	r3, r3, r1
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	4314      	orrs	r4, r2
 8000c80:	1e63      	subs	r3, r4, #1
 8000c82:	419c      	sbcs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	2600      	movs	r6, #0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4304      	orrs	r4, r0
 8000c8c:	0763      	lsls	r3, r4, #29
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dsub+0x31a>
 8000c90:	e6fe      	b.n	8000a90 <__aeabi_dsub+0x118>
 8000c92:	4652      	mov	r2, sl
 8000c94:	08e3      	lsrs	r3, r4, #3
 8000c96:	0752      	lsls	r2, r2, #29
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	46b4      	mov	ip, r6
 8000c9e:	08d2      	lsrs	r2, r2, #3
 8000ca0:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000ca2:	458c      	cmp	ip, r1
 8000ca4:	d02a      	beq.n	8000cfc <__aeabi_dsub+0x384>
 8000ca6:	0312      	lsls	r2, r2, #12
 8000ca8:	0b14      	lsrs	r4, r2, #12
 8000caa:	4662      	mov	r2, ip
 8000cac:	0552      	lsls	r2, r2, #21
 8000cae:	0d52      	lsrs	r2, r2, #21
 8000cb0:	e70c      	b.n	8000acc <__aeabi_dsub+0x154>
 8000cb2:	003c      	movs	r4, r7
 8000cb4:	4304      	orrs	r4, r0
 8000cb6:	1e62      	subs	r2, r4, #1
 8000cb8:	4194      	sbcs	r4, r2
 8000cba:	18e4      	adds	r4, r4, r3
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	4192      	sbcs	r2, r2
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	444a      	add	r2, r9
 8000cc4:	4692      	mov	sl, r2
 8000cc6:	4653      	mov	r3, sl
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	d5df      	bpl.n	8000c8c <__aeabi_dsub+0x314>
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__aeabi_dsub+0x368>)
 8000cce:	3601      	adds	r6, #1
 8000cd0:	429e      	cmp	r6, r3
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x35e>
 8000cd4:	e0a0      	b.n	8000e18 <__aeabi_dsub+0x4a0>
 8000cd6:	0032      	movs	r2, r6
 8000cd8:	2400      	movs	r4, #0
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e6f6      	b.n	8000acc <__aeabi_dsub+0x154>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	000007ff 	.word	0x000007ff
 8000ce4:	ff7fffff 	.word	0xff7fffff
 8000ce8:	fffff801 	.word	0xfffff801
 8000cec:	000007fe 	.word	0x000007fe
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	08d2      	lsrs	r2, r2, #3
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	4311      	orrs	r1, r2
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dsub+0x38c>
 8000d02:	e1b5      	b.n	8001070 <__aeabi_dsub+0x6f8>
 8000d04:	2480      	movs	r4, #128	; 0x80
 8000d06:	0324      	lsls	r4, r4, #12
 8000d08:	4314      	orrs	r4, r2
 8000d0a:	0324      	lsls	r4, r4, #12
 8000d0c:	4ad5      	ldr	r2, [pc, #852]	; (8001064 <__aeabi_dsub+0x6ec>)
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	e6dc      	b.n	8000acc <__aeabi_dsub+0x154>
 8000d12:	0020      	movs	r0, r4
 8000d14:	f000 fa18 	bl	8001148 <__clzsi2>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	2b1f      	cmp	r3, #31
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_dsub+0x3aa>
 8000d20:	e695      	b.n	8000a4e <__aeabi_dsub+0xd6>
 8000d22:	0022      	movs	r2, r4
 8000d24:	3808      	subs	r0, #8
 8000d26:	4082      	lsls	r2, r0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_dsub+0x3b8>
 8000d2e:	e69a      	b.n	8000a66 <__aeabi_dsub+0xee>
 8000d30:	1af6      	subs	r6, r6, r3
 8000d32:	4bcd      	ldr	r3, [pc, #820]	; (8001068 <__aeabi_dsub+0x6f0>)
 8000d34:	401a      	ands	r2, r3
 8000d36:	4692      	mov	sl, r2
 8000d38:	e6a8      	b.n	8000a8c <__aeabi_dsub+0x114>
 8000d3a:	003c      	movs	r4, r7
 8000d3c:	4304      	orrs	r4, r0
 8000d3e:	1e62      	subs	r2, r4, #1
 8000d40:	4194      	sbcs	r4, r2
 8000d42:	e66c      	b.n	8000a1e <__aeabi_dsub+0xa6>
 8000d44:	464a      	mov	r2, r9
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0752      	lsls	r2, r2, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	08d2      	lsrs	r2, r2, #3
 8000d50:	e7a6      	b.n	8000ca0 <__aeabi_dsub+0x328>
 8000d52:	4cc6      	ldr	r4, [pc, #792]	; (800106c <__aeabi_dsub+0x6f4>)
 8000d54:	1c72      	adds	r2, r6, #1
 8000d56:	4222      	tst	r2, r4
 8000d58:	d000      	beq.n	8000d5c <__aeabi_dsub+0x3e4>
 8000d5a:	e0ac      	b.n	8000eb6 <__aeabi_dsub+0x53e>
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d000      	beq.n	8000d66 <__aeabi_dsub+0x3ee>
 8000d64:	e105      	b.n	8000f72 <__aeabi_dsub+0x5fa>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dsub+0x3f4>
 8000d6a:	e156      	b.n	800101a <__aeabi_dsub+0x6a2>
 8000d6c:	003a      	movs	r2, r7
 8000d6e:	4302      	orrs	r2, r0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dsub+0x3fc>
 8000d72:	e0db      	b.n	8000f2c <__aeabi_dsub+0x5b4>
 8000d74:	181c      	adds	r4, r3, r0
 8000d76:	429c      	cmp	r4, r3
 8000d78:	419b      	sbcs	r3, r3
 8000d7a:	444f      	add	r7, r9
 8000d7c:	46ba      	mov	sl, r7
 8000d7e:	425b      	negs	r3, r3
 8000d80:	449a      	add	sl, r3
 8000d82:	4653      	mov	r3, sl
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	d400      	bmi.n	8000d8a <__aeabi_dsub+0x412>
 8000d88:	e780      	b.n	8000c8c <__aeabi_dsub+0x314>
 8000d8a:	4652      	mov	r2, sl
 8000d8c:	4bb6      	ldr	r3, [pc, #728]	; (8001068 <__aeabi_dsub+0x6f0>)
 8000d8e:	2601      	movs	r6, #1
 8000d90:	401a      	ands	r2, r3
 8000d92:	4692      	mov	sl, r2
 8000d94:	e77a      	b.n	8000c8c <__aeabi_dsub+0x314>
 8000d96:	4cb3      	ldr	r4, [pc, #716]	; (8001064 <__aeabi_dsub+0x6ec>)
 8000d98:	42a2      	cmp	r2, r4
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dsub+0x426>
 8000d9c:	e0c0      	b.n	8000f20 <__aeabi_dsub+0x5a8>
 8000d9e:	2480      	movs	r4, #128	; 0x80
 8000da0:	464d      	mov	r5, r9
 8000da2:	0424      	lsls	r4, r4, #16
 8000da4:	4325      	orrs	r5, r4
 8000da6:	46a9      	mov	r9, r5
 8000da8:	4664      	mov	r4, ip
 8000daa:	2c38      	cmp	r4, #56	; 0x38
 8000dac:	dc53      	bgt.n	8000e56 <__aeabi_dsub+0x4de>
 8000dae:	4661      	mov	r1, ip
 8000db0:	2c1f      	cmp	r4, #31
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_dsub+0x43e>
 8000db4:	e0cd      	b.n	8000f52 <__aeabi_dsub+0x5da>
 8000db6:	2520      	movs	r5, #32
 8000db8:	001e      	movs	r6, r3
 8000dba:	1b2d      	subs	r5, r5, r4
 8000dbc:	464c      	mov	r4, r9
 8000dbe:	40ab      	lsls	r3, r5
 8000dc0:	40ac      	lsls	r4, r5
 8000dc2:	40ce      	lsrs	r6, r1
 8000dc4:	1e5d      	subs	r5, r3, #1
 8000dc6:	41ab      	sbcs	r3, r5
 8000dc8:	4334      	orrs	r4, r6
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	464c      	mov	r4, r9
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	1b3f      	subs	r7, r7, r4
 8000dd2:	e045      	b.n	8000e60 <__aeabi_dsub+0x4e8>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	1a1c      	subs	r4, r3, r0
 8000dd8:	1bd1      	subs	r1, r2, r7
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	4192      	sbcs	r2, r2
 8000dde:	4252      	negs	r2, r2
 8000de0:	4692      	mov	sl, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	4651      	mov	r1, sl
 8000de6:	1a52      	subs	r2, r2, r1
 8000de8:	4692      	mov	sl, r2
 8000dea:	0212      	lsls	r2, r2, #8
 8000dec:	d500      	bpl.n	8000df0 <__aeabi_dsub+0x478>
 8000dee:	e083      	b.n	8000ef8 <__aeabi_dsub+0x580>
 8000df0:	4653      	mov	r3, sl
 8000df2:	4323      	orrs	r3, r4
 8000df4:	d000      	beq.n	8000df8 <__aeabi_dsub+0x480>
 8000df6:	e621      	b.n	8000a3c <__aeabi_dsub+0xc4>
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	e753      	b.n	8000ca6 <__aeabi_dsub+0x32e>
 8000dfe:	181c      	adds	r4, r3, r0
 8000e00:	429c      	cmp	r4, r3
 8000e02:	419b      	sbcs	r3, r3
 8000e04:	444f      	add	r7, r9
 8000e06:	46ba      	mov	sl, r7
 8000e08:	425b      	negs	r3, r3
 8000e0a:	449a      	add	sl, r3
 8000e0c:	4653      	mov	r3, sl
 8000e0e:	2601      	movs	r6, #1
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	d400      	bmi.n	8000e16 <__aeabi_dsub+0x49e>
 8000e14:	e73a      	b.n	8000c8c <__aeabi_dsub+0x314>
 8000e16:	2602      	movs	r6, #2
 8000e18:	4652      	mov	r2, sl
 8000e1a:	4b93      	ldr	r3, [pc, #588]	; (8001068 <__aeabi_dsub+0x6f0>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	401a      	ands	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	4021      	ands	r1, r4
 8000e24:	0862      	lsrs	r2, r4, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	07dc      	lsls	r4, r3, #31
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	469a      	mov	sl, r3
 8000e2e:	4314      	orrs	r4, r2
 8000e30:	e62c      	b.n	8000a8c <__aeabi_dsub+0x114>
 8000e32:	0039      	movs	r1, r7
 8000e34:	3a20      	subs	r2, #32
 8000e36:	40d1      	lsrs	r1, r2
 8000e38:	4662      	mov	r2, ip
 8000e3a:	2a20      	cmp	r2, #32
 8000e3c:	d006      	beq.n	8000e4c <__aeabi_dsub+0x4d4>
 8000e3e:	4664      	mov	r4, ip
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	1b12      	subs	r2, r2, r4
 8000e44:	003c      	movs	r4, r7
 8000e46:	4094      	lsls	r4, r2
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	9401      	str	r4, [sp, #4]
 8000e4c:	9c01      	ldr	r4, [sp, #4]
 8000e4e:	1e62      	subs	r2, r4, #1
 8000e50:	4194      	sbcs	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	e5e3      	b.n	8000a1e <__aeabi_dsub+0xa6>
 8000e56:	4649      	mov	r1, r9
 8000e58:	4319      	orrs	r1, r3
 8000e5a:	000b      	movs	r3, r1
 8000e5c:	1e5c      	subs	r4, r3, #1
 8000e5e:	41a3      	sbcs	r3, r4
 8000e60:	1ac4      	subs	r4, r0, r3
 8000e62:	42a0      	cmp	r0, r4
 8000e64:	419b      	sbcs	r3, r3
 8000e66:	425b      	negs	r3, r3
 8000e68:	1afb      	subs	r3, r7, r3
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	465d      	mov	r5, fp
 8000e6e:	0016      	movs	r6, r2
 8000e70:	e5dc      	b.n	8000a2c <__aeabi_dsub+0xb4>
 8000e72:	4649      	mov	r1, r9
 8000e74:	4319      	orrs	r1, r3
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x502>
 8000e78:	e0ae      	b.n	8000fd8 <__aeabi_dsub+0x660>
 8000e7a:	4661      	mov	r1, ip
 8000e7c:	4664      	mov	r4, ip
 8000e7e:	3901      	subs	r1, #1
 8000e80:	2c01      	cmp	r4, #1
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dsub+0x50e>
 8000e84:	e0e0      	b.n	8001048 <__aeabi_dsub+0x6d0>
 8000e86:	4c77      	ldr	r4, [pc, #476]	; (8001064 <__aeabi_dsub+0x6ec>)
 8000e88:	45a4      	cmp	ip, r4
 8000e8a:	d056      	beq.n	8000f3a <__aeabi_dsub+0x5c2>
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	e69a      	b.n	8000bc6 <__aeabi_dsub+0x24e>
 8000e90:	4661      	mov	r1, ip
 8000e92:	2220      	movs	r2, #32
 8000e94:	003c      	movs	r4, r7
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	0001      	movs	r1, r0
 8000e9c:	4090      	lsls	r0, r2
 8000e9e:	46a0      	mov	r8, r4
 8000ea0:	4664      	mov	r4, ip
 8000ea2:	1e42      	subs	r2, r0, #1
 8000ea4:	4190      	sbcs	r0, r2
 8000ea6:	4662      	mov	r2, ip
 8000ea8:	40e1      	lsrs	r1, r4
 8000eaa:	4644      	mov	r4, r8
 8000eac:	40d7      	lsrs	r7, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	4304      	orrs	r4, r0
 8000eb2:	44b9      	add	r9, r7
 8000eb4:	e701      	b.n	8000cba <__aeabi_dsub+0x342>
 8000eb6:	496b      	ldr	r1, [pc, #428]	; (8001064 <__aeabi_dsub+0x6ec>)
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dsub+0x546>
 8000ebc:	e70c      	b.n	8000cd8 <__aeabi_dsub+0x360>
 8000ebe:	1818      	adds	r0, r3, r0
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	419b      	sbcs	r3, r3
 8000ec4:	444f      	add	r7, r9
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	07dc      	lsls	r4, r3, #31
 8000ecc:	0840      	lsrs	r0, r0, #1
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	0016      	movs	r6, r2
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	e6d9      	b.n	8000c8c <__aeabi_dsub+0x314>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dsub+0x566>
 8000edc:	e081      	b.n	8000fe2 <__aeabi_dsub+0x66a>
 8000ede:	003b      	movs	r3, r7
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	d11d      	bne.n	8000f20 <__aeabi_dsub+0x5a8>
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	0312      	lsls	r2, r2, #12
 8000eea:	e70b      	b.n	8000d04 <__aeabi_dsub+0x38c>
 8000eec:	08c0      	lsrs	r0, r0, #3
 8000eee:	077b      	lsls	r3, r7, #29
 8000ef0:	465d      	mov	r5, fp
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	08fa      	lsrs	r2, r7, #3
 8000ef6:	e6d3      	b.n	8000ca0 <__aeabi_dsub+0x328>
 8000ef8:	1ac4      	subs	r4, r0, r3
 8000efa:	42a0      	cmp	r0, r4
 8000efc:	4180      	sbcs	r0, r0
 8000efe:	464b      	mov	r3, r9
 8000f00:	4240      	negs	r0, r0
 8000f02:	1aff      	subs	r7, r7, r3
 8000f04:	1a3b      	subs	r3, r7, r0
 8000f06:	469a      	mov	sl, r3
 8000f08:	465d      	mov	r5, fp
 8000f0a:	e597      	b.n	8000a3c <__aeabi_dsub+0xc4>
 8000f0c:	1a1c      	subs	r4, r3, r0
 8000f0e:	464a      	mov	r2, r9
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	419b      	sbcs	r3, r3
 8000f14:	1bd7      	subs	r7, r2, r7
 8000f16:	425b      	negs	r3, r3
 8000f18:	1afb      	subs	r3, r7, r3
 8000f1a:	469a      	mov	sl, r3
 8000f1c:	2601      	movs	r6, #1
 8000f1e:	e585      	b.n	8000a2c <__aeabi_dsub+0xb4>
 8000f20:	08c0      	lsrs	r0, r0, #3
 8000f22:	077b      	lsls	r3, r7, #29
 8000f24:	465d      	mov	r5, fp
 8000f26:	4303      	orrs	r3, r0
 8000f28:	08fa      	lsrs	r2, r7, #3
 8000f2a:	e6e7      	b.n	8000cfc <__aeabi_dsub+0x384>
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	0752      	lsls	r2, r2, #29
 8000f32:	4313      	orrs	r3, r2
 8000f34:	464a      	mov	r2, r9
 8000f36:	08d2      	lsrs	r2, r2, #3
 8000f38:	e6b5      	b.n	8000ca6 <__aeabi_dsub+0x32e>
 8000f3a:	08c0      	lsrs	r0, r0, #3
 8000f3c:	077b      	lsls	r3, r7, #29
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	08fa      	lsrs	r2, r7, #3
 8000f42:	e6db      	b.n	8000cfc <__aeabi_dsub+0x384>
 8000f44:	4649      	mov	r1, r9
 8000f46:	4319      	orrs	r1, r3
 8000f48:	000b      	movs	r3, r1
 8000f4a:	1e59      	subs	r1, r3, #1
 8000f4c:	418b      	sbcs	r3, r1
 8000f4e:	001c      	movs	r4, r3
 8000f50:	e653      	b.n	8000bfa <__aeabi_dsub+0x282>
 8000f52:	464d      	mov	r5, r9
 8000f54:	3c20      	subs	r4, #32
 8000f56:	40e5      	lsrs	r5, r4
 8000f58:	2920      	cmp	r1, #32
 8000f5a:	d005      	beq.n	8000f68 <__aeabi_dsub+0x5f0>
 8000f5c:	2440      	movs	r4, #64	; 0x40
 8000f5e:	1a64      	subs	r4, r4, r1
 8000f60:	4649      	mov	r1, r9
 8000f62:	40a1      	lsls	r1, r4
 8000f64:	430b      	orrs	r3, r1
 8000f66:	4698      	mov	r8, r3
 8000f68:	4643      	mov	r3, r8
 8000f6a:	1e5c      	subs	r4, r3, #1
 8000f6c:	41a3      	sbcs	r3, r4
 8000f6e:	432b      	orrs	r3, r5
 8000f70:	e776      	b.n	8000e60 <__aeabi_dsub+0x4e8>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d0e1      	beq.n	8000f3a <__aeabi_dsub+0x5c2>
 8000f76:	003a      	movs	r2, r7
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	4302      	orrs	r2, r0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dsub+0x608>
 8000f7e:	e6b8      	b.n	8000cf2 <__aeabi_dsub+0x37a>
 8000f80:	464a      	mov	r2, r9
 8000f82:	0752      	lsls	r2, r2, #29
 8000f84:	2480      	movs	r4, #128	; 0x80
 8000f86:	4313      	orrs	r3, r2
 8000f88:	464a      	mov	r2, r9
 8000f8a:	0324      	lsls	r4, r4, #12
 8000f8c:	08d2      	lsrs	r2, r2, #3
 8000f8e:	4222      	tst	r2, r4
 8000f90:	d007      	beq.n	8000fa2 <__aeabi_dsub+0x62a>
 8000f92:	08fe      	lsrs	r6, r7, #3
 8000f94:	4226      	tst	r6, r4
 8000f96:	d104      	bne.n	8000fa2 <__aeabi_dsub+0x62a>
 8000f98:	465d      	mov	r5, fp
 8000f9a:	0032      	movs	r2, r6
 8000f9c:	08c3      	lsrs	r3, r0, #3
 8000f9e:	077f      	lsls	r7, r7, #29
 8000fa0:	433b      	orrs	r3, r7
 8000fa2:	0f59      	lsrs	r1, r3, #29
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	0749      	lsls	r1, r1, #29
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	430b      	orrs	r3, r1
 8000fac:	e6a6      	b.n	8000cfc <__aeabi_dsub+0x384>
 8000fae:	1ac4      	subs	r4, r0, r3
 8000fb0:	42a0      	cmp	r0, r4
 8000fb2:	4180      	sbcs	r0, r0
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	1aff      	subs	r7, r7, r3
 8000fba:	1a3b      	subs	r3, r7, r0
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	465d      	mov	r5, fp
 8000fc0:	2601      	movs	r6, #1
 8000fc2:	e533      	b.n	8000a2c <__aeabi_dsub+0xb4>
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dsub+0x654>
 8000fca:	e715      	b.n	8000df8 <__aeabi_dsub+0x480>
 8000fcc:	08c0      	lsrs	r0, r0, #3
 8000fce:	077b      	lsls	r3, r7, #29
 8000fd0:	465d      	mov	r5, fp
 8000fd2:	4303      	orrs	r3, r0
 8000fd4:	08fa      	lsrs	r2, r7, #3
 8000fd6:	e666      	b.n	8000ca6 <__aeabi_dsub+0x32e>
 8000fd8:	08c0      	lsrs	r0, r0, #3
 8000fda:	077b      	lsls	r3, r7, #29
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	08fa      	lsrs	r2, r7, #3
 8000fe0:	e65e      	b.n	8000ca0 <__aeabi_dsub+0x328>
 8000fe2:	003a      	movs	r2, r7
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	4302      	orrs	r2, r0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dsub+0x674>
 8000fea:	e682      	b.n	8000cf2 <__aeabi_dsub+0x37a>
 8000fec:	464a      	mov	r2, r9
 8000fee:	0752      	lsls	r2, r2, #29
 8000ff0:	2480      	movs	r4, #128	; 0x80
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	0324      	lsls	r4, r4, #12
 8000ff8:	08d2      	lsrs	r2, r2, #3
 8000ffa:	4222      	tst	r2, r4
 8000ffc:	d007      	beq.n	800100e <__aeabi_dsub+0x696>
 8000ffe:	08fe      	lsrs	r6, r7, #3
 8001000:	4226      	tst	r6, r4
 8001002:	d104      	bne.n	800100e <__aeabi_dsub+0x696>
 8001004:	465d      	mov	r5, fp
 8001006:	0032      	movs	r2, r6
 8001008:	08c3      	lsrs	r3, r0, #3
 800100a:	077f      	lsls	r7, r7, #29
 800100c:	433b      	orrs	r3, r7
 800100e:	0f59      	lsrs	r1, r3, #29
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	0749      	lsls	r1, r1, #29
 8001016:	430b      	orrs	r3, r1
 8001018:	e670      	b.n	8000cfc <__aeabi_dsub+0x384>
 800101a:	08c0      	lsrs	r0, r0, #3
 800101c:	077b      	lsls	r3, r7, #29
 800101e:	4303      	orrs	r3, r0
 8001020:	08fa      	lsrs	r2, r7, #3
 8001022:	e640      	b.n	8000ca6 <__aeabi_dsub+0x32e>
 8001024:	464c      	mov	r4, r9
 8001026:	3920      	subs	r1, #32
 8001028:	40cc      	lsrs	r4, r1
 800102a:	4661      	mov	r1, ip
 800102c:	2920      	cmp	r1, #32
 800102e:	d006      	beq.n	800103e <__aeabi_dsub+0x6c6>
 8001030:	4666      	mov	r6, ip
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	1b89      	subs	r1, r1, r6
 8001036:	464e      	mov	r6, r9
 8001038:	408e      	lsls	r6, r1
 800103a:	4333      	orrs	r3, r6
 800103c:	4698      	mov	r8, r3
 800103e:	4643      	mov	r3, r8
 8001040:	1e59      	subs	r1, r3, #1
 8001042:	418b      	sbcs	r3, r1
 8001044:	431c      	orrs	r4, r3
 8001046:	e5d8      	b.n	8000bfa <__aeabi_dsub+0x282>
 8001048:	181c      	adds	r4, r3, r0
 800104a:	4284      	cmp	r4, r0
 800104c:	4180      	sbcs	r0, r0
 800104e:	444f      	add	r7, r9
 8001050:	46ba      	mov	sl, r7
 8001052:	4240      	negs	r0, r0
 8001054:	4482      	add	sl, r0
 8001056:	e6d9      	b.n	8000e0c <__aeabi_dsub+0x494>
 8001058:	4653      	mov	r3, sl
 800105a:	4323      	orrs	r3, r4
 800105c:	d100      	bne.n	8001060 <__aeabi_dsub+0x6e8>
 800105e:	e6cb      	b.n	8000df8 <__aeabi_dsub+0x480>
 8001060:	e614      	b.n	8000c8c <__aeabi_dsub+0x314>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	000007ff 	.word	0x000007ff
 8001068:	ff7fffff 	.word	0xff7fffff
 800106c:	000007fe 	.word	0x000007fe
 8001070:	2300      	movs	r3, #0
 8001072:	4a01      	ldr	r2, [pc, #4]	; (8001078 <__aeabi_dsub+0x700>)
 8001074:	001c      	movs	r4, r3
 8001076:	e529      	b.n	8000acc <__aeabi_dsub+0x154>
 8001078:	000007ff 	.word	0x000007ff

0800107c <__aeabi_d2iz>:
 800107c:	000a      	movs	r2, r1
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	4c13      	ldr	r4, [pc, #76]	; (80010d0 <__aeabi_d2iz+0x54>)
 8001082:	0053      	lsls	r3, r2, #1
 8001084:	0309      	lsls	r1, r1, #12
 8001086:	0005      	movs	r5, r0
 8001088:	0b09      	lsrs	r1, r1, #12
 800108a:	2000      	movs	r0, #0
 800108c:	0d5b      	lsrs	r3, r3, #21
 800108e:	0fd2      	lsrs	r2, r2, #31
 8001090:	42a3      	cmp	r3, r4
 8001092:	dd04      	ble.n	800109e <__aeabi_d2iz+0x22>
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <__aeabi_d2iz+0x58>)
 8001096:	4283      	cmp	r3, r0
 8001098:	dd02      	ble.n	80010a0 <__aeabi_d2iz+0x24>
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <__aeabi_d2iz+0x5c>)
 800109c:	18d0      	adds	r0, r2, r3
 800109e:	bd30      	pop	{r4, r5, pc}
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	0340      	lsls	r0, r0, #13
 80010a4:	4301      	orrs	r1, r0
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <__aeabi_d2iz+0x60>)
 80010a8:	1ac0      	subs	r0, r0, r3
 80010aa:	281f      	cmp	r0, #31
 80010ac:	dd08      	ble.n	80010c0 <__aeabi_d2iz+0x44>
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <__aeabi_d2iz+0x64>)
 80010b0:	1ac3      	subs	r3, r0, r3
 80010b2:	40d9      	lsrs	r1, r3
 80010b4:	000b      	movs	r3, r1
 80010b6:	4258      	negs	r0, r3
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d1f0      	bne.n	800109e <__aeabi_d2iz+0x22>
 80010bc:	0018      	movs	r0, r3
 80010be:	e7ee      	b.n	800109e <__aeabi_d2iz+0x22>
 80010c0:	4c08      	ldr	r4, [pc, #32]	; (80010e4 <__aeabi_d2iz+0x68>)
 80010c2:	40c5      	lsrs	r5, r0
 80010c4:	46a4      	mov	ip, r4
 80010c6:	4463      	add	r3, ip
 80010c8:	4099      	lsls	r1, r3
 80010ca:	000b      	movs	r3, r1
 80010cc:	432b      	orrs	r3, r5
 80010ce:	e7f2      	b.n	80010b6 <__aeabi_d2iz+0x3a>
 80010d0:	000003fe 	.word	0x000003fe
 80010d4:	0000041d 	.word	0x0000041d
 80010d8:	7fffffff 	.word	0x7fffffff
 80010dc:	00000433 	.word	0x00000433
 80010e0:	00000413 	.word	0x00000413
 80010e4:	fffffbed 	.word	0xfffffbed

080010e8 <__aeabi_i2d>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d016      	beq.n	800111c <__aeabi_i2d+0x34>
 80010ee:	17c3      	asrs	r3, r0, #31
 80010f0:	18c5      	adds	r5, r0, r3
 80010f2:	405d      	eors	r5, r3
 80010f4:	0fc4      	lsrs	r4, r0, #31
 80010f6:	0028      	movs	r0, r5
 80010f8:	f000 f826 	bl	8001148 <__clzsi2>
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <__aeabi_i2d+0x5c>)
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	280a      	cmp	r0, #10
 8001102:	dc16      	bgt.n	8001132 <__aeabi_i2d+0x4a>
 8001104:	0002      	movs	r2, r0
 8001106:	002e      	movs	r6, r5
 8001108:	3215      	adds	r2, #21
 800110a:	4096      	lsls	r6, r2
 800110c:	220b      	movs	r2, #11
 800110e:	1a12      	subs	r2, r2, r0
 8001110:	40d5      	lsrs	r5, r2
 8001112:	055b      	lsls	r3, r3, #21
 8001114:	032d      	lsls	r5, r5, #12
 8001116:	0b2d      	lsrs	r5, r5, #12
 8001118:	0d5b      	lsrs	r3, r3, #21
 800111a:	e003      	b.n	8001124 <__aeabi_i2d+0x3c>
 800111c:	2400      	movs	r4, #0
 800111e:	2300      	movs	r3, #0
 8001120:	2500      	movs	r5, #0
 8001122:	2600      	movs	r6, #0
 8001124:	051b      	lsls	r3, r3, #20
 8001126:	432b      	orrs	r3, r5
 8001128:	07e4      	lsls	r4, r4, #31
 800112a:	4323      	orrs	r3, r4
 800112c:	0030      	movs	r0, r6
 800112e:	0019      	movs	r1, r3
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	380b      	subs	r0, #11
 8001134:	4085      	lsls	r5, r0
 8001136:	055b      	lsls	r3, r3, #21
 8001138:	032d      	lsls	r5, r5, #12
 800113a:	2600      	movs	r6, #0
 800113c:	0b2d      	lsrs	r5, r5, #12
 800113e:	0d5b      	lsrs	r3, r3, #21
 8001140:	e7f0      	b.n	8001124 <__aeabi_i2d+0x3c>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	0000041e 	.word	0x0000041e

08001148 <__clzsi2>:
 8001148:	211c      	movs	r1, #28
 800114a:	2301      	movs	r3, #1
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	4298      	cmp	r0, r3
 8001150:	d301      	bcc.n	8001156 <__clzsi2+0xe>
 8001152:	0c00      	lsrs	r0, r0, #16
 8001154:	3910      	subs	r1, #16
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	4298      	cmp	r0, r3
 800115a:	d301      	bcc.n	8001160 <__clzsi2+0x18>
 800115c:	0a00      	lsrs	r0, r0, #8
 800115e:	3908      	subs	r1, #8
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	4298      	cmp	r0, r3
 8001164:	d301      	bcc.n	800116a <__clzsi2+0x22>
 8001166:	0900      	lsrs	r0, r0, #4
 8001168:	3904      	subs	r1, #4
 800116a:	a202      	add	r2, pc, #8	; (adr r2, 8001174 <__clzsi2+0x2c>)
 800116c:	5c10      	ldrb	r0, [r2, r0]
 800116e:	1840      	adds	r0, r0, r1
 8001170:	4770      	bx	lr
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	02020304 	.word	0x02020304
 8001178:	01010101 	.word	0x01010101
	...

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	2414      	movs	r4, #20
 800118c:	193b      	adds	r3, r7, r4
 800118e:	0018      	movs	r0, r3
 8001190:	2314      	movs	r3, #20
 8001192:	001a      	movs	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f003 fc13 	bl	80049c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <MX_GPIO_Init+0x11c>)
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0309      	lsls	r1, r1, #12
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	031b      	lsls	r3, r3, #12
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	03c9      	lsls	r1, r1, #15
 80011c0:	430a      	orrs	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	03db      	lsls	r3, r3, #15
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0289      	lsls	r1, r1, #10
 80011dc:	430a      	orrs	r2, r1
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	02c9      	lsls	r1, r1, #11
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_GPIO_Init+0x11c>)
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	02db      	lsls	r3, r3, #11
 8001204:	4013      	ands	r3, r2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120a:	2390      	movs	r3, #144	; 0x90
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fec0 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4821      	ldr	r0, [pc, #132]	; (80012a4 <MX_GPIO_Init+0x120>)
 800121e:	2200      	movs	r2, #0
 8001220:	0019      	movs	r1, r3
 8001222:	f000 feb9 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0192      	lsls	r2, r2, #6
 800122c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	2284      	movs	r2, #132	; 0x84
 8001232:	0392      	lsls	r2, r2, #14
 8001234:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	193b      	adds	r3, r7, r4
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123c:	193b      	adds	r3, r7, r4
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_GPIO_Init+0x124>)
 8001240:	0019      	movs	r1, r3
 8001242:	0010      	movs	r0, r2
 8001244:	f000 fd30 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	2220      	movs	r2, #32
 800124c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2201      	movs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001260:	193a      	adds	r2, r7, r4
 8001262:	2390      	movs	r3, #144	; 0x90
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f000 fd1d 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2201      	movs	r2, #1
 800127c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	187b      	adds	r3, r7, r1
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <MX_GPIO_Init+0x120>)
 800128e:	0019      	movs	r1, r3
 8001290:	0010      	movs	r0, r2
 8001292:	f000 fd09 	bl	8001ca8 <HAL_GPIO_Init>

}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b00b      	add	sp, #44	; 0x2c
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  // MAX_ADC_VAL = 2^10 - 1
  const uint16_t MAX_ADC_VAL = 0b1111111111;
 80012b2:	232e      	movs	r3, #46	; 0x2e
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	4a54      	ldr	r2, [pc, #336]	; (8001408 <main+0x15c>)
 80012b8:	801a      	strh	r2, [r3, #0]
  const int TIMER_PERIOD = 64000;
 80012ba:	23fa      	movs	r3, #250	; 0xfa
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  const double DUTY_CYCLE_MIN = 0.05;
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <main+0x160>)
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <main+0x164>)
 80012c4:	623a      	str	r2, [r7, #32]
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  const double DUTY_CYCLE_MAX = 0.10;
 80012c8:	4a50      	ldr	r2, [pc, #320]	; (800140c <main+0x160>)
 80012ca:	4b52      	ldr	r3, [pc, #328]	; (8001414 <main+0x168>)
 80012cc:	61ba      	str	r2, [r7, #24]
 80012ce:	61fb      	str	r3, [r7, #28]
  const int DUTY_CYCLE_COUNTS_MIN = DUTY_CYCLE_MIN * TIMER_PERIOD;
 80012d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012d2:	f7ff ff09 	bl	80010e8 <__aeabi_i2d>
 80012d6:	6a3a      	ldr	r2, [r7, #32]
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f7ff f88b 	bl	80003f4 <__aeabi_dmul>
 80012de:	0002      	movs	r2, r0
 80012e0:	000b      	movs	r3, r1
 80012e2:	0010      	movs	r0, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	f7ff fec9 	bl	800107c <__aeabi_d2iz>
 80012ea:	0003      	movs	r3, r0
 80012ec:	617b      	str	r3, [r7, #20]
  const int DUTY_CYCLE_COUNTS_DELTA = (DUTY_CYCLE_MAX - DUTY_CYCLE_MIN) * TIMER_PERIOD;
 80012ee:	6a3a      	ldr	r2, [r7, #32]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	69b8      	ldr	r0, [r7, #24]
 80012f4:	69f9      	ldr	r1, [r7, #28]
 80012f6:	f7ff fb3f 	bl	8000978 <__aeabi_dsub>
 80012fa:	0002      	movs	r2, r0
 80012fc:	000b      	movs	r3, r1
 80012fe:	0014      	movs	r4, r2
 8001300:	001d      	movs	r5, r3
 8001302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001304:	f7ff fef0 	bl	80010e8 <__aeabi_i2d>
 8001308:	0002      	movs	r2, r0
 800130a:	000b      	movs	r3, r1
 800130c:	0020      	movs	r0, r4
 800130e:	0029      	movs	r1, r5
 8001310:	f7ff f870 	bl	80003f4 <__aeabi_dmul>
 8001314:	0002      	movs	r2, r0
 8001316:	000b      	movs	r3, r1
 8001318:	0010      	movs	r0, r2
 800131a:	0019      	movs	r1, r3
 800131c:	f7ff feae 	bl	800107c <__aeabi_d2iz>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]
  const int SPI_TIMEOUT = 1000;
 8001324:	23fa      	movs	r3, #250	; 0xfa
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	60fb      	str	r3, [r7, #12]

  // configure data_in bits for CH0
  uint8_t t_buffer[3] = {0b1, 0b10000000, 0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <main+0x16c>)
 800132e:	8811      	ldrh	r1, [r2, #0]
 8001330:	8019      	strh	r1, [r3, #0]
 8001332:	7892      	ldrb	r2, [r2, #2]
 8001334:	709a      	strb	r2, [r3, #2]
  // initialize data_out bits (default to 0s)
  uint8_t r_buffer[3] = {0};
 8001336:	003b      	movs	r3, r7
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <main+0x170>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	801a      	strh	r2, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]
  // initialize variable for ADC value (default to 0)
  uint8_t adc_val = 0;
 8001344:	230b      	movs	r3, #11
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
  // initialize variable for compare register value (default to 0)
  uint8_t compare_val = 0;
 800134c:	230a      	movs	r3, #10
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f000 fb6c 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f868 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f7ff ff12 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001360:	f000 fac0 	bl	80018e4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001364:	f000 f8ba 	bl	80014dc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001368:	f000 f9a8 	bl	80016bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // start PWM signal generation
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <main+0x174>)
 800136e:	2100      	movs	r1, #0
 8001370:	0018      	movs	r0, r3
 8001372:	f002 f8d7 	bl	8003524 <HAL_TIM_PWM_Start>
  // CS line must be brought high first
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	482a      	ldr	r0, [pc, #168]	; (8001424 <main+0x178>)
 800137c:	2201      	movs	r2, #1
 800137e:	0019      	movs	r1, r3
 8001380:	f000 fe0a 	bl	8001f98 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

	  // CS line to low (active)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4826      	ldr	r0, [pc, #152]	; (8001424 <main+0x178>)
 800138a:	2200      	movs	r2, #0
 800138c:	0019      	movs	r1, r3
 800138e:	f000 fe03 	bl	8001f98 <HAL_GPIO_WritePin>

	  // send and receive data
	  HAL_SPI_TransmitReceive(&hspi1, t_buffer, r_buffer, sizeof(3), SPI_TIMEOUT);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	003a      	movs	r2, r7
 8001396:	1d39      	adds	r1, r7, #4
 8001398:	4823      	ldr	r0, [pc, #140]	; (8001428 <main+0x17c>)
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2304      	movs	r3, #4
 800139e:	f001 fcc1 	bl	8002d24 <HAL_SPI_TransmitReceive>

	  // CS line to high (inactive)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	481f      	ldr	r0, [pc, #124]	; (8001424 <main+0x178>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	0019      	movs	r1, r3
 80013ac:	f000 fdf4 	bl	8001f98 <HAL_GPIO_WritePin>

	  // ADC value = the last 10 bits of the receive buffer
	  adc_val = ((uint16_t)r_buffer[1] << 8) | (uint16_t)r_buffer[2];
 80013b0:	003b      	movs	r3, r7
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	003b      	movs	r3, r7
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	210b      	movs	r1, #11
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	701a      	strb	r2, [r3, #0]

	  // set compare register value based on minimum duty cycle of 5% (lowest motor speed)
	  compare_val = DUTY_CYCLE_COUNTS_MIN;
 80013c8:	240a      	movs	r4, #10
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	701a      	strb	r2, [r3, #0]

	  // increase compare register value based on difference between maximum (10%) and minimum duty cycle (5%)
	  // this additional value is calculated by mapping the ADC reading onto the DUTY_CYCLE_COUNTS_DELTA
	  compare_val += DUTY_CYCLE_COUNTS_DELTA * adc_val / MAX_ADC_VAL;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	435a      	muls	r2, r3
 80013d8:	232e      	movs	r3, #46	; 0x2e
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f7fe ff1b 	bl	800021c <__divsi3>
 80013e6:	0003      	movs	r3, r0
 80013e8:	b2d9      	uxtb	r1, r3
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	193a      	adds	r2, r7, r4
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	188a      	adds	r2, r1, r2
 80013f2:	701a      	strb	r2, [r3, #0]

	  // set compare register
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_val);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <main+0x174>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	193a      	adds	r2, r7, r4
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34

	  // add delay to avoid overloading the ADC
	  HAL_Delay(10);
 80013fe:	200a      	movs	r0, #10
 8001400:	f000 fb7a 	bl	8001af8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001404:	e7be      	b.n	8001384 <main+0xd8>
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	000003ff 	.word	0x000003ff
 800140c:	9999999a 	.word	0x9999999a
 8001410:	3fa99999 	.word	0x3fa99999
 8001414:	3fb99999 	.word	0x3fb99999
 8001418:	08004a30 	.word	0x08004a30
 800141c:	08004a34 	.word	0x08004a34
 8001420:	2000008c 	.word	0x2000008c
 8001424:	48000400 	.word	0x48000400
 8001428:	20000028 	.word	0x20000028

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b099      	sub	sp, #100	; 0x64
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	242c      	movs	r4, #44	; 0x2c
 8001434:	193b      	adds	r3, r7, r4
 8001436:	0018      	movs	r0, r3
 8001438:	2334      	movs	r3, #52	; 0x34
 800143a:	001a      	movs	r2, r3
 800143c:	2100      	movs	r1, #0
 800143e:	f003 fabf 	bl	80049c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001442:	231c      	movs	r3, #28
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	0018      	movs	r0, r3
 8001448:	2310      	movs	r3, #16
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f003 fab7 	bl	80049c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001452:	003b      	movs	r3, r7
 8001454:	0018      	movs	r0, r3
 8001456:	231c      	movs	r3, #28
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f003 fab0 	bl	80049c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001460:	193b      	adds	r3, r7, r4
 8001462:	2220      	movs	r2, #32
 8001464:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001466:	193b      	adds	r3, r7, r4
 8001468:	2201      	movs	r2, #1
 800146a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146c:	193b      	adds	r3, r7, r4
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	193b      	adds	r3, r7, r4
 8001474:	0018      	movs	r0, r3
 8001476:	f000 fdad 	bl	8001fd4 <HAL_RCC_OscConfig>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800147e:	f000 f828 	bl	80014d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	211c      	movs	r1, #28
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2207      	movs	r2, #7
 8001488:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2203      	movs	r2, #3
 800148e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2101      	movs	r1, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 f91d 	bl	80026e0 <HAL_RCC_ClockConfig>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014aa:	f000 f812 	bl	80014d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ae:	003b      	movs	r3, r7
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	003b      	movs	r3, r7
 80014bc:	0018      	movs	r0, r3
 80014be:	f001 fa7b 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014c6:	f000 f804 	bl	80014d2 <Error_Handler>
  }
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b019      	add	sp, #100	; 0x64
 80014d0:	bd90      	pop	{r4, r7, pc}

080014d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d6:	b672      	cpsid	i
}
 80014d8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014da:	e7fe      	b.n	80014da <Error_Handler+0x8>

080014dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_SPI1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_SPI1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_SPI1_Init+0x74>)
 80014e8:	2282      	movs	r2, #130	; 0x82
 80014ea:	0052      	lsls	r2, r2, #1
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_SPI1_Init+0x74>)
 80014f6:	22e0      	movs	r2, #224	; 0xe0
 80014f8:	00d2      	lsls	r2, r2, #3
 80014fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_SPI1_Init+0x74>)
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_SPI1_Init+0x74>)
 8001512:	2218      	movs	r2, #24
 8001514:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_SPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_SPI1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_SPI1_Init+0x74>)
 800152a:	2207      	movs	r2, #7
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_SPI1_Init+0x74>)
 8001536:	2208      	movs	r2, #8
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <MX_SPI1_Init+0x74>)
 800153c:	0018      	movs	r0, r3
 800153e:	f001 fb39 	bl	8002bb4 <HAL_SPI_Init>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f7ff ffc4 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000028 	.word	0x20000028
 8001554:	40013000 	.word	0x40013000

08001558 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2414      	movs	r4, #20
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2314      	movs	r3, #20
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f003 fa28 	bl	80049c0 <memset>
  if(spiHandle->Instance==SPI1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <HAL_SPI_MspInit+0xd8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d155      	bne.n	8001626 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0149      	lsls	r1, r1, #5
 8001584:	430a      	orrs	r2, r1
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	015b      	lsls	r3, r3, #5
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0289      	lsls	r1, r1, #10
 80015a0:	430a      	orrs	r2, r1
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	02c9      	lsls	r1, r1, #11
 80015bc:	430a      	orrs	r2, r1
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_SPI_MspInit+0xdc>)
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	02db      	lsls	r3, r3, #11
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	22c0      	movs	r2, #192	; 0xc0
 80015d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	2202      	movs	r2, #2
 80015d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	2203      	movs	r2, #3
 80015e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	2390      	movs	r3, #144	; 0x90
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fb57 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015fa:	0021      	movs	r1, r4
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2208      	movs	r2, #8
 8001600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2202      	movs	r2, #2
 8001606:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2203      	movs	r2, #3
 8001612:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	187b      	adds	r3, r7, r1
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_SPI_MspInit+0xe0>)
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f000 fb41 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b00b      	add	sp, #44	; 0x2c
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40013000 	.word	0x40013000
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_MspInit+0x44>)
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_MspInit+0x44>)
 8001648:	2101      	movs	r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_MspInit+0x44>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_MspInit+0x44>)
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_MspInit+0x44>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0549      	lsls	r1, r1, #21
 8001664:	430a      	orrs	r2, r1
 8001666:	61da      	str	r2, [r3, #28]
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_MspInit+0x44>)
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	055b      	lsls	r3, r3, #21
 8001670:	4013      	ands	r3, r2
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 fa0a 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	2348      	movs	r3, #72	; 0x48
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	0018      	movs	r0, r3
 80016c8:	2310      	movs	r3, #16
 80016ca:	001a      	movs	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	f003 f977 	bl	80049c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	0018      	movs	r0, r3
 80016d8:	2308      	movs	r3, #8
 80016da:	001a      	movs	r2, r3
 80016dc:	2100      	movs	r1, #0
 80016de:	f003 f96f 	bl	80049c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	2324      	movs	r3, #36	; 0x24
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	0018      	movs	r0, r3
 80016e8:	231c      	movs	r3, #28
 80016ea:	001a      	movs	r2, r3
 80016ec:	2100      	movs	r1, #0
 80016ee:	f003 f967 	bl	80049c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	0018      	movs	r0, r3
 80016f6:	2320      	movs	r3, #32
 80016f8:	001a      	movs	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	f003 f960 	bl	80049c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001700:	4b46      	ldr	r3, [pc, #280]	; (800181c <MX_TIM1_Init+0x160>)
 8001702:	4a47      	ldr	r2, [pc, #284]	; (8001820 <MX_TIM1_Init+0x164>)
 8001704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <MX_TIM1_Init+0x160>)
 8001708:	220e      	movs	r2, #14
 800170a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <MX_TIM1_Init+0x160>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <MX_TIM1_Init+0x160>)
 8001714:	22fa      	movs	r2, #250	; 0xfa
 8001716:	0212      	lsls	r2, r2, #8
 8001718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b40      	ldr	r3, [pc, #256]	; (800181c <MX_TIM1_Init+0x160>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <MX_TIM1_Init+0x160>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <MX_TIM1_Init+0x160>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <MX_TIM1_Init+0x160>)
 800172e:	0018      	movs	r0, r3
 8001730:	f001 fe50 	bl	80033d4 <HAL_TIM_Base_Init>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001738:	f7ff fecb 	bl	80014d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	2148      	movs	r1, #72	; 0x48
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	0152      	lsls	r2, r2, #5
 8001744:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001746:	187a      	adds	r2, r7, r1
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <MX_TIM1_Init+0x160>)
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f002 f867 	bl	8003820 <HAL_TIM_ConfigClockSource>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001756:	f7ff febc 	bl	80014d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <MX_TIM1_Init+0x160>)
 800175c:	0018      	movs	r0, r3
 800175e:	f001 fe89 	bl	8003474 <HAL_TIM_PWM_Init>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001766:	f7ff feb4 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001778:	187a      	adds	r2, r7, r1
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <MX_TIM1_Init+0x160>)
 800177c:	0011      	movs	r1, r2
 800177e:	0018      	movs	r0, r3
 8001780:	f002 fc5c 	bl	800403c <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001788:	f7ff fea3 	bl	80014d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2124      	movs	r1, #36	; 0x24
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2260      	movs	r2, #96	; 0x60
 8001792:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b8:	1879      	adds	r1, r7, r1
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM1_Init+0x160>)
 80017bc:	2200      	movs	r2, #0
 80017be:	0018      	movs	r0, r3
 80017c0:	f001 ff68 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017c8:	f7ff fe83 	bl	80014d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	0192      	lsls	r2, r2, #6
 80017f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017f8:	1d3a      	adds	r2, r7, #4
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_TIM1_Init+0x160>)
 80017fc:	0011      	movs	r1, r2
 80017fe:	0018      	movs	r0, r3
 8001800:	f002 fc7a 	bl	80040f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001808:	f7ff fe63 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <MX_TIM1_Init+0x160>)
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f828 	bl	8001864 <HAL_TIM_MspPostInit>

}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b016      	add	sp, #88	; 0x58
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000008c 	.word	0x2000008c
 8001820:	40012c00 	.word	0x40012c00

08001824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x38>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10d      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_TIM_Base_MspInit+0x3c>)
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_Base_MspInit+0x3c>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0109      	lsls	r1, r1, #4
 8001840:	430a      	orrs	r2, r1
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_TIM_Base_MspInit+0x3c>)
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	240c      	movs	r4, #12
 800186e:	193b      	adds	r3, r7, r4
 8001870:	0018      	movs	r0, r3
 8001872:	2314      	movs	r3, #20
 8001874:	001a      	movs	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f003 f8a2 	bl	80049c0 <memset>
  if(timHandle->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_TIM_MspPostInit+0x78>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d125      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_TIM_MspPostInit+0x7c>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_TIM_MspPostInit+0x7c>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0289      	lsls	r1, r1, #10
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_MspPostInit+0x7c>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2202      	movs	r2, #2
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2202      	movs	r2, #2
 80018c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	187a      	adds	r2, r7, r1
 80018c6:	2390      	movs	r3, #144	; 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f9eb 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b009      	add	sp, #36	; 0x24
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40021000 	.word	0x40021000

080018e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_USART2_UART_Init+0x58>)
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_USART2_UART_Init+0x58>)
 80018f0:	2296      	movs	r2, #150	; 0x96
 80018f2:	0212      	lsls	r2, r2, #8
 80018f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_USART2_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_USART2_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_USART2_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_USART2_UART_Init+0x58>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_USART2_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_USART2_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_USART2_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_USART2_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <MX_USART2_UART_Init+0x58>)
 8001928:	0018      	movs	r0, r3
 800192a:	f002 fc43 	bl	80041b4 <HAL_UART_Init>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001932:	f7ff fdce 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000d4 	.word	0x200000d4
 8001940:	40004400 	.word	0x40004400

08001944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b08b      	sub	sp, #44	; 0x2c
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	2414      	movs	r4, #20
 800194e:	193b      	adds	r3, r7, r4
 8001950:	0018      	movs	r0, r3
 8001952:	2314      	movs	r3, #20
 8001954:	001a      	movs	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	f003 f832 	bl	80049c0 <memset>
  if(uartHandle->Instance==USART2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0x90>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d132      	bne.n	80019cc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_UART_MspInit+0x94>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0289      	lsls	r1, r1, #10
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0289      	lsls	r1, r1, #10
 800198c:	430a      	orrs	r2, r1
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199e:	0021      	movs	r1, r4
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2202      	movs	r2, #2
 80019aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2201      	movs	r2, #1
 80019bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	187a      	adds	r2, r7, r1
 80019c0:	2390      	movs	r3, #144	; 0x90
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	0011      	movs	r1, r2
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f96e 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b00b      	add	sp, #44	; 0x2c
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000

080019dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopForever+0xe>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopForever+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a06:	f7ff fe54 	bl	80016b2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a0a:	f002 ffe1 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0e:	f7ff fc4d 	bl	80012ac <main>

08001a12 <LoopForever>:

LoopForever:
    b LoopForever
 8001a12:	e7fe      	b.n	8001a12 <LoopForever>
  ldr   r0, =_estack
 8001a14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a20:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8001a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a28:	20000160 	.word	0x20000160

08001a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_COMP_IRQHandler>
	...

08001a30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_Init+0x24>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_Init+0x24>)
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f809 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a46:	f7ff fdf9 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_InitTick+0x5c>)
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_InitTick+0x60>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	23fa      	movs	r3, #250	; 0xfa
 8001a6c:	0098      	lsls	r0, r3, #2
 8001a6e:	f7fe fb4b 	bl	8000108 <__udivsi3>
 8001a72:	0003      	movs	r3, r0
 8001a74:	0019      	movs	r1, r3
 8001a76:	0020      	movs	r0, r4
 8001a78:	f7fe fb46 	bl	8000108 <__udivsi3>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f905 	bl	8001c8e <HAL_SYSTICK_Config>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e00f      	b.n	8001aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d80b      	bhi.n	8001aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	2301      	movs	r3, #1
 8001a96:	425b      	negs	r3, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f8e2 	bl	8001c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_InitTick+0x64>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	001a      	movs	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	18d2      	adds	r2, r2, r3
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	2000015c 	.word	0x2000015c

08001ae4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	2000015c 	.word	0x2000015c

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	001a      	movs	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	189b      	adds	r3, r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	f7ff ffe0 	bl	8001ae4 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	0002      	movs	r2, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	d828      	bhi.n	8001ba8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <__NVIC_SetPriority+0xd4>)
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	33c0      	adds	r3, #192	; 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	589b      	ldr	r3, [r3, r2]
 8001b66:	1dfa      	adds	r2, r7, #7
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	400a      	ands	r2, r1
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	21ff      	movs	r1, #255	; 0xff
 8001b74:	4091      	lsls	r1, r2
 8001b76:	000a      	movs	r2, r1
 8001b78:	43d2      	mvns	r2, r2
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	22ff      	movs	r2, #255	; 0xff
 8001b84:	401a      	ands	r2, r3
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	4003      	ands	r3, r0
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b94:	481f      	ldr	r0, [pc, #124]	; (8001c14 <__NVIC_SetPriority+0xd4>)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	33c0      	adds	r3, #192	; 0xc0
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ba6:	e031      	b.n	8001c0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <__NVIC_SetPriority+0xd8>)
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	0019      	movs	r1, r3
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	3b08      	subs	r3, #8
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3306      	adds	r3, #6
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1dfa      	adds	r2, r7, #7
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	2203      	movs	r2, #3
 8001bca:	400a      	ands	r2, r1
 8001bcc:	00d2      	lsls	r2, r2, #3
 8001bce:	21ff      	movs	r1, #255	; 0xff
 8001bd0:	4091      	lsls	r1, r2
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	43d2      	mvns	r2, r2
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	22ff      	movs	r2, #255	; 0xff
 8001be0:	401a      	ands	r2, r3
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	2303      	movs	r3, #3
 8001bea:	4003      	ands	r3, r0
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <__NVIC_SetPriority+0xd8>)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	001c      	movs	r4, r3
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	4023      	ands	r3, r4
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	430a      	orrs	r2, r1
 8001c02:	3306      	adds	r3, #6
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	18c3      	adds	r3, r0, r3
 8001c08:	3304      	adds	r3, #4
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b003      	add	sp, #12
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1e5a      	subs	r2, r3, #1
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	045b      	lsls	r3, r3, #17
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d301      	bcc.n	8001c34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c30:	2301      	movs	r3, #1
 8001c32:	e010      	b.n	8001c56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <SysTick_Config+0x44>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	425b      	negs	r3, r3
 8001c40:	2103      	movs	r1, #3
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff ff7c 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x44>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x44>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	210f      	movs	r1, #15
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b004      	add	sp, #16
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ffbf 	bl	8001c1c <SysTick_Config>
 8001c9e:	0003      	movs	r3, r0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e155      	b.n	8001f64 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4091      	lsls	r1, r2
 8001cc2:	000a      	movs	r2, r1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d100      	bne.n	8001cd0 <HAL_GPIO_Init+0x28>
 8001cce:	e146      	b.n	8001f5e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d130      	bne.n	8001d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1e:	2201      	movs	r2, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	2201      	movs	r2, #1
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d017      	beq.n	8001d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	43da      	mvns	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d123      	bne.n	8001dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	58d3      	ldr	r3, [r2, r3]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	23c0      	movs	r3, #192	; 0xc0
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d100      	bne.n	8001e1c <HAL_GPIO_Init+0x174>
 8001e1a:	e0a0      	b.n	8001f5e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e34:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	589b      	ldr	r3, [r3, r2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	43da      	mvns	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	2390      	movs	r3, #144	; 0x90
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <HAL_GPIO_Init+0x2dc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x1ea>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a46      	ldr	r2, [pc, #280]	; (8001f88 <HAL_GPIO_Init+0x2e0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x1e6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a45      	ldr	r2, [pc, #276]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x1e2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a44      	ldr	r2, [pc, #272]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x1de>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e96:	2300      	movs	r3, #0
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	035b      	lsls	r3, r3, #13
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	039b      	lsls	r3, r3, #14
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	40da      	lsrs	r2, r3
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	d000      	beq.n	8001f72 <HAL_GPIO_Init+0x2ca>
 8001f70:	e6a2      	b.n	8001cb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	0008      	movs	r0, r1
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	1cbb      	adds	r3, r7, #2
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	1c7b      	adds	r3, r7, #1
 8001fac:	1c0a      	adds	r2, r1, #0
 8001fae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb0:	1c7b      	adds	r3, r7, #1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb8:	1cbb      	adds	r3, r7, #2
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f000 fb76 	bl	80026d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x20>
 8001ff2:	e08e      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff4:	4bc5      	ldr	r3, [pc, #788]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00e      	beq.n	800201e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4bc2      	ldr	r3, [pc, #776]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	220c      	movs	r2, #12
 8002006:	4013      	ands	r3, r2
 8002008:	2b08      	cmp	r3, #8
 800200a:	d117      	bne.n	800203c <HAL_RCC_OscConfig+0x68>
 800200c:	4bbf      	ldr	r3, [pc, #764]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	23c0      	movs	r3, #192	; 0xc0
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	401a      	ands	r2, r3
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	429a      	cmp	r2, r3
 800201c:	d10e      	bne.n	800203c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201e:	4bbb      	ldr	r3, [pc, #748]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	4013      	ands	r3, r2
 8002028:	d100      	bne.n	800202c <HAL_RCC_OscConfig+0x58>
 800202a:	e071      	b.n	8002110 <HAL_RCC_OscConfig+0x13c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d000      	beq.n	8002036 <HAL_RCC_OscConfig+0x62>
 8002034:	e06c      	b.n	8002110 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f000 fb4c 	bl	80026d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_RCC_OscConfig+0x80>
 8002044:	4bb1      	ldr	r3, [pc, #708]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4bb0      	ldr	r3, [pc, #704]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0249      	lsls	r1, r1, #9
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e02f      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_OscConfig+0xa2>
 800205c:	4bab      	ldr	r3, [pc, #684]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4baa      	ldr	r3, [pc, #680]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002062:	49ab      	ldr	r1, [pc, #684]	; (8002310 <HAL_RCC_OscConfig+0x33c>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4ba8      	ldr	r3, [pc, #672]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4ba7      	ldr	r3, [pc, #668]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800206e:	49a9      	ldr	r1, [pc, #676]	; (8002314 <HAL_RCC_OscConfig+0x340>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e01e      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0xc8>
 800207e:	4ba3      	ldr	r3, [pc, #652]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4ba2      	ldr	r3, [pc, #648]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	02c9      	lsls	r1, r1, #11
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	4b9f      	ldr	r3, [pc, #636]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b9e      	ldr	r3, [pc, #632]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0249      	lsls	r1, r1, #9
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xe0>
 800209c:	4b9b      	ldr	r3, [pc, #620]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b9a      	ldr	r3, [pc, #616]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80020a2:	499b      	ldr	r1, [pc, #620]	; (8002310 <HAL_RCC_OscConfig+0x33c>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b98      	ldr	r3, [pc, #608]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b97      	ldr	r3, [pc, #604]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80020ae:	4999      	ldr	r1, [pc, #612]	; (8002314 <HAL_RCC_OscConfig+0x340>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d014      	beq.n	80020e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fd12 	bl	8001ae4 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c6:	f7ff fd0d 	bl	8001ae4 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	; 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2fd      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0xf2>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fcfd 	bl	8001ae4 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff fcf8 	bl	8001ae4 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e2e8      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b82      	ldr	r3, [pc, #520]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	029b      	lsls	r3, r3, #10
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x11c>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x14a>
 800211c:	e06c      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	220c      	movs	r2, #12
 8002124:	4013      	ands	r3, r2
 8002126:	d00e      	beq.n	8002146 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002128:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	220c      	movs	r2, #12
 800212e:	4013      	ands	r3, r2
 8002130:	2b08      	cmp	r3, #8
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x1a0>
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	401a      	ands	r2, r3
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	429a      	cmp	r2, r3
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b71      	ldr	r3, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x188>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2bb      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	22f8      	movs	r2, #248	; 0xf8
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00da      	lsls	r2, r3, #3
 800216c:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e041      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d024      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002182:	2101      	movs	r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fcac 	bl	8001ae4 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fca7 	bl	8001ae4 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e297      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0f1      	beq.n	8002192 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b57      	ldr	r3, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	22f8      	movs	r2, #248	; 0xf8
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00da      	lsls	r2, r3, #3
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e018      	b.n	80021f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	438a      	bics	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fc87 	bl	8001ae4 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc82 	bl	8001ae4 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e272      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d1f1      	bne.n	80021dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2208      	movs	r2, #8
 80021fe:	4013      	ands	r3, r2
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_RCC_OscConfig+0x338>)
 800220c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002210:	2101      	movs	r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fc65 	bl	8001ae4 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fc60 	bl	8001ae4 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e250      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x24c>
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002244:	2101      	movs	r1, #1
 8002246:	438a      	bics	r2, r1
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fc4b 	bl	8001ae4 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fc46 	bl	8001ae4 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e236      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d1f1      	bne.n	8002254 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2204      	movs	r2, #4
 8002276:	4013      	ands	r3, r2
 8002278:	d100      	bne.n	800227c <HAL_RCC_OscConfig+0x2a8>
 800227a:	e0b5      	b.n	80023e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227c:	201f      	movs	r0, #31
 800227e:	183b      	adds	r3, r7, r0
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	4013      	ands	r3, r2
 800228e:	d110      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	0549      	lsls	r1, r1, #21
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	055b      	lsls	r3, r3, #21
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_OscConfig+0x344>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	d11a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_RCC_OscConfig+0x344>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_OscConfig+0x344>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc0a 	bl	8001ae4 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fc05 	bl	8001ae4 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1f5      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x344>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_OscConfig+0x348>
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_RCC_OscConfig+0x338>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_RCC_OscConfig+0x338>)
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
 8002308:	e036      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	fffbffff 	.word	0xfffbffff
 8002318:	40007000 	.word	0x40007000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x36a>
 8002324:	4bca      	ldr	r3, [pc, #808]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4bc9      	ldr	r3, [pc, #804]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800232a:	2101      	movs	r1, #1
 800232c:	438a      	bics	r2, r1
 800232e:	621a      	str	r2, [r3, #32]
 8002330:	4bc7      	ldr	r3, [pc, #796]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	4bc6      	ldr	r3, [pc, #792]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002336:	2104      	movs	r1, #4
 8002338:	438a      	bics	r2, r1
 800233a:	621a      	str	r2, [r3, #32]
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x38c>
 8002346:	4bc2      	ldr	r3, [pc, #776]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	4bc1      	ldr	r3, [pc, #772]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800234c:	2104      	movs	r1, #4
 800234e:	430a      	orrs	r2, r1
 8002350:	621a      	str	r2, [r3, #32]
 8002352:	4bbf      	ldr	r3, [pc, #764]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	4bbe      	ldr	r3, [pc, #760]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	621a      	str	r2, [r3, #32]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x3a4>
 8002360:	4bbb      	ldr	r3, [pc, #748]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4bba      	ldr	r3, [pc, #744]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002366:	2101      	movs	r1, #1
 8002368:	438a      	bics	r2, r1
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	4bb8      	ldr	r3, [pc, #736]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	4bb7      	ldr	r3, [pc, #732]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002372:	2104      	movs	r1, #4
 8002374:	438a      	bics	r2, r1
 8002376:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d014      	beq.n	80023aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fbb0 	bl	8001ae4 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e009      	b.n	800239e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff fbab 	bl	8001ae4 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4aaf      	ldr	r2, [pc, #700]	; (8002654 <HAL_RCC_OscConfig+0x680>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e19a      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	4bac      	ldr	r3, [pc, #688]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x3b6>
 80023a8:	e013      	b.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fb9b 	bl	8001ae4 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	e009      	b.n	80023c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff fb96 	bl	8001ae4 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	4aa5      	ldr	r2, [pc, #660]	; (8002654 <HAL_RCC_OscConfig+0x680>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e185      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4ba1      	ldr	r3, [pc, #644]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b9c      	ldr	r3, [pc, #624]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	4b9b      	ldr	r3, [pc, #620]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	499d      	ldr	r1, [pc, #628]	; (8002658 <HAL_RCC_OscConfig+0x684>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4013      	ands	r3, r2
 80023f0:	d063      	beq.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d12a      	bne.n	8002450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023fa:	4b95      	ldr	r3, [pc, #596]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002400:	2104      	movs	r1, #4
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800240c:	2101      	movs	r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb67 	bl	8001ae4 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800241c:	f7ff fb62 	bl	8001ae4 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e152      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d0f1      	beq.n	800241c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002438:	4b85      	ldr	r3, [pc, #532]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	22f8      	movs	r2, #248	; 0xf8
 800243e:	4393      	bics	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	00da      	lsls	r2, r3, #3
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	e034      	b.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	3305      	adds	r3, #5
 8002456:	d111      	bne.n	800247c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002458:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800245a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245c:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800245e:	2104      	movs	r1, #4
 8002460:	438a      	bics	r2, r1
 8002462:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	22f8      	movs	r2, #248	; 0xf8
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	e01e      	b.n	80024ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800247c:	4b74      	ldr	r3, [pc, #464]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002480:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002482:	2104      	movs	r1, #4
 8002484:	430a      	orrs	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800248a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fb26 	bl	8001ae4 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800249e:	f7ff fb21 	bl	8001ae4 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e111      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024b0:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2220      	movs	r2, #32
 80024c0:	4013      	ands	r3, r2
 80024c2:	d05c      	beq.n	800257e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024c4:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d00e      	beq.n	80024ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024d0:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	220c      	movs	r2, #12
 80024d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d114      	bne.n	8002506 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024dc:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	401a      	ands	r2, r3
 80024e6:	23c0      	movs	r3, #192	; 0xc0
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024ee:	4b58      	ldr	r3, [pc, #352]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	029b      	lsls	r3, r3, #10
 80024f6:	4013      	ands	r3, r2
 80024f8:	d040      	beq.n	800257c <HAL_RCC_OscConfig+0x5a8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d03c      	beq.n	800257c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e6      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01b      	beq.n	8002546 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800250e:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0249      	lsls	r1, r1, #9
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fae2 	bl	8001ae4 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002526:	f7ff fadd 	bl	8001ae4 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0cd      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	4013      	ands	r3, r2
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x552>
 8002544:	e01b      	b.n	800257e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800254c:	4943      	ldr	r1, [pc, #268]	; (800265c <HAL_RCC_OscConfig+0x688>)
 800254e:	400a      	ands	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fac7 	bl	8001ae4 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255c:	f7ff fac2 	bl	8001ae4 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0b2      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x588>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800257c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x5b4>
 8002586:	e0a4      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	220c      	movs	r2, #12
 800258e:	4013      	ands	r3, r2
 8002590:	2b08      	cmp	r3, #8
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x5c2>
 8002594:	e078      	b.n	8002688 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	2b02      	cmp	r3, #2
 800259c:	d14c      	bne.n	8002638 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b2c      	ldr	r3, [pc, #176]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	492e      	ldr	r1, [pc, #184]	; (8002660 <HAL_RCC_OscConfig+0x68c>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fa9b 	bl	8001ae4 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff fa96 	bl	8001ae4 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e086      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	049b      	lsls	r3, r3, #18
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	220f      	movs	r2, #15
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_RCC_OscConfig+0x690>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0449      	lsls	r1, r1, #17
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fa69 	bl	8001ae4 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff fa64 	bl	8001ae4 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e054      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	049b      	lsls	r3, r3, #18
 8002632:	4013      	ands	r3, r2
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x644>
 8002636:	e04c      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_OscConfig+0x67c>)
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <HAL_RCC_OscConfig+0x68c>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fa4e 	bl	8001ae4 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x6a6>
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40021000 	.word	0x40021000
 8002654:	00001388 	.word	0x00001388
 8002658:	efffffff 	.word	0xefffffff
 800265c:	fffeffff 	.word	0xfffeffff
 8002660:	feffffff 	.word	0xfeffffff
 8002664:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fa3c 	bl	8001ae4 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e02c      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_RCC_OscConfig+0x708>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	049b      	lsls	r3, r3, #18
 8002682:	4013      	ands	r3, r2
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x694>
 8002686:	e024      	b.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e01f      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_RCC_OscConfig+0x708>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_OscConfig+0x708>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	401a      	ands	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10e      	bne.n	80026ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	220f      	movs	r2, #15
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	23f0      	movs	r3, #240	; 0xf0
 80026c2:	039b      	lsls	r3, r3, #14
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b008      	add	sp, #32
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0bf      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d911      	bls.n	8002726 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	4b5b      	ldr	r3, [pc, #364]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0a6      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d015      	beq.n	800275c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2204      	movs	r2, #4
 8002736:	4013      	ands	r3, r2
 8002738:	d006      	beq.n	8002748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800273a:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002740:	21e0      	movs	r1, #224	; 0xe0
 8002742:	00c9      	lsls	r1, r1, #3
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	22f0      	movs	r2, #240	; 0xf0
 800274e:	4393      	bics	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d04c      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	4013      	ands	r3, r2
 8002778:	d120      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07a      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	049b      	lsls	r3, r3, #18
 800278e:	4013      	ands	r3, r2
 8002790:	d114      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06e      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	4013      	ands	r3, r2
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e062      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e05b      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f988 	bl	8001ae4 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	e009      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027da:	f7ff f983 	bl	8001ae4 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_RCC_ClockConfig+0x1a4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e042      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	220c      	movs	r2, #12
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1ec      	bne.n	80027da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d211      	bcs.n	8002832 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x19c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e020      	b.n	8002874 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	4013      	ands	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_RCC_ClockConfig+0x1a8>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002850:	f000 f820 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002854:	0001      	movs	r1, r0
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1a0>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	220f      	movs	r2, #15
 800285e:	4013      	ands	r3, r2
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1ac>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	000a      	movs	r2, r1
 8002866:	40da      	lsrs	r2, r3
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1b0>)
 800286a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff f8f3 	bl	8001a58 <HAL_InitTick>
  
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	00001388 	.word	0x00001388
 8002888:	fffff8ff 	.word	0xfffff8ff
 800288c:	08004a38 	.word	0x08004a38
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	220c      	movs	r2, #12
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d046      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0xb8>
 80028be:	d848      	bhi.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d002      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d003      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x3c>
 80028c8:	e043      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028cc:	613b      	str	r3, [r7, #16]
      break;
 80028ce:	e043      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	220f      	movs	r2, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <HAL_RCC_GetSysClockFreq+0xd8>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	220f      	movs	r2, #15
 80028e4:	4013      	ands	r3, r2
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_RCC_GetSysClockFreq+0xdc>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	23c0      	movs	r3, #192	; 0xc0
 80028f0:	025b      	lsls	r3, r3, #9
 80028f2:	401a      	ands	r2, r3
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d109      	bne.n	8002910 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	481a      	ldr	r0, [pc, #104]	; (8002968 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002900:	f7fd fc02 	bl	8000108 <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4353      	muls	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e01a      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	025b      	lsls	r3, r3, #9
 8002916:	401a      	ands	r2, r3
 8002918:	23c0      	movs	r3, #192	; 0xc0
 800291a:	025b      	lsls	r3, r3, #9
 800291c:	429a      	cmp	r2, r3
 800291e:	d109      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4814      	ldr	r0, [pc, #80]	; (8002974 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002924:	f7fd fbf0 	bl	8000108 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	001a      	movs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4353      	muls	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e008      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	480c      	ldr	r0, [pc, #48]	; (8002968 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002938:	f7fd fbe6 	bl	8000108 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	001a      	movs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4353      	muls	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	613b      	str	r3, [r7, #16]
      break;
 800294a:	e005      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_GetSysClockFreq+0xe0>)
 800294e:	613b      	str	r3, [r7, #16]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002954:	613b      	str	r3, [r7, #16]
      break;
 8002956:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002958:	693b      	ldr	r3, [r7, #16]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	08004a50 	.word	0x08004a50
 8002970:	08004a60 	.word	0x08004a60
 8002974:	02dc6c00 	.word	0x02dc6c00

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_RCC_GetHCLKFreq+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002990:	f7ff fff2 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002994:	0001      	movs	r1, r0
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	40d9      	lsrs	r1, r3
 80029a6:	000b      	movs	r3, r1
}    
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08004a48 	.word	0x08004a48

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029d4:	e08e      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2017      	movs	r0, #23
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b6e      	ldr	r3, [pc, #440]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	4013      	ands	r3, r2
 80029e8:	d110      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0549      	lsls	r1, r1, #21
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
 80029f8:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	d11a      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a18:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	0049      	lsls	r1, r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7ff f85d 	bl	8001ae4 <HAL_GetTick>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	e008      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7ff f858 	bl	8001ae4 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0a6      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a4e:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a50:	6a1a      	ldr	r2, [r3, #32]
 8002a52:	23c0      	movs	r3, #192	; 0xc0
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d02c      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0249      	lsls	r1, r1, #9
 8002a84:	430a      	orrs	r2, r1
 8002a86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a8e:	4945      	ldr	r1, [pc, #276]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff f81f 	bl	8001ae4 <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7ff f81a 	bl	8001ae4 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e067      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ade:	2317      	movs	r3, #23
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aee:	492f      	ldr	r1, [pc, #188]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2203      	movs	r2, #3
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	4013      	ands	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	2210      	movs	r2, #16
 8002b40:	4393      	bics	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	029b      	lsls	r3, r3, #10
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4013      	ands	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	4393      	bics	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	fffffcff 	.word	0xfffffcff
 8002ba4:	fffeffff 	.word	0xfffeffff
 8002ba8:	00001388 	.word	0x00001388
 8002bac:	efffffff 	.word	0xefffffff
 8002bb0:	fffcffff 	.word	0xfffcffff

08002bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0a8      	b.n	8002d18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	2382      	movs	r3, #130	; 0x82
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d009      	beq.n	8002bee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
 8002be0:	e005      	b.n	8002bee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	225d      	movs	r2, #93	; 0x5d
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	225c      	movs	r2, #92	; 0x5c
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7fe fca4 	bl	8001558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	225d      	movs	r2, #93	; 0x5d
 8002c14:	2102      	movs	r1, #2
 8002c16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	438a      	bics	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	23e0      	movs	r3, #224	; 0xe0
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d902      	bls.n	8002c3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e002      	b.n	8002c40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	015b      	lsls	r3, r3, #5
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	23f0      	movs	r3, #240	; 0xf0
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d008      	beq.n	8002c5e <HAL_SPI_Init+0xaa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	23e0      	movs	r3, #224	; 0xe0
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d002      	beq.n	8002c5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	2382      	movs	r3, #130	; 0x82
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	401a      	ands	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	2384      	movs	r3, #132	; 0x84
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	400b      	ands	r3, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2102      	movs	r1, #2
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2101      	movs	r1, #1
 8002c84:	400b      	ands	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6999      	ldr	r1, [r3, #24]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	400b      	ands	r3, r1
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2138      	movs	r1, #56	; 0x38
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	0011      	movs	r1, r2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2110      	movs	r1, #16
 8002ccc:	400b      	ands	r3, r1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68d9      	ldr	r1, [r3, #12]
 8002cde:	23f0      	movs	r3, #240	; 0xf0
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4907      	ldr	r1, [pc, #28]	; (8002d20 <HAL_SPI_Init+0x16c>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	225d      	movs	r2, #93	; 0x5d
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fffff7ff 	.word	0xfffff7ff

08002d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	001a      	movs	r2, r3
 8002d32:	1cbb      	adds	r3, r7, #2
 8002d34:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d36:	2301      	movs	r3, #1
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d3a:	2323      	movs	r3, #35	; 0x23
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	225c      	movs	r2, #92	; 0x5c
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x2c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e1c4      	b.n	80030da <HAL_SPI_TransmitReceive+0x3b6>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	225c      	movs	r2, #92	; 0x5c
 8002d54:	2101      	movs	r1, #1
 8002d56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d58:	f7fe fec4 	bl	8001ae4 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d60:	201b      	movs	r0, #27
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	215d      	movs	r1, #93	; 0x5d
 8002d68:	5c52      	ldrb	r2, [r2, r1]
 8002d6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d72:	2312      	movs	r3, #18
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	1cba      	adds	r2, r7, #2
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d011      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x84>
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	2382      	movs	r3, #130	; 0x82
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d107      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x7a>
 8002d96:	183b      	adds	r3, r7, r0
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d004      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d9e:	2323      	movs	r3, #35	; 0x23
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002da6:	e191      	b.n	80030cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x98>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x98>
 8002db4:	1cbb      	adds	r3, r7, #2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002dbc:	2323      	movs	r3, #35	; 0x23
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002dc4:	e182      	b.n	80030cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	225d      	movs	r2, #93	; 0x5d
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d003      	beq.n	8002dda <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	225d      	movs	r2, #93	; 0x5d
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1cba      	adds	r2, r7, #2
 8002dea:	2146      	movs	r1, #70	; 0x46
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1cba      	adds	r2, r7, #2
 8002df4:	2144      	movs	r1, #68	; 0x44
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1cba      	adds	r2, r7, #2
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1cba      	adds	r2, r7, #2
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	23e0      	movs	r3, #224	; 0xe0
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	49ac      	ldr	r1, [pc, #688]	; (80030e4 <HAL_SPI_TransmitReceive+0x3c0>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e008      	b.n	8002e4c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0149      	lsls	r1, r1, #5
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d007      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	23e0      	movs	r3, #224	; 0xe0
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d800      	bhi.n	8002e78 <HAL_SPI_TransmitReceive+0x154>
 8002e76:	e083      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_SPI_TransmitReceive+0x168>
 8002e80:	2312      	movs	r3, #18
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d000      	beq.n	8002e8c <HAL_SPI_TransmitReceive+0x168>
 8002e8a:	e06d      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb0:	e05a      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x1d4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x1d4>
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d113      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d11c      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x21c>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2246      	movs	r2, #70	; 0x46
 8002f0a:	5a9b      	ldrh	r3, [r3, r2]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2246      	movs	r2, #70	; 0x46
 8002f2e:	5a9b      	ldrh	r3, [r3, r2]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b299      	uxth	r1, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2246      	movs	r2, #70	; 0x46
 8002f3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f40:	f7fe fdd0 	bl	8001ae4 <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d80b      	bhi.n	8002f68 <HAL_SPI_TransmitReceive+0x244>
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	3301      	adds	r3, #1
 8002f54:	d008      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002f56:	2323      	movs	r3, #35	; 0x23
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	225d      	movs	r2, #93	; 0x5d
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
        goto error;
 8002f66:	e0b1      	b.n	80030cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d19f      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x18e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2246      	movs	r2, #70	; 0x46
 8002f76:	5a9b      	ldrh	r3, [r3, r2]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d199      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x18e>
 8002f7e:	e089      	b.n	8003094 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x270>
 8002f88:	2312      	movs	r3, #18
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d000      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x270>
 8002f92:	e074      	b.n	800307e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fba:	e060      	b.n	800307e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d11c      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x2e0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x2e0>
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d114      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11e      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x32c>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2246      	movs	r2, #70	; 0x46
 8003016:	5a9b      	ldrh	r3, [r3, r2]
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	001a      	movs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2246      	movs	r2, #70	; 0x46
 800303e:	5a9b      	ldrh	r3, [r3, r2]
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b299      	uxth	r1, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2246      	movs	r2, #70	; 0x46
 800304a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003050:	f7fe fd48 	bl	8001ae4 <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	429a      	cmp	r2, r3
 800305e:	d802      	bhi.n	8003066 <HAL_SPI_TransmitReceive+0x342>
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	3301      	adds	r3, #1
 8003064:	d102      	bne.n	800306c <HAL_SPI_TransmitReceive+0x348>
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800306c:	2323      	movs	r3, #35	; 0x23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2203      	movs	r2, #3
 8003072:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	225d      	movs	r2, #93	; 0x5d
 8003078:	2101      	movs	r1, #1
 800307a:	5499      	strb	r1, [r3, r2]
        goto error;
 800307c:	e026      	b.n	80030cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d199      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x298>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2246      	movs	r2, #70	; 0x46
 800308c:	5a9b      	ldrh	r3, [r3, r2]
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d193      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f954 	bl	8003348 <SPI_EndRxTxTransaction>
 80030a0:	1e03      	subs	r3, r0, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80030a4:	2323      	movs	r3, #35	; 0x23
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80030ba:	2323      	movs	r3, #35	; 0x23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e003      	b.n	80030cc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	225d      	movs	r2, #93	; 0x5d
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	225c      	movs	r2, #92	; 0x5c
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030d4:	2323      	movs	r3, #35	; 0x23
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	781b      	ldrb	r3, [r3, #0]
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b00a      	add	sp, #40	; 0x28
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	ffffefff 	.word	0xffffefff

080030e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f8:	f7fe fcf4 	bl	8001ae4 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003108:	f7fe fcec 	bl	8001ae4 <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	015b      	lsls	r3, r3, #5
 8003116:	0d1b      	lsrs	r3, r3, #20
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	4353      	muls	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311e:	e058      	b.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	d055      	beq.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003126:	f7fe fcdd 	bl	8001ae4 <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d902      	bls.n	800313c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d142      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	21e0      	movs	r1, #224	; 0xe0
 8003148:	438a      	bics	r2, r1
 800314a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	2382      	movs	r3, #130	; 0x82
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	d113      	bne.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	429a      	cmp	r2, r3
 8003162:	d005      	beq.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2140      	movs	r1, #64	; 0x40
 800317c:	438a      	bics	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	019b      	lsls	r3, r3, #6
 8003188:	429a      	cmp	r2, r3
 800318a:	d110      	bne.n	80031ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	491a      	ldr	r1, [pc, #104]	; (8003200 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003198:	400a      	ands	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	0189      	lsls	r1, r1, #6
 80031aa:	430a      	orrs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	225d      	movs	r2, #93	; 0x5d
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	225c      	movs	r2, #92	; 0x5c
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e017      	b.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	425a      	negs	r2, r3
 80031e2:	4153      	adcs	r3, r2
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	001a      	movs	r2, r3
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d197      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b008      	add	sp, #32
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	20000000 	.word	0x20000000
 8003200:	ffffdfff 	.word	0xffffdfff

08003204 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003212:	2317      	movs	r3, #23
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800321a:	f7fe fc63 	bl	8001ae4 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800322a:	f7fe fc5b 	bl	8001ae4 <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	0013      	movs	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	189b      	adds	r3, r3, r2
 8003244:	00da      	lsls	r2, r3, #3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	0d1b      	lsrs	r3, r3, #20
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	4353      	muls	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003250:	e068      	b.n	8003324 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	23c0      	movs	r3, #192	; 0xc0
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	429a      	cmp	r2, r3
 800325a:	d10a      	bne.n	8003272 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	2117      	movs	r1, #23
 800326a:	187b      	adds	r3, r7, r1
 800326c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800326e:	187b      	adds	r3, r7, r1
 8003270:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	d055      	beq.n	8003324 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003278:	f7fe fc34 	bl	8001ae4 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	429a      	cmp	r2, r3
 8003286:	d902      	bls.n	800328e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d142      	bne.n	8003314 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	21e0      	movs	r1, #224	; 0xe0
 800329a:	438a      	bics	r2, r1
 800329c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	2382      	movs	r3, #130	; 0x82
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d113      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d005      	beq.n	80032c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	429a      	cmp	r2, r3
 80032c0:	d107      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	438a      	bics	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	429a      	cmp	r2, r3
 80032dc:	d110      	bne.n	8003300 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0189      	lsls	r1, r1, #6
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	225d      	movs	r2, #93	; 0x5d
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	225c      	movs	r2, #92	; 0x5c
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e010      	b.n	8003336 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	3b01      	subs	r3, #1
 8003322:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d18e      	bne.n	8003252 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b00a      	add	sp, #40	; 0x28
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	20000000 	.word	0x20000000
 8003344:	ffffdfff 	.word	0xffffdfff

08003348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	0159      	lsls	r1, r3, #5
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	0013      	movs	r3, r2
 8003362:	2200      	movs	r2, #0
 8003364:	f7ff ff4e 	bl	8003204 <SPI_WaitFifoStateUntilTimeout>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d007      	beq.n	800337c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	2220      	movs	r2, #32
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e027      	b.n	80033cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	0013      	movs	r3, r2
 8003386:	2200      	movs	r2, #0
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	f7ff fead 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d007      	beq.n	80033a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	2220      	movs	r2, #32
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e014      	b.n	80033cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	23c0      	movs	r3, #192	; 0xc0
 80033a6:	00d9      	lsls	r1, r3, #3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	0013      	movs	r3, r2
 80033b0:	2200      	movs	r2, #0
 80033b2:	f7ff ff27 	bl	8003204 <SPI_WaitFifoStateUntilTimeout>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d007      	beq.n	80033ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	2220      	movs	r2, #32
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e000      	b.n	80033cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b004      	add	sp, #16
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e042      	b.n	800346c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	; 0x3d
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223c      	movs	r2, #60	; 0x3c
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7fe fa11 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223d      	movs	r2, #61	; 0x3d
 8003406:	2102      	movs	r1, #2
 8003408:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f000 fad7 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2246      	movs	r2, #70	; 0x46
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	223e      	movs	r2, #62	; 0x3e
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2242      	movs	r2, #66	; 0x42
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2243      	movs	r2, #67	; 0x43
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2244      	movs	r2, #68	; 0x44
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2245      	movs	r2, #69	; 0x45
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223d      	movs	r2, #61	; 0x3d
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e042      	b.n	800350c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223d      	movs	r2, #61	; 0x3d
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223c      	movs	r2, #60	; 0x3c
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f839 	bl	8003514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223d      	movs	r2, #61	; 0x3d
 80034a6:	2102      	movs	r1, #2
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f000 fa87 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2246      	movs	r2, #70	; 0x46
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223e      	movs	r2, #62	; 0x3e
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223f      	movs	r2, #63	; 0x3f
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2242      	movs	r2, #66	; 0x42
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2243      	movs	r2, #67	; 0x43
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2244      	movs	r2, #68	; 0x44
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2245      	movs	r2, #69	; 0x45
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223d      	movs	r2, #61	; 0x3d
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b002      	add	sp, #8
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <HAL_TIM_PWM_Start+0x22>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223e      	movs	r2, #62	; 0x3e
 8003538:	5c9b      	ldrb	r3, [r3, r2]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	4193      	sbcs	r3, r2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e01f      	b.n	8003586 <HAL_TIM_PWM_Start+0x62>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d108      	bne.n	800355e <HAL_TIM_PWM_Start+0x3a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	223f      	movs	r2, #63	; 0x3f
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	4193      	sbcs	r3, r2
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e013      	b.n	8003586 <HAL_TIM_PWM_Start+0x62>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d108      	bne.n	8003576 <HAL_TIM_PWM_Start+0x52>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	4193      	sbcs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e007      	b.n	8003586 <HAL_TIM_PWM_Start+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2241      	movs	r2, #65	; 0x41
 800357a:	5c9b      	ldrb	r3, [r3, r2]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	4193      	sbcs	r3, r2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e074      	b.n	8003678 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_TIM_PWM_Start+0x7a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	223e      	movs	r2, #62	; 0x3e
 8003598:	2102      	movs	r1, #2
 800359a:	5499      	strb	r1, [r3, r2]
 800359c:	e013      	b.n	80035c6 <HAL_TIM_PWM_Start+0xa2>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0x8a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223f      	movs	r2, #63	; 0x3f
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]
 80035ac:	e00b      	b.n	80035c6 <HAL_TIM_PWM_Start+0xa2>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x9a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	2102      	movs	r1, #2
 80035ba:	5499      	strb	r1, [r3, r2]
 80035bc:	e003      	b.n	80035c6 <HAL_TIM_PWM_Start+0xa2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2241      	movs	r2, #65	; 0x41
 80035c2:	2102      	movs	r1, #2
 80035c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fd10 	bl	8003ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <HAL_TIM_PWM_Start+0x15c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_PWM_Start+0xd8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a28      	ldr	r2, [pc, #160]	; (8003684 <HAL_TIM_PWM_Start+0x160>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_PWM_Start+0xd8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a26      	ldr	r2, [pc, #152]	; (8003688 <HAL_TIM_PWM_Start+0x164>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_PWM_Start+0xd8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <HAL_TIM_PWM_Start+0x168>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_PWM_Start+0xdc>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_TIM_PWM_Start+0xde>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	0209      	lsls	r1, r1, #8
 8003614:	430a      	orrs	r2, r1
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_TIM_PWM_Start+0x15c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <HAL_TIM_PWM_Start+0x11e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	05db      	lsls	r3, r3, #23
 800362a:	429a      	cmp	r2, r3
 800362c:	d009      	beq.n	8003642 <HAL_TIM_PWM_Start+0x11e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_TIM_PWM_Start+0x16c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIM_PWM_Start+0x11e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_TIM_PWM_Start+0x160>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d111      	bne.n	8003666 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2207      	movs	r2, #7
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d010      	beq.n	8003676 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	e007      	b.n	8003676 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800
 8003690:	40000400 	.word	0x40000400

08003694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2317      	movs	r3, #23
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	223c      	movs	r2, #60	; 0x3c
 80036ac:	5c9b      	ldrb	r3, [r3, r2]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0ad      	b.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	223c      	movs	r2, #60	; 0x3c
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0c      	cmp	r3, #12
 80036c2:	d100      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036c4:	e076      	b.n	80037b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d900      	bls.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x3a>
 80036cc:	e095      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d04e      	beq.n	8003772 <HAL_TIM_PWM_ConfigChannel+0xde>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d900      	bls.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x48>
 80036da:	e08e      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x56>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d021      	beq.n	800372c <HAL_TIM_PWM_ConfigChannel+0x98>
 80036e8:	e087      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	0011      	movs	r1, r2
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f9e8 	bl	8003ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2108      	movs	r1, #8
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2104      	movs	r1, #4
 8003714:	438a      	bics	r2, r1
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
      break;
 800372a:	e06b      	b.n	8003804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f000 fa4f 	bl	8003bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0109      	lsls	r1, r1, #4
 8003748:	430a      	orrs	r2, r1
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4931      	ldr	r1, [pc, #196]	; (800381c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003758:	400a      	ands	r2, r1
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	619a      	str	r2, [r3, #24]
      break;
 8003770:	e048      	b.n	8003804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fab0 	bl	8003ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2108      	movs	r1, #8
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	438a      	bics	r2, r1
 800379e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69d9      	ldr	r1, [r3, #28]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	61da      	str	r2, [r3, #28]
      break;
 80037b2:	e027      	b.n	8003804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	0011      	movs	r1, r2
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 fb15 	bl	8003dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	0109      	lsls	r1, r1, #4
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	490f      	ldr	r1, [pc, #60]	; (800381c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69d9      	ldr	r1, [r3, #28]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
      break;
 80037f8:	e004      	b.n	8003804 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80037fa:	2317      	movs	r3, #23
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
      break;
 8003802:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	223c      	movs	r2, #60	; 0x3c
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]

  return status;
 800380c:	2317      	movs	r3, #23
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b006      	add	sp, #24
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	fffffbff 	.word	0xfffffbff

08003820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	230f      	movs	r3, #15
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223c      	movs	r2, #60	; 0x3c
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIM_ConfigClockSource+0x20>
 800383c:	2302      	movs	r3, #2
 800383e:	e0bc      	b.n	80039ba <HAL_TIM_ConfigClockSource+0x19a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	223c      	movs	r2, #60	; 0x3c
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223d      	movs	r2, #61	; 0x3d
 800384c:	2102      	movs	r1, #2
 800384e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2277      	movs	r2, #119	; 0x77
 800385c:	4393      	bics	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	0192      	lsls	r2, r2, #6
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xde>
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	0192      	lsls	r2, r2, #6
 8003880:	4293      	cmp	r3, r2
 8003882:	d900      	bls.n	8003886 <HAL_TIM_ConfigClockSource+0x66>
 8003884:	e088      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	0152      	lsls	r2, r2, #5
 800388a:	4293      	cmp	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_TIM_ConfigClockSource+0x70>
 800388e:	e088      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x182>
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	0152      	lsls	r2, r2, #5
 8003894:	4293      	cmp	r3, r2
 8003896:	d900      	bls.n	800389a <HAL_TIM_ConfigClockSource+0x7a>
 8003898:	e07e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 800389a:	2b70      	cmp	r3, #112	; 0x70
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xb0>
 800389e:	d900      	bls.n	80038a2 <HAL_TIM_ConfigClockSource+0x82>
 80038a0:	e07a      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038a2:	2b60      	cmp	r3, #96	; 0x60
 80038a4:	d04f      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x126>
 80038a6:	d900      	bls.n	80038aa <HAL_TIM_ConfigClockSource+0x8a>
 80038a8:	e076      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b50      	cmp	r3, #80	; 0x50
 80038ac:	d03b      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x106>
 80038ae:	d900      	bls.n	80038b2 <HAL_TIM_ConfigClockSource+0x92>
 80038b0:	e072      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d057      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x146>
 80038b6:	d900      	bls.n	80038ba <HAL_TIM_ConfigClockSource+0x9a>
 80038b8:	e06e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038ba:	2b30      	cmp	r3, #48	; 0x30
 80038bc:	d063      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x166>
 80038be:	d86b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d060      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x166>
 80038c4:	d868      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d05d      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x166>
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d05b      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x166>
 80038ce:	e063      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	f000 fb68 	bl	8003fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2277      	movs	r2, #119	; 0x77
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
      break;
 80038fc:	e052      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390e:	f000 fb51 	bl	8003fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	01c9      	lsls	r1, r1, #7
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e03e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	001a      	movs	r2, r3
 8003934:	f000 fac4 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2150      	movs	r1, #80	; 0x50
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fb1e 	bl	8003f80 <TIM_ITRx_SetConfig>
      break;
 8003944:	e02e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	001a      	movs	r2, r3
 8003954:	f000 fae2 	bl	8003f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	0018      	movs	r0, r3
 8003960:	f000 fb0e 	bl	8003f80 <TIM_ITRx_SetConfig>
      break;
 8003964:	e01e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	001a      	movs	r2, r3
 8003974:	f000 faa4 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2140      	movs	r1, #64	; 0x40
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fafe 	bl	8003f80 <TIM_ITRx_SetConfig>
      break;
 8003984:	e00e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0019      	movs	r1, r3
 8003990:	0010      	movs	r0, r2
 8003992:	f000 faf5 	bl	8003f80 <TIM_ITRx_SetConfig>
      break;
 8003996:	e005      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003998:	230f      	movs	r3, #15
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
      break;
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	223d      	movs	r2, #61	; 0x3d
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	223c      	movs	r2, #60	; 0x3c
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]

  return status;
 80039b4:	230f      	movs	r3, #15
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	781b      	ldrb	r3, [r3, #0]
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	ffff00ff 	.word	0xffff00ff

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a34      	ldr	r2, [pc, #208]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d008      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2270      	movs	r2, #112	; 0x70
 80039f6:	4393      	bics	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	05db      	lsls	r3, r3, #23
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <TIM_Base_SetConfig+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_Base_SetConfig+0xfc>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	4393      	bics	r3, r2
 8003a56:	001a      	movs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d103      	bne.n	8003a9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40002000 	.word	0x40002000
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800
 8003ac4:	fffffcff 	.word	0xfffffcff

08003ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4393      	bics	r3, r2
 8003ada:	001a      	movs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2270      	movs	r2, #112	; 0x70
 8003af6:	4393      	bics	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2203      	movs	r2, #3
 8003afe:	4393      	bics	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4393      	bics	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <TIM_OC1_SetConfig+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_OC1_SetConfig+0x76>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <TIM_OC1_SetConfig+0xfc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC1_SetConfig+0x76>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <TIM_OC1_SetConfig+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC1_SetConfig+0x76>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <TIM_OC1_SetConfig+0x104>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10c      	bne.n	8003b58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2208      	movs	r2, #8
 8003b42:	4393      	bics	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2204      	movs	r2, #4
 8003b54:	4393      	bics	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <TIM_OC1_SetConfig+0xf8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_OC1_SetConfig+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <TIM_OC1_SetConfig+0xfc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <TIM_OC1_SetConfig+0xb0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <TIM_OC1_SetConfig+0x100>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_OC1_SetConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <TIM_OC1_SetConfig+0x104>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d111      	bne.n	8003b9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <TIM_OC1_SetConfig+0x108>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <TIM_OC1_SetConfig+0x10c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b006      	add	sp, #24
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800
 8003bd0:	fffffeff 	.word	0xfffffeff
 8003bd4:	fffffdff 	.word	0xfffffdff

08003bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	2210      	movs	r2, #16
 8003be8:	4393      	bics	r3, r2
 8003bea:	001a      	movs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <TIM_OC2_SetConfig+0xe8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <TIM_OC2_SetConfig+0xec>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2220      	movs	r2, #32
 8003c22:	4393      	bics	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <TIM_OC2_SetConfig+0xf0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10d      	bne.n	8003c56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	4393      	bics	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2240      	movs	r2, #64	; 0x40
 8003c52:	4393      	bics	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <TIM_OC2_SetConfig+0xf0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_OC2_SetConfig+0x9e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <TIM_OC2_SetConfig+0xf4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC2_SetConfig+0x9e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <TIM_OC2_SetConfig+0xf8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC2_SetConfig+0x9e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_OC2_SetConfig+0xfc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <TIM_OC2_SetConfig+0x100>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <TIM_OC2_SetConfig+0x104>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	ffff8fff 	.word	0xffff8fff
 8003cc4:	fffffcff 	.word	0xfffffcff
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800
 8003cd8:	fffffbff 	.word	0xfffffbff
 8003cdc:	fffff7ff 	.word	0xfffff7ff

08003ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4a35      	ldr	r2, [pc, #212]	; (8003dc4 <TIM_OC3_SetConfig+0xe4>)
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2270      	movs	r2, #112	; 0x70
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2203      	movs	r2, #3
 8003d14:	4393      	bics	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <TIM_OC3_SetConfig+0xe8>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <TIM_OC3_SetConfig+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10d      	bne.n	8003d5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <TIM_OC3_SetConfig+0xf0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <TIM_OC3_SetConfig+0xf4>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <TIM_OC3_SetConfig+0xec>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_OC3_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <TIM_OC3_SetConfig+0xf8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_OC3_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <TIM_OC3_SetConfig+0xfc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC3_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <TIM_OC3_SetConfig+0x100>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <TIM_OC3_SetConfig+0x104>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <TIM_OC3_SetConfig+0x108>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b006      	add	sp, #24
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	fffffeff 	.word	0xfffffeff
 8003dc8:	fffffdff 	.word	0xfffffdff
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	fffff7ff 	.word	0xfffff7ff
 8003dd4:	fffffbff 	.word	0xfffffbff
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800
 8003de4:	ffffefff 	.word	0xffffefff
 8003de8:	ffffdfff 	.word	0xffffdfff

08003dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <TIM_OC4_SetConfig+0xb0>)
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <TIM_OC4_SetConfig+0xb4>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <TIM_OC4_SetConfig+0xb8>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <TIM_OC4_SetConfig+0xbc>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC4_SetConfig+0xc0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00b      	beq.n	8003e64 <TIM_OC4_SetConfig+0x78>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <TIM_OC4_SetConfig+0xc4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_OC4_SetConfig+0x78>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <TIM_OC4_SetConfig+0xc8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC4_SetConfig+0x78>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <TIM_OC4_SetConfig+0xcc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d109      	bne.n	8003e78 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <TIM_OC4_SetConfig+0xd0>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b006      	add	sp, #24
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	ffffefff 	.word	0xffffefff
 8003ea0:	ffff8fff 	.word	0xffff8fff
 8003ea4:	fffffcff 	.word	0xfffffcff
 8003ea8:	ffffdfff 	.word	0xffffdfff
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	ffffbfff 	.word	0xffffbfff

08003ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4393      	bics	r3, r2
 8003eda:	001a      	movs	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	22f0      	movs	r2, #240	; 0xf0
 8003eea:	4393      	bics	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	220a      	movs	r2, #10
 8003efc:	4393      	bics	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	4393      	bics	r3, r2
 8003f30:	001a      	movs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <TIM_TI2_ConfigInputStage+0x60>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	031b      	lsls	r3, r3, #12
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	22a0      	movs	r2, #160	; 0xa0
 8003f58:	4393      	bics	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b006      	add	sp, #24
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	ffff0fff 	.word	0xffff0fff

08003f80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2270      	movs	r2, #112	; 0x70
 8003f94:	4393      	bics	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	609a      	str	r2, [r3, #8]
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <TIM_ETR_SetConfig+0x3c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b006      	add	sp, #24
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	ffff00ff 	.word	0xffff00ff

08003ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	221f      	movs	r2, #31
 8004004:	4013      	ands	r3, r2
 8004006:	2201      	movs	r2, #1
 8004008:	409a      	lsls	r2, r3
 800400a:	0013      	movs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	43d2      	mvns	r2, r2
 8004016:	401a      	ands	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	211f      	movs	r1, #31
 8004024:	400b      	ands	r3, r1
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4099      	lsls	r1, r3
 800402a:	000b      	movs	r3, r1
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b006      	add	sp, #24
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	223c      	movs	r2, #60	; 0x3c
 800404a:	5c9b      	ldrb	r3, [r3, r2]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004050:	2302      	movs	r3, #2
 8004052:	e047      	b.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	223c      	movs	r2, #60	; 0x3c
 8004058:	2101      	movs	r1, #1
 800405a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223d      	movs	r2, #61	; 0x3d
 8004060:	2102      	movs	r1, #2
 8004062:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2270      	movs	r2, #112	; 0x70
 8004078:	4393      	bics	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00f      	beq.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	05db      	lsls	r3, r3, #23
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d009      	beq.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d10c      	bne.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	4393      	bics	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	223d      	movs	r2, #61	; 0x3d
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223c      	movs	r2, #60	; 0x3c
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40014000 	.word	0x40014000

080040f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	223c      	movs	r2, #60	; 0x3c
 800410a:	5c9b      	ldrb	r3, [r3, r2]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004110:	2302      	movs	r3, #2
 8004112:	e03e      	b.n	8004192 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	223c      	movs	r2, #60	; 0x3c
 8004118:	2101      	movs	r1, #1
 800411a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	4393      	bics	r3, r2
 8004122:	001a      	movs	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004130:	401a      	ands	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800413e:	401a      	ands	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800414c:	401a      	ands	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800415a:	401a      	ands	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004168:	401a      	ands	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004176:	401a      	ands	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	223c      	movs	r2, #60	; 0x3c
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	fffffcff 	.word	0xfffffcff
 80041a0:	fffffbff 	.word	0xfffffbff
 80041a4:	fffff7ff 	.word	0xfffff7ff
 80041a8:	ffffefff 	.word	0xffffefff
 80041ac:	ffffdfff 	.word	0xffffdfff
 80041b0:	ffffbfff 	.word	0xffffbfff

080041b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e044      	b.n	8004250 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2278      	movs	r2, #120	; 0x78
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0018      	movs	r0, r3
 80041da:	f7fd fbb3 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2224      	movs	r2, #36	; 0x24
 80041e2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f830 	bl	800425c <UART_SetConfig>
 80041fc:	0003      	movs	r3, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e024      	b.n	8004250 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f9ab 	bl	800456c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	490d      	ldr	r1, [pc, #52]	; (8004258 <HAL_UART_Init+0xa4>)
 8004222:	400a      	ands	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	212a      	movs	r1, #42	; 0x2a
 8004232:	438a      	bics	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2101      	movs	r1, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 fa43 	bl	80046d4 <UART_CheckIdleState>
 800424e:	0003      	movs	r3, r0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}
 8004258:	ffffb7ff 	.word	0xffffb7ff

0800425c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004264:	231e      	movs	r3, #30
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4aaf      	ldr	r2, [pc, #700]	; (8004548 <UART_SetConfig+0x2ec>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4aaa      	ldr	r2, [pc, #680]	; (800454c <UART_SetConfig+0x2f0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4aa1      	ldr	r2, [pc, #644]	; (8004550 <UART_SetConfig+0x2f4>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <UART_SetConfig+0x2f8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d127      	bne.n	8004332 <UART_SetConfig+0xd6>
 80042e2:	4b9d      	ldr	r3, [pc, #628]	; (8004558 <UART_SetConfig+0x2fc>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	2203      	movs	r2, #3
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d00d      	beq.n	800430a <UART_SetConfig+0xae>
 80042ee:	d81b      	bhi.n	8004328 <UART_SetConfig+0xcc>
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d014      	beq.n	800431e <UART_SetConfig+0xc2>
 80042f4:	d818      	bhi.n	8004328 <UART_SetConfig+0xcc>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <UART_SetConfig+0xa4>
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d00a      	beq.n	8004314 <UART_SetConfig+0xb8>
 80042fe:	e013      	b.n	8004328 <UART_SetConfig+0xcc>
 8004300:	231f      	movs	r3, #31
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e065      	b.n	80043d6 <UART_SetConfig+0x17a>
 800430a:	231f      	movs	r3, #31
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e060      	b.n	80043d6 <UART_SetConfig+0x17a>
 8004314:	231f      	movs	r3, #31
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2204      	movs	r2, #4
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e05b      	b.n	80043d6 <UART_SetConfig+0x17a>
 800431e:	231f      	movs	r3, #31
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2208      	movs	r2, #8
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e056      	b.n	80043d6 <UART_SetConfig+0x17a>
 8004328:	231f      	movs	r3, #31
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2210      	movs	r2, #16
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e051      	b.n	80043d6 <UART_SetConfig+0x17a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a89      	ldr	r2, [pc, #548]	; (800455c <UART_SetConfig+0x300>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d134      	bne.n	80043a6 <UART_SetConfig+0x14a>
 800433c:	4b86      	ldr	r3, [pc, #536]	; (8004558 <UART_SetConfig+0x2fc>)
 800433e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004340:	23c0      	movs	r3, #192	; 0xc0
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	4013      	ands	r3, r2
 8004346:	22c0      	movs	r2, #192	; 0xc0
 8004348:	0292      	lsls	r2, r2, #10
 800434a:	4293      	cmp	r3, r2
 800434c:	d017      	beq.n	800437e <UART_SetConfig+0x122>
 800434e:	22c0      	movs	r2, #192	; 0xc0
 8004350:	0292      	lsls	r2, r2, #10
 8004352:	4293      	cmp	r3, r2
 8004354:	d822      	bhi.n	800439c <UART_SetConfig+0x140>
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	0292      	lsls	r2, r2, #10
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <UART_SetConfig+0x136>
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	0292      	lsls	r2, r2, #10
 8004362:	4293      	cmp	r3, r2
 8004364:	d81a      	bhi.n	800439c <UART_SetConfig+0x140>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <UART_SetConfig+0x118>
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	0252      	lsls	r2, r2, #9
 800436e:	4293      	cmp	r3, r2
 8004370:	d00a      	beq.n	8004388 <UART_SetConfig+0x12c>
 8004372:	e013      	b.n	800439c <UART_SetConfig+0x140>
 8004374:	231f      	movs	r3, #31
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e02b      	b.n	80043d6 <UART_SetConfig+0x17a>
 800437e:	231f      	movs	r3, #31
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e026      	b.n	80043d6 <UART_SetConfig+0x17a>
 8004388:	231f      	movs	r3, #31
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2204      	movs	r2, #4
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e021      	b.n	80043d6 <UART_SetConfig+0x17a>
 8004392:	231f      	movs	r3, #31
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	2208      	movs	r2, #8
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e01c      	b.n	80043d6 <UART_SetConfig+0x17a>
 800439c:	231f      	movs	r3, #31
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	2210      	movs	r2, #16
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e017      	b.n	80043d6 <UART_SetConfig+0x17a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6d      	ldr	r2, [pc, #436]	; (8004560 <UART_SetConfig+0x304>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d104      	bne.n	80043ba <UART_SetConfig+0x15e>
 80043b0:	231f      	movs	r3, #31
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e00d      	b.n	80043d6 <UART_SetConfig+0x17a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a69      	ldr	r2, [pc, #420]	; (8004564 <UART_SetConfig+0x308>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d104      	bne.n	80043ce <UART_SetConfig+0x172>
 80043c4:	231f      	movs	r3, #31
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e003      	b.n	80043d6 <UART_SetConfig+0x17a>
 80043ce:	231f      	movs	r3, #31
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2210      	movs	r2, #16
 80043d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	429a      	cmp	r2, r3
 80043e0:	d15c      	bne.n	800449c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80043e2:	231f      	movs	r3, #31
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d015      	beq.n	8004418 <UART_SetConfig+0x1bc>
 80043ec:	dc18      	bgt.n	8004420 <UART_SetConfig+0x1c4>
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d00d      	beq.n	800440e <UART_SetConfig+0x1b2>
 80043f2:	dc15      	bgt.n	8004420 <UART_SetConfig+0x1c4>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <UART_SetConfig+0x1a2>
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d005      	beq.n	8004408 <UART_SetConfig+0x1ac>
 80043fc:	e010      	b.n	8004420 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fe:	f7fe fac5 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004402:	0003      	movs	r3, r0
 8004404:	61bb      	str	r3, [r7, #24]
        break;
 8004406:	e012      	b.n	800442e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b57      	ldr	r3, [pc, #348]	; (8004568 <UART_SetConfig+0x30c>)
 800440a:	61bb      	str	r3, [r7, #24]
        break;
 800440c:	e00f      	b.n	800442e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fe fa41 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004412:	0003      	movs	r3, r0
 8004414:	61bb      	str	r3, [r7, #24]
        break;
 8004416:	e00a      	b.n	800442e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	61bb      	str	r3, [r7, #24]
        break;
 800441e:	e006      	b.n	800442e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004424:	231e      	movs	r3, #30
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
        break;
 800442c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d100      	bne.n	8004436 <UART_SetConfig+0x1da>
 8004434:	e07a      	b.n	800452c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	005a      	lsls	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	18d2      	adds	r2, r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f7fb fe5d 	bl	8000108 <__udivsi3>
 800444e:	0003      	movs	r3, r0
 8004450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d91c      	bls.n	8004492 <UART_SetConfig+0x236>
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	429a      	cmp	r2, r3
 8004460:	d217      	bcs.n	8004492 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	b29a      	uxth	r2, r3
 8004466:	200e      	movs	r0, #14
 8004468:	183b      	adds	r3, r7, r0
 800446a:	210f      	movs	r1, #15
 800446c:	438a      	bics	r2, r1
 800446e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	2207      	movs	r2, #7
 8004478:	4013      	ands	r3, r2
 800447a:	b299      	uxth	r1, r3
 800447c:	183b      	adds	r3, r7, r0
 800447e:	183a      	adds	r2, r7, r0
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	183a      	adds	r2, r7, r0
 800448c:	8812      	ldrh	r2, [r2, #0]
 800448e:	60da      	str	r2, [r3, #12]
 8004490:	e04c      	b.n	800452c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004492:	231e      	movs	r3, #30
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e047      	b.n	800452c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800449c:	231f      	movs	r3, #31
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d015      	beq.n	80044d2 <UART_SetConfig+0x276>
 80044a6:	dc18      	bgt.n	80044da <UART_SetConfig+0x27e>
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d00d      	beq.n	80044c8 <UART_SetConfig+0x26c>
 80044ac:	dc15      	bgt.n	80044da <UART_SetConfig+0x27e>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <UART_SetConfig+0x25c>
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d005      	beq.n	80044c2 <UART_SetConfig+0x266>
 80044b6:	e010      	b.n	80044da <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe fa68 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80044bc:	0003      	movs	r3, r0
 80044be:	61bb      	str	r3, [r7, #24]
        break;
 80044c0:	e012      	b.n	80044e8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c2:	4b29      	ldr	r3, [pc, #164]	; (8004568 <UART_SetConfig+0x30c>)
 80044c4:	61bb      	str	r3, [r7, #24]
        break;
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c8:	f7fe f9e4 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 80044cc:	0003      	movs	r3, r0
 80044ce:	61bb      	str	r3, [r7, #24]
        break;
 80044d0:	e00a      	b.n	80044e8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e006      	b.n	80044e8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044de:	231e      	movs	r3, #30
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
        break;
 80044e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01e      	beq.n	800452c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085a      	lsrs	r2, r3, #1
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	18d2      	adds	r2, r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0019      	movs	r1, r3
 80044fe:	0010      	movs	r0, r2
 8004500:	f7fb fe02 	bl	8000108 <__udivsi3>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d90a      	bls.n	8004524 <UART_SetConfig+0x2c8>
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	025b      	lsls	r3, r3, #9
 8004514:	429a      	cmp	r2, r3
 8004516:	d205      	bcs.n	8004524 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	e003      	b.n	800452c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004524:	231e      	movs	r3, #30
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004538:	231e      	movs	r3, #30
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	781b      	ldrb	r3, [r3, #0]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b008      	add	sp, #32
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	efff69f3 	.word	0xefff69f3
 800454c:	ffffcfff 	.word	0xffffcfff
 8004550:	fffff4ff 	.word	0xfffff4ff
 8004554:	40013800 	.word	0x40013800
 8004558:	40021000 	.word	0x40021000
 800455c:	40004400 	.word	0x40004400
 8004560:	40004800 	.word	0x40004800
 8004564:	40004c00 	.word	0x40004c00
 8004568:	007a1200 	.word	0x007a1200

0800456c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2201      	movs	r2, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d00b      	beq.n	8004596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a4a      	ldr	r2, [pc, #296]	; (80046b0 <UART_AdvFeatureConfig+0x144>)
 8004586:	4013      	ands	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2202      	movs	r2, #2
 800459c:	4013      	ands	r3, r2
 800459e:	d00b      	beq.n	80045b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4a43      	ldr	r2, [pc, #268]	; (80046b4 <UART_AdvFeatureConfig+0x148>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d00b      	beq.n	80045da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <UART_AdvFeatureConfig+0x14c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2208      	movs	r2, #8
 80045e0:	4013      	ands	r3, r2
 80045e2:	d00b      	beq.n	80045fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4a34      	ldr	r2, [pc, #208]	; (80046bc <UART_AdvFeatureConfig+0x150>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2210      	movs	r2, #16
 8004602:	4013      	ands	r3, r2
 8004604:	d00b      	beq.n	800461e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <UART_AdvFeatureConfig+0x154>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2220      	movs	r2, #32
 8004624:	4013      	ands	r3, r2
 8004626:	d00b      	beq.n	8004640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <UART_AdvFeatureConfig+0x158>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	4013      	ands	r3, r2
 8004648:	d01d      	beq.n	8004686 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <UART_AdvFeatureConfig+0x15c>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	035b      	lsls	r3, r3, #13
 800466a:	429a      	cmp	r2, r3
 800466c:	d10b      	bne.n	8004686 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <UART_AdvFeatureConfig+0x160>)
 8004676:	4013      	ands	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	4013      	ands	r3, r2
 800468e:	d00b      	beq.n	80046a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <UART_AdvFeatureConfig+0x164>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	fffdffff 	.word	0xfffdffff
 80046b4:	fffeffff 	.word	0xfffeffff
 80046b8:	fffbffff 	.word	0xfffbffff
 80046bc:	ffff7fff 	.word	0xffff7fff
 80046c0:	ffffefff 	.word	0xffffefff
 80046c4:	ffffdfff 	.word	0xffffdfff
 80046c8:	ffefffff 	.word	0xffefffff
 80046cc:	ff9fffff 	.word	0xff9fffff
 80046d0:	fff7ffff 	.word	0xfff7ffff

080046d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b092      	sub	sp, #72	; 0x48
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2284      	movs	r2, #132	; 0x84
 80046e0:	2100      	movs	r1, #0
 80046e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046e4:	f7fd f9fe 	bl	8001ae4 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2208      	movs	r2, #8
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d12c      	bne.n	8004754 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	0391      	lsls	r1, r2, #14
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4a46      	ldr	r2, [pc, #280]	; (800481c <UART_CheckIdleState+0x148>)
 8004704:	9200      	str	r2, [sp, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	f000 f88c 	bl	8004824 <UART_WaitOnFlagUntilTimeout>
 800470c:	1e03      	subs	r3, r0, #0
 800470e:	d021      	beq.n	8004754 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004710:	f3ef 8310 	mrs	r3, PRIMASK
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
 800471a:	2301      	movs	r3, #1
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	438a      	bics	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2278      	movs	r2, #120	; 0x78
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e05f      	b.n	8004814 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2204      	movs	r2, #4
 800475c:	4013      	ands	r3, r2
 800475e:	2b04      	cmp	r3, #4
 8004760:	d146      	bne.n	80047f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	03d1      	lsls	r1, r2, #15
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <UART_CheckIdleState+0x148>)
 800476c:	9200      	str	r2, [sp, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	f000 f858 	bl	8004824 <UART_WaitOnFlagUntilTimeout>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d03b      	beq.n	80047f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004778:	f3ef 8310 	mrs	r3, PRIMASK
 800477c:	60fb      	str	r3, [r7, #12]
  return(result);
 800477e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
 8004782:	2301      	movs	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4921      	ldr	r1, [pc, #132]	; (8004820 <UART_CheckIdleState+0x14c>)
 800479a:	400a      	ands	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f383 8810 	msr	PRIMASK, r3
}
 80047a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047aa:	f3ef 8310 	mrs	r3, PRIMASK
 80047ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
 80047b4:	2301      	movs	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	438a      	bics	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	2120      	movs	r1, #32
 80047e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2278      	movs	r2, #120	; 0x78
 80047e8:	2100      	movs	r1, #0
 80047ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e011      	b.n	8004814 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	2120      	movs	r1, #32
 80047fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2278      	movs	r2, #120	; 0x78
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b010      	add	sp, #64	; 0x40
 800481a:	bd80      	pop	{r7, pc}
 800481c:	01ffffff 	.word	0x01ffffff
 8004820:	fffffedf 	.word	0xfffffedf

08004824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004834:	e04b      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3301      	adds	r3, #1
 800483a:	d048      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fd f952 	bl	8001ae4 <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <UART_WaitOnFlagUntilTimeout+0x2e>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e04b      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2204      	movs	r2, #4
 800485e:	4013      	ands	r3, r2
 8004860:	d035      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2208      	movs	r2, #8
 800486a:	4013      	ands	r3, r2
 800486c:	2b08      	cmp	r3, #8
 800486e:	d111      	bne.n	8004894 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2208      	movs	r2, #8
 8004876:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 f83c 	bl	80048f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2284      	movs	r2, #132	; 0x84
 8004884:	2108      	movs	r1, #8
 8004886:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2278      	movs	r2, #120	; 0x78
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e02c      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	401a      	ands	r2, r3
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d112      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 f81f 	bl	80048f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2284      	movs	r2, #132	; 0x84
 80048be:	2120      	movs	r1, #32
 80048c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2278      	movs	r2, #120	; 0x78
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00f      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	425a      	negs	r2, r3
 80048de:	4153      	adcs	r3, r2
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	001a      	movs	r2, r3
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d0a4      	beq.n	8004836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b004      	add	sp, #16
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08e      	sub	sp, #56	; 0x38
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
 8004904:	617b      	str	r3, [r7, #20]
  return(result);
 8004906:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4926      	ldr	r1, [pc, #152]	; (80049bc <UART_EndRxTransfer+0xc4>)
 8004922:	400a      	ands	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8310 	mrs	r3, PRIMASK
 8004936:	623b      	str	r3, [r7, #32]
  return(result);
 8004938:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
 800493c:	2301      	movs	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	438a      	bics	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f383 8810 	msr	PRIMASK, r3
}
 8004962:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004968:	2b01      	cmp	r3, #1
 800496a:	d118      	bne.n	800499e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	60bb      	str	r3, [r7, #8]
  return(result);
 8004972:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004976:	2301      	movs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2110      	movs	r1, #16
 800498e:	438a      	bics	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	2120      	movs	r1, #32
 80049a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b00e      	add	sp, #56	; 0x38
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	fffffedf 	.word	0xfffffedf

080049c0 <memset>:
 80049c0:	0003      	movs	r3, r0
 80049c2:	1882      	adds	r2, r0, r2
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <memset+0xa>
 80049c8:	4770      	bx	lr
 80049ca:	7019      	strb	r1, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	e7f9      	b.n	80049c4 <memset+0x4>

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	2600      	movs	r6, #0
 80049d4:	4c0c      	ldr	r4, [pc, #48]	; (8004a08 <__libc_init_array+0x38>)
 80049d6:	4d0d      	ldr	r5, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	2600      	movs	r6, #0
 80049e2:	f000 f819 	bl	8004a18 <_init>
 80049e6:	4c0a      	ldr	r4, [pc, #40]	; (8004a10 <__libc_init_array+0x40>)
 80049e8:	4d0a      	ldr	r5, [pc, #40]	; (8004a14 <__libc_init_array+0x44>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	00b3      	lsls	r3, r6, #2
 80049f6:	58eb      	ldr	r3, [r5, r3]
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	00b3      	lsls	r3, r6, #2
 8004a00:	58eb      	ldr	r3, [r5, r3]
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08004a70 	.word	0x08004a70
 8004a0c:	08004a70 	.word	0x08004a70
 8004a10:	08004a74 	.word	0x08004a74
 8004a14:	08004a70 	.word	0x08004a70

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
