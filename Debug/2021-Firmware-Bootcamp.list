
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080039b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  2000000c  080039c0  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000015c  080039c0  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e8aa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fc0  00000000  00000000  0002e8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000db0  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cc8  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00019c67  00000000  00000000  00032318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001109f  00000000  00000000  0004bf7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00096be3  00000000  00000000  0005d01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000f3c01  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030b4  00000000  00000000  000f3c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800395c 	.word	0x0800395c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800395c 	.word	0x0800395c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fb8b 	bl	800394c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b41      	ldr	r3, [pc, #260]	; (800033c <MX_GPIO_Init+0x11c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b40      	ldr	r3, [pc, #256]	; (800033c <MX_GPIO_Init+0x11c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <MX_GPIO_Init+0x11c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <MX_GPIO_Init+0x11c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x11c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x11c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <MX_GPIO_Init+0x11c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b32      	ldr	r3, [pc, #200]	; (800033c <MX_GPIO_Init+0x11c>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b2f      	ldr	r3, [pc, #188]	; (800033c <MX_GPIO_Init+0x11c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b2c      	ldr	r3, [pc, #176]	; (800033c <MX_GPIO_Init+0x11c>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <MX_GPIO_Init+0x11c>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b28      	ldr	r3, [pc, #160]	; (800033c <MX_GPIO_Init+0x11c>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fe20 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	4821      	ldr	r0, [pc, #132]	; (8000340 <MX_GPIO_Init+0x120>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0019      	movs	r1, r3
 80002be:	f000 fe19 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0192      	lsls	r2, r2, #6
 80002c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2284      	movs	r2, #132	; 0x84
 80002ce:	0392      	lsls	r2, r2, #14
 80002d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_GPIO_Init+0x124>)
 80002dc:	0019      	movs	r1, r3
 80002de:	0010      	movs	r0, r2
 80002e0:	f000 fc90 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2220      	movs	r2, #32
 80002e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2201      	movs	r2, #1
 80002ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	193a      	adds	r2, r7, r4
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fc7d 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800030a:	0021      	movs	r1, r4
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	187b      	adds	r3, r7, r1
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <MX_GPIO_Init+0x120>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f000 fc69 	bl	8000c04 <HAL_GPIO_Init>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b00b      	add	sp, #44	; 0x2c
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400
 8000344:	48000800 	.word	0x48000800

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b092      	sub	sp, #72	; 0x48
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int data_in[4] = {1, 0, 0, 0};
 800034e:	2138      	movs	r1, #56	; 0x38
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fb10 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f82a 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff ff56 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000374:	f000 fa64 	bl	8000840 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000378:	f000 f87c 	bl	8000474 <MX_SPI1_Init>
  MX_TIM1_Init();
 800037c:	f000 f96a 	bl	8000654 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA, 8, GPIO_PIN_SET);
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fdb3 	bl	8000ef4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)data_in, 4, 100);
 800038e:	2338      	movs	r3, #56	; 0x38
 8000390:	18f9      	adds	r1, r7, r3
 8000392:	480b      	ldr	r0, [pc, #44]	; (80003c0 <main+0x78>)
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	2204      	movs	r2, #4
 8000398:	f001 fc80 	bl	8001c9c <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, (uint8_t *)data_out, 14, 100);
 800039c:	0039      	movs	r1, r7
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <main+0x78>)
 80003a0:	2364      	movs	r3, #100	; 0x64
 80003a2:	220e      	movs	r2, #14
 80003a4:	f001 fdd2 	bl	8001f4c <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, 8, GPIO_PIN_RESET);
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2200      	movs	r2, #0
 80003ae:	2108      	movs	r1, #8
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fd9f 	bl	8000ef4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f000 fb4c 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, 8, GPIO_PIN_SET);
 80003bc:	e7e0      	b.n	8000380 <main+0x38>
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000028 	.word	0x20000028

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b099      	sub	sp, #100	; 0x64
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	242c      	movs	r4, #44	; 0x2c
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	2334      	movs	r3, #52	; 0x34
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f003 fab9 	bl	800394c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003da:	231c      	movs	r3, #28
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	0018      	movs	r0, r3
 80003e0:	2310      	movs	r3, #16
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f003 fab1 	bl	800394c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ea:	003b      	movs	r3, r7
 80003ec:	0018      	movs	r0, r3
 80003ee:	231c      	movs	r3, #28
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f003 faaa 	bl	800394c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	2220      	movs	r2, #32
 80003fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	2201      	movs	r2, #1
 8000402:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	193b      	adds	r3, r7, r4
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fd8f 	bl	8000f30 <HAL_RCC_OscConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000416:	f000 f828 	bl	800046a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	211c      	movs	r1, #28
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2207      	movs	r2, #7
 8000420:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2203      	movs	r2, #3
 8000426:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2101      	movs	r1, #1
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f8ff 	bl	800163c <HAL_RCC_ClockConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000442:	f000 f812 	bl	800046a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000446:	003b      	movs	r3, r7
 8000448:	2202      	movs	r2, #2
 800044a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fa6b 	bl	8001930 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800045e:	f000 f804 	bl	800046a <Error_Handler>
  }
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b019      	add	sp, #100	; 0x64
 8000468:	bd90      	pop	{r4, r7, pc}

0800046a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046e:	b672      	cpsid	i
}
 8000470:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000472:	e7fe      	b.n	8000472 <Error_Handler+0x8>

08000474 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_SPI1_Init+0x74>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_SPI1_Init+0x78>)
 800047c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000480:	2282      	movs	r2, #130	; 0x82
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_SPI1_Init+0x74>)
 800048e:	22e0      	movs	r2, #224	; 0xe0
 8000490:	00d2      	lsls	r2, r2, #3
 8000492:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004aa:	2218      	movs	r2, #24
 80004ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c2:	2207      	movs	r2, #7
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fb29 	bl	8001b2c <HAL_SPI_Init>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f7ff ffc4 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40013000 	.word	0x40013000

080004f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b08b      	sub	sp, #44	; 0x2c
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	2414      	movs	r4, #20
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2314      	movs	r3, #20
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 fa22 	bl	800394c <memset>
  if(spiHandle->Instance==SPI1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a2e      	ldr	r2, [pc, #184]	; (80005c8 <HAL_SPI_MspInit+0xd8>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d155      	bne.n	80005be <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000514:	699a      	ldr	r2, [r3, #24]
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0149      	lsls	r1, r1, #5
 800051c:	430a      	orrs	r2, r1
 800051e:	619a      	str	r2, [r3, #24]
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000522:	699a      	ldr	r2, [r3, #24]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	015b      	lsls	r3, r3, #5
 8000528:	4013      	ands	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0289      	lsls	r1, r1, #10
 8000538:	430a      	orrs	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	029b      	lsls	r3, r3, #10
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	02c9      	lsls	r1, r1, #11
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <HAL_SPI_MspInit+0xdc>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	02db      	lsls	r3, r3, #11
 8000560:	4013      	ands	r3, r2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	22c0      	movs	r2, #192	; 0xc0
 800056a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2202      	movs	r2, #2
 8000570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2203      	movs	r2, #3
 800057c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	193a      	adds	r2, r7, r4
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fb39 	bl	8000c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2208      	movs	r2, #8
 8000598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2202      	movs	r2, #2
 800059e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2203      	movs	r2, #3
 80005aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_SPI_MspInit+0xe0>)
 80005b6:	0019      	movs	r1, r3
 80005b8:	0010      	movs	r0, r2
 80005ba:	f000 fb23 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b00b      	add	sp, #44	; 0x2c
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40013000 	.word	0x40013000
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	619a      	str	r2, [r3, #24]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0549      	lsls	r1, r1, #21
 80005fc:	430a      	orrs	r2, r1
 80005fe:	61da      	str	r2, [r3, #28]
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_MspInit+0x44>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	055b      	lsls	r3, r3, #21
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f9ec 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b092      	sub	sp, #72	; 0x48
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2308      	movs	r3, #8
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f971 	bl	800394c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066a:	2324      	movs	r3, #36	; 0x24
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	231c      	movs	r3, #28
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f003 f969 	bl	800394c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	0018      	movs	r0, r3
 800067e:	2320      	movs	r3, #32
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f003 f962 	bl	800394c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000688:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <MX_TIM1_Init+0x120>)
 800068a:	4a3b      	ldr	r2, [pc, #236]	; (8000778 <MX_TIM1_Init+0x124>)
 800068c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <MX_TIM1_Init+0x120>)
 8000690:	2210      	movs	r2, #16
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <MX_TIM1_Init+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800069a:	4b36      	ldr	r3, [pc, #216]	; (8000774 <MX_TIM1_Init+0x120>)
 800069c:	4a37      	ldr	r2, [pc, #220]	; (800077c <MX_TIM1_Init+0x128>)
 800069e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b34      	ldr	r3, [pc, #208]	; (8000774 <MX_TIM1_Init+0x120>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <MX_TIM1_Init+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b31      	ldr	r3, [pc, #196]	; (8000774 <MX_TIM1_Init+0x120>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <MX_TIM1_Init+0x120>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f002 f93b 	bl	8002930 <HAL_TIM_PWM_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f7ff fed4 	bl	800046a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d0:	187a      	adds	r2, r7, r1
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_TIM1_Init+0x120>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 fcbc 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f7ff fec3 	bl	800046a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2124      	movs	r1, #36	; 0x24
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2260      	movs	r2, #96	; 0x60
 80006ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000710:	1879      	adds	r1, r7, r1
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_TIM1_Init+0x120>)
 8000714:	2200      	movs	r2, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f95a 	bl	80029d0 <HAL_TIM_PWM_ConfigChannel>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000720:	f7ff fea3 	bl	800046a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0192      	lsls	r2, r2, #6
 8000748:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_TIM1_Init+0x120>)
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fcda 	bl	8003110 <HAL_TIMEx_ConfigBreakDeadTime>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000760:	f7ff fe83 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <MX_TIM1_Init+0x120>)
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f82a 	bl	80007c0 <HAL_TIM_MspPostInit>

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b012      	add	sp, #72	; 0x48
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000008c 	.word	0x2000008c
 8000778:	40012c00 	.word	0x40012c00
 800077c:	0000ea60 	.word	0x0000ea60

08000780 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_TIM_PWM_MspInit+0x38>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10d      	bne.n	80007ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PWM_MspInit+0x3c>)
 8000794:	699a      	ldr	r2, [r3, #24]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_TIM_PWM_MspInit+0x3c>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0109      	lsls	r1, r1, #4
 800079c:	430a      	orrs	r2, r1
 800079e:	619a      	str	r2, [r3, #24]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_TIM_PWM_MspInit+0x3c>)
 80007a2:	699a      	ldr	r2, [r3, #24]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b004      	add	sp, #16
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	240c      	movs	r4, #12
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 f8ba 	bl	800394c <memset>
  if(timHandle->Instance==TIM1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a16      	ldr	r2, [pc, #88]	; (8000838 <HAL_TIM_MspPostInit+0x78>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d125      	bne.n	800082e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_TIM_MspPostInit+0x7c>)
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_TIM_MspPostInit+0x7c>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_TIM_MspPostInit+0x7c>)
 80007f2:	695a      	ldr	r2, [r3, #20]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2202      	movs	r2, #2
 800081e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	187a      	adds	r2, r7, r1
 8000822:	2390      	movs	r3, #144	; 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 f9eb 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b009      	add	sp, #36	; 0x24
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40012c00 	.word	0x40012c00
 800083c:	40021000 	.word	0x40021000

08000840 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800084c:	2296      	movs	r2, #150	; 0x96
 800084e:	0212      	lsls	r2, r2, #8
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fca1 	bl	80031cc <HAL_UART_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f7ff fdec 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000d4 	.word	0x200000d4
 800089c:	40004400 	.word	0x40004400

080008a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2414      	movs	r4, #20
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 f84a 	bl	800394c <memset>
  if(uartHandle->Instance==USART2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <HAL_UART_MspInit+0x90>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d132      	bne.n	8000928 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008c4:	69da      	ldr	r2, [r3, #28]
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	61da      	str	r2, [r3, #28]
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008d2:	69da      	ldr	r2, [r3, #28]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x94>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2202      	movs	r2, #2
 8000906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2201      	movs	r2, #1
 8000918:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	187a      	adds	r2, r7, r1
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f96e 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b00b      	add	sp, #44	; 0x2c
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000962:	f7ff fe72 	bl	800064a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000966:	f002 ffcd 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fced 	bl	8000348 <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	080039b4 	.word	0x080039b4
  ldr r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000984:	2000015c 	.word	0x2000015c

08000988 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_COMP_IRQHandler>
	...

0800098c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_Init+0x24>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_Init+0x24>)
 8000996:	2110      	movs	r1, #16
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f809 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff fe17 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fb9d 	bl	8000108 <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f905 	bl	8000bea <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8e2 	bl	8000bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000158 	.word	0x20000158

08000a40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000158 	.word	0x20000158

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fff0 	bl	8000a40 <HAL_GetTick>
 8000a60:	0003      	movs	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	001a      	movs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	f7ff ffe0 	bl	8000a40 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab0:	d828      	bhi.n	8000b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	33c0      	adds	r3, #192	; 0xc0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	589b      	ldr	r3, [r3, r2]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	33c0      	adds	r3, #192	; 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b02:	e031      	b.n	8000b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	400b      	ands	r3, r1
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3306      	adds	r3, #6
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	; 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001c      	movs	r4, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	4023      	ands	r3, r4
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	3306      	adds	r3, #6
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	3304      	adds	r3, #4
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	045b      	lsls	r3, r3, #17
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d301      	bcc.n	8000b90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e010      	b.n	8000bb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SysTick_Config+0x44>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	3a01      	subs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff7c 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x44>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	210f      	movs	r1, #15
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffbf 	bl	8000b78 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e155      	b.n	8000ec0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x28>
 8000c2a:	e146      	b.n	8000eba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	2201      	movs	r2, #1
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	58d3      	ldr	r3, [r2, r3]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2207      	movs	r2, #7
 8000d00:	4013      	ands	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2107      	movs	r1, #7
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2203      	movs	r2, #3
 8000d54:	401a      	ands	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x174>
 8000d76:	e0a0      	b.n	8000eba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x2d8>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	589b      	ldr	r3, [r3, r2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	2390      	movs	r3, #144	; 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_GPIO_Init+0x2dc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x1ea>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x1e6>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a44      	ldr	r2, [pc, #272]	; (8000eec <HAL_GPIO_Init+0x2e8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x1de>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e008      	b.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000de2:	2305      	movs	r3, #5
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000df2:	2300      	movs	r3, #0
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2103      	movs	r1, #3
 8000df8:	400a      	ands	r2, r1
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e04:	4935      	ldr	r1, [pc, #212]	; (8000edc <HAL_GPIO_Init+0x2d8>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	035b      	lsls	r3, r3, #13
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	039b      	lsls	r3, r3, #14
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	40da      	lsrs	r2, r3
 8000ec8:	1e13      	subs	r3, r2, #0
 8000eca:	d000      	beq.n	8000ece <HAL_GPIO_Init+0x2ca>
 8000ecc:	e6a2      	b.n	8000c14 <HAL_GPIO_Init+0x10>
  } 
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000c00 	.word	0x48000c00
 8000eec:	48001000 	.word	0x48001000
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	0008      	movs	r0, r1
 8000efe:	0011      	movs	r1, r2
 8000f00:	1cbb      	adds	r3, r7, #2
 8000f02:	1c02      	adds	r2, r0, #0
 8000f04:	801a      	strh	r2, [r3, #0]
 8000f06:	1c7b      	adds	r3, r7, #1
 8000f08:	1c0a      	adds	r2, r1, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f0c:	1c7b      	adds	r3, r7, #1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f14:	1cbb      	adds	r3, r7, #2
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f1e:	1cbb      	adds	r3, r7, #2
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f000 fb76 	bl	8001630 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <HAL_RCC_OscConfig+0x20>
 8000f4e:	e08e      	b.n	800106e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f50:	4bc5      	ldr	r3, [pc, #788]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d00e      	beq.n	8000f7a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f5c:	4bc2      	ldr	r3, [pc, #776]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	220c      	movs	r2, #12
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d117      	bne.n	8000f98 <HAL_RCC_OscConfig+0x68>
 8000f68:	4bbf      	ldr	r3, [pc, #764]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	23c0      	movs	r3, #192	; 0xc0
 8000f6e:	025b      	lsls	r3, r3, #9
 8000f70:	401a      	ands	r2, r3
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d10e      	bne.n	8000f98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	d100      	bne.n	8000f88 <HAL_RCC_OscConfig+0x58>
 8000f86:	e071      	b.n	800106c <HAL_RCC_OscConfig+0x13c>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_RCC_OscConfig+0x62>
 8000f90:	e06c      	b.n	800106c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f000 fb4c 	bl	8001630 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d107      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x80>
 8000fa0:	4bb1      	ldr	r3, [pc, #708]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4bb0      	ldr	r3, [pc, #704]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0249      	lsls	r1, r1, #9
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e02f      	b.n	8001010 <HAL_RCC_OscConfig+0xe0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0xa2>
 8000fb8:	4bab      	ldr	r3, [pc, #684]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4baa      	ldr	r3, [pc, #680]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	49ab      	ldr	r1, [pc, #684]	; (800126c <HAL_RCC_OscConfig+0x33c>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4ba8      	ldr	r3, [pc, #672]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4ba7      	ldr	r3, [pc, #668]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fca:	49a9      	ldr	r1, [pc, #676]	; (8001270 <HAL_RCC_OscConfig+0x340>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e01e      	b.n	8001010 <HAL_RCC_OscConfig+0xe0>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d10e      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xc8>
 8000fda:	4ba3      	ldr	r3, [pc, #652]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4ba2      	ldr	r3, [pc, #648]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	02c9      	lsls	r1, r1, #11
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	4b9f      	ldr	r3, [pc, #636]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b9e      	ldr	r3, [pc, #632]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	0249      	lsls	r1, r1, #9
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xe0>
 8000ff8:	4b9b      	ldr	r3, [pc, #620]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b9a      	ldr	r3, [pc, #616]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8000ffe:	499b      	ldr	r1, [pc, #620]	; (800126c <HAL_RCC_OscConfig+0x33c>)
 8001000:	400a      	ands	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	4b98      	ldr	r3, [pc, #608]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b97      	ldr	r3, [pc, #604]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800100a:	4999      	ldr	r1, [pc, #612]	; (8001270 <HAL_RCC_OscConfig+0x340>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d014      	beq.n	8001042 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fd12 	bl	8000a40 <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fd0d 	bl	8000a40 <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e2fd      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001034:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0xf2>
 8001040:	e015      	b.n	800106e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fcfd 	bl	8000a40 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fcf8 	bl	8000a40 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e2e8      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	4b82      	ldr	r3, [pc, #520]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	029b      	lsls	r3, r3, #10
 8001066:	4013      	ands	r3, r2
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x11c>
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x14a>
 8001078:	e06c      	b.n	8001154 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800107a:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	220c      	movs	r2, #12
 8001080:	4013      	ands	r3, r2
 8001082:	d00e      	beq.n	80010a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001084:	4b78      	ldr	r3, [pc, #480]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	220c      	movs	r2, #12
 800108a:	4013      	ands	r3, r2
 800108c:	2b08      	cmp	r3, #8
 800108e:	d11f      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1a0>
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	23c0      	movs	r3, #192	; 0xc0
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	401a      	ands	r2, r3
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	429a      	cmp	r2, r3
 80010a0:	d116      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	4b71      	ldr	r3, [pc, #452]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_OscConfig+0x188>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e2bb      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	22f8      	movs	r2, #248	; 0xf8
 80010be:	4393      	bics	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	e041      	b.n	8001154 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d024      	beq.n	8001122 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d8:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80010de:	2101      	movs	r1, #1
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcac 	bl	8000a40 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fca7 	bl	8000a40 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e297      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2202      	movs	r2, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d0f1      	beq.n	80010ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	22f8      	movs	r2, #248	; 0xf8
 8001110:	4393      	bics	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00da      	lsls	r2, r3, #3
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e018      	b.n	8001154 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001128:	2101      	movs	r1, #1
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fc87 	bl	8000a40 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fc82 	bl	8000a40 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e272      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d1f1      	bne.n	8001138 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2208      	movs	r2, #8
 800115a:	4013      	ands	r3, r2
 800115c:	d036      	beq.n	80011cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d019      	beq.n	800119a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff fc65 	bl	8000a40 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc60 	bl	8000a40 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e250      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d0f1      	beq.n	800117c <HAL_RCC_OscConfig+0x24c>
 8001198:	e018      	b.n	80011cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800119c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	438a      	bics	r2, r1
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fc4b 	bl	8000a40 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc46 	bl	8000a40 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e236      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f1      	bne.n	80011b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2204      	movs	r2, #4
 80011d2:	4013      	ands	r3, r2
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2a8>
 80011d6:	e0b5      	b.n	8001344 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d8:	201f      	movs	r0, #31
 80011da:	183b      	adds	r3, r7, r0
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	055b      	lsls	r3, r3, #21
 80011e8:	4013      	ands	r3, r2
 80011ea:	d110      	bne.n	800120e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011ee:	69da      	ldr	r2, [r3, #28]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0549      	lsls	r1, r1, #21
 80011f6:	430a      	orrs	r2, r1
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001208:	183b      	adds	r3, r7, r0
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_RCC_OscConfig+0x344>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4013      	ands	r3, r2
 8001218:	d11a      	bne.n	8001250 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_RCC_OscConfig+0x344>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x344>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0049      	lsls	r1, r1, #1
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001228:	f7ff fc0a 	bl	8000a40 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fc05 	bl	8000a40 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1f5      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_RCC_OscConfig+0x344>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4013      	ands	r3, r2
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10f      	bne.n	8001278 <HAL_RCC_OscConfig+0x348>
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_RCC_OscConfig+0x338>)
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	621a      	str	r2, [r3, #32]
 8001264:	e036      	b.n	80012d4 <HAL_RCC_OscConfig+0x3a4>
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000
 800126c:	fffeffff 	.word	0xfffeffff
 8001270:	fffbffff 	.word	0xfffbffff
 8001274:	40007000 	.word	0x40007000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <HAL_RCC_OscConfig+0x36a>
 8001280:	4bca      	ldr	r3, [pc, #808]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001282:	6a1a      	ldr	r2, [r3, #32]
 8001284:	4bc9      	ldr	r3, [pc, #804]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001286:	2101      	movs	r1, #1
 8001288:	438a      	bics	r2, r1
 800128a:	621a      	str	r2, [r3, #32]
 800128c:	4bc7      	ldr	r3, [pc, #796]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	4bc6      	ldr	r3, [pc, #792]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001292:	2104      	movs	r1, #4
 8001294:	438a      	bics	r2, r1
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	e01c      	b.n	80012d4 <HAL_RCC_OscConfig+0x3a4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x38c>
 80012a2:	4bc2      	ldr	r3, [pc, #776]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012a4:	6a1a      	ldr	r2, [r3, #32]
 80012a6:	4bc1      	ldr	r3, [pc, #772]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012a8:	2104      	movs	r1, #4
 80012aa:	430a      	orrs	r2, r1
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	4bbf      	ldr	r3, [pc, #764]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4bbe      	ldr	r3, [pc, #760]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0x3a4>
 80012bc:	4bbb      	ldr	r3, [pc, #748]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4bba      	ldr	r3, [pc, #744]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	621a      	str	r2, [r3, #32]
 80012c8:	4bb8      	ldr	r3, [pc, #736]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	4bb7      	ldr	r3, [pc, #732]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012ce:	2104      	movs	r1, #4
 80012d0:	438a      	bics	r2, r1
 80012d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d014      	beq.n	8001306 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fbb0 	bl	8000a40 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	e009      	b.n	80012fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fbab 	bl	8000a40 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4aaf      	ldr	r2, [pc, #700]	; (80015b0 <HAL_RCC_OscConfig+0x680>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e19a      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fa:	4bac      	ldr	r3, [pc, #688]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	2202      	movs	r2, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3b6>
 8001304:	e013      	b.n	800132e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb9b 	bl	8000a40 <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130e:	e009      	b.n	8001324 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f7ff fb96 	bl	8000a40 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4aa5      	ldr	r2, [pc, #660]	; (80015b0 <HAL_RCC_OscConfig+0x680>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e185      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4ba1      	ldr	r3, [pc, #644]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800132e:	231f      	movs	r3, #31
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	4b9b      	ldr	r3, [pc, #620]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800133e:	499d      	ldr	r1, [pc, #628]	; (80015b4 <HAL_RCC_OscConfig+0x684>)
 8001340:	400a      	ands	r2, r1
 8001342:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2210      	movs	r2, #16
 800134a:	4013      	ands	r3, r2
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d12a      	bne.n	80013ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001356:	4b95      	ldr	r3, [pc, #596]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135a:	4b94      	ldr	r3, [pc, #592]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800135c:	2104      	movs	r1, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001366:	4b91      	ldr	r3, [pc, #580]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001368:	2101      	movs	r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb67 	bl	8000a40 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001378:	f7ff fb62 	bl	8000a40 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e152      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	d0f1      	beq.n	8001378 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001394:	4b85      	ldr	r3, [pc, #532]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	22f8      	movs	r2, #248	; 0xf8
 800139a:	4393      	bics	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	00da      	lsls	r2, r3, #3
 80013a4:	4b81      	ldr	r3, [pc, #516]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
 80013aa:	e034      	b.n	8001416 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	3305      	adds	r3, #5
 80013b2:	d111      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013b4:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b8:	4b7c      	ldr	r3, [pc, #496]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013ba:	2104      	movs	r1, #4
 80013bc:	438a      	bics	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013c0:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	22f8      	movs	r2, #248	; 0xf8
 80013c6:	4393      	bics	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	00da      	lsls	r2, r3, #3
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	e01e      	b.n	8001416 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013d8:	4b74      	ldr	r3, [pc, #464]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013dc:	4b73      	ldr	r3, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013de:	2104      	movs	r1, #4
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013e4:	4b71      	ldr	r3, [pc, #452]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e8:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fb26 	bl	8000a40 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fa:	f7ff fb21 	bl	8000a40 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e111      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800140c:	4b67      	ldr	r3, [pc, #412]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d1f1      	bne.n	80013fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2220      	movs	r2, #32
 800141c:	4013      	ands	r3, r2
 800141e:	d05c      	beq.n	80014da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	220c      	movs	r2, #12
 8001426:	4013      	ands	r3, r2
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d00e      	beq.n	800144a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	220c      	movs	r2, #12
 8001432:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001434:	2b08      	cmp	r3, #8
 8001436:	d114      	bne.n	8001462 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	23c0      	movs	r3, #192	; 0xc0
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	401a      	ands	r2, r3
 8001442:	23c0      	movs	r3, #192	; 0xc0
 8001444:	025b      	lsls	r3, r3, #9
 8001446:	429a      	cmp	r2, r3
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800144c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4013      	ands	r3, r2
 8001454:	d040      	beq.n	80014d8 <HAL_RCC_OscConfig+0x5a8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d03c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e6      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fae2 	bl	8000a40 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001482:	f7ff fadd 	bl	8000a40 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0cd      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	025b      	lsls	r3, r3, #9
 800149c:	4013      	ands	r3, r2
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x552>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014a2:	4b42      	ldr	r3, [pc, #264]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80014a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80014a8:	4943      	ldr	r1, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x688>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fac7 	bl	8000a40 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b8:	f7ff fac2 	bl	8000a40 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0b2      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x588>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5b4>
 80014e2:	e0a4      	b.n	800162e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	220c      	movs	r2, #12
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5c2>
 80014f0:	e078      	b.n	80015e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d14c      	bne.n	8001594 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001500:	492e      	ldr	r1, [pc, #184]	; (80015bc <HAL_RCC_OscConfig+0x68c>)
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fa9b 	bl	8000a40 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fa96 	bl	8000a40 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e086      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	049b      	lsls	r3, r3, #18
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	220f      	movs	r2, #15
 8001534:	4393      	bics	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x690>)
 8001548:	4013      	ands	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	431a      	orrs	r2, r3
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001558:	430a      	orrs	r2, r1
 800155a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0449      	lsls	r1, r1, #17
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fa69 	bl	8000a40 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa64 	bl	8000a40 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	049b      	lsls	r3, r3, #18
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x644>
 8001592:	e04c      	b.n	800162e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_OscConfig+0x67c>)
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x68c>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa4e 	bl	8000a40 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x6a6>
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40021000 	.word	0x40021000
 80015b0:	00001388 	.word	0x00001388
 80015b4:	efffffff 	.word	0xefffffff
 80015b8:	fffeffff 	.word	0xfffeffff
 80015bc:	feffffff 	.word	0xfeffffff
 80015c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fa3c 	bl	8000a40 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e02c      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_RCC_OscConfig+0x708>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x694>
 80015e2:	e024      	b.n	800162e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e01f      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_RCC_OscConfig+0x708>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_RCC_OscConfig+0x708>)
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	429a      	cmp	r2, r3
 800160a:	d10e      	bne.n	800162a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	220f      	movs	r2, #15
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d107      	bne.n	800162a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	23f0      	movs	r3, #240	; 0xf0
 800161e:	039b      	lsls	r3, r3, #14
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b008      	add	sp, #32
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0bf      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d911      	bls.n	8001682 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b5b      	ldr	r3, [pc, #364]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0a6      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d015      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d006      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 800169c:	21e0      	movs	r1, #224	; 0xe0
 800169e:	00c9      	lsls	r1, r1, #3
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	22f0      	movs	r2, #240	; 0xf0
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d04c      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d120      	bne.n	8001718 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e07a      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	049b      	lsls	r3, r3, #18
 80016ea:	4013      	ands	r3, r2
 80016ec:	d114      	bne.n	8001718 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e06e      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	4013      	ands	r3, r2
 8001704:	d108      	bne.n	8001718 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e062      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e05b      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	4393      	bics	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff f988 	bl	8000a40 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f983 	bl	8000a40 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_RCC_ClockConfig+0x1a4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e042      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	220c      	movs	r2, #12
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1ec      	bne.n	8001736 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d211      	bcs.n	800178e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e020      	b.n	80017d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d009      	beq.n	80017ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x1a8>)
 800179e:	4013      	ands	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017ac:	f000 f820 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017b0:	0001      	movs	r1, r0
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	220f      	movs	r2, #15
 80017ba:	4013      	ands	r3, r2
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1ac>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	000a      	movs	r2, r1
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1b0>)
 80017c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff f8f3 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b004      	add	sp, #16
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	00001388 	.word	0x00001388
 80017e4:	fffff8ff 	.word	0xfffff8ff
 80017e8:	08003994 	.word	0x08003994
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b08f      	sub	sp, #60	; 0x3c
 80017f4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017f6:	2314      	movs	r3, #20
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_RCC_GetSysClockFreq+0xec>)
 80017fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4a36      	ldr	r2, [pc, #216]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001808:	ca13      	ldmia	r2!, {r0, r1, r4}
 800180a:	c313      	stmia	r3!, {r0, r1, r4}
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	220c      	movs	r2, #12
 800182e:	4013      	ands	r3, r2
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d047      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001834:	d849      	bhi.n	80018ca <HAL_RCC_GetSysClockFreq+0xda>
 8001836:	2b04      	cmp	r3, #4
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x50>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x56>
 800183e:	e044      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001844:	e044      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	220f      	movs	r2, #15
 800184c:	4013      	ands	r3, r2
 800184e:	2214      	movs	r2, #20
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	220f      	movs	r2, #15
 800185c:	4013      	ands	r3, r2
 800185e:	1d3a      	adds	r2, r7, #4
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	23c0      	movs	r3, #192	; 0xc0
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	401a      	ands	r2, r3
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	429a      	cmp	r2, r3
 8001872:	d109      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001876:	481c      	ldr	r0, [pc, #112]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001878:	f7fe fc46 	bl	8000108 <__udivsi3>
 800187c:	0003      	movs	r3, r0
 800187e:	001a      	movs	r2, r3
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	4353      	muls	r3, r2
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
 8001886:	e01a      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	401a      	ands	r2, r3
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	429a      	cmp	r2, r3
 8001896:	d109      	bne.n	80018ac <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189a:	4814      	ldr	r0, [pc, #80]	; (80018ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800189c:	f7fe fc34 	bl	8000108 <__udivsi3>
 80018a0:	0003      	movs	r3, r0
 80018a2:	001a      	movs	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	4353      	muls	r3, r2
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
 80018aa:	e008      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b0:	f7fe fc2a 	bl	8000108 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	001a      	movs	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4353      	muls	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c2:	e005      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_GetSysClockFreq+0xfc>)
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c8:	e002      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b00f      	add	sp, #60	; 0x3c
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	08003974 	.word	0x08003974
 80018e0:	08003984 	.word	0x08003984
 80018e4:	40021000 	.word	0x40021000
 80018e8:	007a1200 	.word	0x007a1200
 80018ec:	02dc6c00 	.word	0x02dc6c00

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_RCC_GetHCLKFreq+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001908:	f7ff fff2 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800190c:	0001      	movs	r1, r0
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	2207      	movs	r2, #7
 8001916:	4013      	ands	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_RCC_GetPCLK1Freq+0x28>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	40d9      	lsrs	r1, r3
 800191e:	000b      	movs	r3, r1
}    
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	40021000 	.word	0x40021000
 800192c:	080039a4 	.word	0x080039a4

08001930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800194c:	e08e      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2017      	movs	r0, #23
 8001950:	183b      	adds	r3, r7, r0
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	055b      	lsls	r3, r3, #21
 800195e:	4013      	ands	r3, r2
 8001960:	d110      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0549      	lsls	r1, r1, #21
 800196c:	430a      	orrs	r2, r1
 800196e:	61da      	str	r2, [r3, #28]
 8001970:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	055b      	lsls	r3, r3, #21
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197e:	183b      	adds	r3, r7, r0
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d11a      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff f84f 	bl	8000a40 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	e008      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7ff f84a 	bl	8000a40 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0a6      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019c6:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c8:	6a1a      	ldr	r2, [r3, #32]
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d034      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	23c0      	movs	r3, #192	; 0xc0
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d02c      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0249      	lsls	r1, r1, #9
 80019fc:	430a      	orrs	r2, r1
 80019fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a06:	4945      	ldr	r1, [pc, #276]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a0c:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f811 	bl	8000a40 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	e009      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff f80c 	bl	8000a40 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e067      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a34      	ldr	r2, [pc, #208]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a56:	2317      	movs	r3, #23
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a66:	492f      	ldr	r1, [pc, #188]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2220      	movs	r2, #32
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40007000 	.word	0x40007000
 8001b18:	fffffcff 	.word	0xfffffcff
 8001b1c:	fffeffff 	.word	0xfffeffff
 8001b20:	00001388 	.word	0x00001388
 8001b24:	efffffff 	.word	0xefffffff
 8001b28:	fffcffff 	.word	0xfffcffff

08001b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0a8      	b.n	8001c90 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	2382      	movs	r3, #130	; 0x82
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d009      	beq.n	8001b66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
 8001b58:	e005      	b.n	8001b66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	225d      	movs	r2, #93	; 0x5d
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	225c      	movs	r2, #92	; 0x5c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe fcb4 	bl	80004f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	225d      	movs	r2, #93	; 0x5d
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	23e0      	movs	r3, #224	; 0xe0
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d902      	bls.n	8001bb2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e002      	b.n	8001bb8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	015b      	lsls	r3, r3, #5
 8001bb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	23f0      	movs	r3, #240	; 0xf0
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d008      	beq.n	8001bd6 <HAL_SPI_Init+0xaa>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	23e0      	movs	r3, #224	; 0xe0
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2382      	movs	r3, #130	; 0x82
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	401a      	ands	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	2384      	movs	r3, #132	; 0x84
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	400b      	ands	r3, r1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6999      	ldr	r1, [r3, #24]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	400b      	ands	r3, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2138      	movs	r1, #56	; 0x38
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	0011      	movs	r1, r2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2110      	movs	r1, #16
 8001c44:	400b      	ands	r3, r1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	400b      	ands	r3, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	23f0      	movs	r3, #240	; 0xf0
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	0011      	movs	r1, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4907      	ldr	r1, [pc, #28]	; (8001c98 <HAL_SPI_Init+0x16c>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	225d      	movs	r2, #93	; 0x5d
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	fffff7ff 	.word	0xfffff7ff

08001c9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cac:	231f      	movs	r3, #31
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	225c      	movs	r2, #92	; 0x5c
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_SPI_Transmit+0x26>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e140      	b.n	8001f44 <HAL_SPI_Transmit+0x2a8>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	225c      	movs	r2, #92	; 0x5c
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cca:	f7fe feb9 	bl	8000a40 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001cd2:	2316      	movs	r3, #22
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	1dba      	adds	r2, r7, #6
 8001cd8:	8812      	ldrh	r2, [r2, #0]
 8001cda:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	225d      	movs	r2, #93	; 0x5d
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d004      	beq.n	8001cf2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ce8:	231f      	movs	r3, #31
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2202      	movs	r2, #2
 8001cee:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cf0:	e11d      	b.n	8001f2e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_SPI_Transmit+0x64>
 8001cf8:	1dbb      	adds	r3, r7, #6
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d08:	e111      	b.n	8001f2e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	225d      	movs	r2, #93	; 0x5d
 8001d0e:	2103      	movs	r1, #3
 8001d10:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1dba      	adds	r2, r7, #6
 8001d22:	8812      	ldrh	r2, [r2, #0]
 8001d24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1dba      	adds	r2, r7, #6
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2244      	movs	r2, #68	; 0x44
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2246      	movs	r2, #70	; 0x46
 8001d40:	2100      	movs	r1, #0
 8001d42:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d110      	bne.n	8001d7e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	01c9      	lsls	r1, r1, #7
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d007      	beq.n	8001d9c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	23e0      	movs	r3, #224	; 0xe0
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d94e      	bls.n	8001e46 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_SPI_Transmit+0x11e>
 8001db0:	2316      	movs	r3, #22
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d13f      	bne.n	8001e3a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	1c9a      	adds	r2, r3, #2
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dde:	e02c      	b.n	8001e3a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d112      	bne.n	8001e14 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	1c9a      	adds	r2, r3, #2
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e12:	e012      	b.n	8001e3a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e14:	f7fe fe14 	bl	8000a40 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d802      	bhi.n	8001e2a <HAL_SPI_Transmit+0x18e>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_SPI_Transmit+0x194>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001e30:	231f      	movs	r3, #31
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2203      	movs	r2, #3
 8001e36:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e38:	e079      	b.n	8001f2e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1cd      	bne.n	8001de0 <HAL_SPI_Transmit+0x144>
 8001e44:	e04f      	b.n	8001ee6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_SPI_Transmit+0x1bc>
 8001e4e:	2316      	movs	r3, #22
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d141      	bne.n	8001edc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	330c      	adds	r3, #12
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001e7e:	e02d      	b.n	8001edc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d113      	bne.n	8001eb6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	330c      	adds	r3, #12
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eb4:	e012      	b.n	8001edc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb6:	f7fe fdc3 	bl	8000a40 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d802      	bhi.n	8001ecc <HAL_SPI_Transmit+0x230>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Transmit+0x236>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001ed2:	231f      	movs	r3, #31
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]
          goto error;
 8001eda:	e028      	b.n	8001f2e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1cc      	bne.n	8001e80 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	6839      	ldr	r1, [r7, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 fcd9 	bl	80028a4 <SPI_EndRxTxTransaction>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001f22:	231f      	movs	r3, #31
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e000      	b.n	8001f2e <HAL_SPI_Transmit+0x292>
  }

error:
 8001f2c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	225d      	movs	r2, #93	; 0x5d
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	225c      	movs	r2, #92	; 0x5c
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f3e:	231f      	movs	r3, #31
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b008      	add	sp, #32
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f5c:	2317      	movs	r3, #23
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	2382      	movs	r3, #130	; 0x82
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d113      	bne.n	8001f98 <HAL_SPI_Receive+0x4c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10f      	bne.n	8001f98 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	225d      	movs	r2, #93	; 0x5d
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881c      	ldrh	r4, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	0023      	movs	r3, r4
 8001f90:	f000 f928 	bl	80021e4 <HAL_SPI_TransmitReceive>
 8001f94:	0003      	movs	r3, r0
 8001f96:	e11c      	b.n	80021d2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	225c      	movs	r2, #92	; 0x5c
 8001f9c:	5c9b      	ldrb	r3, [r3, r2]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_SPI_Receive+0x5a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e115      	b.n	80021d2 <HAL_SPI_Receive+0x286>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	225c      	movs	r2, #92	; 0x5c
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fae:	f7fe fd47 	bl	8000a40 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	225d      	movs	r2, #93	; 0x5d
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d004      	beq.n	8001fcc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8001fc2:	2317      	movs	r3, #23
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fca:	e0f7      	b.n	80021bc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_SPI_Receive+0x8e>
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d104      	bne.n	8001fe4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fe2:	e0eb      	b.n	80021bc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	225d      	movs	r2, #93	; 0x5d
 8001fe8:	2104      	movs	r1, #4
 8001fea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1dba      	adds	r2, r7, #6
 8001ffc:	2144      	movs	r1, #68	; 0x44
 8001ffe:	8812      	ldrh	r2, [r2, #0]
 8002000:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1dba      	adds	r2, r7, #6
 8002006:	2146      	movs	r1, #70	; 0x46
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	23e0      	movs	r3, #224	; 0xe0
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	429a      	cmp	r2, r3
 8002034:	d908      	bls.n	8002048 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4966      	ldr	r1, [pc, #408]	; (80021dc <HAL_SPI_Receive+0x290>)
 8002042:	400a      	ands	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e008      	b.n	800205a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	0149      	lsls	r1, r1, #5
 8002056:	430a      	orrs	r2, r1
 8002058:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	429a      	cmp	r2, r3
 8002064:	d10f      	bne.n	8002086 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_SPI_Receive+0x294>)
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d007      	beq.n	80020a4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	23e0      	movs	r3, #224	; 0xe0
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d900      	bls.n	80020b2 <HAL_SPI_Receive+0x166>
 80020b0:	e069      	b.n	8002186 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020b2:	e031      	b.n	8002118 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d117      	bne.n	80020f2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	001a      	movs	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2246      	movs	r2, #70	; 0x46
 80020e2:	5a9b      	ldrh	r3, [r3, r2]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b299      	uxth	r1, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2246      	movs	r2, #70	; 0x46
 80020ee:	5299      	strh	r1, [r3, r2]
 80020f0:	e012      	b.n	8002118 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe fca5 	bl	8000a40 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d802      	bhi.n	8002108 <HAL_SPI_Receive+0x1bc>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_SPI_Receive+0x1c2>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800210e:	2317      	movs	r3, #23
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2203      	movs	r2, #3
 8002114:	701a      	strb	r2, [r3, #0]
          goto error;
 8002116:	e051      	b.n	80021bc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2246      	movs	r2, #70	; 0x46
 800211c:	5a9b      	ldrh	r3, [r3, r2]
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1c7      	bne.n	80020b4 <HAL_SPI_Receive+0x168>
 8002124:	e035      	b.n	8002192 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	2b01      	cmp	r3, #1
 8002132:	d115      	bne.n	8002160 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	b292      	uxth	r2, r2
 8002140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	1c9a      	adds	r2, r3, #2
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2246      	movs	r2, #70	; 0x46
 8002150:	5a9b      	ldrh	r3, [r3, r2]
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b299      	uxth	r1, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2246      	movs	r2, #70	; 0x46
 800215c:	5299      	strh	r1, [r3, r2]
 800215e:	e012      	b.n	8002186 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002160:	f7fe fc6e 	bl	8000a40 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d802      	bhi.n	8002176 <HAL_SPI_Receive+0x22a>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_SPI_Receive+0x230>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800217c:	2317      	movs	r3, #23
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2203      	movs	r2, #3
 8002182:	701a      	strb	r2, [r3, #0]
          goto error;
 8002184:	e01a      	b.n	80021bc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2246      	movs	r2, #70	; 0x46
 800218a:	5a9b      	ldrh	r3, [r3, r2]
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1c9      	bne.n	8002126 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 fb25 	bl	80027e8 <SPI_EndRxTransaction>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80021b0:	2317      	movs	r3, #23
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e000      	b.n	80021bc <HAL_SPI_Receive+0x270>
  }

error :
 80021ba:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	225d      	movs	r2, #93	; 0x5d
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	225c      	movs	r2, #92	; 0x5c
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021cc:	2317      	movs	r3, #23
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b007      	add	sp, #28
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	ffffefff 	.word	0xffffefff
 80021e0:	ffffbfff 	.word	0xffffbfff

080021e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	001a      	movs	r2, r3
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021f6:	2301      	movs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021fa:	2323      	movs	r3, #35	; 0x23
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	225c      	movs	r2, #92	; 0x5c
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_SPI_TransmitReceive+0x2c>
 800220c:	2302      	movs	r3, #2
 800220e:	e1b5      	b.n	800257c <HAL_SPI_TransmitReceive+0x398>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	225c      	movs	r2, #92	; 0x5c
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002218:	f7fe fc12 	bl	8000a40 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002220:	201b      	movs	r0, #27
 8002222:	183b      	adds	r3, r7, r0
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	215d      	movs	r1, #93	; 0x5d
 8002228:	5c52      	ldrb	r2, [r2, r1]
 800222a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002232:	2312      	movs	r3, #18
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	1cba      	adds	r2, r7, #2
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d011      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x84>
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	2382      	movs	r3, #130	; 0x82
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	429a      	cmp	r2, r3
 800224c:	d107      	bne.n	800225e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_SPI_TransmitReceive+0x7a>
 8002256:	183b      	adds	r3, r7, r0
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d004      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800225e:	2323      	movs	r3, #35	; 0x23
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
    goto error;
 8002266:	e17e      	b.n	8002566 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_SPI_TransmitReceive+0x98>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_SPI_TransmitReceive+0x98>
 8002274:	1cbb      	adds	r3, r7, #2
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800227c:	2323      	movs	r3, #35	; 0x23
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    goto error;
 8002284:	e16f      	b.n	8002566 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	225d      	movs	r2, #93	; 0x5d
 800228a:	5c9b      	ldrb	r3, [r3, r2]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b04      	cmp	r3, #4
 8002290:	d003      	beq.n	800229a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	225d      	movs	r2, #93	; 0x5d
 8002296:	2105      	movs	r1, #5
 8002298:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1cba      	adds	r2, r7, #2
 80022aa:	2146      	movs	r1, #70	; 0x46
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1cba      	adds	r2, r7, #2
 80022b4:	2144      	movs	r1, #68	; 0x44
 80022b6:	8812      	ldrh	r2, [r2, #0]
 80022b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1cba      	adds	r2, r7, #2
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1cba      	adds	r2, r7, #2
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	23e0      	movs	r3, #224	; 0xe0
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d908      	bls.n	80022fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	49a4      	ldr	r1, [pc, #656]	; (8002584 <HAL_SPI_TransmitReceive+0x3a0>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	e008      	b.n	800230c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0149      	lsls	r1, r1, #5
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	4013      	ands	r3, r2
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d007      	beq.n	800232a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	23e0      	movs	r3, #224	; 0xe0
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	429a      	cmp	r2, r3
 8002334:	d800      	bhi.n	8002338 <HAL_SPI_TransmitReceive+0x154>
 8002336:	e07f      	b.n	8002438 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_SPI_TransmitReceive+0x168>
 8002340:	2312      	movs	r3, #18
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d000      	beq.n	800234c <HAL_SPI_TransmitReceive+0x168>
 800234a:	e069      	b.n	8002420 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	1c9a      	adds	r2, r3, #2
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002370:	e056      	b.n	8002420 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d11b      	bne.n	80023b8 <HAL_SPI_TransmitReceive+0x1d4>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_SPI_TransmitReceive+0x1d4>
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	2b01      	cmp	r3, #1
 800238e:	d113      	bne.n	80023b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	1c9a      	adds	r2, r3, #2
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11c      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x21c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2246      	movs	r2, #70	; 0x46
 80023ca:	5a9b      	ldrh	r3, [r3, r2]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	b292      	uxth	r2, r2
 80023de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	1c9a      	adds	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2246      	movs	r2, #70	; 0x46
 80023ee:	5a9b      	ldrh	r3, [r3, r2]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b299      	uxth	r1, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2246      	movs	r2, #70	; 0x46
 80023fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023fc:	2301      	movs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002400:	f7fe fb1e 	bl	8000a40 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240c:	429a      	cmp	r2, r3
 800240e:	d807      	bhi.n	8002420 <HAL_SPI_TransmitReceive+0x23c>
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	3301      	adds	r3, #1
 8002414:	d004      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002416:	2323      	movs	r3, #35	; 0x23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2203      	movs	r2, #3
 800241c:	701a      	strb	r2, [r3, #0]
        goto error;
 800241e:	e0a2      	b.n	8002566 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1a3      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x18e>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2246      	movs	r2, #70	; 0x46
 800242e:	5a9b      	ldrh	r3, [r3, r2]
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d19d      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x18e>
 8002436:	e085      	b.n	8002544 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_SPI_TransmitReceive+0x268>
 8002440:	2312      	movs	r3, #18
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d000      	beq.n	800244c <HAL_SPI_TransmitReceive+0x268>
 800244a:	e070      	b.n	800252e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	e05c      	b.n	800252e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d11c      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x2d8>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x2d8>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	2b01      	cmp	r3, #1
 8002490:	d114      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d11e      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x324>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2246      	movs	r2, #70	; 0x46
 80024ce:	5a9b      	ldrh	r3, [r3, r2]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d018      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	001a      	movs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2246      	movs	r2, #70	; 0x46
 80024f6:	5a9b      	ldrh	r3, [r3, r2]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b299      	uxth	r1, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2246      	movs	r2, #70	; 0x46
 8002502:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002504:	2301      	movs	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002508:	f7fe fa9a 	bl	8000a40 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002514:	429a      	cmp	r2, r3
 8002516:	d802      	bhi.n	800251e <HAL_SPI_TransmitReceive+0x33a>
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	3301      	adds	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x340>
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002524:	2323      	movs	r3, #35	; 0x23
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2203      	movs	r2, #3
 800252a:	701a      	strb	r2, [r3, #0]
        goto error;
 800252c:	e01b      	b.n	8002566 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d19d      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x290>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2246      	movs	r2, #70	; 0x46
 800253c:	5a9b      	ldrh	r3, [r3, r2]
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d197      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f9aa 	bl	80028a4 <SPI_EndRxTxTransaction>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d007      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002554:	2323      	movs	r3, #35	; 0x23
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	661a      	str	r2, [r3, #96]	; 0x60
 8002562:	e000      	b.n	8002566 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002564:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	225d      	movs	r2, #93	; 0x5d
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	225c      	movs	r2, #92	; 0x5c
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002576:	2323      	movs	r3, #35	; 0x23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b00a      	add	sp, #40	; 0x28
 8002582:	bd80      	pop	{r7, pc}
 8002584:	ffffefff 	.word	0xffffefff

08002588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002598:	f7fe fa52 	bl	8000a40 <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025a8:	f7fe fa4a 	bl	8000a40 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	015b      	lsls	r3, r3, #5
 80025b6:	0d1b      	lsrs	r3, r3, #20
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	4353      	muls	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025be:	e058      	b.n	8002672 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	d055      	beq.n	8002672 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025c6:	f7fe fa3b 	bl	8000a40 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d902      	bls.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d142      	bne.n	8002662 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	21e0      	movs	r1, #224	; 0xe0
 80025e8:	438a      	bics	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	2382      	movs	r3, #130	; 0x82
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d113      	bne.n	8002620 <SPI_WaitFlagStateUntilTimeout+0x98>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	429a      	cmp	r2, r3
 8002602:	d005      	beq.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	438a      	bics	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	019b      	lsls	r3, r3, #6
 8002628:	429a      	cmp	r2, r3
 800262a:	d110      	bne.n	800264e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	491a      	ldr	r1, [pc, #104]	; (80026a0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0189      	lsls	r1, r1, #6
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	225d      	movs	r2, #93	; 0x5d
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	225c      	movs	r2, #92	; 0x5c
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e017      	b.n	8002692 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3b01      	subs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	425a      	negs	r2, r3
 8002682:	4153      	adcs	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	001a      	movs	r2, r3
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d197      	bne.n	80025c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b008      	add	sp, #32
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	20000000 	.word	0x20000000
 80026a0:	ffffdfff 	.word	0xffffdfff

080026a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026b2:	2317      	movs	r3, #23
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ba:	f7fe f9c1 	bl	8000a40 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80026ca:	f7fe f9b9 	bl	8000a40 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	0013      	movs	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	00da      	lsls	r2, r3, #3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4353      	muls	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026f0:	e068      	b.n	80027c4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10a      	bne.n	8002712 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	2117      	movs	r1, #23
 800270a:	187b      	adds	r3, r7, r1
 800270c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800270e:	187b      	adds	r3, r7, r1
 8002710:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	d055      	beq.n	80027c4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002718:	f7fe f992 	bl	8000a40 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	429a      	cmp	r2, r3
 8002726:	d902      	bls.n	800272e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d142      	bne.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	21e0      	movs	r1, #224	; 0xe0
 800273a:	438a      	bics	r2, r1
 800273c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	2382      	movs	r3, #130	; 0x82
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	429a      	cmp	r2, r3
 8002748:	d113      	bne.n	8002772 <SPI_WaitFifoStateUntilTimeout+0xce>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	429a      	cmp	r2, r3
 8002754:	d005      	beq.n	8002762 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	429a      	cmp	r2, r3
 8002760:	d107      	bne.n	8002772 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	438a      	bics	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	429a      	cmp	r2, r3
 800277c:	d110      	bne.n	80027a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0189      	lsls	r1, r1, #6
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	225d      	movs	r2, #93	; 0x5d
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	225c      	movs	r2, #92	; 0x5c
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e010      	b.n	80027d6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d18e      	bne.n	80026f2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b00a      	add	sp, #40	; 0x28
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	20000000 	.word	0x20000000
 80027e4:	ffffdfff 	.word	0xffffdfff

080027e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	2382      	movs	r3, #130	; 0x82
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d113      	bne.n	8002828 <SPI_EndRxTransaction+0x40>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	429a      	cmp	r2, r3
 800280a:	d005      	beq.n	8002818 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	438a      	bics	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	0013      	movs	r3, r2
 8002832:	2200      	movs	r2, #0
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	f7ff fea7 	bl	8002588 <SPI_WaitFlagStateUntilTimeout>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d007      	beq.n	800284e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002842:	2220      	movs	r2, #32
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e026      	b.n	800289c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	2382      	movs	r3, #130	; 0x82
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	429a      	cmp	r2, r3
 8002858:	d11f      	bne.n	800289a <SPI_EndRxTransaction+0xb2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	429a      	cmp	r2, r3
 8002864:	d005      	beq.n	8002872 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	429a      	cmp	r2, r3
 8002870:	d113      	bne.n	800289a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	23c0      	movs	r3, #192	; 0xc0
 8002876:	00d9      	lsls	r1, r3, #3
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	0013      	movs	r3, r2
 8002880:	2200      	movs	r2, #0
 8002882:	f7ff ff0f 	bl	80026a4 <SPI_WaitFifoStateUntilTimeout>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d007      	beq.n	800289a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	2220      	movs	r2, #32
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e000      	b.n	800289c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	23c0      	movs	r3, #192	; 0xc0
 80028b4:	0159      	lsls	r1, r3, #5
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	0013      	movs	r3, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	f7ff fef0 	bl	80026a4 <SPI_WaitFifoStateUntilTimeout>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d007      	beq.n	80028d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	2220      	movs	r2, #32
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e027      	b.n	8002928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	0013      	movs	r3, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	f7ff fe4f 	bl	8002588 <SPI_WaitFlagStateUntilTimeout>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d007      	beq.n	80028fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f2:	2220      	movs	r2, #32
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e014      	b.n	8002928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	23c0      	movs	r3, #192	; 0xc0
 8002902:	00d9      	lsls	r1, r3, #3
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	0013      	movs	r3, r2
 800290c:	2200      	movs	r2, #0
 800290e:	f7ff fec9 	bl	80026a4 <SPI_WaitFifoStateUntilTimeout>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d007      	beq.n	8002926 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	2220      	movs	r2, #32
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e000      	b.n	8002928 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b004      	add	sp, #16
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e042      	b.n	80029c8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	223d      	movs	r2, #61	; 0x3d
 8002946:	5c9b      	ldrb	r3, [r3, r2]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223c      	movs	r2, #60	; 0x3c
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7fd ff11 	bl	8000780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	223d      	movs	r2, #61	; 0x3d
 8002962:	2102      	movs	r1, #2
 8002964:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	0019      	movs	r1, r3
 8002970:	0010      	movs	r0, r2
 8002972:	f000 f8f3 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2246      	movs	r2, #70	; 0x46
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223e      	movs	r2, #62	; 0x3e
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	223f      	movs	r2, #63	; 0x3f
 800298a:	2101      	movs	r1, #1
 800298c:	5499      	strb	r1, [r3, r2]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2241      	movs	r2, #65	; 0x41
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2242      	movs	r2, #66	; 0x42
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2243      	movs	r2, #67	; 0x43
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2244      	movs	r2, #68	; 0x44
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2245      	movs	r2, #69	; 0x45
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223d      	movs	r2, #61	; 0x3d
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	2317      	movs	r3, #23
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	223c      	movs	r2, #60	; 0x3c
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0ad      	b.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	223c      	movs	r2, #60	; 0x3c
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	d100      	bne.n	8002a02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a00:	e076      	b.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d900      	bls.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002a08:	e095      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d04e      	beq.n	8002aae <HAL_TIM_PWM_ConfigChannel+0xde>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d900      	bls.n	8002a18 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a16:	e08e      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d021      	beq.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002a24:	e087      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	0011      	movs	r1, r2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f914 	bl	8002c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2108      	movs	r1, #8
 8002a40:	430a      	orrs	r2, r1
 8002a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2104      	movs	r1, #4
 8002a50:	438a      	bics	r2, r1
 8002a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6999      	ldr	r1, [r3, #24]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	619a      	str	r2, [r3, #24]
      break;
 8002a66:	e06b      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	0011      	movs	r1, r2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f97b 	bl	8002d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0109      	lsls	r1, r1, #4
 8002a84:	430a      	orrs	r2, r1
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4931      	ldr	r1, [pc, #196]	; (8002b58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	619a      	str	r2, [r3, #24]
      break;
 8002aac:	e048      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f9dc 	bl	8002e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	438a      	bics	r2, r1
 8002ada:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69d9      	ldr	r1, [r3, #28]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
      break;
 8002aee:	e027      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fa41 	bl	8002f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0109      	lsls	r1, r1, #4
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	490f      	ldr	r1, [pc, #60]	; (8002b58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69d9      	ldr	r1, [r3, #28]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	021a      	lsls	r2, r3, #8
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
      break;
 8002b34:	e004      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b36:	2317      	movs	r3, #23
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	223c      	movs	r2, #60	; 0x3c
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

  return status;
 8002b48:	2317      	movs	r3, #23
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b006      	add	sp, #24
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	fffffbff 	.word	0xfffffbff

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <TIM_Base_SetConfig+0xe4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d008      	beq.n	8002b86 <TIM_Base_SetConfig+0x2a>
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x2a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <TIM_Base_SetConfig+0xe8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2270      	movs	r2, #112	; 0x70
 8002b8a:	4393      	bics	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <TIM_Base_SetConfig+0xe4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d013      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <TIM_Base_SetConfig+0xe8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00f      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <TIM_Base_SetConfig+0xec>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00b      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <TIM_Base_SetConfig+0xf0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <TIM_Base_SetConfig+0xf4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <TIM_Base_SetConfig+0xf8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	4393      	bics	r3, r2
 8002bea:	001a      	movs	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <TIM_Base_SetConfig+0xe4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <TIM_Base_SetConfig+0xce>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <TIM_Base_SetConfig+0xf0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0xce>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <TIM_Base_SetConfig+0xf4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0xce>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <TIM_Base_SetConfig+0xf8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d103      	bne.n	8002c32 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	615a      	str	r2, [r3, #20]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40002000 	.word	0x40002000
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40014400 	.word	0x40014400
 8002c54:	40014800 	.word	0x40014800
 8002c58:	fffffcff 	.word	0xfffffcff

08002c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	001a      	movs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2270      	movs	r2, #112	; 0x70
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2203      	movs	r2, #3
 8002c92:	4393      	bics	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <TIM_OC1_SetConfig+0xf8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_OC1_SetConfig+0x76>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <TIM_OC1_SetConfig+0xfc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_OC1_SetConfig+0x76>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_OC1_SetConfig+0x100>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_OC1_SetConfig+0x76>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <TIM_OC1_SetConfig+0x104>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4393      	bics	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <TIM_OC1_SetConfig+0xf8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_OC1_SetConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <TIM_OC1_SetConfig+0xfc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_OC1_SetConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <TIM_OC1_SetConfig+0x100>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_OC1_SetConfig+0xb0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <TIM_OC1_SetConfig+0x104>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d111      	bne.n	8002d30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <TIM_OC1_SetConfig+0x108>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <TIM_OC1_SetConfig+0x10c>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b006      	add	sp, #24
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800
 8002d64:	fffffeff 	.word	0xfffffeff
 8002d68:	fffffdff 	.word	0xfffffdff

08002d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	001a      	movs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <TIM_OC2_SetConfig+0xe8>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a2d      	ldr	r2, [pc, #180]	; (8002e58 <TIM_OC2_SetConfig+0xec>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4393      	bics	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <TIM_OC2_SetConfig+0xf0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	4393      	bics	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4393      	bics	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <TIM_OC2_SetConfig+0xf0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <TIM_OC2_SetConfig+0x9e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <TIM_OC2_SetConfig+0xf4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_OC2_SetConfig+0x9e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <TIM_OC2_SetConfig+0xf8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_OC2_SetConfig+0x9e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <TIM_OC2_SetConfig+0xfc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <TIM_OC2_SetConfig+0x100>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <TIM_OC2_SetConfig+0x104>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	621a      	str	r2, [r3, #32]
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b006      	add	sp, #24
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ffff8fff 	.word	0xffff8fff
 8002e58:	fffffcff 	.word	0xfffffcff
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800
 8002e6c:	fffffbff 	.word	0xfffffbff
 8002e70:	fffff7ff 	.word	0xfffff7ff

08002e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <TIM_OC3_SetConfig+0xe4>)
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2270      	movs	r2, #112	; 0x70
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <TIM_OC3_SetConfig+0xe8>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <TIM_OC3_SetConfig+0xec>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <TIM_OC3_SetConfig+0xf0>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <TIM_OC3_SetConfig+0xf4>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <TIM_OC3_SetConfig+0xec>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <TIM_OC3_SetConfig+0x9a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <TIM_OC3_SetConfig+0xf8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_OC3_SetConfig+0x9a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <TIM_OC3_SetConfig+0xfc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC3_SetConfig+0x9a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <TIM_OC3_SetConfig+0x100>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <TIM_OC3_SetConfig+0x104>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <TIM_OC3_SetConfig+0x108>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	fffffeff 	.word	0xfffffeff
 8002f5c:	fffffdff 	.word	0xfffffdff
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	fffff7ff 	.word	0xfffff7ff
 8002f68:	fffffbff 	.word	0xfffffbff
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	ffffefff 	.word	0xffffefff
 8002f7c:	ffffdfff 	.word	0xffffdfff

08002f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <TIM_OC4_SetConfig+0xb0>)
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a22      	ldr	r2, [pc, #136]	; (8003034 <TIM_OC4_SetConfig+0xb4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <TIM_OC4_SetConfig+0xb8>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <TIM_OC4_SetConfig+0xbc>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a19      	ldr	r2, [pc, #100]	; (8003040 <TIM_OC4_SetConfig+0xc0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x78>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <TIM_OC4_SetConfig+0xc4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x78>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <TIM_OC4_SetConfig+0xc8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x78>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <TIM_OC4_SetConfig+0xcc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <TIM_OC4_SetConfig+0xd0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b006      	add	sp, #24
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	ffffefff 	.word	0xffffefff
 8003034:	ffff8fff 	.word	0xffff8fff
 8003038:	fffffcff 	.word	0xfffffcff
 800303c:	ffffdfff 	.word	0xffffdfff
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	ffffbfff 	.word	0xffffbfff

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	223c      	movs	r2, #60	; 0x3c
 8003062:	5c9b      	ldrb	r3, [r3, r2]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e047      	b.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	223c      	movs	r2, #60	; 0x3c
 8003070:	2101      	movs	r1, #1
 8003072:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	223d      	movs	r2, #61	; 0x3d
 8003078:	2102      	movs	r1, #2
 800307a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2270      	movs	r2, #112	; 0x70
 8003090:	4393      	bics	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00f      	beq.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	05db      	lsls	r3, r3, #23
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d009      	beq.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10c      	bne.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	4393      	bics	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223d      	movs	r2, #61	; 0x3d
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	223c      	movs	r2, #60	; 0x3c
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40014000 	.word	0x40014000

08003110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	223c      	movs	r2, #60	; 0x3c
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003128:	2302      	movs	r3, #2
 800312a:	e03e      	b.n	80031aa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	223c      	movs	r2, #60	; 0x3c
 8003130:	2101      	movs	r1, #1
 8003132:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	4393      	bics	r3, r2
 800313a:	001a      	movs	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003148:	401a      	ands	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003156:	401a      	ands	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003164:	401a      	ands	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003172:	401a      	ands	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003180:	401a      	ands	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800318e:	401a      	ands	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	223c      	movs	r2, #60	; 0x3c
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	fffffcff 	.word	0xfffffcff
 80031b8:	fffffbff 	.word	0xfffffbff
 80031bc:	fffff7ff 	.word	0xfffff7ff
 80031c0:	ffffefff 	.word	0xffffefff
 80031c4:	ffffdfff 	.word	0xffffdfff
 80031c8:	ffffbfff 	.word	0xffffbfff

080031cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e044      	b.n	8003268 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2274      	movs	r2, #116	; 0x74
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7fd fb55 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	438a      	bics	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f830 	bl	8003274 <UART_SetConfig>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e024      	b.n	8003268 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f9ab 	bl	8003584 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	490d      	ldr	r1, [pc, #52]	; (8003270 <HAL_UART_Init+0xa4>)
 800323a:	400a      	ands	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	212a      	movs	r1, #42	; 0x2a
 800324a:	438a      	bics	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fa43 	bl	80036ec <UART_CheckIdleState>
 8003266:	0003      	movs	r3, r0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffffb7ff 	.word	0xffffb7ff

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800327c:	231e      	movs	r3, #30
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4aaf      	ldr	r2, [pc, #700]	; (8003560 <UART_SetConfig+0x2ec>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4aaa      	ldr	r2, [pc, #680]	; (8003564 <UART_SetConfig+0x2f0>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4aa1      	ldr	r2, [pc, #644]	; (8003568 <UART_SetConfig+0x2f4>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a9d      	ldr	r2, [pc, #628]	; (800356c <UART_SetConfig+0x2f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d127      	bne.n	800334a <UART_SetConfig+0xd6>
 80032fa:	4b9d      	ldr	r3, [pc, #628]	; (8003570 <UART_SetConfig+0x2fc>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	2203      	movs	r2, #3
 8003300:	4013      	ands	r3, r2
 8003302:	2b03      	cmp	r3, #3
 8003304:	d00d      	beq.n	8003322 <UART_SetConfig+0xae>
 8003306:	d81b      	bhi.n	8003340 <UART_SetConfig+0xcc>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d014      	beq.n	8003336 <UART_SetConfig+0xc2>
 800330c:	d818      	bhi.n	8003340 <UART_SetConfig+0xcc>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <UART_SetConfig+0xa4>
 8003312:	2b01      	cmp	r3, #1
 8003314:	d00a      	beq.n	800332c <UART_SetConfig+0xb8>
 8003316:	e013      	b.n	8003340 <UART_SetConfig+0xcc>
 8003318:	231f      	movs	r3, #31
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e065      	b.n	80033ee <UART_SetConfig+0x17a>
 8003322:	231f      	movs	r3, #31
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e060      	b.n	80033ee <UART_SetConfig+0x17a>
 800332c:	231f      	movs	r3, #31
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2204      	movs	r2, #4
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e05b      	b.n	80033ee <UART_SetConfig+0x17a>
 8003336:	231f      	movs	r3, #31
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2208      	movs	r2, #8
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e056      	b.n	80033ee <UART_SetConfig+0x17a>
 8003340:	231f      	movs	r3, #31
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2210      	movs	r2, #16
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e051      	b.n	80033ee <UART_SetConfig+0x17a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a89      	ldr	r2, [pc, #548]	; (8003574 <UART_SetConfig+0x300>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d134      	bne.n	80033be <UART_SetConfig+0x14a>
 8003354:	4b86      	ldr	r3, [pc, #536]	; (8003570 <UART_SetConfig+0x2fc>)
 8003356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003358:	23c0      	movs	r3, #192	; 0xc0
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	4013      	ands	r3, r2
 800335e:	22c0      	movs	r2, #192	; 0xc0
 8003360:	0292      	lsls	r2, r2, #10
 8003362:	4293      	cmp	r3, r2
 8003364:	d017      	beq.n	8003396 <UART_SetConfig+0x122>
 8003366:	22c0      	movs	r2, #192	; 0xc0
 8003368:	0292      	lsls	r2, r2, #10
 800336a:	4293      	cmp	r3, r2
 800336c:	d822      	bhi.n	80033b4 <UART_SetConfig+0x140>
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	0292      	lsls	r2, r2, #10
 8003372:	4293      	cmp	r3, r2
 8003374:	d019      	beq.n	80033aa <UART_SetConfig+0x136>
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	0292      	lsls	r2, r2, #10
 800337a:	4293      	cmp	r3, r2
 800337c:	d81a      	bhi.n	80033b4 <UART_SetConfig+0x140>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <UART_SetConfig+0x118>
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	0252      	lsls	r2, r2, #9
 8003386:	4293      	cmp	r3, r2
 8003388:	d00a      	beq.n	80033a0 <UART_SetConfig+0x12c>
 800338a:	e013      	b.n	80033b4 <UART_SetConfig+0x140>
 800338c:	231f      	movs	r3, #31
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e02b      	b.n	80033ee <UART_SetConfig+0x17a>
 8003396:	231f      	movs	r3, #31
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e026      	b.n	80033ee <UART_SetConfig+0x17a>
 80033a0:	231f      	movs	r3, #31
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e021      	b.n	80033ee <UART_SetConfig+0x17a>
 80033aa:	231f      	movs	r3, #31
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2208      	movs	r2, #8
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e01c      	b.n	80033ee <UART_SetConfig+0x17a>
 80033b4:	231f      	movs	r3, #31
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e017      	b.n	80033ee <UART_SetConfig+0x17a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6d      	ldr	r2, [pc, #436]	; (8003578 <UART_SetConfig+0x304>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d104      	bne.n	80033d2 <UART_SetConfig+0x15e>
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e00d      	b.n	80033ee <UART_SetConfig+0x17a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a69      	ldr	r2, [pc, #420]	; (800357c <UART_SetConfig+0x308>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d104      	bne.n	80033e6 <UART_SetConfig+0x172>
 80033dc:	231f      	movs	r3, #31
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e003      	b.n	80033ee <UART_SetConfig+0x17a>
 80033e6:	231f      	movs	r3, #31
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	2210      	movs	r2, #16
 80033ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d15d      	bne.n	80034b6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80033fa:	231f      	movs	r3, #31
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d015      	beq.n	8003430 <UART_SetConfig+0x1bc>
 8003404:	dc18      	bgt.n	8003438 <UART_SetConfig+0x1c4>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00d      	beq.n	8003426 <UART_SetConfig+0x1b2>
 800340a:	dc15      	bgt.n	8003438 <UART_SetConfig+0x1c4>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <UART_SetConfig+0x1a2>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d005      	beq.n	8003420 <UART_SetConfig+0x1ac>
 8003414:	e010      	b.n	8003438 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fa75 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 800341a:	0003      	movs	r3, r0
 800341c:	61bb      	str	r3, [r7, #24]
        break;
 800341e:	e012      	b.n	8003446 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003420:	4b57      	ldr	r3, [pc, #348]	; (8003580 <UART_SetConfig+0x30c>)
 8003422:	61bb      	str	r3, [r7, #24]
        break;
 8003424:	e00f      	b.n	8003446 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7fe f9e3 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 800342a:	0003      	movs	r3, r0
 800342c:	61bb      	str	r3, [r7, #24]
        break;
 800342e:	e00a      	b.n	8003446 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	61bb      	str	r3, [r7, #24]
        break;
 8003436:	e006      	b.n	8003446 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800343c:	231e      	movs	r3, #30
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
        break;
 8003444:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d100      	bne.n	800344e <UART_SetConfig+0x1da>
 800344c:	e07b      	b.n	8003546 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	18d2      	adds	r2, r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f7fc fe51 	bl	8000108 <__udivsi3>
 8003466:	0003      	movs	r3, r0
 8003468:	b29b      	uxth	r3, r3
 800346a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d91c      	bls.n	80034ac <UART_SetConfig+0x238>
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	025b      	lsls	r3, r3, #9
 8003478:	429a      	cmp	r2, r3
 800347a:	d217      	bcs.n	80034ac <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	b29a      	uxth	r2, r3
 8003480:	200e      	movs	r0, #14
 8003482:	183b      	adds	r3, r7, r0
 8003484:	210f      	movs	r1, #15
 8003486:	438a      	bics	r2, r1
 8003488:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	b29b      	uxth	r3, r3
 8003490:	2207      	movs	r2, #7
 8003492:	4013      	ands	r3, r2
 8003494:	b299      	uxth	r1, r3
 8003496:	183b      	adds	r3, r7, r0
 8003498:	183a      	adds	r2, r7, r0
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	183a      	adds	r2, r7, r0
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	e04c      	b.n	8003546 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80034ac:	231e      	movs	r3, #30
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e047      	b.n	8003546 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034b6:	231f      	movs	r3, #31
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d015      	beq.n	80034ec <UART_SetConfig+0x278>
 80034c0:	dc18      	bgt.n	80034f4 <UART_SetConfig+0x280>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00d      	beq.n	80034e2 <UART_SetConfig+0x26e>
 80034c6:	dc15      	bgt.n	80034f4 <UART_SetConfig+0x280>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <UART_SetConfig+0x25e>
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d005      	beq.n	80034dc <UART_SetConfig+0x268>
 80034d0:	e010      	b.n	80034f4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d2:	f7fe fa17 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80034d6:	0003      	movs	r3, r0
 80034d8:	61bb      	str	r3, [r7, #24]
        break;
 80034da:	e012      	b.n	8003502 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <UART_SetConfig+0x30c>)
 80034de:	61bb      	str	r3, [r7, #24]
        break;
 80034e0:	e00f      	b.n	8003502 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e2:	f7fe f985 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80034e6:	0003      	movs	r3, r0
 80034e8:	61bb      	str	r3, [r7, #24]
        break;
 80034ea:	e00a      	b.n	8003502 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	61bb      	str	r3, [r7, #24]
        break;
 80034f2:	e006      	b.n	8003502 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034f8:	231e      	movs	r3, #30
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
        break;
 8003500:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01e      	beq.n	8003546 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	085a      	lsrs	r2, r3, #1
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	18d2      	adds	r2, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0019      	movs	r1, r3
 8003518:	0010      	movs	r0, r2
 800351a:	f7fc fdf5 	bl	8000108 <__udivsi3>
 800351e:	0003      	movs	r3, r0
 8003520:	b29b      	uxth	r3, r3
 8003522:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	d909      	bls.n	800353e <UART_SetConfig+0x2ca>
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	429a      	cmp	r2, r3
 8003532:	d204      	bcs.n	800353e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	e003      	b.n	8003546 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800353e:	231e      	movs	r3, #30
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003552:	231e      	movs	r3, #30
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b008      	add	sp, #32
 800355e:	bd80      	pop	{r7, pc}
 8003560:	efff69f3 	.word	0xefff69f3
 8003564:	ffffcfff 	.word	0xffffcfff
 8003568:	fffff4ff 	.word	0xfffff4ff
 800356c:	40013800 	.word	0x40013800
 8003570:	40021000 	.word	0x40021000
 8003574:	40004400 	.word	0x40004400
 8003578:	40004800 	.word	0x40004800
 800357c:	40004c00 	.word	0x40004c00
 8003580:	007a1200 	.word	0x007a1200

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <UART_AdvFeatureConfig+0x144>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2202      	movs	r2, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a43      	ldr	r2, [pc, #268]	; (80036cc <UART_AdvFeatureConfig+0x148>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <UART_AdvFeatureConfig+0x14c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2208      	movs	r2, #8
 80035f8:	4013      	ands	r3, r2
 80035fa:	d00b      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <UART_AdvFeatureConfig+0x150>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2210      	movs	r2, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d00b      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <UART_AdvFeatureConfig+0x154>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <UART_AdvFeatureConfig+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	d01d      	beq.n	800369e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <UART_AdvFeatureConfig+0x15c>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	429a      	cmp	r2, r3
 8003684:	d10b      	bne.n	800369e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <UART_AdvFeatureConfig+0x160>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <UART_AdvFeatureConfig+0x164>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	fffdffff 	.word	0xfffdffff
 80036cc:	fffeffff 	.word	0xfffeffff
 80036d0:	fffbffff 	.word	0xfffbffff
 80036d4:	ffff7fff 	.word	0xffff7fff
 80036d8:	ffffefff 	.word	0xffffefff
 80036dc:	ffffdfff 	.word	0xffffdfff
 80036e0:	ffefffff 	.word	0xffefffff
 80036e4:	ff9fffff 	.word	0xff9fffff
 80036e8:	fff7ffff 	.word	0xfff7ffff

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	2100      	movs	r1, #0
 80036fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd f9a0 	bl	8000a40 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2208      	movs	r2, #8
 800370c:	4013      	ands	r3, r2
 800370e:	2b08      	cmp	r3, #8
 8003710:	d10c      	bne.n	800372c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0391      	lsls	r1, r2, #14
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <UART_CheckIdleState+0x8c>)
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f82c 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e021      	b.n	8003770 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2204      	movs	r2, #4
 8003734:	4013      	ands	r3, r2
 8003736:	2b04      	cmp	r3, #4
 8003738:	d10c      	bne.n	8003754 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	03d1      	lsls	r1, r2, #15
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <UART_CheckIdleState+0x8c>)
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	f000 f818 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d001      	beq.n	8003754 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e00d      	b.n	8003770 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2274      	movs	r2, #116	; 0x74
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}
 8003778:	01ffffff 	.word	0x01ffffff

0800377c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b094      	sub	sp, #80	; 0x50
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378c:	e0a3      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003790:	3301      	adds	r3, #1
 8003792:	d100      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003794:	e09f      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd f953 	bl	8000a40 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <UART_WaitOnFlagUntilTimeout+0x30>
 80037a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d13d      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ac:	f3ef 8310 	mrs	r3, PRIMASK
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
 80037b6:	2301      	movs	r3, #1
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	494c      	ldr	r1, [pc, #304]	; (8003900 <UART_WaitOnFlagUntilTimeout+0x184>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	643b      	str	r3, [r7, #64]	; 0x40
 80037e8:	2301      	movs	r3, #1
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2101      	movs	r1, #1
 8003800:	438a      	bics	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2274      	movs	r2, #116	; 0x74
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e067      	b.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2204      	movs	r2, #4
 8003830:	4013      	ands	r3, r2
 8003832:	d050      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	401a      	ands	r2, r3
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	429a      	cmp	r2, r3
 8003846:	d146      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	613b      	str	r3, [r7, #16]
  return(result);
 8003858:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4923      	ldr	r1, [pc, #140]	; (8003900 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003874:	400a      	ands	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003884:	f3ef 8310 	mrs	r3, PRIMASK
 8003888:	61fb      	str	r3, [r7, #28]
  return(result);
 800388a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
 800388e:	2301      	movs	r3, #1
 8003890:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2101      	movs	r1, #1
 80038a6:	438a      	bics	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	2120      	movs	r1, #32
 80038c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2274      	movs	r2, #116	; 0x74
 80038ce:	2100      	movs	r1, #0
 80038d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e010      	b.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	425a      	negs	r2, r3
 80038e6:	4153      	adcs	r3, r2
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	001a      	movs	r2, r3
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d100      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80038f4:	e74b      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b014      	add	sp, #80	; 0x50
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	fffffe5f 	.word	0xfffffe5f

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2600      	movs	r6, #0
 8003908:	4d0c      	ldr	r5, [pc, #48]	; (800393c <__libc_init_array+0x38>)
 800390a:	4c0d      	ldr	r4, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390c:	1b64      	subs	r4, r4, r5
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	2600      	movs	r6, #0
 8003916:	f000 f821 	bl	800395c <_init>
 800391a:	4d0a      	ldr	r5, [pc, #40]	; (8003944 <__libc_init_array+0x40>)
 800391c:	4c0a      	ldr	r4, [pc, #40]	; (8003948 <__libc_init_array+0x44>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	00b3      	lsls	r3, r6, #2
 800392a:	58eb      	ldr	r3, [r5, r3]
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	00b3      	lsls	r3, r6, #2
 8003934:	58eb      	ldr	r3, [r5, r3]
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	080039ac 	.word	0x080039ac
 8003940:	080039ac 	.word	0x080039ac
 8003944:	080039ac 	.word	0x080039ac
 8003948:	080039b0 	.word	0x080039b0

0800394c <memset>:
 800394c:	0003      	movs	r3, r0
 800394e:	1882      	adds	r2, r0, r2
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	7019      	strb	r1, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
