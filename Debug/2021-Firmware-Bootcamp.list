
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002cb0  08002cb0  00003cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce0  08002ce0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce0  08002ce0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce0  08002ce0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ce4  08002ce4  00003ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ce8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08002cf4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002cf4  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000945d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a60  00000000  00000000  0000d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0000eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  0000f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018faa  00000000  00000000  0001025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5fc  00000000  00000000  00029209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920ba  00000000  00000000  00036805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c88bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  000c8904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000cafc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c98 	.word	0x08002c98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c98 	.word	0x08002c98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	@ 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fd05 	bl	8002c40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b2a      	ldr	r3, [pc, #168]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b29      	ldr	r3, [pc, #164]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b26      	ldr	r3, [pc, #152]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	029b      	lsls	r3, r3, #10
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	4b23      	ldr	r3, [pc, #140]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b22      	ldr	r3, [pc, #136]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000258:	2180      	movs	r1, #128	@ 0x80
 800025a:	02c9      	lsls	r1, r1, #11
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b1f      	ldr	r3, [pc, #124]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	02db      	lsls	r3, r3, #11
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800026e:	2390      	movs	r3, #144	@ 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	2200      	movs	r2, #0
 8000274:	2120      	movs	r1, #32
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fdd0 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800027c:	2380      	movs	r3, #128	@ 0x80
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4818      	ldr	r0, [pc, #96]	@ (80002e4 <MX_GPIO_Init+0xc4>)
 8000282:	2200      	movs	r2, #0
 8000284:	0019      	movs	r1, r3
 8000286:	f000 fdc9 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2220      	movs	r2, #32
 800028e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2201      	movs	r2, #1
 8000294:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a2:	193a      	adds	r2, r7, r4
 80002a4:	2390      	movs	r3, #144	@ 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fc3e 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2280      	movs	r2, #128	@ 0x80
 80002b6:	0052      	lsls	r2, r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2201      	movs	r2, #1
 80002be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <MX_GPIO_Init+0xc4>)
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f000 fc2a 	bl	8000b2c <HAL_GPIO_Init>

}
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b009      	add	sp, #36	@ 0x24
 80002de:	bd90      	pop	{r4, r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000400 	.word	0x48000400

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ee:	f000 fae1 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f2:	f000 f812 	bl	800031a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f7ff ff93 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002fa:	f000 f8a9 	bl	8000450 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002fe:	f000 f999 	bl	8000634 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t adc_value = Read_ADC(0);
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f846 	bl	8000394 <Read_ADC>
 8000308:	0003      	movs	r3, r0
 800030a:	001a      	movs	r2, r3
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(10);
 8000310:	200a      	movs	r0, #10
 8000312:	f000 fb33 	bl	800097c <HAL_Delay>
  {
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	e7f3      	b.n	8000302 <main+0x1a>

0800031a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031a:	b590      	push	{r4, r7, lr}
 800031c:	b093      	sub	sp, #76	@ 0x4c
 800031e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000320:	2414      	movs	r4, #20
 8000322:	193b      	adds	r3, r7, r4
 8000324:	0018      	movs	r0, r3
 8000326:	2334      	movs	r3, #52	@ 0x34
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 fc88 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	0018      	movs	r0, r3
 8000334:	2310      	movs	r3, #16
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f002 fc81 	bl	8002c40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2220      	movs	r2, #32
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2201      	movs	r2, #1
 8000348:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fd80 	bl	8000e58 <HAL_RCC_OscConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800035c:	f000 f872 	bl	8000444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2207      	movs	r2, #7
 8000364:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2203      	movs	r2, #3
 800036a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2101      	movs	r1, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f8f1 	bl	8001564 <HAL_RCC_ClockConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000386:	f000 f85d 	bl	8000444 <Error_Handler>
  }
}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b013      	add	sp, #76	@ 0x4c
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <Read_ADC>:

/* USER CODE BEGIN 4 */
uint8_t Read_ADC (uint8_t channel){
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af02      	add	r7, sp, #8
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
	uint8_t controlByte = 0x01;
 80003a0:	2117      	movs	r1, #23
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
	controlByte |= (channel & 0x07) << 4;
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	011b      	lsls	r3, r3, #4
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	2270      	movs	r2, #112	@ 0x70
 80003b2:	4013      	ands	r3, r2
 80003b4:	b25a      	sxtb	r2, r3
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	4313      	orrs	r3, r2
 80003be:	b25a      	sxtb	r2, r3
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	701a      	strb	r2, [r3, #0]

	uint8_t receivedData[2] = {0};
 80003c4:	2410      	movs	r4, #16
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	2200      	movs	r2, #0
 80003ca:	801a      	strh	r2, [r3, #0]
	uint8_t transmitData[3] = {controlByte, 0x00, 0x00};
 80003cc:	250c      	movs	r5, #12
 80003ce:	197b      	adds	r3, r7, r5
 80003d0:	187a      	adds	r2, r7, r1
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	197b      	adds	r3, r7, r5
 80003d8:	2200      	movs	r2, #0
 80003da:	705a      	strb	r2, [r3, #1]
 80003dc:	197b      	adds	r3, r7, r5
 80003de:	2200      	movs	r2, #0
 80003e0:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET); //start transmission going low
 80003e2:	4b16      	ldr	r3, [pc, #88]	@ (800043c <Read_ADC+0xa8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	2110      	movs	r1, #16
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fd17 	bl	8000e1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, transmitData, receivedData, 3, HAL_MAX_DELAY);
 80003ee:	193a      	adds	r2, r7, r4
 80003f0:	1979      	adds	r1, r7, r5
 80003f2:	4813      	ldr	r0, [pc, #76]	@ (8000440 <Read_ADC+0xac>)
 80003f4:	2301      	movs	r3, #1
 80003f6:	425b      	negs	r3, r3
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2303      	movs	r3, #3
 80003fc:	f001 fac4 	bl	8001988 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <Read_ADC+0xa8>)
 8000402:	2201      	movs	r2, #1
 8000404:	2110      	movs	r1, #16
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fd08 	bl	8000e1c <HAL_GPIO_WritePin>

    uint16_t result = ((receivedData[1] & 0x03) << 8) | receivedData[2];
 800040c:	193b      	adds	r3, r7, r4
 800040e:	785b      	ldrb	r3, [r3, #1]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	b21a      	sxth	r2, r3
 8000414:	23c0      	movs	r3, #192	@ 0xc0
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4013      	ands	r3, r2
 800041a:	b21a      	sxth	r2, r3
 800041c:	193b      	adds	r3, r7, r4
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	b21b      	sxth	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b21a      	sxth	r2, r3
 8000426:	2114      	movs	r1, #20
 8000428:	187b      	adds	r3, r7, r1
 800042a:	801a      	strh	r2, [r3, #0]
    return result;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3

}
 8000432:	0018      	movs	r0, r3
 8000434:	46bd      	mov	sp, r7
 8000436:	b006      	add	sp, #24
 8000438:	bdb0      	pop	{r4, r5, r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	48000400 	.word	0x48000400
 8000440:	20000028 	.word	0x20000028

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <MX_SPI1_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045a:	4b1a      	ldr	r3, [pc, #104]	@ (80004c4 <MX_SPI1_Init+0x74>)
 800045c:	2282      	movs	r2, #130	@ 0x82
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_10BIT;
 8000468:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <MX_SPI1_Init+0x74>)
 800046a:	2290      	movs	r2, #144	@ 0x90
 800046c:	0112      	lsls	r2, r2, #4
 800046e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000470:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <MX_SPI1_Init+0x74>)
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000486:	2218      	movs	r2, #24
 8000488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <MX_SPI1_Init+0x74>)
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <MX_SPI1_Init+0x74>)
 800049e:	2207      	movs	r2, #7
 80004a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <MX_SPI1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <MX_SPI1_Init+0x74>)
 80004aa:	2208      	movs	r2, #8
 80004ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ae:	4b05      	ldr	r3, [pc, #20]	@ (80004c4 <MX_SPI1_Init+0x74>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f9b1 	bl	8001818 <HAL_SPI_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f7ff ffc3 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000028 	.word	0x20000028
 80004c8:	40013000 	.word	0x40013000

080004cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08b      	sub	sp, #44	@ 0x2c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2414      	movs	r4, #20
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 fbae 	bl	8002c40 <memset>
  if(spiHandle->Instance==SPI1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a2e      	ldr	r2, [pc, #184]	@ (80005a4 <HAL_SPI_MspInit+0xd8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d155      	bne.n	800059a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ee:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 80004f0:	699a      	ldr	r2, [r3, #24]
 80004f2:	4b2d      	ldr	r3, [pc, #180]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0149      	lsls	r1, r1, #5
 80004f8:	430a      	orrs	r2, r1
 80004fa:	619a      	str	r2, [r3, #24]
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	015b      	lsls	r3, r3, #5
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b27      	ldr	r3, [pc, #156]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	0289      	lsls	r1, r1, #10
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	029b      	lsls	r3, r3, #10
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	02c9      	lsls	r1, r1, #11
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <HAL_SPI_MspInit+0xdc>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	02db      	lsls	r3, r3, #11
 800053c:	4013      	ands	r3, r2
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	22c0      	movs	r2, #192	@ 0xc0
 8000546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2202      	movs	r2, #2
 800054c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2203      	movs	r2, #3
 8000558:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	193a      	adds	r2, r7, r4
 8000562:	2390      	movs	r3, #144	@ 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fadf 	bl	8000b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2208      	movs	r2, #8
 8000574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2202      	movs	r2, #2
 800057a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2203      	movs	r2, #3
 8000586:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	187b      	adds	r3, r7, r1
 8000590:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <HAL_SPI_MspInit+0xe0>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f000 fac9 	bl	8000b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b00b      	add	sp, #44	@ 0x2c
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40013000 	.word	0x40013000
 80005a8:	40021000 	.word	0x40021000
 80005ac:	48000400 	.word	0x48000400

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_MspInit+0x44>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <HAL_MspInit+0x44>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_MspInit+0x44>)
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	e7fd      	b.n	80005fc <NMI_Handler+0x4>

08000600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	e7fd      	b.n	8000604 <HardFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 f990 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	@ 0x58
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2348      	movs	r3, #72	@ 0x48
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f002 fafb 	bl	8002c40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2308      	movs	r3, #8
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 faf3 	bl	8002c40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	2324      	movs	r3, #36	@ 0x24
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	231c      	movs	r3, #28
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f002 faeb 	bl	8002c40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2320      	movs	r3, #32
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f002 fae4 	bl	8002c40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <MX_TIM1_Init+0x160>)
 800067a:	4a47      	ldr	r2, [pc, #284]	@ (8000798 <MX_TIM1_Init+0x164>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 800067e:	4b45      	ldr	r3, [pc, #276]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000680:	220e      	movs	r2, #14
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b43      	ldr	r3, [pc, #268]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800068a:	4b42      	ldr	r3, [pc, #264]	@ (8000794 <MX_TIM1_Init+0x160>)
 800068c:	4a43      	ldr	r2, [pc, #268]	@ (800079c <MX_TIM1_Init+0x168>)
 800068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b40      	ldr	r3, [pc, #256]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000696:	4b3f      	ldr	r3, [pc, #252]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b3d      	ldr	r3, [pc, #244]	@ (8000794 <MX_TIM1_Init+0x160>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000794 <MX_TIM1_Init+0x160>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fcb7 	bl	8002018 <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006ae:	f7ff fec9 	bl	8000444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	2148      	movs	r1, #72	@ 0x48
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	0152      	lsls	r2, r2, #5
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	4b35      	ldr	r3, [pc, #212]	@ (8000794 <MX_TIM1_Init+0x160>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe16 	bl	80022f4 <HAL_TIM_ConfigClockSource>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006cc:	f7ff feba 	bl	8000444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d0:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <MX_TIM1_Init+0x160>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fcf0 	bl	80020b8 <HAL_TIM_PWM_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006dc:	f7ff feb2 	bl	8000444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ee:	187a      	adds	r2, r7, r1
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_TIM1_Init+0x160>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 f9e7 	bl	8002ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80006fe:	f7ff fea1 	bl	8000444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000702:	2124      	movs	r1, #36	@ 0x24
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2260      	movs	r2, #96	@ 0x60
 8000708:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	1879      	adds	r1, r7, r1
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000732:	2200      	movs	r2, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fd17 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800073e:	f7ff fe81 	bl	8000444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	0192      	lsls	r2, r2, #6
 8000766:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076e:	1d3a      	adds	r2, r7, #4
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 fa05 	bl	8002b84 <HAL_TIMEx_ConfigBreakDeadTime>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800077e:	f7ff fe61 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <MX_TIM1_Init+0x160>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f82b 	bl	80007e0 <HAL_TIM_MspPostInit>

}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b016      	add	sp, #88	@ 0x58
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	2000008c 	.word	0x2000008c
 8000798:	40012c00 	.word	0x40012c00
 800079c:	0000ea60 	.word	0x0000ea60

080007a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_TIM_Base_MspInit+0x38>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10d      	bne.n	80007ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	0109      	lsls	r1, r1, #4
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b004      	add	sp, #16
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	240c      	movs	r4, #12
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	2314      	movs	r3, #20
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 fa24 	bl	8002c40 <memset>
  if(timHandle->Instance==TIM1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_TIM_MspPostInit+0x78>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d125      	bne.n	800084e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	0289      	lsls	r1, r1, #10
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	029b      	lsls	r3, r3, #10
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	187a      	adds	r2, r7, r1
 8000842:	2390      	movs	r3, #144	@ 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f96f 	bl	8000b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b009      	add	sp, #36	@ 0x24
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40021000 	.word	0x40021000

08000860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	@ (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	@ (80008ac <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800088a:	f7ff fece 	bl	800062a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800088e:	f002 f9df 	bl	8002c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fd29 	bl	80002e8 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a4:	08002ce8 	.word	0x08002ce8
  ldr r2, =_sbss
 80008a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ac:	200000d8 	.word	0x200000d8

080008b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_COMP_IRQHandler>
	...

080008b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <HAL_Init+0x24>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_Init+0x24>)
 80008be:	2110      	movs	r1, #16
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 f809 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ca:	f7ff fe71 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <HAL_InitTick+0x5c>)
 80008e6:	681c      	ldr	r4, [r3, #0]
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_InitTick+0x60>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	23fa      	movs	r3, #250	@ 0xfa
 80008f0:	0098      	lsls	r0, r3, #2
 80008f2:	f7ff fc09 	bl	8000108 <__udivsi3>
 80008f6:	0003      	movs	r3, r0
 80008f8:	0019      	movs	r1, r3
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff fc04 	bl	8000108 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f905 	bl	8000b12 <HAL_SYSTICK_Config>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e00f      	b.n	8000930 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d80b      	bhi.n	800092e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2200      	movs	r2, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f8e2 	bl	8000ae8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_InitTick+0x64>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000008 	.word	0x20000008
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	18d2      	adds	r2, r2, r3
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <HAL_IncTick+0x20>)
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000008 	.word	0x20000008
 8000964:	200000d4 	.word	0x200000d4

08000968 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	200000d4 	.word	0x200000d4

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	0003      	movs	r3, r0
 800098a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3301      	adds	r3, #1
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	189b      	adds	r3, r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	0002      	movs	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009d8:	d828      	bhi.n	8000a2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4a2f      	ldr	r2, [pc, #188]	@ (8000a98 <__NVIC_SetPriority+0xd4>)
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	33c0      	adds	r3, #192	@ 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	589b      	ldr	r3, [r3, r2]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	@ 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	@ 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	481f      	ldr	r0, [pc, #124]	@ (8000a98 <__NVIC_SetPriority+0xd4>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	33c0      	adds	r3, #192	@ 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2a:	e031      	b.n	8000a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0019      	movs	r1, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	400b      	ands	r3, r1
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	@ 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	@ 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	4023      	ands	r3, r4
 8000a80:	3b08      	subs	r3, #8
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	430a      	orrs	r2, r1
 8000a86:	3306      	adds	r3, #6
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18c3      	adds	r3, r0, r3
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	045b      	lsls	r3, r3, #17
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d301      	bcc.n	8000ab8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e010      	b.n	8000ada <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <SysTick_Config+0x44>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	3a01      	subs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff ff7c 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x44>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	210f      	movs	r1, #15
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ffbf 	bl	8000aa0 <SysTick_Config>
 8000b22:	0003      	movs	r3, r0
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e155      	b.n	8000de8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4091      	lsls	r1, r2
 8000b46:	000a      	movs	r2, r1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d100      	bne.n	8000b54 <HAL_GPIO_Init+0x28>
 8000b52:	e146      	b.n	8000de2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2203      	movs	r2, #3
 8000b66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	0013      	movs	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d017      	beq.n	8000c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d123      	bne.n	8000c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	08da      	lsrs	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3208      	adds	r2, #8
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	58d3      	ldr	r3, [r2, r3]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2207      	movs	r2, #7
 8000c28:	4013      	ands	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2107      	movs	r1, #7
 8000c42:	400b      	ands	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	6939      	ldr	r1, [r7, #16]
 8000c5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	029b      	lsls	r3, r3, #10
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d100      	bne.n	8000ca0 <HAL_GPIO_Init+0x174>
 8000c9e:	e0a0      	b.n	8000de2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	4b57      	ldr	r3, [pc, #348]	@ (8000e00 <HAL_GPIO_Init+0x2d4>)
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	4b56      	ldr	r3, [pc, #344]	@ (8000e00 <HAL_GPIO_Init+0x2d4>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	619a      	str	r2, [r3, #24]
 8000cac:	4b54      	ldr	r3, [pc, #336]	@ (8000e00 <HAL_GPIO_Init+0x2d4>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb8:	4a52      	ldr	r2, [pc, #328]	@ (8000e04 <HAL_GPIO_Init+0x2d8>)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	589b      	ldr	r3, [r3, r2]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	2390      	movs	r3, #144	@ 0x90
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a47      	ldr	r2, [pc, #284]	@ (8000e08 <HAL_GPIO_Init+0x2dc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x1ea>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a46      	ldr	r2, [pc, #280]	@ (8000e0c <HAL_GPIO_Init+0x2e0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x1e6>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a45      	ldr	r2, [pc, #276]	@ (8000e10 <HAL_GPIO_Init+0x2e4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x1e2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a44      	ldr	r2, [pc, #272]	@ (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x1de>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	2103      	movs	r1, #3
 8000d20:	400a      	ands	r2, r1
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d2c:	4935      	ldr	r1, [pc, #212]	@ (8000e04 <HAL_GPIO_Init+0x2d8>)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	4013      	ands	r3, r2
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	029b      	lsls	r3, r3, #10
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	035b      	lsls	r3, r3, #13
 8000da6:	4013      	ands	r3, r2
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	039b      	lsls	r3, r3, #14
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	40da      	lsrs	r2, r3
 8000df0:	1e13      	subs	r3, r2, #0
 8000df2:	d000      	beq.n	8000df6 <HAL_GPIO_Init+0x2ca>
 8000df4:	e6a2      	b.n	8000b3c <HAL_GPIO_Init+0x10>
  } 
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b006      	add	sp, #24
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	48001000 	.word	0x48001000
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	0008      	movs	r0, r1
 8000e26:	0011      	movs	r1, r2
 8000e28:	1cbb      	adds	r3, r7, #2
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	801a      	strh	r2, [r3, #0]
 8000e2e:	1c7b      	adds	r3, r7, #1
 8000e30:	1c0a      	adds	r2, r1, #0
 8000e32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e34:	1c7b      	adds	r3, r7, #1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3c:	1cbb      	adds	r3, r7, #2
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e44:	e003      	b.n	8000e4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e46:	1cbb      	adds	r3, r7, #2
 8000e48:	881a      	ldrh	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f000 fb76 	bl	8001558 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	d100      	bne.n	8000e78 <HAL_RCC_OscConfig+0x20>
 8000e76:	e08e      	b.n	8000f96 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e78:	4bc5      	ldr	r3, [pc, #788]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d00e      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e84:	4bc2      	ldr	r3, [pc, #776]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	220c      	movs	r2, #12
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d117      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x68>
 8000e90:	4bbf      	ldr	r3, [pc, #764]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	23c0      	movs	r3, #192	@ 0xc0
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	401a      	ands	r2, r3
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	4bbb      	ldr	r3, [pc, #748]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x58>
 8000eae:	e071      	b.n	8000f94 <HAL_RCC_OscConfig+0x13c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d000      	beq.n	8000eba <HAL_RCC_OscConfig+0x62>
 8000eb8:	e06c      	b.n	8000f94 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f000 fb4c 	bl	8001558 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x80>
 8000ec8:	4bb1      	ldr	r3, [pc, #708]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4bb0      	ldr	r3, [pc, #704]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e02f      	b.n	8000f38 <HAL_RCC_OscConfig+0xe0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0xa2>
 8000ee0:	4bab      	ldr	r3, [pc, #684]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4baa      	ldr	r3, [pc, #680]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ee6:	49ab      	ldr	r1, [pc, #684]	@ (8001194 <HAL_RCC_OscConfig+0x33c>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4ba8      	ldr	r3, [pc, #672]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4ba7      	ldr	r3, [pc, #668]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	49a9      	ldr	r1, [pc, #676]	@ (8001198 <HAL_RCC_OscConfig+0x340>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e01e      	b.n	8000f38 <HAL_RCC_OscConfig+0xe0>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d10e      	bne.n	8000f20 <HAL_RCC_OscConfig+0xc8>
 8000f02:	4ba3      	ldr	r3, [pc, #652]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4ba2      	ldr	r3, [pc, #648]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	02c9      	lsls	r1, r1, #11
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	4b9f      	ldr	r3, [pc, #636]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b9e      	ldr	r3, [pc, #632]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0xe0>
 8000f20:	4b9b      	ldr	r3, [pc, #620]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b9a      	ldr	r3, [pc, #616]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f26:	499b      	ldr	r1, [pc, #620]	@ (8001194 <HAL_RCC_OscConfig+0x33c>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	4b98      	ldr	r3, [pc, #608]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f32:	4999      	ldr	r1, [pc, #612]	@ (8001198 <HAL_RCC_OscConfig+0x340>)
 8000f34:	400a      	ands	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d014      	beq.n	8000f6a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fd12 	bl	8000968 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fd0d 	bl	8000968 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	@ 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e2fd      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0xf2>
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fcfd 	bl	8000968 <HAL_GetTick>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fcf8 	bl	8000968 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	@ 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e2e8      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	4b82      	ldr	r3, [pc, #520]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	029b      	lsls	r3, r3, #10
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x11c>
 8000f92:	e000      	b.n	8000f96 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d100      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x14a>
 8000fa0:	e06c      	b.n	800107c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d00e      	beq.n	8000fca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fac:	4b78      	ldr	r3, [pc, #480]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	220c      	movs	r2, #12
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d11f      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1a0>
 8000fb8:	4b75      	ldr	r3, [pc, #468]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	23c0      	movs	r3, #192	@ 0xc0
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d116      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x188>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e2bb      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	22f8      	movs	r2, #248	@ 0xf8
 8000fe6:	4393      	bics	r3, r2
 8000fe8:	0019      	movs	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	00da      	lsls	r2, r3, #3
 8000ff0:	4b67      	ldr	r3, [pc, #412]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	e041      	b.n	800107c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d024      	beq.n	800104a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001000:	4b63      	ldr	r3, [pc, #396]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b62      	ldr	r3, [pc, #392]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcac 	bl	8000968 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fca7 	bl	8000968 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e297      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	4b59      	ldr	r3, [pc, #356]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d0f1      	beq.n	8001016 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b57      	ldr	r3, [pc, #348]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	22f8      	movs	r2, #248	@ 0xf8
 8001038:	4393      	bics	r3, r2
 800103a:	0019      	movs	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	00da      	lsls	r2, r3, #3
 8001042:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e018      	b.n	800107c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b50      	ldr	r3, [pc, #320]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001050:	2101      	movs	r1, #1
 8001052:	438a      	bics	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fc87 	bl	8000968 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fc82 	bl	8000968 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e272      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b47      	ldr	r3, [pc, #284]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d1f1      	bne.n	8001060 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2208      	movs	r2, #8
 8001082:	4013      	ands	r3, r2
 8001084:	d036      	beq.n	80010f4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001092:	4b3f      	ldr	r3, [pc, #252]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001094:	2101      	movs	r1, #1
 8001096:	430a      	orrs	r2, r1
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fc65 	bl	8000968 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc60 	bl	8000968 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e250      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d0f1      	beq.n	80010a4 <HAL_RCC_OscConfig+0x24c>
 80010c0:	e018      	b.n	80010f4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 80010c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	438a      	bics	r2, r1
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fc4b 	bl	8000968 <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc46 	bl	8000968 <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e236      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d1f1      	bne.n	80010d8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2204      	movs	r2, #4
 80010fa:	4013      	ands	r3, r2
 80010fc:	d100      	bne.n	8001100 <HAL_RCC_OscConfig+0x2a8>
 80010fe:	e0b5      	b.n	800126c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001100:	201f      	movs	r0, #31
 8001102:	183b      	adds	r3, r7, r0
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001108:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	055b      	lsls	r3, r3, #21
 8001110:	4013      	ands	r3, r2
 8001112:	d110      	bne.n	8001136 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001116:	69da      	ldr	r2, [r3, #28]
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 800111a:	2180      	movs	r1, #128	@ 0x80
 800111c:	0549      	lsls	r1, r1, #21
 800111e:	430a      	orrs	r2, r1
 8001120:	61da      	str	r2, [r3, #28]
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001124:	69da      	ldr	r2, [r3, #28]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	055b      	lsls	r3, r3, #21
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001130:	183b      	adds	r3, r7, r0
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <HAL_RCC_OscConfig+0x344>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4013      	ands	r3, r2
 8001140:	d11a      	bne.n	8001178 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_RCC_OscConfig+0x344>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_RCC_OscConfig+0x344>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0049      	lsls	r1, r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001150:	f7ff fc0a 	bl	8000968 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115a:	f7ff fc05 	bl	8000968 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b64      	cmp	r3, #100	@ 0x64
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1f5      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_RCC_OscConfig+0x344>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4013      	ands	r3, r2
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10f      	bne.n	80011a0 <HAL_RCC_OscConfig+0x348>
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_RCC_OscConfig+0x338>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	e036      	b.n	80011fc <HAL_RCC_OscConfig+0x3a4>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	40021000 	.word	0x40021000
 8001194:	fffeffff 	.word	0xfffeffff
 8001198:	fffbffff 	.word	0xfffbffff
 800119c:	40007000 	.word	0x40007000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10c      	bne.n	80011c2 <HAL_RCC_OscConfig+0x36a>
 80011a8:	4bca      	ldr	r3, [pc, #808]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	4bc9      	ldr	r3, [pc, #804]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	438a      	bics	r2, r1
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	4bc7      	ldr	r3, [pc, #796]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4bc6      	ldr	r3, [pc, #792]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	621a      	str	r2, [r3, #32]
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x3a4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x38c>
 80011ca:	4bc2      	ldr	r3, [pc, #776]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6a1a      	ldr	r2, [r3, #32]
 80011ce:	4bc1      	ldr	r3, [pc, #772]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011d0:	2104      	movs	r1, #4
 80011d2:	430a      	orrs	r2, r1
 80011d4:	621a      	str	r2, [r3, #32]
 80011d6:	4bbf      	ldr	r3, [pc, #764]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4bbe      	ldr	r3, [pc, #760]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0x3a4>
 80011e4:	4bbb      	ldr	r3, [pc, #748]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011e6:	6a1a      	ldr	r2, [r3, #32]
 80011e8:	4bba      	ldr	r3, [pc, #744]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	438a      	bics	r2, r1
 80011ee:	621a      	str	r2, [r3, #32]
 80011f0:	4bb8      	ldr	r3, [pc, #736]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	4bb7      	ldr	r3, [pc, #732]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80011f6:	2104      	movs	r1, #4
 80011f8:	438a      	bics	r2, r1
 80011fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d014      	beq.n	800122e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fbb0 	bl	8000968 <HAL_GetTick>
 8001208:	0003      	movs	r3, r0
 800120a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	e009      	b.n	8001222 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fbab 	bl	8000968 <HAL_GetTick>
 8001212:	0002      	movs	r2, r0
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4aaf      	ldr	r2, [pc, #700]	@ (80014d8 <HAL_RCC_OscConfig+0x680>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e19a      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001222:	4bac      	ldr	r3, [pc, #688]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x3b6>
 800122c:	e013      	b.n	8001256 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb9b 	bl	8000968 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001236:	e009      	b.n	800124c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff fb96 	bl	8000968 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4aa5      	ldr	r2, [pc, #660]	@ (80014d8 <HAL_RCC_OscConfig+0x680>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e185      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4ba1      	ldr	r3, [pc, #644]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001256:	231f      	movs	r3, #31
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001260:	4b9c      	ldr	r3, [pc, #624]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001262:	69da      	ldr	r2, [r3, #28]
 8001264:	4b9b      	ldr	r3, [pc, #620]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001266:	499d      	ldr	r1, [pc, #628]	@ (80014dc <HAL_RCC_OscConfig+0x684>)
 8001268:	400a      	ands	r2, r1
 800126a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2210      	movs	r2, #16
 8001272:	4013      	ands	r3, r2
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d12a      	bne.n	80012d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800127e:	4b95      	ldr	r3, [pc, #596]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001282:	4b94      	ldr	r3, [pc, #592]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001284:	2104      	movs	r1, #4
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800128a:	4b92      	ldr	r3, [pc, #584]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128e:	4b91      	ldr	r3, [pc, #580]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001290:	2101      	movs	r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fb67 	bl	8000968 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012a0:	f7ff fb62 	bl	8000968 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e152      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0f1      	beq.n	80012a0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012bc:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c0:	22f8      	movs	r2, #248	@ 0xf8
 80012c2:	4393      	bics	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	00da      	lsls	r2, r3, #3
 80012cc:	4b81      	ldr	r3, [pc, #516]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d2:	e034      	b.n	800133e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	3305      	adds	r3, #5
 80012da:	d111      	bne.n	8001300 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012dc:	4b7d      	ldr	r3, [pc, #500]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e0:	4b7c      	ldr	r3, [pc, #496]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	2104      	movs	r1, #4
 80012e4:	438a      	bics	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012e8:	4b7a      	ldr	r3, [pc, #488]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ec:	22f8      	movs	r2, #248	@ 0xf8
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	00da      	lsls	r2, r3, #3
 80012f8:	4b76      	ldr	r3, [pc, #472]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012fe:	e01e      	b.n	800133e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001300:	4b74      	ldr	r3, [pc, #464]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001304:	4b73      	ldr	r3, [pc, #460]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001306:	2104      	movs	r1, #4
 8001308:	430a      	orrs	r2, r1
 800130a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800130c:	4b71      	ldr	r3, [pc, #452]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800130e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001310:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fb26 	bl	8000968 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001322:	f7ff fb21 	bl	8000968 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e111      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001334:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d1f1      	bne.n	8001322 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2220      	movs	r2, #32
 8001344:	4013      	ands	r3, r2
 8001346:	d05c      	beq.n	8001402 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001348:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	220c      	movs	r2, #12
 800134e:	4013      	ands	r3, r2
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d00e      	beq.n	8001372 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001354:	4b5f      	ldr	r3, [pc, #380]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	220c      	movs	r2, #12
 800135a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800135c:	2b08      	cmp	r3, #8
 800135e:	d114      	bne.n	800138a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001360:	4b5c      	ldr	r3, [pc, #368]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	23c0      	movs	r3, #192	@ 0xc0
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	401a      	ands	r2, r3
 800136a:	23c0      	movs	r3, #192	@ 0xc0
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	429a      	cmp	r2, r3
 8001370:	d10b      	bne.n	800138a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001372:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	4013      	ands	r3, r2
 800137c:	d040      	beq.n	8001400 <HAL_RCC_OscConfig+0x5a8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d03c      	beq.n	8001400 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0e6      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01b      	beq.n	80013ca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001392:	4b50      	ldr	r3, [pc, #320]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001396:	4b4f      	ldr	r3, [pc, #316]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	0249      	lsls	r1, r1, #9
 800139c:	430a      	orrs	r2, r1
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fae2 	bl	8000968 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013aa:	f7ff fadd 	bl	8000968 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0cd      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013bc:	4b45      	ldr	r3, [pc, #276]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80013be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	4013      	ands	r3, r2
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x552>
 80013c8:	e01b      	b.n	8001402 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013ca:	4b42      	ldr	r3, [pc, #264]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80013cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80013d0:	4943      	ldr	r1, [pc, #268]	@ (80014e0 <HAL_RCC_OscConfig+0x688>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fac7 	bl	8000968 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e0:	f7ff fac2 	bl	8000968 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0b2      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80013f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x588>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001400:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x5b4>
 800140a:	e0a4      	b.n	8001556 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	220c      	movs	r2, #12
 8001412:	4013      	ands	r3, r2
 8001414:	2b08      	cmp	r3, #8
 8001416:	d100      	bne.n	800141a <HAL_RCC_OscConfig+0x5c2>
 8001418:	e078      	b.n	800150c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	2b02      	cmp	r3, #2
 8001420:	d14c      	bne.n	80014bc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001428:	492e      	ldr	r1, [pc, #184]	@ (80014e4 <HAL_RCC_OscConfig+0x68c>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fa9b 	bl	8000968 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fa96 	bl	8000968 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e086      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	049b      	lsls	r3, r3, #18
 8001452:	4013      	ands	r3, r2
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	220f      	movs	r2, #15
 800145c:	4393      	bics	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001466:	430a      	orrs	r2, r1
 8001468:	62da      	str	r2, [r3, #44]	@ 0x2c
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a1e      	ldr	r2, [pc, #120]	@ (80014e8 <HAL_RCC_OscConfig+0x690>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	431a      	orrs	r2, r3
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	0449      	lsls	r1, r1, #17
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fa69 	bl	8000968 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fa64 	bl	8000968 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e054      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	049b      	lsls	r3, r3, #18
 80014b6:	4013      	ands	r3, r2
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x644>
 80014ba:	e04c      	b.n	8001556 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <HAL_RCC_OscConfig+0x68c>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fa4e 	bl	8000968 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x6a6>
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40021000 	.word	0x40021000
 80014d8:	00001388 	.word	0x00001388
 80014dc:	efffffff 	.word	0xefffffff
 80014e0:	fffeffff 	.word	0xfffeffff
 80014e4:	feffffff 	.word	0xfeffffff
 80014e8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fa3c 	bl	8000968 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e02c      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_RCC_OscConfig+0x708>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	049b      	lsls	r3, r3, #18
 8001506:	4013      	ands	r3, r2
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x694>
 800150a:	e024      	b.n	8001556 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e01f      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_RCC_OscConfig+0x708>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_RCC_OscConfig+0x708>)
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	23c0      	movs	r3, #192	@ 0xc0
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	429a      	cmp	r2, r3
 8001532:	d10e      	bne.n	8001552 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	220f      	movs	r2, #15
 8001538:	401a      	ands	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	23f0      	movs	r3, #240	@ 0xf0
 8001546:	039b      	lsls	r3, r3, #14
 8001548:	401a      	ands	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b008      	add	sp, #32
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0bf      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b61      	ldr	r3, [pc, #388]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	4013      	ands	r3, r2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d911      	bls.n	80015aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4393      	bics	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0a6      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2204      	movs	r2, #4
 80015ba:	4013      	ands	r3, r2
 80015bc:	d006      	beq.n	80015cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015be:	4b51      	ldr	r3, [pc, #324]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80015c4:	21e0      	movs	r1, #224	@ 0xe0
 80015c6:	00c9      	lsls	r1, r1, #3
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	22f0      	movs	r2, #240	@ 0xf0
 80015d2:	4393      	bics	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d04c      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	029b      	lsls	r3, r3, #10
 80015fa:	4013      	ands	r3, r2
 80015fc:	d120      	bne.n	8001640 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	049b      	lsls	r3, r3, #18
 8001612:	4013      	ands	r3, r2
 8001614:	d114      	bne.n	8001640 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06e      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001622:	4b38      	ldr	r3, [pc, #224]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 8001624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	4013      	ands	r3, r2
 800162c:	d108      	bne.n	8001640 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e062      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e05b      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001640:	4b30      	ldr	r3, [pc, #192]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	4393      	bics	r3, r2
 8001648:	0019      	movs	r1, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff f988 	bl	8000968 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165c:	e009      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165e:	f7ff f983 	bl	8000968 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a27      	ldr	r2, [pc, #156]	@ (8001708 <HAL_RCC_ClockConfig+0x1a4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e042      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	220c      	movs	r2, #12
 8001678:	401a      	ands	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1ec      	bne.n	800165e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d211      	bcs.n	80016b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_RCC_ClockConfig+0x19c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e020      	b.n	80016f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d009      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a11      	ldr	r2, [pc, #68]	@ (800170c <HAL_RCC_ClockConfig+0x1a8>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016d4:	f000 f820 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d8:	0001      	movs	r1, r0
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_RCC_ClockConfig+0x1a0>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	220f      	movs	r2, #15
 80016e2:	4013      	ands	r3, r2
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x1ac>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	000a      	movs	r2, r1
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1b0>)
 80016ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff f8f3 	bl	80008dc <HAL_InitTick>
  
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	00001388 	.word	0x00001388
 800170c:	fffff8ff 	.word	0xfffff8ff
 8001710:	08002cd0 	.word	0x08002cd0
 8001714:	20000000 	.word	0x20000000

08001718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08f      	sub	sp, #60	@ 0x3c
 800171c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800171e:	2314      	movs	r3, #20
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	4a38      	ldr	r2, [pc, #224]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xec>)
 8001724:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001726:	c313      	stmia	r3!, {r0, r1, r4}
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4a36      	ldr	r2, [pc, #216]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001730:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001732:	c313      	stmia	r3!, {r0, r1, r4}
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <HAL_RCC_GetSysClockFreq+0xf4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001754:	220c      	movs	r2, #12
 8001756:	4013      	ands	r3, r2
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d047      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xd4>
 800175c:	d849      	bhi.n	80017f2 <HAL_RCC_GetSysClockFreq+0xda>
 800175e:	2b04      	cmp	r3, #4
 8001760:	d002      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x50>
 8001762:	2b08      	cmp	r3, #8
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x56>
 8001766:	e044      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001768:	4b29      	ldr	r3, [pc, #164]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800176c:	e044      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800176e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	220f      	movs	r2, #15
 8001774:	4013      	ands	r3, r2
 8001776:	2214      	movs	r2, #20
 8001778:	18ba      	adds	r2, r7, r2
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	220f      	movs	r2, #15
 8001784:	4013      	ands	r3, r2
 8001786:	1d3a      	adds	r2, r7, #4
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800178c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800178e:	23c0      	movs	r3, #192	@ 0xc0
 8001790:	025b      	lsls	r3, r3, #9
 8001792:	401a      	ands	r2, r3
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	429a      	cmp	r2, r3
 800179a:	d109      	bne.n	80017b0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800179c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800179e:	481c      	ldr	r0, [pc, #112]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a0:	f7fe fcb2 	bl	8000108 <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	4353      	muls	r3, r2
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	e01a      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80017b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b2:	23c0      	movs	r3, #192	@ 0xc0
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	401a      	ands	r2, r3
 80017b8:	23c0      	movs	r3, #192	@ 0xc0
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	429a      	cmp	r2, r3
 80017be:	d109      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017c2:	4814      	ldr	r0, [pc, #80]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017c4:	f7fe fca0 	bl	8000108 <__udivsi3>
 80017c8:	0003      	movs	r3, r0
 80017ca:	001a      	movs	r2, r3
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	4353      	muls	r3, r2
 80017d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d8:	f7fe fc96 	bl	8000108 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	001a      	movs	r2, r3
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	4353      	muls	r3, r2
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80017ea:	e005      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80017f0:	e002      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80017f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b00f      	add	sp, #60	@ 0x3c
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	08002cb0 	.word	0x08002cb0
 8001808:	08002cc0 	.word	0x08002cc0
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	02dc6c00 	.word	0x02dc6c00

08001818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0a8      	b.n	800197c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	2382      	movs	r3, #130	@ 0x82
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	429a      	cmp	r2, r3
 800183c:	d009      	beq.n	8001852 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
 8001844:	e005      	b.n	8001852 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	225d      	movs	r2, #93	@ 0x5d
 800185c:	5c9b      	ldrb	r3, [r3, r2]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	225c      	movs	r2, #92	@ 0x5c
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0018      	movs	r0, r3
 8001870:	f7fe fe2c 	bl	80004cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	225d      	movs	r2, #93	@ 0x5d
 8001878:	2102      	movs	r1, #2
 800187a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2140      	movs	r1, #64	@ 0x40
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	23e0      	movs	r3, #224	@ 0xe0
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	429a      	cmp	r2, r3
 8001896:	d902      	bls.n	800189e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e002      	b.n	80018a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	015b      	lsls	r3, r3, #5
 80018a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	23f0      	movs	r3, #240	@ 0xf0
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d008      	beq.n	80018c2 <HAL_SPI_Init+0xaa>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	23e0      	movs	r3, #224	@ 0xe0
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d002      	beq.n	80018c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	2382      	movs	r3, #130	@ 0x82
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	401a      	ands	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6899      	ldr	r1, [r3, #8]
 80018d0:	2384      	movs	r3, #132	@ 0x84
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	400b      	ands	r3, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2102      	movs	r1, #2
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2101      	movs	r1, #1
 80018e8:	400b      	ands	r3, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6999      	ldr	r1, [r3, #24]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	400b      	ands	r3, r1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2138      	movs	r1, #56	@ 0x38
 80018fe:	400b      	ands	r3, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	400b      	ands	r3, r1
 800190a:	431a      	orrs	r2, r3
 800190c:	0011      	movs	r1, r2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	2204      	movs	r2, #4
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	2110      	movs	r1, #16
 8001930:	400b      	ands	r3, r1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	2108      	movs	r1, #8
 800193a:	400b      	ands	r3, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68d9      	ldr	r1, [r3, #12]
 8001942:	23f0      	movs	r3, #240	@ 0xf0
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	400b      	ands	r3, r1
 8001948:	431a      	orrs	r2, r3
 800194a:	0011      	movs	r1, r2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	2380      	movs	r3, #128	@ 0x80
 8001950:	015b      	lsls	r3, r3, #5
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4907      	ldr	r1, [pc, #28]	@ (8001984 <HAL_SPI_Init+0x16c>)
 8001968:	400a      	ands	r2, r1
 800196a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	225d      	movs	r2, #93	@ 0x5d
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	fffff7ff 	.word	0xfffff7ff

08001988 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	001a      	movs	r2, r3
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800199e:	2323      	movs	r3, #35	@ 0x23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	225c      	movs	r2, #92	@ 0x5c
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_SPI_TransmitReceive+0x2c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e1b5      	b.n	8001d20 <HAL_SPI_TransmitReceive+0x398>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	225c      	movs	r2, #92	@ 0x5c
 80019b8:	2101      	movs	r1, #1
 80019ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019bc:	f7fe ffd4 	bl	8000968 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019c4:	201b      	movs	r0, #27
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	215d      	movs	r1, #93	@ 0x5d
 80019cc:	5c52      	ldrb	r2, [r2, r1]
 80019ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80019d6:	2312      	movs	r3, #18
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	1cba      	adds	r2, r7, #2
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d011      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x84>
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2382      	movs	r3, #130	@ 0x82
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d107      	bne.n	8001a02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_SPI_TransmitReceive+0x7a>
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d004      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001a02:	2323      	movs	r3, #35	@ 0x23
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a0a:	e17e      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x98>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x98>
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d104      	bne.n	8001a2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001a20:	2323      	movs	r3, #35	@ 0x23
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a28:	e16f      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	225d      	movs	r2, #93	@ 0x5d
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d003      	beq.n	8001a3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	225d      	movs	r2, #93	@ 0x5d
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1cba      	adds	r2, r7, #2
 8001a4e:	2146      	movs	r1, #70	@ 0x46
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1cba      	adds	r2, r7, #2
 8001a58:	2144      	movs	r1, #68	@ 0x44
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1cba      	adds	r2, r7, #2
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1cba      	adds	r2, r7, #2
 8001a70:	8812      	ldrh	r2, [r2, #0]
 8001a72:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	23e0      	movs	r3, #224	@ 0xe0
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d908      	bls.n	8001a9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	49a4      	ldr	r1, [pc, #656]	@ (8001d28 <HAL_SPI_TransmitReceive+0x3a0>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	e008      	b.n	8001ab0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	0149      	lsls	r1, r1, #5
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2240      	movs	r2, #64	@ 0x40
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b40      	cmp	r3, #64	@ 0x40
 8001abc:	d007      	beq.n	8001ace <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	23e0      	movs	r3, #224	@ 0xe0
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d800      	bhi.n	8001adc <HAL_SPI_TransmitReceive+0x154>
 8001ada:	e07f      	b.n	8001bdc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_SPI_TransmitReceive+0x168>
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d000      	beq.n	8001af0 <HAL_SPI_TransmitReceive+0x168>
 8001aee:	e069      	b.n	8001bc4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b14:	e056      	b.n	8001bc4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11b      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d113      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b44:	1c9a      	adds	r2, r3, #2
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d11c      	bne.n	8001ba4 <HAL_SPI_TransmitReceive+0x21c>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2246      	movs	r2, #70	@ 0x46
 8001b6e:	5a9b      	ldrh	r3, [r3, r2]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	b292      	uxth	r2, r2
 8001b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	1c9a      	adds	r2, r3, #2
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2246      	movs	r2, #70	@ 0x46
 8001b92:	5a9b      	ldrh	r3, [r3, r2]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2246      	movs	r2, #70	@ 0x46
 8001b9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ba4:	f7fe fee0 	bl	8000968 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d807      	bhi.n	8001bc4 <HAL_SPI_TransmitReceive+0x23c>
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	d004      	beq.n	8001bc4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001bba:	2323      	movs	r3, #35	@ 0x23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
        goto error;
 8001bc2:	e0a2      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1a3      	bne.n	8001b16 <HAL_SPI_TransmitReceive+0x18e>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2246      	movs	r2, #70	@ 0x46
 8001bd2:	5a9b      	ldrh	r3, [r3, r2]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d19d      	bne.n	8001b16 <HAL_SPI_TransmitReceive+0x18e>
 8001bda:	e085      	b.n	8001ce8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_SPI_TransmitReceive+0x268>
 8001be4:	2312      	movs	r3, #18
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d000      	beq.n	8001bf0 <HAL_SPI_TransmitReceive+0x268>
 8001bee:	e070      	b.n	8001cd2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c16:	e05c      	b.n	8001cd2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d11c      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x2d8>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d017      	beq.n	8001c60 <HAL_SPI_TransmitReceive+0x2d8>
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d114      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	330c      	adds	r3, #12
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d11e      	bne.n	8001cac <HAL_SPI_TransmitReceive+0x324>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2246      	movs	r2, #70	@ 0x46
 8001c72:	5a9b      	ldrh	r3, [r3, r2]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d018      	beq.n	8001cac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	330c      	adds	r3, #12
 8001c80:	001a      	movs	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2246      	movs	r2, #70	@ 0x46
 8001c9a:	5a9b      	ldrh	r3, [r3, r2]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2246      	movs	r2, #70	@ 0x46
 8001ca6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cac:	f7fe fe5c 	bl	8000968 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d802      	bhi.n	8001cc2 <HAL_SPI_TransmitReceive+0x33a>
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x340>
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d104      	bne.n	8001cd2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001cc8:	2323      	movs	r3, #35	@ 0x23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2203      	movs	r2, #3
 8001cce:	701a      	strb	r2, [r3, #0]
        goto error;
 8001cd0:	e01b      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d19d      	bne.n	8001c18 <HAL_SPI_TransmitReceive+0x290>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2246      	movs	r2, #70	@ 0x46
 8001ce0:	5a9b      	ldrh	r3, [r3, r2]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d197      	bne.n	8001c18 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 f94c 	bl	8001f8c <SPI_EndRxTxTransaction>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001cf8:	2323      	movs	r3, #35	@ 0x23
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d06:	e000      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001d08:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	225d      	movs	r2, #93	@ 0x5d
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	225c      	movs	r2, #92	@ 0x5c
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d1a:	2323      	movs	r3, #35	@ 0x23
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b00a      	add	sp, #40	@ 0x28
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	ffffefff 	.word	0xffffefff

08001d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d3c:	f7fe fe14 	bl	8000968 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	18d3      	adds	r3, r2, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d4c:	f7fe fe0c 	bl	8000968 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d54:	4b3a      	ldr	r3, [pc, #232]	@ (8001e40 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	015b      	lsls	r3, r3, #5
 8001d5a:	0d1b      	lsrs	r3, r3, #20
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	4353      	muls	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d62:	e058      	b.n	8001e16 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	d055      	beq.n	8001e16 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d6a:	f7fe fdfd 	bl	8000968 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d902      	bls.n	8001d80 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d142      	bne.n	8001e06 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	21e0      	movs	r1, #224	@ 0xe0
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	2382      	movs	r3, #130	@ 0x82
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d113      	bne.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d005      	beq.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2140      	movs	r1, #64	@ 0x40
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	019b      	lsls	r3, r3, #6
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d110      	bne.n	8001df2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	491a      	ldr	r1, [pc, #104]	@ (8001e44 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0189      	lsls	r1, r1, #6
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	225d      	movs	r2, #93	@ 0x5d
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	225c      	movs	r2, #92	@ 0x5c
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e017      	b.n	8001e36 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	425a      	negs	r2, r3
 8001e26:	4153      	adcs	r3, r2
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d197      	bne.n	8001d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b008      	add	sp, #32
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	20000000 	.word	0x20000000
 8001e44:	ffffdfff 	.word	0xffffdfff

08001e48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001e56:	2317      	movs	r3, #23
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e5e:	f7fe fd83 	bl	8000968 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001e6e:	f7fe fd7b 	bl	8000968 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	0013      	movs	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	00da      	lsls	r2, r3, #3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	0d1b      	lsrs	r3, r3, #20
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e90:	4353      	muls	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001e94:	e068      	b.n	8001f68 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	23c0      	movs	r3, #192	@ 0xc0
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10a      	bne.n	8001eb6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	2117      	movs	r1, #23
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	d055      	beq.n	8001f68 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ebc:	f7fe fd54 	bl	8000968 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d902      	bls.n	8001ed2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d142      	bne.n	8001f58 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	21e0      	movs	r1, #224	@ 0xe0
 8001ede:	438a      	bics	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2382      	movs	r3, #130	@ 0x82
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d113      	bne.n	8001f16 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d005      	beq.n	8001f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d107      	bne.n	8001f16 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2140      	movs	r1, #64	@ 0x40
 8001f12:	438a      	bics	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d110      	bne.n	8001f44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4916      	ldr	r1, [pc, #88]	@ (8001f88 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	0189      	lsls	r1, r1, #6
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	225d      	movs	r2, #93	@ 0x5d
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	225c      	movs	r2, #92	@ 0x5c
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e010      	b.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }      
      count--;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d18e      	bne.n	8001e96 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b00a      	add	sp, #40	@ 0x28
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	20000000 	.word	0x20000000
 8001f88:	ffffdfff 	.word	0xffffdfff

08001f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	23c0      	movs	r3, #192	@ 0xc0
 8001f9c:	0159      	lsls	r1, r3, #5
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f7ff ff4e 	bl	8001e48 <SPI_WaitFifoStateUntilTimeout>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d007      	beq.n	8001fc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e027      	b.n	8002010 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	0013      	movs	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	f7ff fead 	bl	8001d2c <SPI_WaitFlagStateUntilTimeout>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d007      	beq.n	8001fe6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	2220      	movs	r2, #32
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e014      	b.n	8002010 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	23c0      	movs	r3, #192	@ 0xc0
 8001fea:	00d9      	lsls	r1, r3, #3
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f7ff ff27 	bl	8001e48 <SPI_WaitFifoStateUntilTimeout>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d007      	beq.n	800200e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	2220      	movs	r2, #32
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e000      	b.n	8002010 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e042      	b.n	80020b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	223d      	movs	r2, #61	@ 0x3d
 800202e:	5c9b      	ldrb	r3, [r3, r2]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d107      	bne.n	8002046 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	223c      	movs	r2, #60	@ 0x3c
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe fbad 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223d      	movs	r2, #61	@ 0x3d
 800204a:	2102      	movs	r1, #2
 800204c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3304      	adds	r3, #4
 8002056:	0019      	movs	r1, r3
 8002058:	0010      	movs	r0, r2
 800205a:	f000 fa1f 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2246      	movs	r2, #70	@ 0x46
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223e      	movs	r2, #62	@ 0x3e
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223f      	movs	r2, #63	@ 0x3f
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2240      	movs	r2, #64	@ 0x40
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2241      	movs	r2, #65	@ 0x41
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2242      	movs	r2, #66	@ 0x42
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2243      	movs	r2, #67	@ 0x43
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2244      	movs	r2, #68	@ 0x44
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2245      	movs	r2, #69	@ 0x45
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	223d      	movs	r2, #61	@ 0x3d
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e042      	b.n	8002150 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	223d      	movs	r2, #61	@ 0x3d
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223c      	movs	r2, #60	@ 0x3c
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f839 	bl	8002158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223d      	movs	r2, #61	@ 0x3d
 80020ea:	2102      	movs	r1, #2
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	0019      	movs	r1, r3
 80020f8:	0010      	movs	r0, r2
 80020fa:	f000 f9cf 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2246      	movs	r2, #70	@ 0x46
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	223e      	movs	r2, #62	@ 0x3e
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223f      	movs	r2, #63	@ 0x3f
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2241      	movs	r2, #65	@ 0x41
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2242      	movs	r2, #66	@ 0x42
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2243      	movs	r2, #67	@ 0x43
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2244      	movs	r2, #68	@ 0x44
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2245      	movs	r2, #69	@ 0x45
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	223d      	movs	r2, #61	@ 0x3d
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	223c      	movs	r2, #60	@ 0x3c
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002186:	2302      	movs	r3, #2
 8002188:	e0ad      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	223c      	movs	r2, #60	@ 0x3c
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d100      	bne.n	800219a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002198:	e076      	b.n	8002288 <HAL_TIM_PWM_ConfigChannel+0x120>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d900      	bls.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80021a0:	e095      	b.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d04e      	beq.n	8002246 <HAL_TIM_PWM_ConfigChannel+0xde>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d900      	bls.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80021ae:	e08e      	b.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_PWM_ConfigChannel+0x56>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d021      	beq.n	8002200 <HAL_TIM_PWM_ConfigChannel+0x98>
 80021bc:	e087      	b.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f9e8 	bl	800259c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2108      	movs	r1, #8
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6999      	ldr	r1, [r3, #24]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	619a      	str	r2, [r3, #24]
      break;
 80021fe:	e06b      	b.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fa4f 	bl	80026ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	0109      	lsls	r1, r1, #4
 800221c:	430a      	orrs	r2, r1
 800221e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4931      	ldr	r1, [pc, #196]	@ (80022f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800222c:	400a      	ands	r2, r1
 800222e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	021a      	lsls	r2, r3, #8
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	619a      	str	r2, [r3, #24]
      break;
 8002244:	e048      	b.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f000 fab0 	bl	80027b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2108      	movs	r1, #8
 8002260:	430a      	orrs	r2, r1
 8002262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69d9      	ldr	r1, [r3, #28]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	61da      	str	r2, [r3, #28]
      break;
 8002286:	e027      	b.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fb15 	bl	80028c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	0109      	lsls	r1, r1, #4
 80022a4:	430a      	orrs	r2, r1
 80022a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	490f      	ldr	r1, [pc, #60]	@ (80022f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69d9      	ldr	r1, [r3, #28]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
      break;
 80022cc:	e004      	b.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80022ce:	2317      	movs	r3, #23
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
      break;
 80022d6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	223c      	movs	r2, #60	@ 0x3c
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]

  return status;
 80022e0:	2317      	movs	r3, #23
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	fffffbff 	.word	0xfffffbff

080022f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	230f      	movs	r3, #15
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223c      	movs	r2, #60	@ 0x3c
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x20>
 8002310:	2302      	movs	r3, #2
 8002312:	e0bc      	b.n	800248e <HAL_TIM_ConfigClockSource+0x19a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	223c      	movs	r2, #60	@ 0x3c
 8002318:	2101      	movs	r1, #1
 800231a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223d      	movs	r2, #61	@ 0x3d
 8002320:	2102      	movs	r1, #2
 8002322:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2277      	movs	r2, #119	@ 0x77
 8002330:	4393      	bics	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4a58      	ldr	r2, [pc, #352]	@ (8002498 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	0192      	lsls	r2, r2, #6
 800234c:	4293      	cmp	r3, r2
 800234e:	d040      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xde>
 8002350:	2280      	movs	r2, #128	@ 0x80
 8002352:	0192      	lsls	r2, r2, #6
 8002354:	4293      	cmp	r3, r2
 8002356:	d900      	bls.n	800235a <HAL_TIM_ConfigClockSource+0x66>
 8002358:	e088      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	0152      	lsls	r2, r2, #5
 800235e:	4293      	cmp	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_TIM_ConfigClockSource+0x70>
 8002362:	e088      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x182>
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	0152      	lsls	r2, r2, #5
 8002368:	4293      	cmp	r3, r2
 800236a:	d900      	bls.n	800236e <HAL_TIM_ConfigClockSource+0x7a>
 800236c:	e07e      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 800236e:	2b70      	cmp	r3, #112	@ 0x70
 8002370:	d018      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0xb0>
 8002372:	d900      	bls.n	8002376 <HAL_TIM_ConfigClockSource+0x82>
 8002374:	e07a      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 8002376:	2b60      	cmp	r3, #96	@ 0x60
 8002378:	d04f      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x126>
 800237a:	d900      	bls.n	800237e <HAL_TIM_ConfigClockSource+0x8a>
 800237c:	e076      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 800237e:	2b50      	cmp	r3, #80	@ 0x50
 8002380:	d03b      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x106>
 8002382:	d900      	bls.n	8002386 <HAL_TIM_ConfigClockSource+0x92>
 8002384:	e072      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 8002386:	2b40      	cmp	r3, #64	@ 0x40
 8002388:	d057      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x146>
 800238a:	d900      	bls.n	800238e <HAL_TIM_ConfigClockSource+0x9a>
 800238c:	e06e      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 800238e:	2b30      	cmp	r3, #48	@ 0x30
 8002390:	d063      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x166>
 8002392:	d86b      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 8002394:	2b20      	cmp	r3, #32
 8002396:	d060      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x166>
 8002398:	d868      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x178>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d05d      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x166>
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d05b      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x166>
 80023a2:	e063      	b.n	800246c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f000 fb68 	bl	8002a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2277      	movs	r2, #119	@ 0x77
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	609a      	str	r2, [r3, #8]
      break;
 80023d0:	e052      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f000 fb51 	bl	8002a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	01c9      	lsls	r1, r1, #7
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
      break;
 80023f8:	e03e      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	001a      	movs	r2, r3
 8002408:	f000 fac4 	bl	8002994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2150      	movs	r1, #80	@ 0x50
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fb1e 	bl	8002a54 <TIM_ITRx_SetConfig>
      break;
 8002418:	e02e      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	001a      	movs	r2, r3
 8002428:	f000 fae2 	bl	80029f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2160      	movs	r1, #96	@ 0x60
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fb0e 	bl	8002a54 <TIM_ITRx_SetConfig>
      break;
 8002438:	e01e      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	001a      	movs	r2, r3
 8002448:	f000 faa4 	bl	8002994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2140      	movs	r1, #64	@ 0x40
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fafe 	bl	8002a54 <TIM_ITRx_SetConfig>
      break;
 8002458:	e00e      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0019      	movs	r1, r3
 8002464:	0010      	movs	r0, r2
 8002466:	f000 faf5 	bl	8002a54 <TIM_ITRx_SetConfig>
      break;
 800246a:	e005      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800246c:	230f      	movs	r3, #15
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	e000      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002476:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	223d      	movs	r2, #61	@ 0x3d
 800247c:	2101      	movs	r1, #1
 800247e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	223c      	movs	r2, #60	@ 0x3c
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]

  return status;
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	ffff00ff 	.word	0xffff00ff

0800249c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a34      	ldr	r2, [pc, #208]	@ (8002580 <TIM_Base_SetConfig+0xe4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d008      	beq.n	80024c6 <TIM_Base_SetConfig+0x2a>
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d003      	beq.n	80024c6 <TIM_Base_SetConfig+0x2a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a30      	ldr	r2, [pc, #192]	@ (8002584 <TIM_Base_SetConfig+0xe8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d108      	bne.n	80024d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2270      	movs	r2, #112	@ 0x70
 80024ca:	4393      	bics	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a29      	ldr	r2, [pc, #164]	@ (8002580 <TIM_Base_SetConfig+0xe4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d018      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d013      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a25      	ldr	r2, [pc, #148]	@ (8002584 <TIM_Base_SetConfig+0xe8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00f      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a24      	ldr	r2, [pc, #144]	@ (8002588 <TIM_Base_SetConfig+0xec>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00b      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a23      	ldr	r2, [pc, #140]	@ (800258c <TIM_Base_SetConfig+0xf0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <TIM_Base_SetConfig+0xf4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0x76>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <TIM_Base_SetConfig+0xf8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a20      	ldr	r2, [pc, #128]	@ (8002598 <TIM_Base_SetConfig+0xfc>)
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2280      	movs	r2, #128	@ 0x80
 8002528:	4393      	bics	r3, r2
 800252a:	001a      	movs	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0c      	ldr	r2, [pc, #48]	@ (8002580 <TIM_Base_SetConfig+0xe4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00b      	beq.n	800256a <TIM_Base_SetConfig+0xce>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0d      	ldr	r2, [pc, #52]	@ (800258c <TIM_Base_SetConfig+0xf0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <TIM_Base_SetConfig+0xce>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <TIM_Base_SetConfig+0xf4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d003      	beq.n	800256a <TIM_Base_SetConfig+0xce>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <TIM_Base_SetConfig+0xf8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d103      	bne.n	8002572 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	615a      	str	r2, [r3, #20]
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40002000 	.word	0x40002000
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800
 8002598:	fffffcff 	.word	0xfffffcff

0800259c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2201      	movs	r2, #1
 80025ac:	4393      	bics	r3, r2
 80025ae:	001a      	movs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2270      	movs	r2, #112	@ 0x70
 80025ca:	4393      	bics	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4393      	bics	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2202      	movs	r2, #2
 80025e4:	4393      	bics	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <TIM_OC1_SetConfig+0xf8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00b      	beq.n	8002612 <TIM_OC1_SetConfig+0x76>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a26      	ldr	r2, [pc, #152]	@ (8002698 <TIM_OC1_SetConfig+0xfc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <TIM_OC1_SetConfig+0x76>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a25      	ldr	r2, [pc, #148]	@ (800269c <TIM_OC1_SetConfig+0x100>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_OC1_SetConfig+0x76>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <TIM_OC1_SetConfig+0x104>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10c      	bne.n	800262c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2208      	movs	r2, #8
 8002616:	4393      	bics	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2204      	movs	r2, #4
 8002628:	4393      	bics	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <TIM_OC1_SetConfig+0xf8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_OC1_SetConfig+0xb0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <TIM_OC1_SetConfig+0xfc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <TIM_OC1_SetConfig+0xb0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a17      	ldr	r2, [pc, #92]	@ (800269c <TIM_OC1_SetConfig+0x100>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_OC1_SetConfig+0xb0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <TIM_OC1_SetConfig+0x104>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <TIM_OC1_SetConfig+0x108>)
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <TIM_OC1_SetConfig+0x10c>)
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800
 80026a4:	fffffeff 	.word	0xfffffeff
 80026a8:	fffffdff 	.word	0xfffffdff

080026ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2210      	movs	r2, #16
 80026bc:	4393      	bics	r3, r2
 80026be:	001a      	movs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <TIM_OC2_SetConfig+0xe8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002798 <TIM_OC2_SetConfig+0xec>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2220      	movs	r2, #32
 80026f6:	4393      	bics	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a24      	ldr	r2, [pc, #144]	@ (800279c <TIM_OC2_SetConfig+0xf0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	4393      	bics	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2240      	movs	r2, #64	@ 0x40
 8002726:	4393      	bics	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <TIM_OC2_SetConfig+0xf0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_OC2_SetConfig+0x9e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <TIM_OC2_SetConfig+0xf4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_OC2_SetConfig+0x9e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <TIM_OC2_SetConfig+0xf8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_OC2_SetConfig+0x9e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <TIM_OC2_SetConfig+0xfc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <TIM_OC2_SetConfig+0x100>)
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <TIM_OC2_SetConfig+0x104>)
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffff8fff 	.word	0xffff8fff
 8002798:	fffffcff 	.word	0xfffffcff
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40014400 	.word	0x40014400
 80027a8:	40014800 	.word	0x40014800
 80027ac:	fffffbff 	.word	0xfffffbff
 80027b0:	fffff7ff 	.word	0xfffff7ff

080027b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a35      	ldr	r2, [pc, #212]	@ (8002898 <TIM_OC3_SetConfig+0xe4>)
 80027c4:	401a      	ands	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2270      	movs	r2, #112	@ 0x70
 80027e0:	4393      	bics	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4393      	bics	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <TIM_OC3_SetConfig+0xe8>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a24      	ldr	r2, [pc, #144]	@ (80028a0 <TIM_OC3_SetConfig+0xec>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4a23      	ldr	r2, [pc, #140]	@ (80028a4 <TIM_OC3_SetConfig+0xf0>)
 8002816:	4013      	ands	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	4a1f      	ldr	r2, [pc, #124]	@ (80028a8 <TIM_OC3_SetConfig+0xf4>)
 800282a:	4013      	ands	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1b      	ldr	r2, [pc, #108]	@ (80028a0 <TIM_OC3_SetConfig+0xec>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <TIM_OC3_SetConfig+0x9a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <TIM_OC3_SetConfig+0xf8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_OC3_SetConfig+0x9a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <TIM_OC3_SetConfig+0xfc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_OC3_SetConfig+0x9a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1a      	ldr	r2, [pc, #104]	@ (80028b4 <TIM_OC3_SetConfig+0x100>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d113      	bne.n	8002876 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4a19      	ldr	r2, [pc, #100]	@ (80028b8 <TIM_OC3_SetConfig+0x104>)
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <TIM_OC3_SetConfig+0x108>)
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	621a      	str	r2, [r3, #32]
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b006      	add	sp, #24
 8002896:	bd80      	pop	{r7, pc}
 8002898:	fffffeff 	.word	0xfffffeff
 800289c:	fffffdff 	.word	0xfffffdff
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	fffff7ff 	.word	0xfffff7ff
 80028a8:	fffffbff 	.word	0xfffffbff
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40014800 	.word	0x40014800
 80028b8:	ffffefff 	.word	0xffffefff
 80028bc:	ffffdfff 	.word	0xffffdfff

080028c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <TIM_OC4_SetConfig+0xb0>)
 80028d0:	401a      	ands	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <TIM_OC4_SetConfig+0xb4>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a21      	ldr	r2, [pc, #132]	@ (8002978 <TIM_OC4_SetConfig+0xb8>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <TIM_OC4_SetConfig+0xbc>)
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <TIM_OC4_SetConfig+0xc0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00b      	beq.n	8002938 <TIM_OC4_SetConfig+0x78>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a18      	ldr	r2, [pc, #96]	@ (8002984 <TIM_OC4_SetConfig+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_OC4_SetConfig+0x78>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a17      	ldr	r2, [pc, #92]	@ (8002988 <TIM_OC4_SetConfig+0xc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_OC4_SetConfig+0x78>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a16      	ldr	r2, [pc, #88]	@ (800298c <TIM_OC4_SetConfig+0xcc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d109      	bne.n	800294c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <TIM_OC4_SetConfig+0xd0>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	ffffefff 	.word	0xffffefff
 8002974:	ffff8fff 	.word	0xffff8fff
 8002978:	fffffcff 	.word	0xfffffcff
 800297c:	ffffdfff 	.word	0xffffdfff
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800
 8002990:	ffffbfff 	.word	0xffffbfff

08002994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4393      	bics	r3, r2
 80029ae:	001a      	movs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	22f0      	movs	r2, #240	@ 0xf0
 80029be:	4393      	bics	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	220a      	movs	r2, #10
 80029d0:	4393      	bics	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b006      	add	sp, #24
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	2210      	movs	r2, #16
 8002a02:	4393      	bics	r3, r2
 8002a04:	001a      	movs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <TIM_TI2_ConfigInputStage+0x60>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	031b      	lsls	r3, r3, #12
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	22a0      	movs	r2, #160	@ 0xa0
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	ffff0fff 	.word	0xffff0fff

08002a54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2270      	movs	r2, #112	@ 0x70
 8002a68:	4393      	bics	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	2207      	movs	r2, #7
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <TIM_ETR_SetConfig+0x3c>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	46c0      	nop			@ (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b006      	add	sp, #24
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffff00ff 	.word	0xffff00ff

08002ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223c      	movs	r2, #60	@ 0x3c
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e047      	b.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	223c      	movs	r2, #60	@ 0x3c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	223d      	movs	r2, #61	@ 0x3d
 8002aec:	2102      	movs	r1, #2
 8002aee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2270      	movs	r2, #112	@ 0x70
 8002b04:	4393      	bics	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a16      	ldr	r2, [pc, #88]	@ (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00f      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	05db      	lsls	r3, r3, #23
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a11      	ldr	r2, [pc, #68]	@ (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10c      	bne.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	4393      	bics	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	223d      	movs	r2, #61	@ 0x3d
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223c      	movs	r2, #60	@ 0x3c
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40014000 	.word	0x40014000

08002b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	@ 0x3c
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e03e      	b.n	8002c1e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223c      	movs	r2, #60	@ 0x3c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	22ff      	movs	r2, #255	@ 0xff
 8002bac:	4393      	bics	r3, r2
 8002bae:	001a      	movs	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a1b      	ldr	r2, [pc, #108]	@ (8002c28 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a18      	ldr	r2, [pc, #96]	@ (8002c2c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002bca:	401a      	ands	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002bd8:	401a      	ands	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002be6:	401a      	ands	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a0e      	ldr	r2, [pc, #56]	@ (8002c3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002c02:	401a      	ands	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	223c      	movs	r2, #60	@ 0x3c
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	fffffcff 	.word	0xfffffcff
 8002c2c:	fffffbff 	.word	0xfffffbff
 8002c30:	fffff7ff 	.word	0xfffff7ff
 8002c34:	ffffefff 	.word	0xffffefff
 8002c38:	ffffdfff 	.word	0xffffdfff
 8002c3c:	ffffbfff 	.word	0xffffbfff

08002c40 <memset>:
 8002c40:	0003      	movs	r3, r0
 8002c42:	1882      	adds	r2, r0, r2
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	7019      	strb	r1, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <__libc_init_array>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	2600      	movs	r6, #0
 8002c54:	4c0c      	ldr	r4, [pc, #48]	@ (8002c88 <__libc_init_array+0x38>)
 8002c56:	4d0d      	ldr	r5, [pc, #52]	@ (8002c8c <__libc_init_array+0x3c>)
 8002c58:	1b64      	subs	r4, r4, r5
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	42a6      	cmp	r6, r4
 8002c5e:	d109      	bne.n	8002c74 <__libc_init_array+0x24>
 8002c60:	2600      	movs	r6, #0
 8002c62:	f000 f819 	bl	8002c98 <_init>
 8002c66:	4c0a      	ldr	r4, [pc, #40]	@ (8002c90 <__libc_init_array+0x40>)
 8002c68:	4d0a      	ldr	r5, [pc, #40]	@ (8002c94 <__libc_init_array+0x44>)
 8002c6a:	1b64      	subs	r4, r4, r5
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	42a6      	cmp	r6, r4
 8002c70:	d105      	bne.n	8002c7e <__libc_init_array+0x2e>
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	00b3      	lsls	r3, r6, #2
 8002c76:	58eb      	ldr	r3, [r5, r3]
 8002c78:	4798      	blx	r3
 8002c7a:	3601      	adds	r6, #1
 8002c7c:	e7ee      	b.n	8002c5c <__libc_init_array+0xc>
 8002c7e:	00b3      	lsls	r3, r6, #2
 8002c80:	58eb      	ldr	r3, [r5, r3]
 8002c82:	4798      	blx	r3
 8002c84:	3601      	adds	r6, #1
 8002c86:	e7f2      	b.n	8002c6e <__libc_init_array+0x1e>
 8002c88:	08002ce0 	.word	0x08002ce0
 8002c8c:	08002ce0 	.word	0x08002ce0
 8002c90:	08002ce4 	.word	0x08002ce4
 8002c94:	08002ce0 	.word	0x08002ce0

08002c98 <_init>:
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9e:	bc08      	pop	{r3}
 8002ca0:	469e      	mov	lr, r3
 8002ca2:	4770      	bx	lr

08002ca4 <_fini>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr
