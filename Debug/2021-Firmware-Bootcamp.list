
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056e0  080056e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e0  080056e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080056f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080056f4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c3  00000000  00000000  0002e16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c97  00000000  00000000  00031aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a1d  00000000  00000000  0004b739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096cec  00000000  00000000  0005d156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  000f3e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f7198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800564c 	.word	0x0800564c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800564c 	.word	0x0800564c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 fdb0 	bl	8001d8c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fafb 	bl	800082c <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f955 	bl	80004ec <__aeabi_fsub>
 8000242:	f000 faf3 	bl	800082c <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	0243      	lsls	r3, r0, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	464f      	mov	r7, r9
 8000258:	4646      	mov	r6, r8
 800025a:	4699      	mov	r9, r3
 800025c:	46d6      	mov	lr, sl
 800025e:	0fc3      	lsrs	r3, r0, #31
 8000260:	0045      	lsls	r5, r0, #1
 8000262:	4698      	mov	r8, r3
 8000264:	b5c0      	push	{r6, r7, lr}
 8000266:	464b      	mov	r3, r9
 8000268:	1c0f      	adds	r7, r1, #0
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	d100      	bne.n	8000270 <__aeabi_fmul+0x20>
 800026e:	e0cb      	b.n	8000408 <__aeabi_fmul+0x1b8>
 8000270:	2dff      	cmp	r5, #255	; 0xff
 8000272:	d100      	bne.n	8000276 <__aeabi_fmul+0x26>
 8000274:	e0cf      	b.n	8000416 <__aeabi_fmul+0x1c6>
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	04d2      	lsls	r2, r2, #19
 800027c:	431a      	orrs	r2, r3
 800027e:	2300      	movs	r3, #0
 8000280:	4691      	mov	r9, r2
 8000282:	2600      	movs	r6, #0
 8000284:	469a      	mov	sl, r3
 8000286:	3d7f      	subs	r5, #127	; 0x7f
 8000288:	027c      	lsls	r4, r7, #9
 800028a:	007b      	lsls	r3, r7, #1
 800028c:	0a64      	lsrs	r4, r4, #9
 800028e:	0e1b      	lsrs	r3, r3, #24
 8000290:	0fff      	lsrs	r7, r7, #31
 8000292:	2b00      	cmp	r3, #0
 8000294:	d100      	bne.n	8000298 <__aeabi_fmul+0x48>
 8000296:	e0a9      	b.n	80003ec <__aeabi_fmul+0x19c>
 8000298:	2bff      	cmp	r3, #255	; 0xff
 800029a:	d011      	beq.n	80002c0 <__aeabi_fmul+0x70>
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	04d2      	lsls	r2, r2, #19
 80002a2:	4314      	orrs	r4, r2
 80002a4:	4642      	mov	r2, r8
 80002a6:	3b7f      	subs	r3, #127	; 0x7f
 80002a8:	195b      	adds	r3, r3, r5
 80002aa:	407a      	eors	r2, r7
 80002ac:	2000      	movs	r0, #0
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	1c5d      	adds	r5, r3, #1
 80002b2:	2e0a      	cmp	r6, #10
 80002b4:	dd13      	ble.n	80002de <__aeabi_fmul+0x8e>
 80002b6:	003a      	movs	r2, r7
 80002b8:	2e0b      	cmp	r6, #11
 80002ba:	d047      	beq.n	800034c <__aeabi_fmul+0xfc>
 80002bc:	4647      	mov	r7, r8
 80002be:	e03f      	b.n	8000340 <__aeabi_fmul+0xf0>
 80002c0:	002b      	movs	r3, r5
 80002c2:	33ff      	adds	r3, #255	; 0xff
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d11e      	bne.n	8000306 <__aeabi_fmul+0xb6>
 80002c8:	2202      	movs	r2, #2
 80002ca:	4316      	orrs	r6, r2
 80002cc:	4642      	mov	r2, r8
 80002ce:	3501      	adds	r5, #1
 80002d0:	407a      	eors	r2, r7
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	35ff      	adds	r5, #255	; 0xff
 80002d6:	2e0a      	cmp	r6, #10
 80002d8:	dd00      	ble.n	80002dc <__aeabi_fmul+0x8c>
 80002da:	e0e4      	b.n	80004a6 <__aeabi_fmul+0x256>
 80002dc:	2002      	movs	r0, #2
 80002de:	2e02      	cmp	r6, #2
 80002e0:	dc1c      	bgt.n	800031c <__aeabi_fmul+0xcc>
 80002e2:	3e01      	subs	r6, #1
 80002e4:	2e01      	cmp	r6, #1
 80002e6:	d842      	bhi.n	800036e <__aeabi_fmul+0x11e>
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d03d      	beq.n	8000368 <__aeabi_fmul+0x118>
 80002ec:	2801      	cmp	r0, #1
 80002ee:	d166      	bne.n	80003be <__aeabi_fmul+0x16e>
 80002f0:	2000      	movs	r0, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	05c0      	lsls	r0, r0, #23
 80002f6:	4308      	orrs	r0, r1
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4310      	orrs	r0, r2
 80002fc:	bce0      	pop	{r5, r6, r7}
 80002fe:	46ba      	mov	sl, r7
 8000300:	46b1      	mov	r9, r6
 8000302:	46a8      	mov	r8, r5
 8000304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000306:	2203      	movs	r2, #3
 8000308:	4316      	orrs	r6, r2
 800030a:	4642      	mov	r2, r8
 800030c:	3501      	adds	r5, #1
 800030e:	407a      	eors	r2, r7
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	35ff      	adds	r5, #255	; 0xff
 8000314:	2e0a      	cmp	r6, #10
 8000316:	dd00      	ble.n	800031a <__aeabi_fmul+0xca>
 8000318:	e0e4      	b.n	80004e4 <__aeabi_fmul+0x294>
 800031a:	2003      	movs	r0, #3
 800031c:	2101      	movs	r1, #1
 800031e:	40b1      	lsls	r1, r6
 8000320:	26a6      	movs	r6, #166	; 0xa6
 8000322:	00f6      	lsls	r6, r6, #3
 8000324:	4231      	tst	r1, r6
 8000326:	d10a      	bne.n	800033e <__aeabi_fmul+0xee>
 8000328:	2690      	movs	r6, #144	; 0x90
 800032a:	00b6      	lsls	r6, r6, #2
 800032c:	4231      	tst	r1, r6
 800032e:	d116      	bne.n	800035e <__aeabi_fmul+0x10e>
 8000330:	3eb9      	subs	r6, #185	; 0xb9
 8000332:	3eff      	subs	r6, #255	; 0xff
 8000334:	420e      	tst	r6, r1
 8000336:	d01a      	beq.n	800036e <__aeabi_fmul+0x11e>
 8000338:	46a1      	mov	r9, r4
 800033a:	4682      	mov	sl, r0
 800033c:	e000      	b.n	8000340 <__aeabi_fmul+0xf0>
 800033e:	0017      	movs	r7, r2
 8000340:	4653      	mov	r3, sl
 8000342:	003a      	movs	r2, r7
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00f      	beq.n	8000368 <__aeabi_fmul+0x118>
 8000348:	464c      	mov	r4, r9
 800034a:	4650      	mov	r0, sl
 800034c:	2803      	cmp	r0, #3
 800034e:	d1cd      	bne.n	80002ec <__aeabi_fmul+0x9c>
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	03c9      	lsls	r1, r1, #15
 8000354:	4321      	orrs	r1, r4
 8000356:	0249      	lsls	r1, r1, #9
 8000358:	20ff      	movs	r0, #255	; 0xff
 800035a:	0a49      	lsrs	r1, r1, #9
 800035c:	e7ca      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	2200      	movs	r2, #0
 8000362:	20ff      	movs	r0, #255	; 0xff
 8000364:	03c9      	lsls	r1, r1, #15
 8000366:	e7c5      	b.n	80002f4 <__aeabi_fmul+0xa4>
 8000368:	20ff      	movs	r0, #255	; 0xff
 800036a:	2100      	movs	r1, #0
 800036c:	e7c2      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800036e:	0c20      	lsrs	r0, r4, #16
 8000370:	4649      	mov	r1, r9
 8000372:	0424      	lsls	r4, r4, #16
 8000374:	0c24      	lsrs	r4, r4, #16
 8000376:	0027      	movs	r7, r4
 8000378:	0c0e      	lsrs	r6, r1, #16
 800037a:	0409      	lsls	r1, r1, #16
 800037c:	0c09      	lsrs	r1, r1, #16
 800037e:	4374      	muls	r4, r6
 8000380:	434f      	muls	r7, r1
 8000382:	4346      	muls	r6, r0
 8000384:	4348      	muls	r0, r1
 8000386:	0c39      	lsrs	r1, r7, #16
 8000388:	1900      	adds	r0, r0, r4
 800038a:	1809      	adds	r1, r1, r0
 800038c:	428c      	cmp	r4, r1
 800038e:	d903      	bls.n	8000398 <__aeabi_fmul+0x148>
 8000390:	2080      	movs	r0, #128	; 0x80
 8000392:	0240      	lsls	r0, r0, #9
 8000394:	4684      	mov	ip, r0
 8000396:	4466      	add	r6, ip
 8000398:	043f      	lsls	r7, r7, #16
 800039a:	0408      	lsls	r0, r1, #16
 800039c:	0c3f      	lsrs	r7, r7, #16
 800039e:	19c0      	adds	r0, r0, r7
 80003a0:	0184      	lsls	r4, r0, #6
 80003a2:	1e67      	subs	r7, r4, #1
 80003a4:	41bc      	sbcs	r4, r7
 80003a6:	0c09      	lsrs	r1, r1, #16
 80003a8:	0e80      	lsrs	r0, r0, #26
 80003aa:	1989      	adds	r1, r1, r6
 80003ac:	4304      	orrs	r4, r0
 80003ae:	0189      	lsls	r1, r1, #6
 80003b0:	430c      	orrs	r4, r1
 80003b2:	0109      	lsls	r1, r1, #4
 80003b4:	d571      	bpl.n	800049a <__aeabi_fmul+0x24a>
 80003b6:	2301      	movs	r3, #1
 80003b8:	0861      	lsrs	r1, r4, #1
 80003ba:	401c      	ands	r4, r3
 80003bc:	430c      	orrs	r4, r1
 80003be:	002b      	movs	r3, r5
 80003c0:	337f      	adds	r3, #127	; 0x7f
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dd51      	ble.n	800046a <__aeabi_fmul+0x21a>
 80003c6:	0761      	lsls	r1, r4, #29
 80003c8:	d004      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003ca:	210f      	movs	r1, #15
 80003cc:	4021      	ands	r1, r4
 80003ce:	2904      	cmp	r1, #4
 80003d0:	d000      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003d2:	3404      	adds	r4, #4
 80003d4:	0121      	lsls	r1, r4, #4
 80003d6:	d503      	bpl.n	80003e0 <__aeabi_fmul+0x190>
 80003d8:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <__aeabi_fmul+0x298>)
 80003da:	401c      	ands	r4, r3
 80003dc:	002b      	movs	r3, r5
 80003de:	3380      	adds	r3, #128	; 0x80
 80003e0:	2bfe      	cmp	r3, #254	; 0xfe
 80003e2:	dcc1      	bgt.n	8000368 <__aeabi_fmul+0x118>
 80003e4:	01a1      	lsls	r1, r4, #6
 80003e6:	0a49      	lsrs	r1, r1, #9
 80003e8:	b2d8      	uxtb	r0, r3
 80003ea:	e783      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80003ec:	2c00      	cmp	r4, #0
 80003ee:	d12c      	bne.n	800044a <__aeabi_fmul+0x1fa>
 80003f0:	2301      	movs	r3, #1
 80003f2:	4642      	mov	r2, r8
 80003f4:	431e      	orrs	r6, r3
 80003f6:	002b      	movs	r3, r5
 80003f8:	407a      	eors	r2, r7
 80003fa:	2001      	movs	r0, #1
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	1c5d      	adds	r5, r3, #1
 8000400:	2e0a      	cmp	r6, #10
 8000402:	dd00      	ble.n	8000406 <__aeabi_fmul+0x1b6>
 8000404:	e757      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000406:	e76a      	b.n	80002de <__aeabi_fmul+0x8e>
 8000408:	2b00      	cmp	r3, #0
 800040a:	d110      	bne.n	800042e <__aeabi_fmul+0x1de>
 800040c:	2301      	movs	r3, #1
 800040e:	2604      	movs	r6, #4
 8000410:	2500      	movs	r5, #0
 8000412:	469a      	mov	sl, r3
 8000414:	e738      	b.n	8000288 <__aeabi_fmul+0x38>
 8000416:	2b00      	cmp	r3, #0
 8000418:	d104      	bne.n	8000424 <__aeabi_fmul+0x1d4>
 800041a:	2302      	movs	r3, #2
 800041c:	2608      	movs	r6, #8
 800041e:	25ff      	movs	r5, #255	; 0xff
 8000420:	469a      	mov	sl, r3
 8000422:	e731      	b.n	8000288 <__aeabi_fmul+0x38>
 8000424:	2303      	movs	r3, #3
 8000426:	260c      	movs	r6, #12
 8000428:	25ff      	movs	r5, #255	; 0xff
 800042a:	469a      	mov	sl, r3
 800042c:	e72c      	b.n	8000288 <__aeabi_fmul+0x38>
 800042e:	4648      	mov	r0, r9
 8000430:	f001 fcb6 	bl	8001da0 <__clzsi2>
 8000434:	464a      	mov	r2, r9
 8000436:	1f43      	subs	r3, r0, #5
 8000438:	2576      	movs	r5, #118	; 0x76
 800043a:	409a      	lsls	r2, r3
 800043c:	2300      	movs	r3, #0
 800043e:	426d      	negs	r5, r5
 8000440:	4691      	mov	r9, r2
 8000442:	2600      	movs	r6, #0
 8000444:	469a      	mov	sl, r3
 8000446:	1a2d      	subs	r5, r5, r0
 8000448:	e71e      	b.n	8000288 <__aeabi_fmul+0x38>
 800044a:	0020      	movs	r0, r4
 800044c:	f001 fca8 	bl	8001da0 <__clzsi2>
 8000450:	4642      	mov	r2, r8
 8000452:	1f43      	subs	r3, r0, #5
 8000454:	409c      	lsls	r4, r3
 8000456:	1a2b      	subs	r3, r5, r0
 8000458:	3b76      	subs	r3, #118	; 0x76
 800045a:	407a      	eors	r2, r7
 800045c:	2000      	movs	r0, #0
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	1c5d      	adds	r5, r3, #1
 8000462:	2e0a      	cmp	r6, #10
 8000464:	dd00      	ble.n	8000468 <__aeabi_fmul+0x218>
 8000466:	e726      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000468:	e739      	b.n	80002de <__aeabi_fmul+0x8e>
 800046a:	2101      	movs	r1, #1
 800046c:	1acb      	subs	r3, r1, r3
 800046e:	2b1b      	cmp	r3, #27
 8000470:	dd00      	ble.n	8000474 <__aeabi_fmul+0x224>
 8000472:	e73d      	b.n	80002f0 <__aeabi_fmul+0xa0>
 8000474:	359e      	adds	r5, #158	; 0x9e
 8000476:	0021      	movs	r1, r4
 8000478:	40ac      	lsls	r4, r5
 800047a:	40d9      	lsrs	r1, r3
 800047c:	1e63      	subs	r3, r4, #1
 800047e:	419c      	sbcs	r4, r3
 8000480:	4321      	orrs	r1, r4
 8000482:	074b      	lsls	r3, r1, #29
 8000484:	d004      	beq.n	8000490 <__aeabi_fmul+0x240>
 8000486:	230f      	movs	r3, #15
 8000488:	400b      	ands	r3, r1
 800048a:	2b04      	cmp	r3, #4
 800048c:	d000      	beq.n	8000490 <__aeabi_fmul+0x240>
 800048e:	3104      	adds	r1, #4
 8000490:	014b      	lsls	r3, r1, #5
 8000492:	d504      	bpl.n	800049e <__aeabi_fmul+0x24e>
 8000494:	2001      	movs	r0, #1
 8000496:	2100      	movs	r1, #0
 8000498:	e72c      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800049a:	001d      	movs	r5, r3
 800049c:	e78f      	b.n	80003be <__aeabi_fmul+0x16e>
 800049e:	0189      	lsls	r1, r1, #6
 80004a0:	2000      	movs	r0, #0
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	e726      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004a6:	2302      	movs	r3, #2
 80004a8:	2e0f      	cmp	r6, #15
 80004aa:	d10c      	bne.n	80004c6 <__aeabi_fmul+0x276>
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	464b      	mov	r3, r9
 80004b0:	03c9      	lsls	r1, r1, #15
 80004b2:	420b      	tst	r3, r1
 80004b4:	d00d      	beq.n	80004d2 <__aeabi_fmul+0x282>
 80004b6:	420c      	tst	r4, r1
 80004b8:	d10b      	bne.n	80004d2 <__aeabi_fmul+0x282>
 80004ba:	4321      	orrs	r1, r4
 80004bc:	0249      	lsls	r1, r1, #9
 80004be:	003a      	movs	r2, r7
 80004c0:	20ff      	movs	r0, #255	; 0xff
 80004c2:	0a49      	lsrs	r1, r1, #9
 80004c4:	e716      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004c6:	2e0b      	cmp	r6, #11
 80004c8:	d000      	beq.n	80004cc <__aeabi_fmul+0x27c>
 80004ca:	e6f7      	b.n	80002bc <__aeabi_fmul+0x6c>
 80004cc:	46a1      	mov	r9, r4
 80004ce:	469a      	mov	sl, r3
 80004d0:	e736      	b.n	8000340 <__aeabi_fmul+0xf0>
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	464b      	mov	r3, r9
 80004d6:	03c9      	lsls	r1, r1, #15
 80004d8:	4319      	orrs	r1, r3
 80004da:	0249      	lsls	r1, r1, #9
 80004dc:	4642      	mov	r2, r8
 80004de:	20ff      	movs	r0, #255	; 0xff
 80004e0:	0a49      	lsrs	r1, r1, #9
 80004e2:	e707      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004e4:	2303      	movs	r3, #3
 80004e6:	e7df      	b.n	80004a8 <__aeabi_fmul+0x258>
 80004e8:	f7ffffff 	.word	0xf7ffffff

080004ec <__aeabi_fsub>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	46c6      	mov	lr, r8
 80004f0:	0243      	lsls	r3, r0, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	0045      	lsls	r5, r0, #1
 80004f6:	00da      	lsls	r2, r3, #3
 80004f8:	0fc4      	lsrs	r4, r0, #31
 80004fa:	0248      	lsls	r0, r1, #9
 80004fc:	004f      	lsls	r7, r1, #1
 80004fe:	4694      	mov	ip, r2
 8000500:	0a42      	lsrs	r2, r0, #9
 8000502:	001e      	movs	r6, r3
 8000504:	4690      	mov	r8, r2
 8000506:	b500      	push	{lr}
 8000508:	0e2d      	lsrs	r5, r5, #24
 800050a:	0e3f      	lsrs	r7, r7, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	0980      	lsrs	r0, r0, #6
 8000510:	2fff      	cmp	r7, #255	; 0xff
 8000512:	d059      	beq.n	80005c8 <__aeabi_fsub+0xdc>
 8000514:	2201      	movs	r2, #1
 8000516:	4051      	eors	r1, r2
 8000518:	428c      	cmp	r4, r1
 800051a:	d039      	beq.n	8000590 <__aeabi_fsub+0xa4>
 800051c:	1bea      	subs	r2, r5, r7
 800051e:	2a00      	cmp	r2, #0
 8000520:	dd58      	ble.n	80005d4 <__aeabi_fsub+0xe8>
 8000522:	2f00      	cmp	r7, #0
 8000524:	d068      	beq.n	80005f8 <__aeabi_fsub+0x10c>
 8000526:	2dff      	cmp	r5, #255	; 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fsub+0x40>
 800052a:	e0d1      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	04db      	lsls	r3, r3, #19
 8000530:	4318      	orrs	r0, r3
 8000532:	2a1b      	cmp	r2, #27
 8000534:	dc00      	bgt.n	8000538 <__aeabi_fsub+0x4c>
 8000536:	e0e3      	b.n	8000700 <__aeabi_fsub+0x214>
 8000538:	2301      	movs	r3, #1
 800053a:	4662      	mov	r2, ip
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	015a      	lsls	r2, r3, #5
 8000540:	d400      	bmi.n	8000544 <__aeabi_fsub+0x58>
 8000542:	e0ac      	b.n	800069e <__aeabi_fsub+0x1b2>
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	099e      	lsrs	r6, r3, #6
 8000548:	0030      	movs	r0, r6
 800054a:	f001 fc29 	bl	8001da0 <__clzsi2>
 800054e:	0033      	movs	r3, r6
 8000550:	3805      	subs	r0, #5
 8000552:	4083      	lsls	r3, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fsub+0x6e>
 8000558:	e0c6      	b.n	80006e8 <__aeabi_fsub+0x1fc>
 800055a:	4ab2      	ldr	r2, [pc, #712]	; (8000824 <__aeabi_fsub+0x338>)
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	4013      	ands	r3, r2
 8000560:	075a      	lsls	r2, r3, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fsub+0x82>
 8000564:	220f      	movs	r2, #15
 8000566:	401a      	ands	r2, r3
 8000568:	2a04      	cmp	r2, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fsub+0x82>
 800056c:	3304      	adds	r3, #4
 800056e:	015a      	lsls	r2, r3, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fsub+0x88>
 8000572:	e097      	b.n	80006a4 <__aeabi_fsub+0x1b8>
 8000574:	1c6a      	adds	r2, r5, #1
 8000576:	2dfe      	cmp	r5, #254	; 0xfe
 8000578:	d100      	bne.n	800057c <__aeabi_fsub+0x90>
 800057a:	e084      	b.n	8000686 <__aeabi_fsub+0x19a>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	0a5e      	lsrs	r6, r3, #9
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	05d0      	lsls	r0, r2, #23
 8000584:	4330      	orrs	r0, r6
 8000586:	07e4      	lsls	r4, r4, #31
 8000588:	4320      	orrs	r0, r4
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000590:	1bea      	subs	r2, r5, r7
 8000592:	2a00      	cmp	r2, #0
 8000594:	dd41      	ble.n	800061a <__aeabi_fsub+0x12e>
 8000596:	2f00      	cmp	r7, #0
 8000598:	d06b      	beq.n	8000672 <__aeabi_fsub+0x186>
 800059a:	2dff      	cmp	r5, #255	; 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0xb4>
 800059e:	e097      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4318      	orrs	r0, r3
 80005a6:	2a1b      	cmp	r2, #27
 80005a8:	dc00      	bgt.n	80005ac <__aeabi_fsub+0xc0>
 80005aa:	e0cc      	b.n	8000746 <__aeabi_fsub+0x25a>
 80005ac:	2301      	movs	r3, #1
 80005ae:	4463      	add	r3, ip
 80005b0:	015a      	lsls	r2, r3, #5
 80005b2:	d574      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 80005b4:	3501      	adds	r5, #1
 80005b6:	2dff      	cmp	r5, #255	; 0xff
 80005b8:	d065      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80005ba:	2201      	movs	r2, #1
 80005bc:	499a      	ldr	r1, [pc, #616]	; (8000828 <__aeabi_fsub+0x33c>)
 80005be:	401a      	ands	r2, r3
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	400b      	ands	r3, r1
 80005c4:	4313      	orrs	r3, r2
 80005c6:	e7cb      	b.n	8000560 <__aeabi_fsub+0x74>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d01f      	beq.n	800060c <__aeabi_fsub+0x120>
 80005cc:	428c      	cmp	r4, r1
 80005ce:	d022      	beq.n	8000616 <__aeabi_fsub+0x12a>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3aff      	subs	r2, #255	; 0xff
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d035      	beq.n	8000644 <__aeabi_fsub+0x158>
 80005d8:	1b7a      	subs	r2, r7, r5
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fsub+0xf4>
 80005de:	e099      	b.n	8000714 <__aeabi_fsub+0x228>
 80005e0:	4663      	mov	r3, ip
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fsub+0xfc>
 80005e6:	e0dd      	b.n	80007a4 <__aeabi_fsub+0x2b8>
 80005e8:	1e53      	subs	r3, r2, #1
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fsub+0x104>
 80005ee:	e105      	b.n	80007fc <__aeabi_fsub+0x310>
 80005f0:	2aff      	cmp	r2, #255	; 0xff
 80005f2:	d06b      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 80005f4:	001a      	movs	r2, r3
 80005f6:	e094      	b.n	8000722 <__aeabi_fsub+0x236>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d073      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 80005fc:	1e51      	subs	r1, r2, #1
 80005fe:	2a01      	cmp	r2, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x118>
 8000602:	e0df      	b.n	80007c4 <__aeabi_fsub+0x2d8>
 8000604:	2aff      	cmp	r2, #255	; 0xff
 8000606:	d063      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000608:	000a      	movs	r2, r1
 800060a:	e792      	b.n	8000532 <__aeabi_fsub+0x46>
 800060c:	2201      	movs	r2, #1
 800060e:	4051      	eors	r1, r2
 8000610:	42a1      	cmp	r1, r4
 8000612:	d000      	beq.n	8000616 <__aeabi_fsub+0x12a>
 8000614:	e782      	b.n	800051c <__aeabi_fsub+0x30>
 8000616:	002a      	movs	r2, r5
 8000618:	3aff      	subs	r2, #255	; 0xff
 800061a:	2a00      	cmp	r2, #0
 800061c:	d036      	beq.n	800068c <__aeabi_fsub+0x1a0>
 800061e:	1b7a      	subs	r2, r7, r5
 8000620:	2d00      	cmp	r5, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fsub+0x13a>
 8000624:	e0aa      	b.n	800077c <__aeabi_fsub+0x290>
 8000626:	2fff      	cmp	r7, #255	; 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fsub+0x140>
 800062a:	e0da      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	4661      	mov	r1, ip
 8000630:	04db      	lsls	r3, r3, #19
 8000632:	4319      	orrs	r1, r3
 8000634:	468c      	mov	ip, r1
 8000636:	2a1b      	cmp	r2, #27
 8000638:	dc00      	bgt.n	800063c <__aeabi_fsub+0x150>
 800063a:	e0d4      	b.n	80007e6 <__aeabi_fsub+0x2fa>
 800063c:	2301      	movs	r3, #1
 800063e:	003d      	movs	r5, r7
 8000640:	181b      	adds	r3, r3, r0
 8000642:	e7b5      	b.n	80005b0 <__aeabi_fsub+0xc4>
 8000644:	27fe      	movs	r7, #254	; 0xfe
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	4217      	tst	r7, r2
 800064a:	d171      	bne.n	8000730 <__aeabi_fsub+0x244>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_fsub+0x166>
 8000650:	e09e      	b.n	8000790 <__aeabi_fsub+0x2a4>
 8000652:	4663      	mov	r3, ip
 8000654:	2b00      	cmp	r3, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x16e>
 8000658:	e0d5      	b.n	8000806 <__aeabi_fsub+0x31a>
 800065a:	2200      	movs	r2, #0
 800065c:	2800      	cmp	r0, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fsub+0x176>
 8000660:	e78f      	b.n	8000582 <__aeabi_fsub+0x96>
 8000662:	1a1b      	subs	r3, r3, r0
 8000664:	015e      	lsls	r6, r3, #5
 8000666:	d400      	bmi.n	800066a <__aeabi_fsub+0x17e>
 8000668:	e0d6      	b.n	8000818 <__aeabi_fsub+0x32c>
 800066a:	4663      	mov	r3, ip
 800066c:	000c      	movs	r4, r1
 800066e:	1ac3      	subs	r3, r0, r3
 8000670:	e776      	b.n	8000560 <__aeabi_fsub+0x74>
 8000672:	2800      	cmp	r0, #0
 8000674:	d036      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 8000676:	1e51      	subs	r1, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fsub+0x192>
 800067c:	e09a      	b.n	80007b4 <__aeabi_fsub+0x2c8>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d026      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000682:	000a      	movs	r2, r1
 8000684:	e78f      	b.n	80005a6 <__aeabi_fsub+0xba>
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	2600      	movs	r6, #0
 800068a:	e77a      	b.n	8000582 <__aeabi_fsub+0x96>
 800068c:	27fe      	movs	r7, #254	; 0xfe
 800068e:	1c6a      	adds	r2, r5, #1
 8000690:	4217      	tst	r7, r2
 8000692:	d062      	beq.n	800075a <__aeabi_fsub+0x26e>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0f6      	beq.n	8000686 <__aeabi_fsub+0x19a>
 8000698:	0015      	movs	r5, r2
 800069a:	4460      	add	r0, ip
 800069c:	0843      	lsrs	r3, r0, #1
 800069e:	075a      	lsls	r2, r3, #29
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fsub+0x1b8>
 80006a2:	e75f      	b.n	8000564 <__aeabi_fsub+0x78>
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	2dff      	cmp	r5, #255	; 0xff
 80006a8:	d012      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006aa:	025b      	lsls	r3, r3, #9
 80006ac:	0a5e      	lsrs	r6, r3, #9
 80006ae:	b2ea      	uxtb	r2, r5
 80006b0:	e767      	b.n	8000582 <__aeabi_fsub+0x96>
 80006b2:	4662      	mov	r2, ip
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 80006b8:	e093      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d008      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	03d2      	lsls	r2, r2, #15
 80006c2:	4213      	tst	r3, r2
 80006c4:	d004      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006c6:	4640      	mov	r0, r8
 80006c8:	4210      	tst	r0, r2
 80006ca:	d101      	bne.n	80006d0 <__aeabi_fsub+0x1e4>
 80006cc:	000c      	movs	r4, r1
 80006ce:	4643      	mov	r3, r8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0d8      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80006d4:	2680      	movs	r6, #128	; 0x80
 80006d6:	03f6      	lsls	r6, r6, #15
 80006d8:	431e      	orrs	r6, r3
 80006da:	0276      	lsls	r6, r6, #9
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	0a76      	lsrs	r6, r6, #9
 80006e0:	e74f      	b.n	8000582 <__aeabi_fsub+0x96>
 80006e2:	4643      	mov	r3, r8
 80006e4:	0015      	movs	r5, r2
 80006e6:	e7de      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80006e8:	2220      	movs	r2, #32
 80006ea:	1b40      	subs	r0, r0, r5
 80006ec:	3001      	adds	r0, #1
 80006ee:	1a12      	subs	r2, r2, r0
 80006f0:	0019      	movs	r1, r3
 80006f2:	4093      	lsls	r3, r2
 80006f4:	40c1      	lsrs	r1, r0
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	2500      	movs	r5, #0
 80006fc:	430b      	orrs	r3, r1
 80006fe:	e72f      	b.n	8000560 <__aeabi_fsub+0x74>
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	0001      	movs	r1, r0
 8000706:	4098      	lsls	r0, r3
 8000708:	0003      	movs	r3, r0
 800070a:	40d1      	lsrs	r1, r2
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	4193      	sbcs	r3, r2
 8000710:	430b      	orrs	r3, r1
 8000712:	e712      	b.n	800053a <__aeabi_fsub+0x4e>
 8000714:	2fff      	cmp	r7, #255	; 0xff
 8000716:	d0d9      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	4664      	mov	r4, ip
 800071c:	04db      	lsls	r3, r3, #19
 800071e:	431c      	orrs	r4, r3
 8000720:	46a4      	mov	ip, r4
 8000722:	2a1b      	cmp	r2, #27
 8000724:	dd52      	ble.n	80007cc <__aeabi_fsub+0x2e0>
 8000726:	2301      	movs	r3, #1
 8000728:	000c      	movs	r4, r1
 800072a:	003d      	movs	r5, r7
 800072c:	1ac3      	subs	r3, r0, r3
 800072e:	e706      	b.n	800053e <__aeabi_fsub+0x52>
 8000730:	4663      	mov	r3, ip
 8000732:	1a1e      	subs	r6, r3, r0
 8000734:	0173      	lsls	r3, r6, #5
 8000736:	d439      	bmi.n	80007ac <__aeabi_fsub+0x2c0>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fsub+0x252>
 800073c:	e704      	b.n	8000548 <__aeabi_fsub+0x5c>
 800073e:	2400      	movs	r4, #0
 8000740:	2200      	movs	r2, #0
 8000742:	2600      	movs	r6, #0
 8000744:	e71d      	b.n	8000582 <__aeabi_fsub+0x96>
 8000746:	2320      	movs	r3, #32
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	0001      	movs	r1, r0
 800074c:	4098      	lsls	r0, r3
 800074e:	0003      	movs	r3, r0
 8000750:	40d1      	lsrs	r1, r2
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	430b      	orrs	r3, r1
 8000758:	e729      	b.n	80005ae <__aeabi_fsub+0xc2>
 800075a:	2d00      	cmp	r5, #0
 800075c:	d1a9      	bne.n	80006b2 <__aeabi_fsub+0x1c6>
 800075e:	4663      	mov	r3, ip
 8000760:	2b00      	cmp	r3, #0
 8000762:	d056      	beq.n	8000812 <__aeabi_fsub+0x326>
 8000764:	2200      	movs	r2, #0
 8000766:	2800      	cmp	r0, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x280>
 800076a:	e70a      	b.n	8000582 <__aeabi_fsub+0x96>
 800076c:	0003      	movs	r3, r0
 800076e:	4463      	add	r3, ip
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d594      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <__aeabi_fsub+0x338>)
 8000776:	3501      	adds	r5, #1
 8000778:	4013      	ands	r3, r2
 800077a:	e790      	b.n	800069e <__aeabi_fsub+0x1b2>
 800077c:	4663      	mov	r3, ip
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0af      	beq.n	80006e2 <__aeabi_fsub+0x1f6>
 8000782:	1e53      	subs	r3, r2, #1
 8000784:	2a01      	cmp	r2, #1
 8000786:	d015      	beq.n	80007b4 <__aeabi_fsub+0x2c8>
 8000788:	2aff      	cmp	r2, #255	; 0xff
 800078a:	d02a      	beq.n	80007e2 <__aeabi_fsub+0x2f6>
 800078c:	001a      	movs	r2, r3
 800078e:	e752      	b.n	8000636 <__aeabi_fsub+0x14a>
 8000790:	4662      	mov	r2, ip
 8000792:	2a00      	cmp	r2, #0
 8000794:	d191      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 8000796:	2800      	cmp	r0, #0
 8000798:	d198      	bne.n	80006cc <__aeabi_fsub+0x1e0>
 800079a:	2680      	movs	r6, #128	; 0x80
 800079c:	2400      	movs	r4, #0
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	03f6      	lsls	r6, r6, #15
 80007a2:	e6ee      	b.n	8000582 <__aeabi_fsub+0x96>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	0015      	movs	r5, r2
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80007ac:	4663      	mov	r3, ip
 80007ae:	000c      	movs	r4, r1
 80007b0:	1ac6      	subs	r6, r0, r3
 80007b2:	e6c9      	b.n	8000548 <__aeabi_fsub+0x5c>
 80007b4:	0003      	movs	r3, r0
 80007b6:	4463      	add	r3, ip
 80007b8:	2501      	movs	r5, #1
 80007ba:	015a      	lsls	r2, r3, #5
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_fsub+0x2d4>
 80007be:	e76e      	b.n	800069e <__aeabi_fsub+0x1b2>
 80007c0:	2502      	movs	r5, #2
 80007c2:	e6fa      	b.n	80005ba <__aeabi_fsub+0xce>
 80007c4:	4663      	mov	r3, ip
 80007c6:	2501      	movs	r5, #1
 80007c8:	1a1b      	subs	r3, r3, r0
 80007ca:	e6b8      	b.n	800053e <__aeabi_fsub+0x52>
 80007cc:	4664      	mov	r4, ip
 80007ce:	2320      	movs	r3, #32
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	4662      	mov	r2, ip
 80007d6:	409a      	lsls	r2, r3
 80007d8:	0013      	movs	r3, r2
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4323      	orrs	r3, r4
 80007e0:	e7a2      	b.n	8000728 <__aeabi_fsub+0x23c>
 80007e2:	4643      	mov	r3, r8
 80007e4:	e774      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80007e6:	4661      	mov	r1, ip
 80007e8:	2320      	movs	r3, #32
 80007ea:	40d1      	lsrs	r1, r2
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4662      	mov	r2, ip
 80007f0:	409a      	lsls	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	430b      	orrs	r3, r1
 80007fa:	e720      	b.n	800063e <__aeabi_fsub+0x152>
 80007fc:	4663      	mov	r3, ip
 80007fe:	000c      	movs	r4, r1
 8000800:	2501      	movs	r5, #1
 8000802:	1ac3      	subs	r3, r0, r3
 8000804:	e69b      	b.n	800053e <__aeabi_fsub+0x52>
 8000806:	2800      	cmp	r0, #0
 8000808:	d099      	beq.n	800073e <__aeabi_fsub+0x252>
 800080a:	000c      	movs	r4, r1
 800080c:	4646      	mov	r6, r8
 800080e:	2200      	movs	r2, #0
 8000810:	e6b7      	b.n	8000582 <__aeabi_fsub+0x96>
 8000812:	4646      	mov	r6, r8
 8000814:	2200      	movs	r2, #0
 8000816:	e6b4      	b.n	8000582 <__aeabi_fsub+0x96>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d000      	beq.n	800081e <__aeabi_fsub+0x332>
 800081c:	e73f      	b.n	800069e <__aeabi_fsub+0x1b2>
 800081e:	2400      	movs	r4, #0
 8000820:	2600      	movs	r6, #0
 8000822:	e6ae      	b.n	8000582 <__aeabi_fsub+0x96>
 8000824:	fbffffff 	.word	0xfbffffff
 8000828:	7dffffff 	.word	0x7dffffff

0800082c <__aeabi_f2iz>:
 800082c:	0241      	lsls	r1, r0, #9
 800082e:	0042      	lsls	r2, r0, #1
 8000830:	0fc3      	lsrs	r3, r0, #31
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	2000      	movs	r0, #0
 8000836:	0e12      	lsrs	r2, r2, #24
 8000838:	2a7e      	cmp	r2, #126	; 0x7e
 800083a:	dd03      	ble.n	8000844 <__aeabi_f2iz+0x18>
 800083c:	2a9d      	cmp	r2, #157	; 0x9d
 800083e:	dd02      	ble.n	8000846 <__aeabi_f2iz+0x1a>
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <__aeabi_f2iz+0x3c>)
 8000842:	1898      	adds	r0, r3, r2
 8000844:	4770      	bx	lr
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4301      	orrs	r1, r0
 800084c:	2a95      	cmp	r2, #149	; 0x95
 800084e:	dc07      	bgt.n	8000860 <__aeabi_f2iz+0x34>
 8000850:	2096      	movs	r0, #150	; 0x96
 8000852:	1a82      	subs	r2, r0, r2
 8000854:	40d1      	lsrs	r1, r2
 8000856:	4248      	negs	r0, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f3      	bne.n	8000844 <__aeabi_f2iz+0x18>
 800085c:	0008      	movs	r0, r1
 800085e:	e7f1      	b.n	8000844 <__aeabi_f2iz+0x18>
 8000860:	3a96      	subs	r2, #150	; 0x96
 8000862:	4091      	lsls	r1, r2
 8000864:	e7f7      	b.n	8000856 <__aeabi_f2iz+0x2a>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	7fffffff 	.word	0x7fffffff

0800086c <__aeabi_i2f>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	2800      	cmp	r0, #0
 8000870:	d013      	beq.n	800089a <__aeabi_i2f+0x2e>
 8000872:	17c3      	asrs	r3, r0, #31
 8000874:	18c5      	adds	r5, r0, r3
 8000876:	405d      	eors	r5, r3
 8000878:	0fc4      	lsrs	r4, r0, #31
 800087a:	0028      	movs	r0, r5
 800087c:	f001 fa90 	bl	8001da0 <__clzsi2>
 8000880:	239e      	movs	r3, #158	; 0x9e
 8000882:	0001      	movs	r1, r0
 8000884:	1a1b      	subs	r3, r3, r0
 8000886:	2b96      	cmp	r3, #150	; 0x96
 8000888:	dc0f      	bgt.n	80008aa <__aeabi_i2f+0x3e>
 800088a:	2808      	cmp	r0, #8
 800088c:	d031      	beq.n	80008f2 <__aeabi_i2f+0x86>
 800088e:	3908      	subs	r1, #8
 8000890:	408d      	lsls	r5, r1
 8000892:	026d      	lsls	r5, r5, #9
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	b2d8      	uxtb	r0, r3
 8000898:	e002      	b.n	80008a0 <__aeabi_i2f+0x34>
 800089a:	2400      	movs	r4, #0
 800089c:	2000      	movs	r0, #0
 800089e:	2500      	movs	r5, #0
 80008a0:	05c0      	lsls	r0, r0, #23
 80008a2:	4328      	orrs	r0, r5
 80008a4:	07e4      	lsls	r4, r4, #31
 80008a6:	4320      	orrs	r0, r4
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	2b99      	cmp	r3, #153	; 0x99
 80008ac:	dd0c      	ble.n	80008c8 <__aeabi_i2f+0x5c>
 80008ae:	2205      	movs	r2, #5
 80008b0:	1a12      	subs	r2, r2, r0
 80008b2:	0028      	movs	r0, r5
 80008b4:	40d0      	lsrs	r0, r2
 80008b6:	0002      	movs	r2, r0
 80008b8:	0008      	movs	r0, r1
 80008ba:	301b      	adds	r0, #27
 80008bc:	4085      	lsls	r5, r0
 80008be:	0028      	movs	r0, r5
 80008c0:	1e45      	subs	r5, r0, #1
 80008c2:	41a8      	sbcs	r0, r5
 80008c4:	4302      	orrs	r2, r0
 80008c6:	0015      	movs	r5, r2
 80008c8:	2905      	cmp	r1, #5
 80008ca:	dc16      	bgt.n	80008fa <__aeabi_i2f+0x8e>
 80008cc:	002a      	movs	r2, r5
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <__aeabi_i2f+0xa0>)
 80008d0:	4002      	ands	r2, r0
 80008d2:	076e      	lsls	r6, r5, #29
 80008d4:	d009      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008d6:	260f      	movs	r6, #15
 80008d8:	4035      	ands	r5, r6
 80008da:	2d04      	cmp	r5, #4
 80008dc:	d005      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008de:	3204      	adds	r2, #4
 80008e0:	0155      	lsls	r5, r2, #5
 80008e2:	d502      	bpl.n	80008ea <__aeabi_i2f+0x7e>
 80008e4:	239f      	movs	r3, #159	; 0x9f
 80008e6:	4002      	ands	r2, r0
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	0192      	lsls	r2, r2, #6
 80008ec:	0a55      	lsrs	r5, r2, #9
 80008ee:	b2d8      	uxtb	r0, r3
 80008f0:	e7d6      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008f2:	026d      	lsls	r5, r5, #9
 80008f4:	2096      	movs	r0, #150	; 0x96
 80008f6:	0a6d      	lsrs	r5, r5, #9
 80008f8:	e7d2      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008fa:	1f4a      	subs	r2, r1, #5
 80008fc:	4095      	lsls	r5, r2
 80008fe:	002a      	movs	r2, r5
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <__aeabi_i2f+0xa0>)
 8000902:	4002      	ands	r2, r0
 8000904:	076e      	lsls	r6, r5, #29
 8000906:	d0f0      	beq.n	80008ea <__aeabi_i2f+0x7e>
 8000908:	e7e5      	b.n	80008d6 <__aeabi_i2f+0x6a>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	fbffffff 	.word	0xfbffffff

08000910 <__aeabi_dadd>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	464f      	mov	r7, r9
 8000914:	4646      	mov	r6, r8
 8000916:	46d6      	mov	lr, sl
 8000918:	0004      	movs	r4, r0
 800091a:	b5c0      	push	{r6, r7, lr}
 800091c:	001f      	movs	r7, r3
 800091e:	030b      	lsls	r3, r1, #12
 8000920:	0010      	movs	r0, r2
 8000922:	004e      	lsls	r6, r1, #1
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	0fcd      	lsrs	r5, r1, #31
 8000928:	0f61      	lsrs	r1, r4, #29
 800092a:	007a      	lsls	r2, r7, #1
 800092c:	4319      	orrs	r1, r3
 800092e:	00e3      	lsls	r3, r4, #3
 8000930:	033c      	lsls	r4, r7, #12
 8000932:	0fff      	lsrs	r7, r7, #31
 8000934:	46bc      	mov	ip, r7
 8000936:	0a64      	lsrs	r4, r4, #9
 8000938:	0f47      	lsrs	r7, r0, #29
 800093a:	4327      	orrs	r7, r4
 800093c:	0d76      	lsrs	r6, r6, #21
 800093e:	0d52      	lsrs	r2, r2, #21
 8000940:	00c0      	lsls	r0, r0, #3
 8000942:	46b9      	mov	r9, r7
 8000944:	4680      	mov	r8, r0
 8000946:	1ab7      	subs	r7, r6, r2
 8000948:	4565      	cmp	r5, ip
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x3e>
 800094c:	e09b      	b.n	8000a86 <__aeabi_dadd+0x176>
 800094e:	2f00      	cmp	r7, #0
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x44>
 8000952:	e084      	b.n	8000a5e <__aeabi_dadd+0x14e>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x4a>
 8000958:	e0be      	b.n	8000ad8 <__aeabi_dadd+0x1c8>
 800095a:	4ac8      	ldr	r2, [pc, #800]	; (8000c7c <__aeabi_dadd+0x36c>)
 800095c:	4296      	cmp	r6, r2
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x52>
 8000960:	e124      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	464c      	mov	r4, r9
 8000966:	0412      	lsls	r2, r2, #16
 8000968:	4314      	orrs	r4, r2
 800096a:	46a1      	mov	r9, r4
 800096c:	2f38      	cmp	r7, #56	; 0x38
 800096e:	dd00      	ble.n	8000972 <__aeabi_dadd+0x62>
 8000970:	e167      	b.n	8000c42 <__aeabi_dadd+0x332>
 8000972:	2f1f      	cmp	r7, #31
 8000974:	dd00      	ble.n	8000978 <__aeabi_dadd+0x68>
 8000976:	e1d6      	b.n	8000d26 <__aeabi_dadd+0x416>
 8000978:	2220      	movs	r2, #32
 800097a:	464c      	mov	r4, r9
 800097c:	1bd2      	subs	r2, r2, r7
 800097e:	4094      	lsls	r4, r2
 8000980:	46a2      	mov	sl, r4
 8000982:	4644      	mov	r4, r8
 8000984:	40fc      	lsrs	r4, r7
 8000986:	0020      	movs	r0, r4
 8000988:	4654      	mov	r4, sl
 800098a:	4304      	orrs	r4, r0
 800098c:	4640      	mov	r0, r8
 800098e:	4090      	lsls	r0, r2
 8000990:	1e42      	subs	r2, r0, #1
 8000992:	4190      	sbcs	r0, r2
 8000994:	464a      	mov	r2, r9
 8000996:	40fa      	lsrs	r2, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	1a89      	subs	r1, r1, r2
 800099c:	1b1c      	subs	r4, r3, r4
 800099e:	42a3      	cmp	r3, r4
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	1a8b      	subs	r3, r1, r2
 80009a6:	469a      	mov	sl, r3
 80009a8:	4653      	mov	r3, sl
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_dadd+0xa0>
 80009ae:	e0d4      	b.n	8000b5a <__aeabi_dadd+0x24a>
 80009b0:	4653      	mov	r3, sl
 80009b2:	025a      	lsls	r2, r3, #9
 80009b4:	0a53      	lsrs	r3, r2, #9
 80009b6:	469a      	mov	sl, r3
 80009b8:	4653      	mov	r3, sl
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0xb0>
 80009be:	e104      	b.n	8000bca <__aeabi_dadd+0x2ba>
 80009c0:	4650      	mov	r0, sl
 80009c2:	f001 f9ed 	bl	8001da0 <__clzsi2>
 80009c6:	0003      	movs	r3, r0
 80009c8:	3b08      	subs	r3, #8
 80009ca:	2220      	movs	r2, #32
 80009cc:	0020      	movs	r0, r4
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	4651      	mov	r1, sl
 80009d2:	40d0      	lsrs	r0, r2
 80009d4:	4099      	lsls	r1, r3
 80009d6:	0002      	movs	r2, r0
 80009d8:	409c      	lsls	r4, r3
 80009da:	430a      	orrs	r2, r1
 80009dc:	42b3      	cmp	r3, r6
 80009de:	da00      	bge.n	80009e2 <__aeabi_dadd+0xd2>
 80009e0:	e102      	b.n	8000be8 <__aeabi_dadd+0x2d8>
 80009e2:	1b9b      	subs	r3, r3, r6
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	291f      	cmp	r1, #31
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dadd+0xdc>
 80009ea:	e0a7      	b.n	8000b3c <__aeabi_dadd+0x22c>
 80009ec:	2320      	movs	r3, #32
 80009ee:	0010      	movs	r0, r2
 80009f0:	0026      	movs	r6, r4
 80009f2:	1a5b      	subs	r3, r3, r1
 80009f4:	409c      	lsls	r4, r3
 80009f6:	4098      	lsls	r0, r3
 80009f8:	40ce      	lsrs	r6, r1
 80009fa:	40ca      	lsrs	r2, r1
 80009fc:	1e63      	subs	r3, r4, #1
 80009fe:	419c      	sbcs	r4, r3
 8000a00:	4330      	orrs	r0, r6
 8000a02:	4692      	mov	sl, r2
 8000a04:	2600      	movs	r6, #0
 8000a06:	4304      	orrs	r4, r0
 8000a08:	0763      	lsls	r3, r4, #29
 8000a0a:	d009      	beq.n	8000a20 <__aeabi_dadd+0x110>
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	4023      	ands	r3, r4
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d005      	beq.n	8000a20 <__aeabi_dadd+0x110>
 8000a14:	1d23      	adds	r3, r4, #4
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	41a4      	sbcs	r4, r4
 8000a1a:	4264      	negs	r4, r4
 8000a1c:	44a2      	add	sl, r4
 8000a1e:	001c      	movs	r4, r3
 8000a20:	4653      	mov	r3, sl
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_dadd+0x118>
 8000a26:	e09b      	b.n	8000b60 <__aeabi_dadd+0x250>
 8000a28:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	429e      	cmp	r6, r3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x122>
 8000a30:	e0b8      	b.n	8000ba4 <__aeabi_dadd+0x294>
 8000a32:	4653      	mov	r3, sl
 8000a34:	4992      	ldr	r1, [pc, #584]	; (8000c80 <__aeabi_dadd+0x370>)
 8000a36:	08e4      	lsrs	r4, r4, #3
 8000a38:	400b      	ands	r3, r1
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	075b      	lsls	r3, r3, #29
 8000a3e:	4323      	orrs	r3, r4
 8000a40:	0572      	lsls	r2, r6, #21
 8000a42:	024c      	lsls	r4, r1, #9
 8000a44:	0b24      	lsrs	r4, r4, #12
 8000a46:	0d52      	lsrs	r2, r2, #21
 8000a48:	0512      	lsls	r2, r2, #20
 8000a4a:	07ed      	lsls	r5, r5, #31
 8000a4c:	4322      	orrs	r2, r4
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	0018      	movs	r0, r3
 8000a52:	0011      	movs	r1, r2
 8000a54:	bce0      	pop	{r5, r6, r7}
 8000a56:	46ba      	mov	sl, r7
 8000a58:	46b1      	mov	r9, r6
 8000a5a:	46a8      	mov	r8, r5
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d048      	beq.n	8000af4 <__aeabi_dadd+0x1e4>
 8000a62:	1b97      	subs	r7, r2, r6
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x15a>
 8000a68:	e10e      	b.n	8000c88 <__aeabi_dadd+0x378>
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x162>
 8000a70:	e1b7      	b.n	8000de2 <__aeabi_dadd+0x4d2>
 8000a72:	1e7c      	subs	r4, r7, #1
 8000a74:	2f01      	cmp	r7, #1
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x16a>
 8000a78:	e226      	b.n	8000ec8 <__aeabi_dadd+0x5b8>
 8000a7a:	4d80      	ldr	r5, [pc, #512]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a7c:	42af      	cmp	r7, r5
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x172>
 8000a80:	e1d5      	b.n	8000e2e <__aeabi_dadd+0x51e>
 8000a82:	0027      	movs	r7, r4
 8000a84:	e107      	b.n	8000c96 <__aeabi_dadd+0x386>
 8000a86:	2f00      	cmp	r7, #0
 8000a88:	dc00      	bgt.n	8000a8c <__aeabi_dadd+0x17c>
 8000a8a:	e0b2      	b.n	8000bf2 <__aeabi_dadd+0x2e2>
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d047      	beq.n	8000b20 <__aeabi_dadd+0x210>
 8000a90:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a92:	4296      	cmp	r6, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x188>
 8000a96:	e089      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	464c      	mov	r4, r9
 8000a9c:	0412      	lsls	r2, r2, #16
 8000a9e:	4314      	orrs	r4, r2
 8000aa0:	46a1      	mov	r9, r4
 8000aa2:	2f38      	cmp	r7, #56	; 0x38
 8000aa4:	dc6b      	bgt.n	8000b7e <__aeabi_dadd+0x26e>
 8000aa6:	2f1f      	cmp	r7, #31
 8000aa8:	dc00      	bgt.n	8000aac <__aeabi_dadd+0x19c>
 8000aaa:	e16e      	b.n	8000d8a <__aeabi_dadd+0x47a>
 8000aac:	003a      	movs	r2, r7
 8000aae:	4648      	mov	r0, r9
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d0      	lsrs	r0, r2
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	2f20      	cmp	r7, #32
 8000ab8:	d007      	beq.n	8000aca <__aeabi_dadd+0x1ba>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4648      	mov	r0, r9
 8000abe:	1bd2      	subs	r2, r2, r7
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	4680      	mov	r8, r0
 8000aca:	4640      	mov	r0, r8
 8000acc:	1e42      	subs	r2, r0, #1
 8000ace:	4190      	sbcs	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	4314      	orrs	r4, r2
 8000ad6:	e057      	b.n	8000b88 <__aeabi_dadd+0x278>
 8000ad8:	464a      	mov	r2, r9
 8000ada:	4302      	orrs	r2, r0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x1d0>
 8000ade:	e103      	b.n	8000ce8 <__aeabi_dadd+0x3d8>
 8000ae0:	1e7a      	subs	r2, r7, #1
 8000ae2:	2f01      	cmp	r7, #1
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x1d8>
 8000ae6:	e193      	b.n	8000e10 <__aeabi_dadd+0x500>
 8000ae8:	4c64      	ldr	r4, [pc, #400]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000aea:	42a7      	cmp	r7, r4
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x1e0>
 8000aee:	e18a      	b.n	8000e06 <__aeabi_dadd+0x4f6>
 8000af0:	0017      	movs	r7, r2
 8000af2:	e73b      	b.n	800096c <__aeabi_dadd+0x5c>
 8000af4:	4c63      	ldr	r4, [pc, #396]	; (8000c84 <__aeabi_dadd+0x374>)
 8000af6:	1c72      	adds	r2, r6, #1
 8000af8:	4222      	tst	r2, r4
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x1ee>
 8000afc:	e0e0      	b.n	8000cc0 <__aeabi_dadd+0x3b0>
 8000afe:	000a      	movs	r2, r1
 8000b00:	431a      	orrs	r2, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d000      	beq.n	8000b08 <__aeabi_dadd+0x1f8>
 8000b06:	e174      	b.n	8000df2 <__aeabi_dadd+0x4e2>
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x1fe>
 8000b0c:	e1d0      	b.n	8000eb0 <__aeabi_dadd+0x5a0>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	4302      	orrs	r2, r0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x206>
 8000b14:	e1e3      	b.n	8000ede <__aeabi_dadd+0x5ce>
 8000b16:	074a      	lsls	r2, r1, #29
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	08c9      	lsrs	r1, r1, #3
 8000b1e:	e029      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000b20:	464a      	mov	r2, r9
 8000b22:	4302      	orrs	r2, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x218>
 8000b26:	e17d      	b.n	8000e24 <__aeabi_dadd+0x514>
 8000b28:	1e7a      	subs	r2, r7, #1
 8000b2a:	2f01      	cmp	r7, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x220>
 8000b2e:	e0e0      	b.n	8000cf2 <__aeabi_dadd+0x3e2>
 8000b30:	4c52      	ldr	r4, [pc, #328]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b32:	42a7      	cmp	r7, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x228>
 8000b36:	e166      	b.n	8000e06 <__aeabi_dadd+0x4f6>
 8000b38:	0017      	movs	r7, r2
 8000b3a:	e7b2      	b.n	8000aa2 <__aeabi_dadd+0x192>
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	3b1f      	subs	r3, #31
 8000b40:	40d8      	lsrs	r0, r3
 8000b42:	2920      	cmp	r1, #32
 8000b44:	d003      	beq.n	8000b4e <__aeabi_dadd+0x23e>
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	1e63      	subs	r3, r4, #1
 8000b50:	419c      	sbcs	r4, r3
 8000b52:	2300      	movs	r3, #0
 8000b54:	2600      	movs	r6, #0
 8000b56:	469a      	mov	sl, r3
 8000b58:	4304      	orrs	r4, r0
 8000b5a:	0763      	lsls	r3, r4, #29
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x250>
 8000b5e:	e755      	b.n	8000a0c <__aeabi_dadd+0xfc>
 8000b60:	4652      	mov	r2, sl
 8000b62:	08e3      	lsrs	r3, r4, #3
 8000b64:	0752      	lsls	r2, r2, #29
 8000b66:	4313      	orrs	r3, r2
 8000b68:	4652      	mov	r2, sl
 8000b6a:	0037      	movs	r7, r6
 8000b6c:	08d1      	lsrs	r1, r2, #3
 8000b6e:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b70:	4297      	cmp	r7, r2
 8000b72:	d01f      	beq.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000b74:	0309      	lsls	r1, r1, #12
 8000b76:	057a      	lsls	r2, r7, #21
 8000b78:	0b0c      	lsrs	r4, r1, #12
 8000b7a:	0d52      	lsrs	r2, r2, #21
 8000b7c:	e764      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000b7e:	4642      	mov	r2, r8
 8000b80:	464c      	mov	r4, r9
 8000b82:	4314      	orrs	r4, r2
 8000b84:	1e62      	subs	r2, r4, #1
 8000b86:	4194      	sbcs	r4, r2
 8000b88:	18e4      	adds	r4, r4, r3
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	4192      	sbcs	r2, r2
 8000b8e:	4252      	negs	r2, r2
 8000b90:	4692      	mov	sl, r2
 8000b92:	448a      	add	sl, r1
 8000b94:	4653      	mov	r3, sl
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	d5df      	bpl.n	8000b5a <__aeabi_dadd+0x24a>
 8000b9a:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000b9c:	3601      	adds	r6, #1
 8000b9e:	429e      	cmp	r6, r3
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_dadd+0x294>
 8000ba2:	e0b3      	b.n	8000d0c <__aeabi_dadd+0x3fc>
 8000ba4:	0032      	movs	r2, r6
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e74d      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000bac:	074a      	lsls	r2, r1, #29
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	08c9      	lsrs	r1, r1, #3
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x2ac>
 8000bba:	e200      	b.n	8000fbe <__aeabi_dadd+0x6ae>
 8000bbc:	2480      	movs	r4, #128	; 0x80
 8000bbe:	0324      	lsls	r4, r4, #12
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	0324      	lsls	r4, r4, #12
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000bc6:	0b24      	lsrs	r4, r4, #12
 8000bc8:	e73e      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f001 f8e8 	bl	8001da0 <__clzsi2>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	2b1f      	cmp	r3, #31
 8000bd6:	dc00      	bgt.n	8000bda <__aeabi_dadd+0x2ca>
 8000bd8:	e6f7      	b.n	80009ca <__aeabi_dadd+0xba>
 8000bda:	0022      	movs	r2, r4
 8000bdc:	3808      	subs	r0, #8
 8000bde:	4082      	lsls	r2, r0
 8000be0:	2400      	movs	r4, #0
 8000be2:	42b3      	cmp	r3, r6
 8000be4:	db00      	blt.n	8000be8 <__aeabi_dadd+0x2d8>
 8000be6:	e6fc      	b.n	80009e2 <__aeabi_dadd+0xd2>
 8000be8:	1af6      	subs	r6, r6, r3
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <__aeabi_dadd+0x370>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	4692      	mov	sl, r2
 8000bf0:	e70a      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d02b      	beq.n	8000c4e <__aeabi_dadd+0x33e>
 8000bf6:	1b97      	subs	r7, r2, r6
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x2ee>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x460>
 8000bfe:	4c1f      	ldr	r4, [pc, #124]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x2f6>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x530>
 8000c06:	2480      	movs	r4, #128	; 0x80
 8000c08:	0424      	lsls	r4, r4, #16
 8000c0a:	4321      	orrs	r1, r4
 8000c0c:	2f38      	cmp	r7, #56	; 0x38
 8000c0e:	dd00      	ble.n	8000c12 <__aeabi_dadd+0x302>
 8000c10:	e11e      	b.n	8000e50 <__aeabi_dadd+0x540>
 8000c12:	2f1f      	cmp	r7, #31
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x308>
 8000c16:	e19e      	b.n	8000f56 <__aeabi_dadd+0x646>
 8000c18:	2620      	movs	r6, #32
 8000c1a:	000c      	movs	r4, r1
 8000c1c:	1bf6      	subs	r6, r6, r7
 8000c1e:	0018      	movs	r0, r3
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	40b4      	lsls	r4, r6
 8000c24:	40f8      	lsrs	r0, r7
 8000c26:	1e5e      	subs	r6, r3, #1
 8000c28:	41b3      	sbcs	r3, r6
 8000c2a:	40f9      	lsrs	r1, r7
 8000c2c:	4304      	orrs	r4, r0
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	4489      	add	r9, r1
 8000c32:	4444      	add	r4, r8
 8000c34:	4544      	cmp	r4, r8
 8000c36:	419b      	sbcs	r3, r3
 8000c38:	425b      	negs	r3, r3
 8000c3a:	444b      	add	r3, r9
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	0016      	movs	r6, r2
 8000c40:	e7a8      	b.n	8000b94 <__aeabi_dadd+0x284>
 8000c42:	4642      	mov	r2, r8
 8000c44:	464c      	mov	r4, r9
 8000c46:	4314      	orrs	r4, r2
 8000c48:	1e62      	subs	r2, r4, #1
 8000c4a:	4194      	sbcs	r4, r2
 8000c4c:	e6a6      	b.n	800099c <__aeabi_dadd+0x8c>
 8000c4e:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__aeabi_dadd+0x374>)
 8000c50:	1c72      	adds	r2, r6, #1
 8000c52:	4222      	tst	r2, r4
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x348>
 8000c56:	e0a8      	b.n	8000daa <__aeabi_dadd+0x49a>
 8000c58:	000a      	movs	r2, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_dadd+0x352>
 8000c60:	e10a      	b.n	8000e78 <__aeabi_dadd+0x568>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x358>
 8000c66:	e15e      	b.n	8000f26 <__aeabi_dadd+0x616>
 8000c68:	464a      	mov	r2, r9
 8000c6a:	4302      	orrs	r2, r0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_dadd+0x360>
 8000c6e:	e161      	b.n	8000f34 <__aeabi_dadd+0x624>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e77c      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	000007ff 	.word	0x000007ff
 8000c80:	ff7fffff 	.word	0xff7fffff
 8000c84:	000007fe 	.word	0x000007fe
 8000c88:	4ccf      	ldr	r4, [pc, #828]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000c8a:	42a2      	cmp	r2, r4
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x380>
 8000c8e:	e0ce      	b.n	8000e2e <__aeabi_dadd+0x51e>
 8000c90:	2480      	movs	r4, #128	; 0x80
 8000c92:	0424      	lsls	r4, r4, #16
 8000c94:	4321      	orrs	r1, r4
 8000c96:	2f38      	cmp	r7, #56	; 0x38
 8000c98:	dc5b      	bgt.n	8000d52 <__aeabi_dadd+0x442>
 8000c9a:	2f1f      	cmp	r7, #31
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_dadd+0x390>
 8000c9e:	e0dc      	b.n	8000e5a <__aeabi_dadd+0x54a>
 8000ca0:	2520      	movs	r5, #32
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	1bed      	subs	r5, r5, r7
 8000ca6:	001e      	movs	r6, r3
 8000ca8:	40ab      	lsls	r3, r5
 8000caa:	40ac      	lsls	r4, r5
 8000cac:	40fe      	lsrs	r6, r7
 8000cae:	1e5d      	subs	r5, r3, #1
 8000cb0:	41ab      	sbcs	r3, r5
 8000cb2:	4334      	orrs	r4, r6
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	464b      	mov	r3, r9
 8000cba:	1a5b      	subs	r3, r3, r1
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	e04c      	b.n	8000d5a <__aeabi_dadd+0x44a>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a1c      	subs	r4, r3, r0
 8000cc4:	1a88      	subs	r0, r1, r2
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	4252      	negs	r2, r2
 8000ccc:	4692      	mov	sl, r2
 8000cce:	0002      	movs	r2, r0
 8000cd0:	4650      	mov	r0, sl
 8000cd2:	1a12      	subs	r2, r2, r0
 8000cd4:	4692      	mov	sl, r2
 8000cd6:	0212      	lsls	r2, r2, #8
 8000cd8:	d478      	bmi.n	8000dcc <__aeabi_dadd+0x4bc>
 8000cda:	4653      	mov	r3, sl
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000ce0:	e66a      	b.n	80009b8 <__aeabi_dadd+0xa8>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	e745      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000ce8:	074a      	lsls	r2, r1, #29
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	e73d      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000cf2:	181c      	adds	r4, r3, r0
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	419b      	sbcs	r3, r3
 8000cf8:	4449      	add	r1, r9
 8000cfa:	468a      	mov	sl, r1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	449a      	add	sl, r3
 8000d00:	4653      	mov	r3, sl
 8000d02:	2601      	movs	r6, #1
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	d400      	bmi.n	8000d0a <__aeabi_dadd+0x3fa>
 8000d08:	e727      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4baf      	ldr	r3, [pc, #700]	; (8000fcc <__aeabi_dadd+0x6bc>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	401a      	ands	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	4021      	ands	r1, r4
 8000d18:	0862      	lsrs	r2, r4, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	07dc      	lsls	r4, r3, #31
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	469a      	mov	sl, r3
 8000d22:	4314      	orrs	r4, r2
 8000d24:	e670      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000d26:	003a      	movs	r2, r7
 8000d28:	464c      	mov	r4, r9
 8000d2a:	3a20      	subs	r2, #32
 8000d2c:	40d4      	lsrs	r4, r2
 8000d2e:	46a4      	mov	ip, r4
 8000d30:	2f20      	cmp	r7, #32
 8000d32:	d007      	beq.n	8000d44 <__aeabi_dadd+0x434>
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	4648      	mov	r0, r9
 8000d38:	1bd2      	subs	r2, r2, r7
 8000d3a:	4090      	lsls	r0, r2
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	4640      	mov	r0, r8
 8000d40:	4310      	orrs	r0, r2
 8000d42:	4680      	mov	r8, r0
 8000d44:	4640      	mov	r0, r8
 8000d46:	1e42      	subs	r2, r0, #1
 8000d48:	4190      	sbcs	r0, r2
 8000d4a:	4662      	mov	r2, ip
 8000d4c:	0004      	movs	r4, r0
 8000d4e:	4314      	orrs	r4, r2
 8000d50:	e624      	b.n	800099c <__aeabi_dadd+0x8c>
 8000d52:	4319      	orrs	r1, r3
 8000d54:	000c      	movs	r4, r1
 8000d56:	1e63      	subs	r3, r4, #1
 8000d58:	419c      	sbcs	r4, r3
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	1b1c      	subs	r4, r3, r4
 8000d5e:	45a0      	cmp	r8, r4
 8000d60:	419b      	sbcs	r3, r3
 8000d62:	4649      	mov	r1, r9
 8000d64:	425b      	negs	r3, r3
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	469a      	mov	sl, r3
 8000d6a:	4665      	mov	r5, ip
 8000d6c:	0016      	movs	r6, r2
 8000d6e:	e61b      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000d70:	000c      	movs	r4, r1
 8000d72:	431c      	orrs	r4, r3
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x468>
 8000d76:	e0c7      	b.n	8000f08 <__aeabi_dadd+0x5f8>
 8000d78:	1e7c      	subs	r4, r7, #1
 8000d7a:	2f01      	cmp	r7, #1
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dadd+0x470>
 8000d7e:	e0f9      	b.n	8000f74 <__aeabi_dadd+0x664>
 8000d80:	4e91      	ldr	r6, [pc, #580]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000d82:	42b7      	cmp	r7, r6
 8000d84:	d05c      	beq.n	8000e40 <__aeabi_dadd+0x530>
 8000d86:	0027      	movs	r7, r4
 8000d88:	e740      	b.n	8000c0c <__aeabi_dadd+0x2fc>
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	464c      	mov	r4, r9
 8000d8e:	4640      	mov	r0, r8
 8000d90:	1bd2      	subs	r2, r2, r7
 8000d92:	4094      	lsls	r4, r2
 8000d94:	40f8      	lsrs	r0, r7
 8000d96:	4304      	orrs	r4, r0
 8000d98:	4640      	mov	r0, r8
 8000d9a:	4090      	lsls	r0, r2
 8000d9c:	1e42      	subs	r2, r0, #1
 8000d9e:	4190      	sbcs	r0, r2
 8000da0:	464a      	mov	r2, r9
 8000da2:	40fa      	lsrs	r2, r7
 8000da4:	4304      	orrs	r4, r0
 8000da6:	1889      	adds	r1, r1, r2
 8000da8:	e6ee      	b.n	8000b88 <__aeabi_dadd+0x278>
 8000daa:	4c87      	ldr	r4, [pc, #540]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000dac:	42a2      	cmp	r2, r4
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x4a2>
 8000db0:	e6f9      	b.n	8000ba6 <__aeabi_dadd+0x296>
 8000db2:	1818      	adds	r0, r3, r0
 8000db4:	4298      	cmp	r0, r3
 8000db6:	419b      	sbcs	r3, r3
 8000db8:	4449      	add	r1, r9
 8000dba:	425b      	negs	r3, r3
 8000dbc:	18cb      	adds	r3, r1, r3
 8000dbe:	07dc      	lsls	r4, r3, #31
 8000dc0:	0840      	lsrs	r0, r0, #1
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	0016      	movs	r6, r2
 8000dc8:	4304      	orrs	r4, r0
 8000dca:	e6c6      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000dcc:	4642      	mov	r2, r8
 8000dce:	1ad4      	subs	r4, r2, r3
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	4180      	sbcs	r0, r0
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	1a0b      	subs	r3, r1, r0
 8000ddc:	469a      	mov	sl, r3
 8000dde:	4665      	mov	r5, ip
 8000de0:	e5ea      	b.n	80009b8 <__aeabi_dadd+0xa8>
 8000de2:	464b      	mov	r3, r9
 8000de4:	464a      	mov	r2, r9
 8000de6:	08c0      	lsrs	r0, r0, #3
 8000de8:	075b      	lsls	r3, r3, #29
 8000dea:	4665      	mov	r5, ip
 8000dec:	4303      	orrs	r3, r0
 8000dee:	08d1      	lsrs	r1, r2, #3
 8000df0:	e6bd      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d000      	beq.n	8000df8 <__aeabi_dadd+0x4e8>
 8000df6:	e08e      	b.n	8000f16 <__aeabi_dadd+0x606>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	d117      	bne.n	8000e2e <__aeabi_dadd+0x51e>
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	2500      	movs	r5, #0
 8000e02:	0309      	lsls	r1, r1, #12
 8000e04:	e6da      	b.n	8000bbc <__aeabi_dadd+0x2ac>
 8000e06:	074a      	lsls	r2, r1, #29
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	08c9      	lsrs	r1, r1, #3
 8000e0e:	e6d1      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e10:	1a1c      	subs	r4, r3, r0
 8000e12:	464a      	mov	r2, r9
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	419b      	sbcs	r3, r3
 8000e18:	1a89      	subs	r1, r1, r2
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	469a      	mov	sl, r3
 8000e20:	2601      	movs	r6, #1
 8000e22:	e5c1      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000e24:	074a      	lsls	r2, r1, #29
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	e69f      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000e2e:	4643      	mov	r3, r8
 8000e30:	08d8      	lsrs	r0, r3, #3
 8000e32:	464b      	mov	r3, r9
 8000e34:	464a      	mov	r2, r9
 8000e36:	075b      	lsls	r3, r3, #29
 8000e38:	4665      	mov	r5, ip
 8000e3a:	4303      	orrs	r3, r0
 8000e3c:	08d1      	lsrs	r1, r2, #3
 8000e3e:	e6b9      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e40:	4643      	mov	r3, r8
 8000e42:	08d8      	lsrs	r0, r3, #3
 8000e44:	464b      	mov	r3, r9
 8000e46:	464a      	mov	r2, r9
 8000e48:	075b      	lsls	r3, r3, #29
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	08d1      	lsrs	r1, r2, #3
 8000e4e:	e6b1      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000e50:	4319      	orrs	r1, r3
 8000e52:	000c      	movs	r4, r1
 8000e54:	1e63      	subs	r3, r4, #1
 8000e56:	419c      	sbcs	r4, r3
 8000e58:	e6eb      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000e5a:	003c      	movs	r4, r7
 8000e5c:	000d      	movs	r5, r1
 8000e5e:	3c20      	subs	r4, #32
 8000e60:	40e5      	lsrs	r5, r4
 8000e62:	2f20      	cmp	r7, #32
 8000e64:	d003      	beq.n	8000e6e <__aeabi_dadd+0x55e>
 8000e66:	2440      	movs	r4, #64	; 0x40
 8000e68:	1be4      	subs	r4, r4, r7
 8000e6a:	40a1      	lsls	r1, r4
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	001c      	movs	r4, r3
 8000e70:	1e63      	subs	r3, r4, #1
 8000e72:	419c      	sbcs	r4, r3
 8000e74:	432c      	orrs	r4, r5
 8000e76:	e770      	b.n	8000d5a <__aeabi_dadd+0x44a>
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d0e1      	beq.n	8000e40 <__aeabi_dadd+0x530>
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	4302      	orrs	r2, r0
 8000e80:	d0c1      	beq.n	8000e06 <__aeabi_dadd+0x4f6>
 8000e82:	074a      	lsls	r2, r1, #29
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	08c9      	lsrs	r1, r1, #3
 8000e8c:	0312      	lsls	r2, r2, #12
 8000e8e:	4211      	tst	r1, r2
 8000e90:	d008      	beq.n	8000ea4 <__aeabi_dadd+0x594>
 8000e92:	4648      	mov	r0, r9
 8000e94:	08c4      	lsrs	r4, r0, #3
 8000e96:	4214      	tst	r4, r2
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_dadd+0x594>
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	0742      	lsls	r2, r0, #29
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	0f5a      	lsrs	r2, r3, #29
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	0752      	lsls	r2, r2, #29
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	e681      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000eb0:	464b      	mov	r3, r9
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x5a8>
 8000eb6:	e714      	b.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000eb8:	464b      	mov	r3, r9
 8000eba:	464a      	mov	r2, r9
 8000ebc:	08c0      	lsrs	r0, r0, #3
 8000ebe:	075b      	lsls	r3, r3, #29
 8000ec0:	4665      	mov	r5, ip
 8000ec2:	4303      	orrs	r3, r0
 8000ec4:	08d1      	lsrs	r1, r2, #3
 8000ec6:	e655      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000ec8:	1ac4      	subs	r4, r0, r3
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	4180      	sbcs	r0, r0
 8000ece:	464b      	mov	r3, r9
 8000ed0:	4240      	negs	r0, r0
 8000ed2:	1a59      	subs	r1, r3, r1
 8000ed4:	1a0b      	subs	r3, r1, r0
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	4665      	mov	r5, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	e564      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000ede:	1a1c      	subs	r4, r3, r0
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	4180      	sbcs	r0, r0
 8000ee6:	1a8a      	subs	r2, r1, r2
 8000ee8:	4240      	negs	r0, r0
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	4692      	mov	sl, r2
 8000eee:	0212      	lsls	r2, r2, #8
 8000ef0:	d549      	bpl.n	8000f86 <__aeabi_dadd+0x676>
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	1ad4      	subs	r4, r2, r3
 8000ef6:	45a0      	cmp	r8, r4
 8000ef8:	4180      	sbcs	r0, r0
 8000efa:	464b      	mov	r3, r9
 8000efc:	4240      	negs	r0, r0
 8000efe:	1a59      	subs	r1, r3, r1
 8000f00:	1a0b      	subs	r3, r1, r0
 8000f02:	469a      	mov	sl, r3
 8000f04:	4665      	mov	r5, ip
 8000f06:	e57f      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000f08:	464b      	mov	r3, r9
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	08c0      	lsrs	r0, r0, #3
 8000f0e:	075b      	lsls	r3, r3, #29
 8000f10:	4303      	orrs	r3, r0
 8000f12:	08d1      	lsrs	r1, r2, #3
 8000f14:	e62b      	b.n	8000b6e <__aeabi_dadd+0x25e>
 8000f16:	464a      	mov	r2, r9
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	4302      	orrs	r2, r0
 8000f1c:	d138      	bne.n	8000f90 <__aeabi_dadd+0x680>
 8000f1e:	074a      	lsls	r2, r1, #29
 8000f20:	4313      	orrs	r3, r2
 8000f22:	08c9      	lsrs	r1, r1, #3
 8000f24:	e646      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000f26:	464b      	mov	r3, r9
 8000f28:	464a      	mov	r2, r9
 8000f2a:	08c0      	lsrs	r0, r0, #3
 8000f2c:	075b      	lsls	r3, r3, #29
 8000f2e:	4303      	orrs	r3, r0
 8000f30:	08d1      	lsrs	r1, r2, #3
 8000f32:	e61f      	b.n	8000b74 <__aeabi_dadd+0x264>
 8000f34:	181c      	adds	r4, r3, r0
 8000f36:	429c      	cmp	r4, r3
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	4449      	add	r1, r9
 8000f3c:	468a      	mov	sl, r1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	449a      	add	sl, r3
 8000f42:	4653      	mov	r3, sl
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x63a>
 8000f48:	e607      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f4a:	4652      	mov	r2, sl
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <__aeabi_dadd+0x6bc>)
 8000f4e:	2601      	movs	r6, #1
 8000f50:	401a      	ands	r2, r3
 8000f52:	4692      	mov	sl, r2
 8000f54:	e601      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f56:	003c      	movs	r4, r7
 8000f58:	000e      	movs	r6, r1
 8000f5a:	3c20      	subs	r4, #32
 8000f5c:	40e6      	lsrs	r6, r4
 8000f5e:	2f20      	cmp	r7, #32
 8000f60:	d003      	beq.n	8000f6a <__aeabi_dadd+0x65a>
 8000f62:	2440      	movs	r4, #64	; 0x40
 8000f64:	1be4      	subs	r4, r4, r7
 8000f66:	40a1      	lsls	r1, r4
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	001c      	movs	r4, r3
 8000f6c:	1e63      	subs	r3, r4, #1
 8000f6e:	419c      	sbcs	r4, r3
 8000f70:	4334      	orrs	r4, r6
 8000f72:	e65e      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000f74:	4443      	add	r3, r8
 8000f76:	4283      	cmp	r3, r0
 8000f78:	4180      	sbcs	r0, r0
 8000f7a:	4449      	add	r1, r9
 8000f7c:	468a      	mov	sl, r1
 8000f7e:	4240      	negs	r0, r0
 8000f80:	001c      	movs	r4, r3
 8000f82:	4482      	add	sl, r0
 8000f84:	e6bc      	b.n	8000d00 <__aeabi_dadd+0x3f0>
 8000f86:	4653      	mov	r3, sl
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x67e>
 8000f8c:	e6a9      	b.n	8000ce2 <__aeabi_dadd+0x3d2>
 8000f8e:	e5e4      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f90:	074a      	lsls	r2, r1, #29
 8000f92:	4313      	orrs	r3, r2
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	08c9      	lsrs	r1, r1, #3
 8000f98:	0312      	lsls	r2, r2, #12
 8000f9a:	4211      	tst	r1, r2
 8000f9c:	d009      	beq.n	8000fb2 <__aeabi_dadd+0x6a2>
 8000f9e:	4648      	mov	r0, r9
 8000fa0:	08c4      	lsrs	r4, r0, #3
 8000fa2:	4214      	tst	r4, r2
 8000fa4:	d105      	bne.n	8000fb2 <__aeabi_dadd+0x6a2>
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	4665      	mov	r5, ip
 8000faa:	0021      	movs	r1, r4
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	0742      	lsls	r2, r0, #29
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	0f5a      	lsrs	r2, r3, #29
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	0752      	lsls	r2, r2, #29
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	e5fa      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4a01      	ldr	r2, [pc, #4]	; (8000fc8 <__aeabi_dadd+0x6b8>)
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	e540      	b.n	8000a48 <__aeabi_dadd+0x138>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	000007ff 	.word	0x000007ff
 8000fcc:	ff7fffff 	.word	0xff7fffff

08000fd0 <__aeabi_ddiv>:
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	4657      	mov	r7, sl
 8000fd4:	464e      	mov	r6, r9
 8000fd6:	4645      	mov	r5, r8
 8000fd8:	46de      	mov	lr, fp
 8000fda:	b5e0      	push	{r5, r6, r7, lr}
 8000fdc:	030c      	lsls	r4, r1, #12
 8000fde:	001f      	movs	r7, r3
 8000fe0:	004b      	lsls	r3, r1, #1
 8000fe2:	4681      	mov	r9, r0
 8000fe4:	4692      	mov	sl, r2
 8000fe6:	0005      	movs	r5, r0
 8000fe8:	b085      	sub	sp, #20
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d5b      	lsrs	r3, r3, #21
 8000fee:	0fce      	lsrs	r6, r1, #31
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x26>
 8000ff4:	e152      	b.n	800129c <__aeabi_ddiv+0x2cc>
 8000ff6:	4ad2      	ldr	r2, [pc, #840]	; (8001340 <__aeabi_ddiv+0x370>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2e>
 8000ffc:	e16e      	b.n	80012dc <__aeabi_ddiv+0x30c>
 8000ffe:	0f42      	lsrs	r2, r0, #29
 8001000:	00e4      	lsls	r4, r4, #3
 8001002:	4314      	orrs	r4, r2
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0412      	lsls	r2, r2, #16
 8001008:	4322      	orrs	r2, r4
 800100a:	4690      	mov	r8, r2
 800100c:	4acd      	ldr	r2, [pc, #820]	; (8001344 <__aeabi_ddiv+0x374>)
 800100e:	00c5      	lsls	r5, r0, #3
 8001010:	4693      	mov	fp, r2
 8001012:	449b      	add	fp, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4699      	mov	r9, r3
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	033c      	lsls	r4, r7, #12
 800101c:	007b      	lsls	r3, r7, #1
 800101e:	4650      	mov	r0, sl
 8001020:	0b24      	lsrs	r4, r4, #12
 8001022:	0d5b      	lsrs	r3, r3, #21
 8001024:	0fff      	lsrs	r7, r7, #31
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x5c>
 800102a:	e11a      	b.n	8001262 <__aeabi_ddiv+0x292>
 800102c:	4ac4      	ldr	r2, [pc, #784]	; (8001340 <__aeabi_ddiv+0x370>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x64>
 8001032:	e15e      	b.n	80012f2 <__aeabi_ddiv+0x322>
 8001034:	0f42      	lsrs	r2, r0, #29
 8001036:	00e4      	lsls	r4, r4, #3
 8001038:	4322      	orrs	r2, r4
 800103a:	2480      	movs	r4, #128	; 0x80
 800103c:	0424      	lsls	r4, r4, #16
 800103e:	4314      	orrs	r4, r2
 8001040:	4ac0      	ldr	r2, [pc, #768]	; (8001344 <__aeabi_ddiv+0x374>)
 8001042:	00c1      	lsls	r1, r0, #3
 8001044:	4694      	mov	ip, r2
 8001046:	465a      	mov	r2, fp
 8001048:	4463      	add	r3, ip
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	469b      	mov	fp, r3
 800104e:	2000      	movs	r0, #0
 8001050:	0033      	movs	r3, r6
 8001052:	407b      	eors	r3, r7
 8001054:	469a      	mov	sl, r3
 8001056:	464b      	mov	r3, r9
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d827      	bhi.n	80010ac <__aeabi_ddiv+0xdc>
 800105c:	4aba      	ldr	r2, [pc, #744]	; (8001348 <__aeabi_ddiv+0x378>)
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	58d3      	ldr	r3, [r2, r3]
 8001062:	469f      	mov	pc, r3
 8001064:	46b2      	mov	sl, r6
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d016      	beq.n	800109a <__aeabi_ddiv+0xca>
 800106c:	2b03      	cmp	r3, #3
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0xa2>
 8001070:	e287      	b.n	8001582 <__aeabi_ddiv+0x5b2>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d000      	beq.n	8001078 <__aeabi_ddiv+0xa8>
 8001076:	e0d5      	b.n	8001224 <__aeabi_ddiv+0x254>
 8001078:	2300      	movs	r3, #0
 800107a:	2200      	movs	r2, #0
 800107c:	2500      	movs	r5, #0
 800107e:	051b      	lsls	r3, r3, #20
 8001080:	4313      	orrs	r3, r2
 8001082:	4652      	mov	r2, sl
 8001084:	07d2      	lsls	r2, r2, #31
 8001086:	4313      	orrs	r3, r2
 8001088:	0028      	movs	r0, r5
 800108a:	0019      	movs	r1, r3
 800108c:	b005      	add	sp, #20
 800108e:	bcf0      	pop	{r4, r5, r6, r7}
 8001090:	46bb      	mov	fp, r7
 8001092:	46b2      	mov	sl, r6
 8001094:	46a9      	mov	r9, r5
 8001096:	46a0      	mov	r8, r4
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	2200      	movs	r2, #0
 800109c:	2500      	movs	r5, #0
 800109e:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <__aeabi_ddiv+0x370>)
 80010a0:	e7ed      	b.n	800107e <__aeabi_ddiv+0xae>
 80010a2:	46ba      	mov	sl, r7
 80010a4:	46a0      	mov	r8, r4
 80010a6:	000d      	movs	r5, r1
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	e7dc      	b.n	8001066 <__aeabi_ddiv+0x96>
 80010ac:	4544      	cmp	r4, r8
 80010ae:	d200      	bcs.n	80010b2 <__aeabi_ddiv+0xe2>
 80010b0:	e1c4      	b.n	800143c <__aeabi_ddiv+0x46c>
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0xe6>
 80010b4:	e1bf      	b.n	8001436 <__aeabi_ddiv+0x466>
 80010b6:	2301      	movs	r3, #1
 80010b8:	425b      	negs	r3, r3
 80010ba:	469c      	mov	ip, r3
 80010bc:	002e      	movs	r6, r5
 80010be:	4640      	mov	r0, r8
 80010c0:	2500      	movs	r5, #0
 80010c2:	44e3      	add	fp, ip
 80010c4:	0223      	lsls	r3, r4, #8
 80010c6:	0e0c      	lsrs	r4, r1, #24
 80010c8:	431c      	orrs	r4, r3
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	4699      	mov	r9, r3
 80010ce:	0423      	lsls	r3, r4, #16
 80010d0:	020a      	lsls	r2, r1, #8
 80010d2:	0c1f      	lsrs	r7, r3, #16
 80010d4:	4649      	mov	r1, r9
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9701      	str	r7, [sp, #4]
 80010da:	f7ff f89b 	bl	8000214 <__aeabi_uidivmod>
 80010de:	0002      	movs	r2, r0
 80010e0:	437a      	muls	r2, r7
 80010e2:	040b      	lsls	r3, r1, #16
 80010e4:	0c31      	lsrs	r1, r6, #16
 80010e6:	4680      	mov	r8, r0
 80010e8:	4319      	orrs	r1, r3
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d907      	bls.n	80010fe <__aeabi_ddiv+0x12e>
 80010ee:	2301      	movs	r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	469c      	mov	ip, r3
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	44e0      	add	r8, ip
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d800      	bhi.n	80010fe <__aeabi_ddiv+0x12e>
 80010fc:	e201      	b.n	8001502 <__aeabi_ddiv+0x532>
 80010fe:	1a88      	subs	r0, r1, r2
 8001100:	4649      	mov	r1, r9
 8001102:	f7ff f887 	bl	8000214 <__aeabi_uidivmod>
 8001106:	9a01      	ldr	r2, [sp, #4]
 8001108:	0436      	lsls	r6, r6, #16
 800110a:	4342      	muls	r2, r0
 800110c:	0409      	lsls	r1, r1, #16
 800110e:	0c36      	lsrs	r6, r6, #16
 8001110:	0003      	movs	r3, r0
 8001112:	430e      	orrs	r6, r1
 8001114:	42b2      	cmp	r2, r6
 8001116:	d904      	bls.n	8001122 <__aeabi_ddiv+0x152>
 8001118:	1936      	adds	r6, r6, r4
 800111a:	3b01      	subs	r3, #1
 800111c:	42b4      	cmp	r4, r6
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x152>
 8001120:	e1e9      	b.n	80014f6 <__aeabi_ddiv+0x526>
 8001122:	1ab0      	subs	r0, r6, r2
 8001124:	4642      	mov	r2, r8
 8001126:	9e00      	ldr	r6, [sp, #0]
 8001128:	0412      	lsls	r2, r2, #16
 800112a:	431a      	orrs	r2, r3
 800112c:	0c33      	lsrs	r3, r6, #16
 800112e:	001f      	movs	r7, r3
 8001130:	0c11      	lsrs	r1, r2, #16
 8001132:	4690      	mov	r8, r2
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	0413      	lsls	r3, r2, #16
 8001138:	0432      	lsls	r2, r6, #16
 800113a:	0c16      	lsrs	r6, r2, #16
 800113c:	0032      	movs	r2, r6
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	435a      	muls	r2, r3
 8001142:	9603      	str	r6, [sp, #12]
 8001144:	437b      	muls	r3, r7
 8001146:	434e      	muls	r6, r1
 8001148:	4379      	muls	r1, r7
 800114a:	0c17      	lsrs	r7, r2, #16
 800114c:	46bc      	mov	ip, r7
 800114e:	199b      	adds	r3, r3, r6
 8001150:	4463      	add	r3, ip
 8001152:	429e      	cmp	r6, r3
 8001154:	d903      	bls.n	800115e <__aeabi_ddiv+0x18e>
 8001156:	2680      	movs	r6, #128	; 0x80
 8001158:	0276      	lsls	r6, r6, #9
 800115a:	46b4      	mov	ip, r6
 800115c:	4461      	add	r1, ip
 800115e:	0c1e      	lsrs	r6, r3, #16
 8001160:	1871      	adds	r1, r6, r1
 8001162:	0416      	lsls	r6, r2, #16
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	0c36      	lsrs	r6, r6, #16
 8001168:	199e      	adds	r6, r3, r6
 800116a:	4288      	cmp	r0, r1
 800116c:	d302      	bcc.n	8001174 <__aeabi_ddiv+0x1a4>
 800116e:	d112      	bne.n	8001196 <__aeabi_ddiv+0x1c6>
 8001170:	42b5      	cmp	r5, r6
 8001172:	d210      	bcs.n	8001196 <__aeabi_ddiv+0x1c6>
 8001174:	4643      	mov	r3, r8
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	9b00      	ldr	r3, [sp, #0]
 800117a:	469c      	mov	ip, r3
 800117c:	4465      	add	r5, ip
 800117e:	001f      	movs	r7, r3
 8001180:	429d      	cmp	r5, r3
 8001182:	419b      	sbcs	r3, r3
 8001184:	425b      	negs	r3, r3
 8001186:	191b      	adds	r3, r3, r4
 8001188:	18c0      	adds	r0, r0, r3
 800118a:	4284      	cmp	r4, r0
 800118c:	d200      	bcs.n	8001190 <__aeabi_ddiv+0x1c0>
 800118e:	e19e      	b.n	80014ce <__aeabi_ddiv+0x4fe>
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x1c4>
 8001192:	e199      	b.n	80014c8 <__aeabi_ddiv+0x4f8>
 8001194:	4690      	mov	r8, r2
 8001196:	1bae      	subs	r6, r5, r6
 8001198:	42b5      	cmp	r5, r6
 800119a:	41ad      	sbcs	r5, r5
 800119c:	1a40      	subs	r0, r0, r1
 800119e:	426d      	negs	r5, r5
 80011a0:	1b40      	subs	r0, r0, r5
 80011a2:	4284      	cmp	r4, r0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x1d8>
 80011a6:	e1d2      	b.n	800154e <__aeabi_ddiv+0x57e>
 80011a8:	4649      	mov	r1, r9
 80011aa:	f7ff f833 	bl	8000214 <__aeabi_uidivmod>
 80011ae:	9a01      	ldr	r2, [sp, #4]
 80011b0:	040b      	lsls	r3, r1, #16
 80011b2:	4342      	muls	r2, r0
 80011b4:	0c31      	lsrs	r1, r6, #16
 80011b6:	0005      	movs	r5, r0
 80011b8:	4319      	orrs	r1, r3
 80011ba:	428a      	cmp	r2, r1
 80011bc:	d900      	bls.n	80011c0 <__aeabi_ddiv+0x1f0>
 80011be:	e16c      	b.n	800149a <__aeabi_ddiv+0x4ca>
 80011c0:	1a88      	subs	r0, r1, r2
 80011c2:	4649      	mov	r1, r9
 80011c4:	f7ff f826 	bl	8000214 <__aeabi_uidivmod>
 80011c8:	9a01      	ldr	r2, [sp, #4]
 80011ca:	0436      	lsls	r6, r6, #16
 80011cc:	4342      	muls	r2, r0
 80011ce:	0409      	lsls	r1, r1, #16
 80011d0:	0c36      	lsrs	r6, r6, #16
 80011d2:	0003      	movs	r3, r0
 80011d4:	430e      	orrs	r6, r1
 80011d6:	42b2      	cmp	r2, r6
 80011d8:	d900      	bls.n	80011dc <__aeabi_ddiv+0x20c>
 80011da:	e153      	b.n	8001484 <__aeabi_ddiv+0x4b4>
 80011dc:	9803      	ldr	r0, [sp, #12]
 80011de:	1ab6      	subs	r6, r6, r2
 80011e0:	0002      	movs	r2, r0
 80011e2:	042d      	lsls	r5, r5, #16
 80011e4:	431d      	orrs	r5, r3
 80011e6:	9f02      	ldr	r7, [sp, #8]
 80011e8:	042b      	lsls	r3, r5, #16
 80011ea:	0c1b      	lsrs	r3, r3, #16
 80011ec:	435a      	muls	r2, r3
 80011ee:	437b      	muls	r3, r7
 80011f0:	469c      	mov	ip, r3
 80011f2:	0c29      	lsrs	r1, r5, #16
 80011f4:	4348      	muls	r0, r1
 80011f6:	0c13      	lsrs	r3, r2, #16
 80011f8:	4484      	add	ip, r0
 80011fa:	4463      	add	r3, ip
 80011fc:	4379      	muls	r1, r7
 80011fe:	4298      	cmp	r0, r3
 8001200:	d903      	bls.n	800120a <__aeabi_ddiv+0x23a>
 8001202:	2080      	movs	r0, #128	; 0x80
 8001204:	0240      	lsls	r0, r0, #9
 8001206:	4684      	mov	ip, r0
 8001208:	4461      	add	r1, ip
 800120a:	0c18      	lsrs	r0, r3, #16
 800120c:	0412      	lsls	r2, r2, #16
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	0c12      	lsrs	r2, r2, #16
 8001212:	1840      	adds	r0, r0, r1
 8001214:	189b      	adds	r3, r3, r2
 8001216:	4286      	cmp	r6, r0
 8001218:	d200      	bcs.n	800121c <__aeabi_ddiv+0x24c>
 800121a:	e100      	b.n	800141e <__aeabi_ddiv+0x44e>
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x250>
 800121e:	e0fb      	b.n	8001418 <__aeabi_ddiv+0x448>
 8001220:	2301      	movs	r3, #1
 8001222:	431d      	orrs	r5, r3
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <__aeabi_ddiv+0x37c>)
 8001226:	445b      	add	r3, fp
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_ddiv+0x25e>
 800122c:	e0aa      	b.n	8001384 <__aeabi_ddiv+0x3b4>
 800122e:	076a      	lsls	r2, r5, #29
 8001230:	d000      	beq.n	8001234 <__aeabi_ddiv+0x264>
 8001232:	e13d      	b.n	80014b0 <__aeabi_ddiv+0x4e0>
 8001234:	08e9      	lsrs	r1, r5, #3
 8001236:	4642      	mov	r2, r8
 8001238:	01d2      	lsls	r2, r2, #7
 800123a:	d506      	bpl.n	800124a <__aeabi_ddiv+0x27a>
 800123c:	4642      	mov	r2, r8
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <__aeabi_ddiv+0x380>)
 8001240:	401a      	ands	r2, r3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	4690      	mov	r8, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	445b      	add	r3, fp
 800124a:	4a42      	ldr	r2, [pc, #264]	; (8001354 <__aeabi_ddiv+0x384>)
 800124c:	4293      	cmp	r3, r2
 800124e:	dd00      	ble.n	8001252 <__aeabi_ddiv+0x282>
 8001250:	e723      	b.n	800109a <__aeabi_ddiv+0xca>
 8001252:	4642      	mov	r2, r8
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	0755      	lsls	r5, r2, #29
 8001258:	0252      	lsls	r2, r2, #9
 800125a:	430d      	orrs	r5, r1
 800125c:	0b12      	lsrs	r2, r2, #12
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	e70d      	b.n	800107e <__aeabi_ddiv+0xae>
 8001262:	4651      	mov	r1, sl
 8001264:	4321      	orrs	r1, r4
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x29a>
 8001268:	e07c      	b.n	8001364 <__aeabi_ddiv+0x394>
 800126a:	2c00      	cmp	r4, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x2a0>
 800126e:	e0fb      	b.n	8001468 <__aeabi_ddiv+0x498>
 8001270:	0020      	movs	r0, r4
 8001272:	f000 fd95 	bl	8001da0 <__clzsi2>
 8001276:	0002      	movs	r2, r0
 8001278:	3a0b      	subs	r2, #11
 800127a:	231d      	movs	r3, #29
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	4652      	mov	r2, sl
 8001280:	0001      	movs	r1, r0
 8001282:	40da      	lsrs	r2, r3
 8001284:	4653      	mov	r3, sl
 8001286:	3908      	subs	r1, #8
 8001288:	408b      	lsls	r3, r1
 800128a:	408c      	lsls	r4, r1
 800128c:	0019      	movs	r1, r3
 800128e:	4314      	orrs	r4, r2
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <__aeabi_ddiv+0x388>)
 8001292:	4458      	add	r0, fp
 8001294:	469b      	mov	fp, r3
 8001296:	4483      	add	fp, r0
 8001298:	2000      	movs	r0, #0
 800129a:	e6d9      	b.n	8001050 <__aeabi_ddiv+0x80>
 800129c:	0003      	movs	r3, r0
 800129e:	4323      	orrs	r3, r4
 80012a0:	4698      	mov	r8, r3
 80012a2:	d044      	beq.n	800132e <__aeabi_ddiv+0x35e>
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_ddiv+0x2da>
 80012a8:	e0cf      	b.n	800144a <__aeabi_ddiv+0x47a>
 80012aa:	0020      	movs	r0, r4
 80012ac:	f000 fd78 	bl	8001da0 <__clzsi2>
 80012b0:	0001      	movs	r1, r0
 80012b2:	0002      	movs	r2, r0
 80012b4:	390b      	subs	r1, #11
 80012b6:	231d      	movs	r3, #29
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	4649      	mov	r1, r9
 80012bc:	0010      	movs	r0, r2
 80012be:	40d9      	lsrs	r1, r3
 80012c0:	3808      	subs	r0, #8
 80012c2:	4084      	lsls	r4, r0
 80012c4:	000b      	movs	r3, r1
 80012c6:	464d      	mov	r5, r9
 80012c8:	4323      	orrs	r3, r4
 80012ca:	4698      	mov	r8, r3
 80012cc:	4085      	lsls	r5, r0
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <__aeabi_ddiv+0x38c>)
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	469b      	mov	fp, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4699      	mov	r9, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	e69e      	b.n	800101a <__aeabi_ddiv+0x4a>
 80012dc:	0002      	movs	r2, r0
 80012de:	4322      	orrs	r2, r4
 80012e0:	4690      	mov	r8, r2
 80012e2:	d11d      	bne.n	8001320 <__aeabi_ddiv+0x350>
 80012e4:	2208      	movs	r2, #8
 80012e6:	469b      	mov	fp, r3
 80012e8:	2302      	movs	r3, #2
 80012ea:	2500      	movs	r5, #0
 80012ec:	4691      	mov	r9, r2
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	e693      	b.n	800101a <__aeabi_ddiv+0x4a>
 80012f2:	4651      	mov	r1, sl
 80012f4:	4321      	orrs	r1, r4
 80012f6:	d109      	bne.n	800130c <__aeabi_ddiv+0x33c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	464a      	mov	r2, r9
 80012fc:	431a      	orrs	r2, r3
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <__aeabi_ddiv+0x390>)
 8001300:	4691      	mov	r9, r2
 8001302:	469c      	mov	ip, r3
 8001304:	2400      	movs	r4, #0
 8001306:	2002      	movs	r0, #2
 8001308:	44e3      	add	fp, ip
 800130a:	e6a1      	b.n	8001050 <__aeabi_ddiv+0x80>
 800130c:	2303      	movs	r3, #3
 800130e:	464a      	mov	r2, r9
 8001310:	431a      	orrs	r2, r3
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <__aeabi_ddiv+0x390>)
 8001314:	4691      	mov	r9, r2
 8001316:	469c      	mov	ip, r3
 8001318:	4651      	mov	r1, sl
 800131a:	2003      	movs	r0, #3
 800131c:	44e3      	add	fp, ip
 800131e:	e697      	b.n	8001050 <__aeabi_ddiv+0x80>
 8001320:	220c      	movs	r2, #12
 8001322:	469b      	mov	fp, r3
 8001324:	2303      	movs	r3, #3
 8001326:	46a0      	mov	r8, r4
 8001328:	4691      	mov	r9, r2
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	e675      	b.n	800101a <__aeabi_ddiv+0x4a>
 800132e:	2304      	movs	r3, #4
 8001330:	4699      	mov	r9, r3
 8001332:	2300      	movs	r3, #0
 8001334:	469b      	mov	fp, r3
 8001336:	3301      	adds	r3, #1
 8001338:	2500      	movs	r5, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	e66d      	b.n	800101a <__aeabi_ddiv+0x4a>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	000007ff 	.word	0x000007ff
 8001344:	fffffc01 	.word	0xfffffc01
 8001348:	08005684 	.word	0x08005684
 800134c:	000003ff 	.word	0x000003ff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	000007fe 	.word	0x000007fe
 8001358:	000003f3 	.word	0x000003f3
 800135c:	fffffc0d 	.word	0xfffffc0d
 8001360:	fffff801 	.word	0xfffff801
 8001364:	464a      	mov	r2, r9
 8001366:	2301      	movs	r3, #1
 8001368:	431a      	orrs	r2, r3
 800136a:	4691      	mov	r9, r2
 800136c:	2400      	movs	r4, #0
 800136e:	2001      	movs	r0, #1
 8001370:	e66e      	b.n	8001050 <__aeabi_ddiv+0x80>
 8001372:	2300      	movs	r3, #0
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	469a      	mov	sl, r3
 8001378:	2500      	movs	r5, #0
 800137a:	4b88      	ldr	r3, [pc, #544]	; (800159c <__aeabi_ddiv+0x5cc>)
 800137c:	0312      	lsls	r2, r2, #12
 800137e:	e67e      	b.n	800107e <__aeabi_ddiv+0xae>
 8001380:	2501      	movs	r5, #1
 8001382:	426d      	negs	r5, r5
 8001384:	2201      	movs	r2, #1
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	2a38      	cmp	r2, #56	; 0x38
 800138a:	dd00      	ble.n	800138e <__aeabi_ddiv+0x3be>
 800138c:	e674      	b.n	8001078 <__aeabi_ddiv+0xa8>
 800138e:	2a1f      	cmp	r2, #31
 8001390:	dc00      	bgt.n	8001394 <__aeabi_ddiv+0x3c4>
 8001392:	e0bd      	b.n	8001510 <__aeabi_ddiv+0x540>
 8001394:	211f      	movs	r1, #31
 8001396:	4249      	negs	r1, r1
 8001398:	1acb      	subs	r3, r1, r3
 800139a:	4641      	mov	r1, r8
 800139c:	40d9      	lsrs	r1, r3
 800139e:	000b      	movs	r3, r1
 80013a0:	2a20      	cmp	r2, #32
 80013a2:	d004      	beq.n	80013ae <__aeabi_ddiv+0x3de>
 80013a4:	4641      	mov	r1, r8
 80013a6:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <__aeabi_ddiv+0x5d0>)
 80013a8:	445a      	add	r2, fp
 80013aa:	4091      	lsls	r1, r2
 80013ac:	430d      	orrs	r5, r1
 80013ae:	0029      	movs	r1, r5
 80013b0:	1e4a      	subs	r2, r1, #1
 80013b2:	4191      	sbcs	r1, r2
 80013b4:	4319      	orrs	r1, r3
 80013b6:	2307      	movs	r3, #7
 80013b8:	001d      	movs	r5, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	400d      	ands	r5, r1
 80013be:	420b      	tst	r3, r1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_ddiv+0x3f4>
 80013c2:	e0d0      	b.n	8001566 <__aeabi_ddiv+0x596>
 80013c4:	220f      	movs	r2, #15
 80013c6:	2300      	movs	r3, #0
 80013c8:	400a      	ands	r2, r1
 80013ca:	2a04      	cmp	r2, #4
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x400>
 80013ce:	e0c7      	b.n	8001560 <__aeabi_ddiv+0x590>
 80013d0:	1d0a      	adds	r2, r1, #4
 80013d2:	428a      	cmp	r2, r1
 80013d4:	4189      	sbcs	r1, r1
 80013d6:	4249      	negs	r1, r1
 80013d8:	185b      	adds	r3, r3, r1
 80013da:	0011      	movs	r1, r2
 80013dc:	021a      	lsls	r2, r3, #8
 80013de:	d400      	bmi.n	80013e2 <__aeabi_ddiv+0x412>
 80013e0:	e0be      	b.n	8001560 <__aeabi_ddiv+0x590>
 80013e2:	2301      	movs	r3, #1
 80013e4:	2200      	movs	r2, #0
 80013e6:	2500      	movs	r5, #0
 80013e8:	e649      	b.n	800107e <__aeabi_ddiv+0xae>
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	4643      	mov	r3, r8
 80013ee:	0312      	lsls	r2, r2, #12
 80013f0:	4213      	tst	r3, r2
 80013f2:	d008      	beq.n	8001406 <__aeabi_ddiv+0x436>
 80013f4:	4214      	tst	r4, r2
 80013f6:	d106      	bne.n	8001406 <__aeabi_ddiv+0x436>
 80013f8:	4322      	orrs	r2, r4
 80013fa:	0312      	lsls	r2, r2, #12
 80013fc:	46ba      	mov	sl, r7
 80013fe:	000d      	movs	r5, r1
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <__aeabi_ddiv+0x5cc>)
 8001402:	0b12      	lsrs	r2, r2, #12
 8001404:	e63b      	b.n	800107e <__aeabi_ddiv+0xae>
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	4643      	mov	r3, r8
 800140a:	0312      	lsls	r2, r2, #12
 800140c:	431a      	orrs	r2, r3
 800140e:	0312      	lsls	r2, r2, #12
 8001410:	46b2      	mov	sl, r6
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <__aeabi_ddiv+0x5cc>)
 8001414:	0b12      	lsrs	r2, r2, #12
 8001416:	e632      	b.n	800107e <__aeabi_ddiv+0xae>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d100      	bne.n	800141e <__aeabi_ddiv+0x44e>
 800141c:	e702      	b.n	8001224 <__aeabi_ddiv+0x254>
 800141e:	19a6      	adds	r6, r4, r6
 8001420:	1e6a      	subs	r2, r5, #1
 8001422:	42a6      	cmp	r6, r4
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x458>
 8001426:	e089      	b.n	800153c <__aeabi_ddiv+0x56c>
 8001428:	4286      	cmp	r6, r0
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x45e>
 800142c:	e09f      	b.n	800156e <__aeabi_ddiv+0x59e>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x462>
 8001430:	e0af      	b.n	8001592 <__aeabi_ddiv+0x5c2>
 8001432:	0015      	movs	r5, r2
 8001434:	e6f4      	b.n	8001220 <__aeabi_ddiv+0x250>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d900      	bls.n	800143c <__aeabi_ddiv+0x46c>
 800143a:	e63c      	b.n	80010b6 <__aeabi_ddiv+0xe6>
 800143c:	4643      	mov	r3, r8
 800143e:	07de      	lsls	r6, r3, #31
 8001440:	0858      	lsrs	r0, r3, #1
 8001442:	086b      	lsrs	r3, r5, #1
 8001444:	431e      	orrs	r6, r3
 8001446:	07ed      	lsls	r5, r5, #31
 8001448:	e63c      	b.n	80010c4 <__aeabi_ddiv+0xf4>
 800144a:	f000 fca9 	bl	8001da0 <__clzsi2>
 800144e:	0001      	movs	r1, r0
 8001450:	0002      	movs	r2, r0
 8001452:	3115      	adds	r1, #21
 8001454:	3220      	adds	r2, #32
 8001456:	291c      	cmp	r1, #28
 8001458:	dc00      	bgt.n	800145c <__aeabi_ddiv+0x48c>
 800145a:	e72c      	b.n	80012b6 <__aeabi_ddiv+0x2e6>
 800145c:	464b      	mov	r3, r9
 800145e:	3808      	subs	r0, #8
 8001460:	4083      	lsls	r3, r0
 8001462:	2500      	movs	r5, #0
 8001464:	4698      	mov	r8, r3
 8001466:	e732      	b.n	80012ce <__aeabi_ddiv+0x2fe>
 8001468:	f000 fc9a 	bl	8001da0 <__clzsi2>
 800146c:	0003      	movs	r3, r0
 800146e:	001a      	movs	r2, r3
 8001470:	3215      	adds	r2, #21
 8001472:	3020      	adds	r0, #32
 8001474:	2a1c      	cmp	r2, #28
 8001476:	dc00      	bgt.n	800147a <__aeabi_ddiv+0x4aa>
 8001478:	e6ff      	b.n	800127a <__aeabi_ddiv+0x2aa>
 800147a:	4654      	mov	r4, sl
 800147c:	3b08      	subs	r3, #8
 800147e:	2100      	movs	r1, #0
 8001480:	409c      	lsls	r4, r3
 8001482:	e705      	b.n	8001290 <__aeabi_ddiv+0x2c0>
 8001484:	1936      	adds	r6, r6, r4
 8001486:	3b01      	subs	r3, #1
 8001488:	42b4      	cmp	r4, r6
 800148a:	d900      	bls.n	800148e <__aeabi_ddiv+0x4be>
 800148c:	e6a6      	b.n	80011dc <__aeabi_ddiv+0x20c>
 800148e:	42b2      	cmp	r2, r6
 8001490:	d800      	bhi.n	8001494 <__aeabi_ddiv+0x4c4>
 8001492:	e6a3      	b.n	80011dc <__aeabi_ddiv+0x20c>
 8001494:	1e83      	subs	r3, r0, #2
 8001496:	1936      	adds	r6, r6, r4
 8001498:	e6a0      	b.n	80011dc <__aeabi_ddiv+0x20c>
 800149a:	1909      	adds	r1, r1, r4
 800149c:	3d01      	subs	r5, #1
 800149e:	428c      	cmp	r4, r1
 80014a0:	d900      	bls.n	80014a4 <__aeabi_ddiv+0x4d4>
 80014a2:	e68d      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014a4:	428a      	cmp	r2, r1
 80014a6:	d800      	bhi.n	80014aa <__aeabi_ddiv+0x4da>
 80014a8:	e68a      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014aa:	1e85      	subs	r5, r0, #2
 80014ac:	1909      	adds	r1, r1, r4
 80014ae:	e687      	b.n	80011c0 <__aeabi_ddiv+0x1f0>
 80014b0:	220f      	movs	r2, #15
 80014b2:	402a      	ands	r2, r5
 80014b4:	2a04      	cmp	r2, #4
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0x4ea>
 80014b8:	e6bc      	b.n	8001234 <__aeabi_ddiv+0x264>
 80014ba:	1d29      	adds	r1, r5, #4
 80014bc:	42a9      	cmp	r1, r5
 80014be:	41ad      	sbcs	r5, r5
 80014c0:	426d      	negs	r5, r5
 80014c2:	08c9      	lsrs	r1, r1, #3
 80014c4:	44a8      	add	r8, r5
 80014c6:	e6b6      	b.n	8001236 <__aeabi_ddiv+0x266>
 80014c8:	42af      	cmp	r7, r5
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x4fe>
 80014cc:	e662      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014ce:	4281      	cmp	r1, r0
 80014d0:	d804      	bhi.n	80014dc <__aeabi_ddiv+0x50c>
 80014d2:	d000      	beq.n	80014d6 <__aeabi_ddiv+0x506>
 80014d4:	e65e      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014d6:	42ae      	cmp	r6, r5
 80014d8:	d800      	bhi.n	80014dc <__aeabi_ddiv+0x50c>
 80014da:	e65b      	b.n	8001194 <__aeabi_ddiv+0x1c4>
 80014dc:	2302      	movs	r3, #2
 80014de:	425b      	negs	r3, r3
 80014e0:	469c      	mov	ip, r3
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	44e0      	add	r8, ip
 80014e6:	469c      	mov	ip, r3
 80014e8:	4465      	add	r5, ip
 80014ea:	429d      	cmp	r5, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	425b      	negs	r3, r3
 80014f0:	191b      	adds	r3, r3, r4
 80014f2:	18c0      	adds	r0, r0, r3
 80014f4:	e64f      	b.n	8001196 <__aeabi_ddiv+0x1c6>
 80014f6:	42b2      	cmp	r2, r6
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x52c>
 80014fa:	e612      	b.n	8001122 <__aeabi_ddiv+0x152>
 80014fc:	1e83      	subs	r3, r0, #2
 80014fe:	1936      	adds	r6, r6, r4
 8001500:	e60f      	b.n	8001122 <__aeabi_ddiv+0x152>
 8001502:	428a      	cmp	r2, r1
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x538>
 8001506:	e5fa      	b.n	80010fe <__aeabi_ddiv+0x12e>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	4698      	mov	r8, r3
 800150c:	1909      	adds	r1, r1, r4
 800150e:	e5f6      	b.n	80010fe <__aeabi_ddiv+0x12e>
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <__aeabi_ddiv+0x5d4>)
 8001512:	0028      	movs	r0, r5
 8001514:	445b      	add	r3, fp
 8001516:	4641      	mov	r1, r8
 8001518:	409d      	lsls	r5, r3
 800151a:	4099      	lsls	r1, r3
 800151c:	40d0      	lsrs	r0, r2
 800151e:	1e6b      	subs	r3, r5, #1
 8001520:	419d      	sbcs	r5, r3
 8001522:	4643      	mov	r3, r8
 8001524:	4301      	orrs	r1, r0
 8001526:	4329      	orrs	r1, r5
 8001528:	40d3      	lsrs	r3, r2
 800152a:	074a      	lsls	r2, r1, #29
 800152c:	d100      	bne.n	8001530 <__aeabi_ddiv+0x560>
 800152e:	e755      	b.n	80013dc <__aeabi_ddiv+0x40c>
 8001530:	220f      	movs	r2, #15
 8001532:	400a      	ands	r2, r1
 8001534:	2a04      	cmp	r2, #4
 8001536:	d000      	beq.n	800153a <__aeabi_ddiv+0x56a>
 8001538:	e74a      	b.n	80013d0 <__aeabi_ddiv+0x400>
 800153a:	e74f      	b.n	80013dc <__aeabi_ddiv+0x40c>
 800153c:	0015      	movs	r5, r2
 800153e:	4286      	cmp	r6, r0
 8001540:	d000      	beq.n	8001544 <__aeabi_ddiv+0x574>
 8001542:	e66d      	b.n	8001220 <__aeabi_ddiv+0x250>
 8001544:	9a00      	ldr	r2, [sp, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d000      	beq.n	800154c <__aeabi_ddiv+0x57c>
 800154a:	e669      	b.n	8001220 <__aeabi_ddiv+0x250>
 800154c:	e66a      	b.n	8001224 <__aeabi_ddiv+0x254>
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <__aeabi_ddiv+0x5d8>)
 8001550:	445b      	add	r3, fp
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc00      	bgt.n	8001558 <__aeabi_ddiv+0x588>
 8001556:	e713      	b.n	8001380 <__aeabi_ddiv+0x3b0>
 8001558:	2501      	movs	r5, #1
 800155a:	2100      	movs	r1, #0
 800155c:	44a8      	add	r8, r5
 800155e:	e66a      	b.n	8001236 <__aeabi_ddiv+0x266>
 8001560:	075d      	lsls	r5, r3, #29
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	0b1a      	lsrs	r2, r3, #12
 8001566:	08c9      	lsrs	r1, r1, #3
 8001568:	2300      	movs	r3, #0
 800156a:	430d      	orrs	r5, r1
 800156c:	e587      	b.n	800107e <__aeabi_ddiv+0xae>
 800156e:	9900      	ldr	r1, [sp, #0]
 8001570:	3d02      	subs	r5, #2
 8001572:	004a      	lsls	r2, r1, #1
 8001574:	428a      	cmp	r2, r1
 8001576:	41bf      	sbcs	r7, r7
 8001578:	427f      	negs	r7, r7
 800157a:	193f      	adds	r7, r7, r4
 800157c:	19f6      	adds	r6, r6, r7
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	e7dd      	b.n	800153e <__aeabi_ddiv+0x56e>
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	4643      	mov	r3, r8
 8001586:	0312      	lsls	r2, r2, #12
 8001588:	431a      	orrs	r2, r3
 800158a:	0312      	lsls	r2, r2, #12
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <__aeabi_ddiv+0x5cc>)
 800158e:	0b12      	lsrs	r2, r2, #12
 8001590:	e575      	b.n	800107e <__aeabi_ddiv+0xae>
 8001592:	9900      	ldr	r1, [sp, #0]
 8001594:	4299      	cmp	r1, r3
 8001596:	d3ea      	bcc.n	800156e <__aeabi_ddiv+0x59e>
 8001598:	0015      	movs	r5, r2
 800159a:	e7d3      	b.n	8001544 <__aeabi_ddiv+0x574>
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	0000043e 	.word	0x0000043e
 80015a4:	0000041e 	.word	0x0000041e
 80015a8:	000003ff 	.word	0x000003ff

080015ac <__aeabi_dmul>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	4645      	mov	r5, r8
 80015b0:	46de      	mov	lr, fp
 80015b2:	4657      	mov	r7, sl
 80015b4:	464e      	mov	r6, r9
 80015b6:	b5e0      	push	{r5, r6, r7, lr}
 80015b8:	001f      	movs	r7, r3
 80015ba:	030b      	lsls	r3, r1, #12
 80015bc:	0b1b      	lsrs	r3, r3, #12
 80015be:	469b      	mov	fp, r3
 80015c0:	004d      	lsls	r5, r1, #1
 80015c2:	0fcb      	lsrs	r3, r1, #31
 80015c4:	0004      	movs	r4, r0
 80015c6:	4691      	mov	r9, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	b087      	sub	sp, #28
 80015cc:	0d6d      	lsrs	r5, r5, #21
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x26>
 80015d0:	e1cd      	b.n	800196e <__aeabi_dmul+0x3c2>
 80015d2:	4bce      	ldr	r3, [pc, #824]	; (800190c <__aeabi_dmul+0x360>)
 80015d4:	429d      	cmp	r5, r3
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x2e>
 80015d8:	e1e9      	b.n	80019ae <__aeabi_dmul+0x402>
 80015da:	465a      	mov	r2, fp
 80015dc:	0f43      	lsrs	r3, r0, #29
 80015de:	00d2      	lsls	r2, r2, #3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	00c3      	lsls	r3, r0, #3
 80015ea:	469a      	mov	sl, r3
 80015ec:	4bc8      	ldr	r3, [pc, #800]	; (8001910 <__aeabi_dmul+0x364>)
 80015ee:	4693      	mov	fp, r2
 80015f0:	469c      	mov	ip, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	2600      	movs	r6, #0
 80015f6:	4465      	add	r5, ip
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	033c      	lsls	r4, r7, #12
 80015fc:	007b      	lsls	r3, r7, #1
 80015fe:	4648      	mov	r0, r9
 8001600:	0b24      	lsrs	r4, r4, #12
 8001602:	0d5b      	lsrs	r3, r3, #21
 8001604:	0fff      	lsrs	r7, r7, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x60>
 800160a:	e189      	b.n	8001920 <__aeabi_dmul+0x374>
 800160c:	4abf      	ldr	r2, [pc, #764]	; (800190c <__aeabi_dmul+0x360>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <__aeabi_dmul+0x9a>
 8001612:	0f42      	lsrs	r2, r0, #29
 8001614:	00e4      	lsls	r4, r4, #3
 8001616:	4322      	orrs	r2, r4
 8001618:	2480      	movs	r4, #128	; 0x80
 800161a:	0424      	lsls	r4, r4, #16
 800161c:	4314      	orrs	r4, r2
 800161e:	4abc      	ldr	r2, [pc, #752]	; (8001910 <__aeabi_dmul+0x364>)
 8001620:	2100      	movs	r1, #0
 8001622:	4694      	mov	ip, r2
 8001624:	4642      	mov	r2, r8
 8001626:	4463      	add	r3, ip
 8001628:	195b      	adds	r3, r3, r5
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
 800162e:	407a      	eors	r2, r7
 8001630:	3301      	adds	r3, #1
 8001632:	00c0      	lsls	r0, r0, #3
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2e0a      	cmp	r6, #10
 800163a:	dd1c      	ble.n	8001676 <__aeabi_dmul+0xca>
 800163c:	003a      	movs	r2, r7
 800163e:	2e0b      	cmp	r6, #11
 8001640:	d05e      	beq.n	8001700 <__aeabi_dmul+0x154>
 8001642:	4647      	mov	r7, r8
 8001644:	e056      	b.n	80016f4 <__aeabi_dmul+0x148>
 8001646:	4649      	mov	r1, r9
 8001648:	4bb0      	ldr	r3, [pc, #704]	; (800190c <__aeabi_dmul+0x360>)
 800164a:	4321      	orrs	r1, r4
 800164c:	18eb      	adds	r3, r5, r3
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2900      	cmp	r1, #0
 8001652:	d12a      	bne.n	80016aa <__aeabi_dmul+0xfe>
 8001654:	2080      	movs	r0, #128	; 0x80
 8001656:	2202      	movs	r2, #2
 8001658:	0100      	lsls	r0, r0, #4
 800165a:	002b      	movs	r3, r5
 800165c:	4684      	mov	ip, r0
 800165e:	4316      	orrs	r6, r2
 8001660:	4642      	mov	r2, r8
 8001662:	4463      	add	r3, ip
 8001664:	407a      	eors	r2, r7
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2e0a      	cmp	r6, #10
 800166c:	dd00      	ble.n	8001670 <__aeabi_dmul+0xc4>
 800166e:	e231      	b.n	8001ad4 <__aeabi_dmul+0x528>
 8001670:	2000      	movs	r0, #0
 8001672:	2400      	movs	r4, #0
 8001674:	2102      	movs	r1, #2
 8001676:	2e02      	cmp	r6, #2
 8001678:	dc26      	bgt.n	80016c8 <__aeabi_dmul+0x11c>
 800167a:	3e01      	subs	r6, #1
 800167c:	2e01      	cmp	r6, #1
 800167e:	d852      	bhi.n	8001726 <__aeabi_dmul+0x17a>
 8001680:	2902      	cmp	r1, #2
 8001682:	d04c      	beq.n	800171e <__aeabi_dmul+0x172>
 8001684:	2901      	cmp	r1, #1
 8001686:	d000      	beq.n	800168a <__aeabi_dmul+0xde>
 8001688:	e118      	b.n	80018bc <__aeabi_dmul+0x310>
 800168a:	2300      	movs	r3, #0
 800168c:	2400      	movs	r4, #0
 800168e:	2500      	movs	r5, #0
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	4323      	orrs	r3, r4
 8001694:	07d2      	lsls	r2, r2, #31
 8001696:	4313      	orrs	r3, r2
 8001698:	0028      	movs	r0, r5
 800169a:	0019      	movs	r1, r3
 800169c:	b007      	add	sp, #28
 800169e:	bcf0      	pop	{r4, r5, r6, r7}
 80016a0:	46bb      	mov	fp, r7
 80016a2:	46b2      	mov	sl, r6
 80016a4:	46a9      	mov	r9, r5
 80016a6:	46a0      	mov	r8, r4
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	2203      	movs	r2, #3
 80016ae:	0109      	lsls	r1, r1, #4
 80016b0:	002b      	movs	r3, r5
 80016b2:	468c      	mov	ip, r1
 80016b4:	4316      	orrs	r6, r2
 80016b6:	4642      	mov	r2, r8
 80016b8:	4463      	add	r3, ip
 80016ba:	407a      	eors	r2, r7
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2e0a      	cmp	r6, #10
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_dmul+0x11a>
 80016c4:	e228      	b.n	8001b18 <__aeabi_dmul+0x56c>
 80016c6:	2103      	movs	r1, #3
 80016c8:	2501      	movs	r5, #1
 80016ca:	40b5      	lsls	r5, r6
 80016cc:	46ac      	mov	ip, r5
 80016ce:	26a6      	movs	r6, #166	; 0xa6
 80016d0:	4663      	mov	r3, ip
 80016d2:	00f6      	lsls	r6, r6, #3
 80016d4:	4035      	ands	r5, r6
 80016d6:	4233      	tst	r3, r6
 80016d8:	d10b      	bne.n	80016f2 <__aeabi_dmul+0x146>
 80016da:	2690      	movs	r6, #144	; 0x90
 80016dc:	00b6      	lsls	r6, r6, #2
 80016de:	4233      	tst	r3, r6
 80016e0:	d118      	bne.n	8001714 <__aeabi_dmul+0x168>
 80016e2:	3eb9      	subs	r6, #185	; 0xb9
 80016e4:	3eff      	subs	r6, #255	; 0xff
 80016e6:	421e      	tst	r6, r3
 80016e8:	d01d      	beq.n	8001726 <__aeabi_dmul+0x17a>
 80016ea:	46a3      	mov	fp, r4
 80016ec:	4682      	mov	sl, r0
 80016ee:	9100      	str	r1, [sp, #0]
 80016f0:	e000      	b.n	80016f4 <__aeabi_dmul+0x148>
 80016f2:	0017      	movs	r7, r2
 80016f4:	9900      	ldr	r1, [sp, #0]
 80016f6:	003a      	movs	r2, r7
 80016f8:	2902      	cmp	r1, #2
 80016fa:	d010      	beq.n	800171e <__aeabi_dmul+0x172>
 80016fc:	465c      	mov	r4, fp
 80016fe:	4650      	mov	r0, sl
 8001700:	2903      	cmp	r1, #3
 8001702:	d1bf      	bne.n	8001684 <__aeabi_dmul+0xd8>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	031b      	lsls	r3, r3, #12
 8001708:	431c      	orrs	r4, r3
 800170a:	0324      	lsls	r4, r4, #12
 800170c:	0005      	movs	r5, r0
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <__aeabi_dmul+0x360>)
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	e7bd      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001714:	2480      	movs	r4, #128	; 0x80
 8001716:	2200      	movs	r2, #0
 8001718:	4b7c      	ldr	r3, [pc, #496]	; (800190c <__aeabi_dmul+0x360>)
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	e7b8      	b.n	8001690 <__aeabi_dmul+0xe4>
 800171e:	2400      	movs	r4, #0
 8001720:	2500      	movs	r5, #0
 8001722:	4b7a      	ldr	r3, [pc, #488]	; (800190c <__aeabi_dmul+0x360>)
 8001724:	e7b4      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001726:	4653      	mov	r3, sl
 8001728:	041e      	lsls	r6, r3, #16
 800172a:	0c36      	lsrs	r6, r6, #16
 800172c:	0c1f      	lsrs	r7, r3, #16
 800172e:	0033      	movs	r3, r6
 8001730:	0c01      	lsrs	r1, r0, #16
 8001732:	0400      	lsls	r0, r0, #16
 8001734:	0c00      	lsrs	r0, r0, #16
 8001736:	4343      	muls	r3, r0
 8001738:	4698      	mov	r8, r3
 800173a:	0003      	movs	r3, r0
 800173c:	437b      	muls	r3, r7
 800173e:	4699      	mov	r9, r3
 8001740:	0033      	movs	r3, r6
 8001742:	434b      	muls	r3, r1
 8001744:	469c      	mov	ip, r3
 8001746:	4643      	mov	r3, r8
 8001748:	000d      	movs	r5, r1
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	469a      	mov	sl, r3
 800174e:	437d      	muls	r5, r7
 8001750:	44cc      	add	ip, r9
 8001752:	44d4      	add	ip, sl
 8001754:	9500      	str	r5, [sp, #0]
 8001756:	45e1      	cmp	r9, ip
 8001758:	d904      	bls.n	8001764 <__aeabi_dmul+0x1b8>
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	4699      	mov	r9, r3
 8001760:	444d      	add	r5, r9
 8001762:	9500      	str	r5, [sp, #0]
 8001764:	4663      	mov	r3, ip
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	001d      	movs	r5, r3
 800176a:	4663      	mov	r3, ip
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	469c      	mov	ip, r3
 8001770:	4643      	mov	r3, r8
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	4698      	mov	r8, r3
 8001778:	4663      	mov	r3, ip
 800177a:	4443      	add	r3, r8
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	0c23      	lsrs	r3, r4, #16
 8001780:	4698      	mov	r8, r3
 8001782:	0033      	movs	r3, r6
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	4363      	muls	r3, r4
 800178a:	469c      	mov	ip, r3
 800178c:	0023      	movs	r3, r4
 800178e:	437b      	muls	r3, r7
 8001790:	4699      	mov	r9, r3
 8001792:	4643      	mov	r3, r8
 8001794:	435e      	muls	r6, r3
 8001796:	435f      	muls	r7, r3
 8001798:	444e      	add	r6, r9
 800179a:	4663      	mov	r3, ip
 800179c:	46b2      	mov	sl, r6
 800179e:	0c1e      	lsrs	r6, r3, #16
 80017a0:	4456      	add	r6, sl
 80017a2:	45b1      	cmp	r9, r6
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x202>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4699      	mov	r9, r3
 80017ac:	444f      	add	r7, r9
 80017ae:	0c33      	lsrs	r3, r6, #16
 80017b0:	4699      	mov	r9, r3
 80017b2:	003b      	movs	r3, r7
 80017b4:	444b      	add	r3, r9
 80017b6:	9305      	str	r3, [sp, #20]
 80017b8:	4663      	mov	r3, ip
 80017ba:	46ac      	mov	ip, r5
 80017bc:	041f      	lsls	r7, r3, #16
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0436      	lsls	r6, r6, #16
 80017c2:	19f6      	adds	r6, r6, r7
 80017c4:	44b4      	add	ip, r6
 80017c6:	4663      	mov	r3, ip
 80017c8:	9304      	str	r3, [sp, #16]
 80017ca:	465b      	mov	r3, fp
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	469c      	mov	ip, r3
 80017d0:	465b      	mov	r3, fp
 80017d2:	041f      	lsls	r7, r3, #16
 80017d4:	0c3f      	lsrs	r7, r7, #16
 80017d6:	003b      	movs	r3, r7
 80017d8:	4343      	muls	r3, r0
 80017da:	4699      	mov	r9, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4343      	muls	r3, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	464b      	mov	r3, r9
 80017e4:	4660      	mov	r0, ip
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	469b      	mov	fp, r3
 80017ea:	4348      	muls	r0, r1
 80017ec:	4379      	muls	r1, r7
 80017ee:	4451      	add	r1, sl
 80017f0:	4459      	add	r1, fp
 80017f2:	458a      	cmp	sl, r1
 80017f4:	d903      	bls.n	80017fe <__aeabi_dmul+0x252>
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	469a      	mov	sl, r3
 80017fc:	4450      	add	r0, sl
 80017fe:	0c0b      	lsrs	r3, r1, #16
 8001800:	469a      	mov	sl, r3
 8001802:	464b      	mov	r3, r9
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	4699      	mov	r9, r3
 800180a:	003b      	movs	r3, r7
 800180c:	4363      	muls	r3, r4
 800180e:	0409      	lsls	r1, r1, #16
 8001810:	4645      	mov	r5, r8
 8001812:	4449      	add	r1, r9
 8001814:	4699      	mov	r9, r3
 8001816:	4663      	mov	r3, ip
 8001818:	435c      	muls	r4, r3
 800181a:	436b      	muls	r3, r5
 800181c:	469c      	mov	ip, r3
 800181e:	464b      	mov	r3, r9
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	4698      	mov	r8, r3
 8001824:	436f      	muls	r7, r5
 8001826:	193f      	adds	r7, r7, r4
 8001828:	4447      	add	r7, r8
 800182a:	4450      	add	r0, sl
 800182c:	42bc      	cmp	r4, r7
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x28c>
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4698      	mov	r8, r3
 8001836:	44c4      	add	ip, r8
 8001838:	9b04      	ldr	r3, [sp, #16]
 800183a:	9d00      	ldr	r5, [sp, #0]
 800183c:	4698      	mov	r8, r3
 800183e:	4445      	add	r5, r8
 8001840:	42b5      	cmp	r5, r6
 8001842:	41b6      	sbcs	r6, r6
 8001844:	4273      	negs	r3, r6
 8001846:	4698      	mov	r8, r3
 8001848:	464b      	mov	r3, r9
 800184a:	041e      	lsls	r6, r3, #16
 800184c:	9b05      	ldr	r3, [sp, #20]
 800184e:	043c      	lsls	r4, r7, #16
 8001850:	4699      	mov	r9, r3
 8001852:	0c36      	lsrs	r6, r6, #16
 8001854:	19a4      	adds	r4, r4, r6
 8001856:	444c      	add	r4, r9
 8001858:	46a1      	mov	r9, r4
 800185a:	4683      	mov	fp, r0
 800185c:	186e      	adds	r6, r5, r1
 800185e:	44c1      	add	r9, r8
 8001860:	428e      	cmp	r6, r1
 8001862:	4189      	sbcs	r1, r1
 8001864:	44cb      	add	fp, r9
 8001866:	465d      	mov	r5, fp
 8001868:	4249      	negs	r1, r1
 800186a:	186d      	adds	r5, r5, r1
 800186c:	429c      	cmp	r4, r3
 800186e:	41a4      	sbcs	r4, r4
 8001870:	45c1      	cmp	r9, r8
 8001872:	419b      	sbcs	r3, r3
 8001874:	4583      	cmp	fp, r0
 8001876:	4180      	sbcs	r0, r0
 8001878:	428d      	cmp	r5, r1
 800187a:	4189      	sbcs	r1, r1
 800187c:	425b      	negs	r3, r3
 800187e:	4264      	negs	r4, r4
 8001880:	431c      	orrs	r4, r3
 8001882:	4240      	negs	r0, r0
 8001884:	9b03      	ldr	r3, [sp, #12]
 8001886:	4249      	negs	r1, r1
 8001888:	4301      	orrs	r1, r0
 800188a:	0270      	lsls	r0, r6, #9
 800188c:	0c3f      	lsrs	r7, r7, #16
 800188e:	4318      	orrs	r0, r3
 8001890:	19e4      	adds	r4, r4, r7
 8001892:	1e47      	subs	r7, r0, #1
 8001894:	41b8      	sbcs	r0, r7
 8001896:	1864      	adds	r4, r4, r1
 8001898:	4464      	add	r4, ip
 800189a:	0df6      	lsrs	r6, r6, #23
 800189c:	0261      	lsls	r1, r4, #9
 800189e:	4330      	orrs	r0, r6
 80018a0:	0dec      	lsrs	r4, r5, #23
 80018a2:	026e      	lsls	r6, r5, #9
 80018a4:	430c      	orrs	r4, r1
 80018a6:	4330      	orrs	r0, r6
 80018a8:	01c9      	lsls	r1, r1, #7
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dmul+0x302>
 80018ac:	e0f1      	b.n	8001a92 <__aeabi_dmul+0x4e6>
 80018ae:	2101      	movs	r1, #1
 80018b0:	0843      	lsrs	r3, r0, #1
 80018b2:	4001      	ands	r1, r0
 80018b4:	430b      	orrs	r3, r1
 80018b6:	07e0      	lsls	r0, r4, #31
 80018b8:	4318      	orrs	r0, r3
 80018ba:	0864      	lsrs	r4, r4, #1
 80018bc:	4915      	ldr	r1, [pc, #84]	; (8001914 <__aeabi_dmul+0x368>)
 80018be:	9b02      	ldr	r3, [sp, #8]
 80018c0:	468c      	mov	ip, r1
 80018c2:	4463      	add	r3, ip
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dc00      	bgt.n	80018ca <__aeabi_dmul+0x31e>
 80018c8:	e097      	b.n	80019fa <__aeabi_dmul+0x44e>
 80018ca:	0741      	lsls	r1, r0, #29
 80018cc:	d009      	beq.n	80018e2 <__aeabi_dmul+0x336>
 80018ce:	210f      	movs	r1, #15
 80018d0:	4001      	ands	r1, r0
 80018d2:	2904      	cmp	r1, #4
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dmul+0x336>
 80018d6:	1d01      	adds	r1, r0, #4
 80018d8:	4281      	cmp	r1, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	4240      	negs	r0, r0
 80018de:	1824      	adds	r4, r4, r0
 80018e0:	0008      	movs	r0, r1
 80018e2:	01e1      	lsls	r1, r4, #7
 80018e4:	d506      	bpl.n	80018f4 <__aeabi_dmul+0x348>
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	00c9      	lsls	r1, r1, #3
 80018ea:	468c      	mov	ip, r1
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <__aeabi_dmul+0x36c>)
 80018ee:	401c      	ands	r4, r3
 80018f0:	9b02      	ldr	r3, [sp, #8]
 80018f2:	4463      	add	r3, ip
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <__aeabi_dmul+0x370>)
 80018f6:	428b      	cmp	r3, r1
 80018f8:	dd00      	ble.n	80018fc <__aeabi_dmul+0x350>
 80018fa:	e710      	b.n	800171e <__aeabi_dmul+0x172>
 80018fc:	0761      	lsls	r1, r4, #29
 80018fe:	08c5      	lsrs	r5, r0, #3
 8001900:	0264      	lsls	r4, r4, #9
 8001902:	055b      	lsls	r3, r3, #21
 8001904:	430d      	orrs	r5, r1
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d5b      	lsrs	r3, r3, #21
 800190a:	e6c1      	b.n	8001690 <__aeabi_dmul+0xe4>
 800190c:	000007ff 	.word	0x000007ff
 8001910:	fffffc01 	.word	0xfffffc01
 8001914:	000003ff 	.word	0x000003ff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	000007fe 	.word	0x000007fe
 8001920:	464b      	mov	r3, r9
 8001922:	4323      	orrs	r3, r4
 8001924:	d059      	beq.n	80019da <__aeabi_dmul+0x42e>
 8001926:	2c00      	cmp	r4, #0
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0x380>
 800192a:	e0a3      	b.n	8001a74 <__aeabi_dmul+0x4c8>
 800192c:	0020      	movs	r0, r4
 800192e:	f000 fa37 	bl	8001da0 <__clzsi2>
 8001932:	0001      	movs	r1, r0
 8001934:	0003      	movs	r3, r0
 8001936:	390b      	subs	r1, #11
 8001938:	221d      	movs	r2, #29
 800193a:	1a52      	subs	r2, r2, r1
 800193c:	4649      	mov	r1, r9
 800193e:	0018      	movs	r0, r3
 8001940:	40d1      	lsrs	r1, r2
 8001942:	464a      	mov	r2, r9
 8001944:	3808      	subs	r0, #8
 8001946:	4082      	lsls	r2, r0
 8001948:	4084      	lsls	r4, r0
 800194a:	0010      	movs	r0, r2
 800194c:	430c      	orrs	r4, r1
 800194e:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <__aeabi_dmul+0x574>)
 8001950:	1aeb      	subs	r3, r5, r3
 8001952:	4694      	mov	ip, r2
 8001954:	4642      	mov	r2, r8
 8001956:	4463      	add	r3, ip
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	407a      	eors	r2, r7
 800195e:	3301      	adds	r3, #1
 8001960:	2100      	movs	r1, #0
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2e0a      	cmp	r6, #10
 8001968:	dd00      	ble.n	800196c <__aeabi_dmul+0x3c0>
 800196a:	e667      	b.n	800163c <__aeabi_dmul+0x90>
 800196c:	e683      	b.n	8001676 <__aeabi_dmul+0xca>
 800196e:	465b      	mov	r3, fp
 8001970:	4303      	orrs	r3, r0
 8001972:	469a      	mov	sl, r3
 8001974:	d02a      	beq.n	80019cc <__aeabi_dmul+0x420>
 8001976:	465b      	mov	r3, fp
 8001978:	2b00      	cmp	r3, #0
 800197a:	d06d      	beq.n	8001a58 <__aeabi_dmul+0x4ac>
 800197c:	4658      	mov	r0, fp
 800197e:	f000 fa0f 	bl	8001da0 <__clzsi2>
 8001982:	0001      	movs	r1, r0
 8001984:	0003      	movs	r3, r0
 8001986:	390b      	subs	r1, #11
 8001988:	221d      	movs	r2, #29
 800198a:	1a52      	subs	r2, r2, r1
 800198c:	0021      	movs	r1, r4
 800198e:	0018      	movs	r0, r3
 8001990:	465d      	mov	r5, fp
 8001992:	40d1      	lsrs	r1, r2
 8001994:	3808      	subs	r0, #8
 8001996:	4085      	lsls	r5, r0
 8001998:	000a      	movs	r2, r1
 800199a:	4084      	lsls	r4, r0
 800199c:	432a      	orrs	r2, r5
 800199e:	4693      	mov	fp, r2
 80019a0:	46a2      	mov	sl, r4
 80019a2:	4d5f      	ldr	r5, [pc, #380]	; (8001b20 <__aeabi_dmul+0x574>)
 80019a4:	2600      	movs	r6, #0
 80019a6:	1aed      	subs	r5, r5, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	e625      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019ae:	465b      	mov	r3, fp
 80019b0:	4303      	orrs	r3, r0
 80019b2:	469a      	mov	sl, r3
 80019b4:	d105      	bne.n	80019c2 <__aeabi_dmul+0x416>
 80019b6:	2300      	movs	r3, #0
 80019b8:	469b      	mov	fp, r3
 80019ba:	3302      	adds	r3, #2
 80019bc:	2608      	movs	r6, #8
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	e61b      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019c2:	2303      	movs	r3, #3
 80019c4:	4682      	mov	sl, r0
 80019c6:	260c      	movs	r6, #12
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	e616      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019cc:	2300      	movs	r3, #0
 80019ce:	469b      	mov	fp, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	2604      	movs	r6, #4
 80019d4:	2500      	movs	r5, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	e60f      	b.n	80015fa <__aeabi_dmul+0x4e>
 80019da:	4642      	mov	r2, r8
 80019dc:	3301      	adds	r3, #1
 80019de:	9501      	str	r5, [sp, #4]
 80019e0:	431e      	orrs	r6, r3
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	407a      	eors	r2, r7
 80019e6:	3301      	adds	r3, #1
 80019e8:	2400      	movs	r4, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2e0a      	cmp	r6, #10
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0x44c>
 80019f6:	e621      	b.n	800163c <__aeabi_dmul+0x90>
 80019f8:	e63d      	b.n	8001676 <__aeabi_dmul+0xca>
 80019fa:	2101      	movs	r1, #1
 80019fc:	1ac9      	subs	r1, r1, r3
 80019fe:	2938      	cmp	r1, #56	; 0x38
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dmul+0x458>
 8001a02:	e642      	b.n	800168a <__aeabi_dmul+0xde>
 8001a04:	291f      	cmp	r1, #31
 8001a06:	dd47      	ble.n	8001a98 <__aeabi_dmul+0x4ec>
 8001a08:	261f      	movs	r6, #31
 8001a0a:	0025      	movs	r5, r4
 8001a0c:	4276      	negs	r6, r6
 8001a0e:	1af3      	subs	r3, r6, r3
 8001a10:	40dd      	lsrs	r5, r3
 8001a12:	002b      	movs	r3, r5
 8001a14:	2920      	cmp	r1, #32
 8001a16:	d005      	beq.n	8001a24 <__aeabi_dmul+0x478>
 8001a18:	4942      	ldr	r1, [pc, #264]	; (8001b24 <__aeabi_dmul+0x578>)
 8001a1a:	9d02      	ldr	r5, [sp, #8]
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	4465      	add	r5, ip
 8001a20:	40ac      	lsls	r4, r5
 8001a22:	4320      	orrs	r0, r4
 8001a24:	1e41      	subs	r1, r0, #1
 8001a26:	4188      	sbcs	r0, r1
 8001a28:	4318      	orrs	r0, r3
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	001d      	movs	r5, r3
 8001a2e:	2400      	movs	r4, #0
 8001a30:	4005      	ands	r5, r0
 8001a32:	4203      	tst	r3, r0
 8001a34:	d04a      	beq.n	8001acc <__aeabi_dmul+0x520>
 8001a36:	230f      	movs	r3, #15
 8001a38:	2400      	movs	r4, #0
 8001a3a:	4003      	ands	r3, r0
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d042      	beq.n	8001ac6 <__aeabi_dmul+0x51a>
 8001a40:	1d03      	adds	r3, r0, #4
 8001a42:	4283      	cmp	r3, r0
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	4240      	negs	r0, r0
 8001a48:	1824      	adds	r4, r4, r0
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d53a      	bpl.n	8001ac6 <__aeabi_dmul+0x51a>
 8001a50:	2301      	movs	r3, #1
 8001a52:	2400      	movs	r4, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	e61b      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001a58:	f000 f9a2 	bl	8001da0 <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	0003      	movs	r3, r0
 8001a60:	3115      	adds	r1, #21
 8001a62:	3320      	adds	r3, #32
 8001a64:	291c      	cmp	r1, #28
 8001a66:	dd8f      	ble.n	8001988 <__aeabi_dmul+0x3dc>
 8001a68:	3808      	subs	r0, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4084      	lsls	r4, r0
 8001a6e:	4692      	mov	sl, r2
 8001a70:	46a3      	mov	fp, r4
 8001a72:	e796      	b.n	80019a2 <__aeabi_dmul+0x3f6>
 8001a74:	f000 f994 	bl	8001da0 <__clzsi2>
 8001a78:	0001      	movs	r1, r0
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	3115      	adds	r1, #21
 8001a7e:	3320      	adds	r3, #32
 8001a80:	291c      	cmp	r1, #28
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dmul+0x4da>
 8001a84:	e758      	b.n	8001938 <__aeabi_dmul+0x38c>
 8001a86:	0002      	movs	r2, r0
 8001a88:	464c      	mov	r4, r9
 8001a8a:	3a08      	subs	r2, #8
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	4094      	lsls	r4, r2
 8001a90:	e75d      	b.n	800194e <__aeabi_dmul+0x3a2>
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	e711      	b.n	80018bc <__aeabi_dmul+0x310>
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <__aeabi_dmul+0x57c>)
 8001a9a:	0026      	movs	r6, r4
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	9d02      	ldr	r5, [sp, #8]
 8001aa2:	40cb      	lsrs	r3, r1
 8001aa4:	4465      	add	r5, ip
 8001aa6:	40ae      	lsls	r6, r5
 8001aa8:	431e      	orrs	r6, r3
 8001aaa:	0003      	movs	r3, r0
 8001aac:	40ab      	lsls	r3, r5
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	4183      	sbcs	r3, r0
 8001ab2:	0030      	movs	r0, r6
 8001ab4:	4318      	orrs	r0, r3
 8001ab6:	40cc      	lsrs	r4, r1
 8001ab8:	0743      	lsls	r3, r0, #29
 8001aba:	d0c7      	beq.n	8001a4c <__aeabi_dmul+0x4a0>
 8001abc:	230f      	movs	r3, #15
 8001abe:	4003      	ands	r3, r0
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d1bd      	bne.n	8001a40 <__aeabi_dmul+0x494>
 8001ac4:	e7c2      	b.n	8001a4c <__aeabi_dmul+0x4a0>
 8001ac6:	0765      	lsls	r5, r4, #29
 8001ac8:	0264      	lsls	r4, r4, #9
 8001aca:	0b24      	lsrs	r4, r4, #12
 8001acc:	08c0      	lsrs	r0, r0, #3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4305      	orrs	r5, r0
 8001ad2:	e5dd      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	2e0f      	cmp	r6, #15
 8001ada:	d10c      	bne.n	8001af6 <__aeabi_dmul+0x54a>
 8001adc:	2480      	movs	r4, #128	; 0x80
 8001ade:	465b      	mov	r3, fp
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	4223      	tst	r3, r4
 8001ae4:	d00e      	beq.n	8001b04 <__aeabi_dmul+0x558>
 8001ae6:	4221      	tst	r1, r4
 8001ae8:	d10c      	bne.n	8001b04 <__aeabi_dmul+0x558>
 8001aea:	430c      	orrs	r4, r1
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	003a      	movs	r2, r7
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <__aeabi_dmul+0x580>)
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	e5cc      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001af6:	2e0b      	cmp	r6, #11
 8001af8:	d000      	beq.n	8001afc <__aeabi_dmul+0x550>
 8001afa:	e5a2      	b.n	8001642 <__aeabi_dmul+0x96>
 8001afc:	468b      	mov	fp, r1
 8001afe:	46aa      	mov	sl, r5
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	e5f7      	b.n	80016f4 <__aeabi_dmul+0x148>
 8001b04:	2480      	movs	r4, #128	; 0x80
 8001b06:	465b      	mov	r3, fp
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	431c      	orrs	r4, r3
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	4642      	mov	r2, r8
 8001b10:	4655      	mov	r5, sl
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <__aeabi_dmul+0x580>)
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	e5bb      	b.n	8001690 <__aeabi_dmul+0xe4>
 8001b18:	464d      	mov	r5, r9
 8001b1a:	0021      	movs	r1, r4
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e7db      	b.n	8001ad8 <__aeabi_dmul+0x52c>
 8001b20:	fffffc0d 	.word	0xfffffc0d
 8001b24:	0000043e 	.word	0x0000043e
 8001b28:	0000041e 	.word	0x0000041e
 8001b2c:	000007ff 	.word	0x000007ff

08001b30 <__aeabi_i2d>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d016      	beq.n	8001b64 <__aeabi_i2d+0x34>
 8001b36:	17c3      	asrs	r3, r0, #31
 8001b38:	18c5      	adds	r5, r0, r3
 8001b3a:	405d      	eors	r5, r3
 8001b3c:	0fc4      	lsrs	r4, r0, #31
 8001b3e:	0028      	movs	r0, r5
 8001b40:	f000 f92e 	bl	8001da0 <__clzsi2>
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <__aeabi_i2d+0x5c>)
 8001b46:	1a1b      	subs	r3, r3, r0
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	dc16      	bgt.n	8001b7a <__aeabi_i2d+0x4a>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	002e      	movs	r6, r5
 8001b50:	3215      	adds	r2, #21
 8001b52:	4096      	lsls	r6, r2
 8001b54:	220b      	movs	r2, #11
 8001b56:	1a12      	subs	r2, r2, r0
 8001b58:	40d5      	lsrs	r5, r2
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	032d      	lsls	r5, r5, #12
 8001b5e:	0b2d      	lsrs	r5, r5, #12
 8001b60:	0d5b      	lsrs	r3, r3, #21
 8001b62:	e003      	b.n	8001b6c <__aeabi_i2d+0x3c>
 8001b64:	2400      	movs	r4, #0
 8001b66:	2300      	movs	r3, #0
 8001b68:	2500      	movs	r5, #0
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	051b      	lsls	r3, r3, #20
 8001b6e:	432b      	orrs	r3, r5
 8001b70:	07e4      	lsls	r4, r4, #31
 8001b72:	4323      	orrs	r3, r4
 8001b74:	0030      	movs	r0, r6
 8001b76:	0019      	movs	r1, r3
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	380b      	subs	r0, #11
 8001b7c:	4085      	lsls	r5, r0
 8001b7e:	055b      	lsls	r3, r3, #21
 8001b80:	032d      	lsls	r5, r5, #12
 8001b82:	2600      	movs	r6, #0
 8001b84:	0b2d      	lsrs	r5, r5, #12
 8001b86:	0d5b      	lsrs	r3, r3, #21
 8001b88:	e7f0      	b.n	8001b6c <__aeabi_i2d+0x3c>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	0000041e 	.word	0x0000041e

08001b90 <__aeabi_f2d>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	0242      	lsls	r2, r0, #9
 8001b94:	0043      	lsls	r3, r0, #1
 8001b96:	0fc4      	lsrs	r4, r0, #31
 8001b98:	20fe      	movs	r0, #254	; 0xfe
 8001b9a:	0e1b      	lsrs	r3, r3, #24
 8001b9c:	1c59      	adds	r1, r3, #1
 8001b9e:	0a55      	lsrs	r5, r2, #9
 8001ba0:	4208      	tst	r0, r1
 8001ba2:	d00c      	beq.n	8001bbe <__aeabi_f2d+0x2e>
 8001ba4:	21e0      	movs	r1, #224	; 0xe0
 8001ba6:	0089      	lsls	r1, r1, #2
 8001ba8:	468c      	mov	ip, r1
 8001baa:	076d      	lsls	r5, r5, #29
 8001bac:	0b12      	lsrs	r2, r2, #12
 8001bae:	4463      	add	r3, ip
 8001bb0:	051b      	lsls	r3, r3, #20
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	07e4      	lsls	r4, r4, #31
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	0028      	movs	r0, r5
 8001bba:	0019      	movs	r1, r3
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <__aeabi_f2d+0x5c>
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	d01b      	beq.n	8001bfe <__aeabi_f2d+0x6e>
 8001bc6:	0028      	movs	r0, r5
 8001bc8:	f000 f8ea 	bl	8001da0 <__clzsi2>
 8001bcc:	280a      	cmp	r0, #10
 8001bce:	dc1c      	bgt.n	8001c0a <__aeabi_f2d+0x7a>
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	002a      	movs	r2, r5
 8001bd4:	1a1b      	subs	r3, r3, r0
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	0003      	movs	r3, r0
 8001bda:	3315      	adds	r3, #21
 8001bdc:	409d      	lsls	r5, r3
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <__aeabi_f2d+0x88>)
 8001be0:	0312      	lsls	r2, r2, #12
 8001be2:	1a1b      	subs	r3, r3, r0
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	0b12      	lsrs	r2, r2, #12
 8001be8:	0d5b      	lsrs	r3, r3, #21
 8001bea:	e7e1      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	d009      	beq.n	8001c04 <__aeabi_f2d+0x74>
 8001bf0:	0b13      	lsrs	r3, r2, #12
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0312      	lsls	r2, r2, #12
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	076d      	lsls	r5, r5, #29
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <__aeabi_f2d+0x8c>)
 8001bfc:	e7d8      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2200      	movs	r2, #0
 8001c02:	e7d5      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <__aeabi_f2d+0x8c>)
 8001c08:	e7d2      	b.n	8001bb0 <__aeabi_f2d+0x20>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	3b0b      	subs	r3, #11
 8001c10:	409a      	lsls	r2, r3
 8001c12:	2500      	movs	r5, #0
 8001c14:	e7e3      	b.n	8001bde <__aeabi_f2d+0x4e>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	00000389 	.word	0x00000389
 8001c1c:	000007ff 	.word	0x000007ff

08001c20 <__aeabi_d2f>:
 8001c20:	0002      	movs	r2, r0
 8001c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c24:	004b      	lsls	r3, r1, #1
 8001c26:	030d      	lsls	r5, r1, #12
 8001c28:	0f40      	lsrs	r0, r0, #29
 8001c2a:	0d5b      	lsrs	r3, r3, #21
 8001c2c:	0fcc      	lsrs	r4, r1, #31
 8001c2e:	0a6d      	lsrs	r5, r5, #9
 8001c30:	493a      	ldr	r1, [pc, #232]	; (8001d1c <__aeabi_d2f+0xfc>)
 8001c32:	4305      	orrs	r5, r0
 8001c34:	1c58      	adds	r0, r3, #1
 8001c36:	00d7      	lsls	r7, r2, #3
 8001c38:	4208      	tst	r0, r1
 8001c3a:	d00a      	beq.n	8001c52 <__aeabi_d2f+0x32>
 8001c3c:	4938      	ldr	r1, [pc, #224]	; (8001d20 <__aeabi_d2f+0x100>)
 8001c3e:	1859      	adds	r1, r3, r1
 8001c40:	29fe      	cmp	r1, #254	; 0xfe
 8001c42:	dd16      	ble.n	8001c72 <__aeabi_d2f+0x52>
 8001c44:	20ff      	movs	r0, #255	; 0xff
 8001c46:	2200      	movs	r2, #0
 8001c48:	05c0      	lsls	r0, r0, #23
 8001c4a:	4310      	orrs	r0, r2
 8001c4c:	07e4      	lsls	r4, r4, #31
 8001c4e:	4320      	orrs	r0, r4
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <__aeabi_d2f+0x44>
 8001c56:	433d      	orrs	r5, r7
 8001c58:	d026      	beq.n	8001ca8 <__aeabi_d2f+0x88>
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	0192      	lsls	r2, r2, #6
 8001c5e:	0a52      	lsrs	r2, r2, #9
 8001c60:	b2d8      	uxtb	r0, r3
 8001c62:	e7f1      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001c64:	432f      	orrs	r7, r5
 8001c66:	d0ed      	beq.n	8001c44 <__aeabi_d2f+0x24>
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	03d2      	lsls	r2, r2, #15
 8001c6c:	20ff      	movs	r0, #255	; 0xff
 8001c6e:	432a      	orrs	r2, r5
 8001c70:	e7ea      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001c72:	2900      	cmp	r1, #0
 8001c74:	dd1b      	ble.n	8001cae <__aeabi_d2f+0x8e>
 8001c76:	0192      	lsls	r2, r2, #6
 8001c78:	1e50      	subs	r0, r2, #1
 8001c7a:	4182      	sbcs	r2, r0
 8001c7c:	00ed      	lsls	r5, r5, #3
 8001c7e:	0f7f      	lsrs	r7, r7, #29
 8001c80:	432a      	orrs	r2, r5
 8001c82:	433a      	orrs	r2, r7
 8001c84:	0753      	lsls	r3, r2, #29
 8001c86:	d047      	beq.n	8001d18 <__aeabi_d2f+0xf8>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_d2f+0x72>
 8001c90:	3204      	adds	r2, #4
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	04db      	lsls	r3, r3, #19
 8001c96:	4013      	ands	r3, r2
 8001c98:	d03e      	beq.n	8001d18 <__aeabi_d2f+0xf8>
 8001c9a:	1c48      	adds	r0, r1, #1
 8001c9c:	29fe      	cmp	r1, #254	; 0xfe
 8001c9e:	d0d1      	beq.n	8001c44 <__aeabi_d2f+0x24>
 8001ca0:	0192      	lsls	r2, r2, #6
 8001ca2:	0a52      	lsrs	r2, r2, #9
 8001ca4:	b2c0      	uxtb	r0, r0
 8001ca6:	e7cf      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	2200      	movs	r2, #0
 8001cac:	e7cc      	b.n	8001c48 <__aeabi_d2f+0x28>
 8001cae:	000a      	movs	r2, r1
 8001cb0:	3217      	adds	r2, #23
 8001cb2:	db2f      	blt.n	8001d14 <__aeabi_d2f+0xf4>
 8001cb4:	2680      	movs	r6, #128	; 0x80
 8001cb6:	0436      	lsls	r6, r6, #16
 8001cb8:	432e      	orrs	r6, r5
 8001cba:	251e      	movs	r5, #30
 8001cbc:	1a6d      	subs	r5, r5, r1
 8001cbe:	2d1f      	cmp	r5, #31
 8001cc0:	dd11      	ble.n	8001ce6 <__aeabi_d2f+0xc6>
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	1a52      	subs	r2, r2, r1
 8001cc8:	0031      	movs	r1, r6
 8001cca:	40d1      	lsrs	r1, r2
 8001ccc:	2d20      	cmp	r5, #32
 8001cce:	d004      	beq.n	8001cda <__aeabi_d2f+0xba>
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <__aeabi_d2f+0x104>)
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	4463      	add	r3, ip
 8001cd6:	409e      	lsls	r6, r3
 8001cd8:	4337      	orrs	r7, r6
 8001cda:	003a      	movs	r2, r7
 8001cdc:	1e53      	subs	r3, r2, #1
 8001cde:	419a      	sbcs	r2, r3
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	e7ce      	b.n	8001c84 <__aeabi_d2f+0x64>
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <__aeabi_d2f+0x108>)
 8001ce8:	0038      	movs	r0, r7
 8001cea:	4694      	mov	ip, r2
 8001cec:	4463      	add	r3, ip
 8001cee:	4098      	lsls	r0, r3
 8001cf0:	003a      	movs	r2, r7
 8001cf2:	1e41      	subs	r1, r0, #1
 8001cf4:	4188      	sbcs	r0, r1
 8001cf6:	409e      	lsls	r6, r3
 8001cf8:	40ea      	lsrs	r2, r5
 8001cfa:	4330      	orrs	r0, r6
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	0753      	lsls	r3, r2, #29
 8001d02:	d1c1      	bne.n	8001c88 <__aeabi_d2f+0x68>
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	0013      	movs	r3, r2
 8001d08:	04c9      	lsls	r1, r1, #19
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	420a      	tst	r2, r1
 8001d10:	d1c6      	bne.n	8001ca0 <__aeabi_d2f+0x80>
 8001d12:	e7a3      	b.n	8001c5c <__aeabi_d2f+0x3c>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e7a0      	b.n	8001c5a <__aeabi_d2f+0x3a>
 8001d18:	000b      	movs	r3, r1
 8001d1a:	e79f      	b.n	8001c5c <__aeabi_d2f+0x3c>
 8001d1c:	000007fe 	.word	0x000007fe
 8001d20:	fffffc80 	.word	0xfffffc80
 8001d24:	fffffca2 	.word	0xfffffca2
 8001d28:	fffffc82 	.word	0xfffffc82

08001d2c <__aeabi_cfrcmple>:
 8001d2c:	4684      	mov	ip, r0
 8001d2e:	0008      	movs	r0, r1
 8001d30:	4661      	mov	r1, ip
 8001d32:	e7ff      	b.n	8001d34 <__aeabi_cfcmpeq>

08001d34 <__aeabi_cfcmpeq>:
 8001d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d36:	f000 f8bd 	bl	8001eb4 <__lesf2>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d401      	bmi.n	8001d42 <__aeabi_cfcmpeq+0xe>
 8001d3e:	2100      	movs	r1, #0
 8001d40:	42c8      	cmn	r0, r1
 8001d42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d44 <__aeabi_fcmpeq>:
 8001d44:	b510      	push	{r4, lr}
 8001d46:	f000 f849 	bl	8001ddc <__eqsf2>
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <__aeabi_fcmplt>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f8af 	bl	8001eb4 <__lesf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	db01      	blt.n	8001d5e <__aeabi_fcmplt+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__aeabi_fcmple>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f000 f8a5 	bl	8001eb4 <__lesf2>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	dd01      	ble.n	8001d72 <__aeabi_fcmple+0xe>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	2001      	movs	r0, #1
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)

08001d78 <__aeabi_fcmpgt>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	f000 f855 	bl	8001e28 <__gesf2>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	dc01      	bgt.n	8001d86 <__aeabi_fcmpgt+0xe>
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	2001      	movs	r0, #1
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)

08001d8c <__aeabi_fcmpge>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	f000 f84b 	bl	8001e28 <__gesf2>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	da01      	bge.n	8001d9a <__aeabi_fcmpge+0xe>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)

08001da0 <__clzsi2>:
 8001da0:	211c      	movs	r1, #28
 8001da2:	2301      	movs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d301      	bcc.n	8001dae <__clzsi2+0xe>
 8001daa:	0c00      	lsrs	r0, r0, #16
 8001dac:	3910      	subs	r1, #16
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	4298      	cmp	r0, r3
 8001db2:	d301      	bcc.n	8001db8 <__clzsi2+0x18>
 8001db4:	0a00      	lsrs	r0, r0, #8
 8001db6:	3908      	subs	r1, #8
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d301      	bcc.n	8001dc2 <__clzsi2+0x22>
 8001dbe:	0900      	lsrs	r0, r0, #4
 8001dc0:	3904      	subs	r1, #4
 8001dc2:	a202      	add	r2, pc, #8	; (adr r2, 8001dcc <__clzsi2+0x2c>)
 8001dc4:	5c10      	ldrb	r0, [r2, r0]
 8001dc6:	1840      	adds	r0, r0, r1
 8001dc8:	4770      	bx	lr
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	02020304 	.word	0x02020304
 8001dd0:	01010101 	.word	0x01010101
	...

08001ddc <__eqsf2>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	0042      	lsls	r2, r0, #1
 8001de0:	0245      	lsls	r5, r0, #9
 8001de2:	024e      	lsls	r6, r1, #9
 8001de4:	004c      	lsls	r4, r1, #1
 8001de6:	0fc3      	lsrs	r3, r0, #31
 8001de8:	0a6d      	lsrs	r5, r5, #9
 8001dea:	2001      	movs	r0, #1
 8001dec:	0e12      	lsrs	r2, r2, #24
 8001dee:	0a76      	lsrs	r6, r6, #9
 8001df0:	0e24      	lsrs	r4, r4, #24
 8001df2:	0fc9      	lsrs	r1, r1, #31
 8001df4:	2aff      	cmp	r2, #255	; 0xff
 8001df6:	d006      	beq.n	8001e06 <__eqsf2+0x2a>
 8001df8:	2cff      	cmp	r4, #255	; 0xff
 8001dfa:	d003      	beq.n	8001e04 <__eqsf2+0x28>
 8001dfc:	42a2      	cmp	r2, r4
 8001dfe:	d101      	bne.n	8001e04 <__eqsf2+0x28>
 8001e00:	42b5      	cmp	r5, r6
 8001e02:	d006      	beq.n	8001e12 <__eqsf2+0x36>
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	2d00      	cmp	r5, #0
 8001e08:	d1fc      	bne.n	8001e04 <__eqsf2+0x28>
 8001e0a:	2cff      	cmp	r4, #255	; 0xff
 8001e0c:	d1fa      	bne.n	8001e04 <__eqsf2+0x28>
 8001e0e:	2e00      	cmp	r6, #0
 8001e10:	d1f8      	bne.n	8001e04 <__eqsf2+0x28>
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d006      	beq.n	8001e24 <__eqsf2+0x48>
 8001e16:	2001      	movs	r0, #1
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d1f3      	bne.n	8001e04 <__eqsf2+0x28>
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	1e43      	subs	r3, r0, #1
 8001e20:	4198      	sbcs	r0, r3
 8001e22:	e7ef      	b.n	8001e04 <__eqsf2+0x28>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7ed      	b.n	8001e04 <__eqsf2+0x28>

08001e28 <__gesf2>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	0042      	lsls	r2, r0, #1
 8001e2c:	0245      	lsls	r5, r0, #9
 8001e2e:	024e      	lsls	r6, r1, #9
 8001e30:	004c      	lsls	r4, r1, #1
 8001e32:	0fc3      	lsrs	r3, r0, #31
 8001e34:	0a6d      	lsrs	r5, r5, #9
 8001e36:	0e12      	lsrs	r2, r2, #24
 8001e38:	0a76      	lsrs	r6, r6, #9
 8001e3a:	0e24      	lsrs	r4, r4, #24
 8001e3c:	0fc8      	lsrs	r0, r1, #31
 8001e3e:	2aff      	cmp	r2, #255	; 0xff
 8001e40:	d01b      	beq.n	8001e7a <__gesf2+0x52>
 8001e42:	2cff      	cmp	r4, #255	; 0xff
 8001e44:	d00e      	beq.n	8001e64 <__gesf2+0x3c>
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d11b      	bne.n	8001e82 <__gesf2+0x5a>
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d101      	bne.n	8001e52 <__gesf2+0x2a>
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d01c      	beq.n	8001e8c <__gesf2+0x64>
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	d00c      	beq.n	8001e70 <__gesf2+0x48>
 8001e56:	4283      	cmp	r3, r0
 8001e58:	d01c      	beq.n	8001e94 <__gesf2+0x6c>
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	1e58      	subs	r0, r3, #1
 8001e5e:	4008      	ands	r0, r1
 8001e60:	3801      	subs	r0, #1
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	2e00      	cmp	r6, #0
 8001e66:	d122      	bne.n	8001eae <__gesf2+0x86>
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d1f4      	bne.n	8001e56 <__gesf2+0x2e>
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d1f2      	bne.n	8001e56 <__gesf2+0x2e>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1f6      	bne.n	8001e62 <__gesf2+0x3a>
 8001e74:	2001      	movs	r0, #1
 8001e76:	4240      	negs	r0, r0
 8001e78:	e7f3      	b.n	8001e62 <__gesf2+0x3a>
 8001e7a:	2d00      	cmp	r5, #0
 8001e7c:	d117      	bne.n	8001eae <__gesf2+0x86>
 8001e7e:	2cff      	cmp	r4, #255	; 0xff
 8001e80:	d0f0      	beq.n	8001e64 <__gesf2+0x3c>
 8001e82:	2c00      	cmp	r4, #0
 8001e84:	d1e7      	bne.n	8001e56 <__gesf2+0x2e>
 8001e86:	2e00      	cmp	r6, #0
 8001e88:	d1e5      	bne.n	8001e56 <__gesf2+0x2e>
 8001e8a:	e7e6      	b.n	8001e5a <__gesf2+0x32>
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	d0e7      	beq.n	8001e62 <__gesf2+0x3a>
 8001e92:	e7e2      	b.n	8001e5a <__gesf2+0x32>
 8001e94:	42a2      	cmp	r2, r4
 8001e96:	dc05      	bgt.n	8001ea4 <__gesf2+0x7c>
 8001e98:	dbea      	blt.n	8001e70 <__gesf2+0x48>
 8001e9a:	42b5      	cmp	r5, r6
 8001e9c:	d802      	bhi.n	8001ea4 <__gesf2+0x7c>
 8001e9e:	d3e7      	bcc.n	8001e70 <__gesf2+0x48>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	e7de      	b.n	8001e62 <__gesf2+0x3a>
 8001ea4:	4243      	negs	r3, r0
 8001ea6:	4158      	adcs	r0, r3
 8001ea8:	0040      	lsls	r0, r0, #1
 8001eaa:	3801      	subs	r0, #1
 8001eac:	e7d9      	b.n	8001e62 <__gesf2+0x3a>
 8001eae:	2002      	movs	r0, #2
 8001eb0:	4240      	negs	r0, r0
 8001eb2:	e7d6      	b.n	8001e62 <__gesf2+0x3a>

08001eb4 <__lesf2>:
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	0042      	lsls	r2, r0, #1
 8001eb8:	0245      	lsls	r5, r0, #9
 8001eba:	024e      	lsls	r6, r1, #9
 8001ebc:	004c      	lsls	r4, r1, #1
 8001ebe:	0fc3      	lsrs	r3, r0, #31
 8001ec0:	0a6d      	lsrs	r5, r5, #9
 8001ec2:	0e12      	lsrs	r2, r2, #24
 8001ec4:	0a76      	lsrs	r6, r6, #9
 8001ec6:	0e24      	lsrs	r4, r4, #24
 8001ec8:	0fc8      	lsrs	r0, r1, #31
 8001eca:	2aff      	cmp	r2, #255	; 0xff
 8001ecc:	d00b      	beq.n	8001ee6 <__lesf2+0x32>
 8001ece:	2cff      	cmp	r4, #255	; 0xff
 8001ed0:	d00d      	beq.n	8001eee <__lesf2+0x3a>
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d11f      	bne.n	8001f16 <__lesf2+0x62>
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d116      	bne.n	8001f08 <__lesf2+0x54>
 8001eda:	2e00      	cmp	r6, #0
 8001edc:	d114      	bne.n	8001f08 <__lesf2+0x54>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	2d00      	cmp	r5, #0
 8001ee2:	d010      	beq.n	8001f06 <__lesf2+0x52>
 8001ee4:	e009      	b.n	8001efa <__lesf2+0x46>
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d10c      	bne.n	8001f04 <__lesf2+0x50>
 8001eea:	2cff      	cmp	r4, #255	; 0xff
 8001eec:	d113      	bne.n	8001f16 <__lesf2+0x62>
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d108      	bne.n	8001f04 <__lesf2+0x50>
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d008      	beq.n	8001f08 <__lesf2+0x54>
 8001ef6:	4283      	cmp	r3, r0
 8001ef8:	d012      	beq.n	8001f20 <__lesf2+0x6c>
 8001efa:	2102      	movs	r1, #2
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	4008      	ands	r0, r1
 8001f00:	3801      	subs	r0, #1
 8001f02:	e000      	b.n	8001f06 <__lesf2+0x52>
 8001f04:	2002      	movs	r0, #2
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d1f4      	bne.n	8001ef6 <__lesf2+0x42>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d1fa      	bne.n	8001f06 <__lesf2+0x52>
 8001f10:	2001      	movs	r0, #1
 8001f12:	4240      	negs	r0, r0
 8001f14:	e7f7      	b.n	8001f06 <__lesf2+0x52>
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d1ed      	bne.n	8001ef6 <__lesf2+0x42>
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d1eb      	bne.n	8001ef6 <__lesf2+0x42>
 8001f1e:	e7ec      	b.n	8001efa <__lesf2+0x46>
 8001f20:	42a2      	cmp	r2, r4
 8001f22:	dc05      	bgt.n	8001f30 <__lesf2+0x7c>
 8001f24:	dbf2      	blt.n	8001f0c <__lesf2+0x58>
 8001f26:	42b5      	cmp	r5, r6
 8001f28:	d802      	bhi.n	8001f30 <__lesf2+0x7c>
 8001f2a:	d3ef      	bcc.n	8001f0c <__lesf2+0x58>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7ea      	b.n	8001f06 <__lesf2+0x52>
 8001f30:	4243      	negs	r3, r0
 8001f32:	4158      	adcs	r0, r3
 8001f34:	0040      	lsls	r0, r0, #1
 8001f36:	3801      	subs	r0, #1
 8001f38:	e7e5      	b.n	8001f06 <__lesf2+0x52>
 8001f3a:	46c0      	nop			; (mov r8, r8)

08001f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	2414      	movs	r4, #20
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	0018      	movs	r0, r3
 8001f48:	2314      	movs	r3, #20
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f003 fb51 	bl	80055f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0309      	lsls	r1, r1, #12
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	031b      	lsls	r3, r3, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	03c9      	lsls	r1, r1, #15
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	03db      	lsls	r3, r3, #15
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0289      	lsls	r1, r1, #10
 8001f94:	430a      	orrs	r2, r1
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	02c9      	lsls	r1, r1, #11
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <MX_GPIO_Init+0x11c>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	02db      	lsls	r3, r3, #11
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fc2:	2390      	movs	r3, #144	; 0x90
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2120      	movs	r1, #32
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fe6a 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4821      	ldr	r0, [pc, #132]	; (800205c <MX_GPIO_Init+0x120>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	0019      	movs	r1, r3
 8001fda:	f000 fe63 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0192      	lsls	r2, r2, #6
 8001fe4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	2284      	movs	r2, #132	; 0x84
 8001fea:	0392      	lsls	r2, r2, #14
 8001fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <MX_GPIO_Init+0x124>)
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	f000 fcda 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002000:	193b      	adds	r3, r7, r4
 8002002:	2220      	movs	r2, #32
 8002004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	193b      	adds	r3, r7, r4
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002018:	193a      	adds	r2, r7, r4
 800201a:	2390      	movs	r3, #144	; 0x90
 800201c:	05db      	lsls	r3, r3, #23
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fcc7 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002026:	0021      	movs	r1, r4
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2201      	movs	r2, #1
 8002034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	187b      	adds	r3, r7, r1
 8002044:	4a05      	ldr	r2, [pc, #20]	; (800205c <MX_GPIO_Init+0x120>)
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f000 fcb3 	bl	80029b4 <HAL_GPIO_Init>

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b00b      	add	sp, #44	; 0x2c
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40021000 	.word	0x40021000
 800205c:	48000400 	.word	0x48000400
 8002060:	48000800 	.word	0x48000800

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206a:	f000 fb8b 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206e:	f000 f887 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002072:	f7ff ff63 	bl	8001f3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002076:	f000 fadf 	bl	8002638 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800207a:	f000 f8d9 	bl	8002230 <MX_SPI1_Init>
  MX_TIM1_Init();
 800207e:	f000 f9c7 	bl	8002410 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <main+0x100>)
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f002 f8d0 	bl	800422c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Bring cs to high on default
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <main+0x104>)
 800208e:	2201      	movs	r2, #1
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fe06 	bl	8002ca4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set chip select pin low
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <main+0x104>)
 800209a:	2200      	movs	r2, #0
 800209c:	2140      	movs	r1, #64	; 0x40
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fe00 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, sizeof(TxBuffer), 500);
 80020a4:	1d3a      	adds	r2, r7, #4
 80020a6:	4931      	ldr	r1, [pc, #196]	; (800216c <main+0x108>)
 80020a8:	4831      	ldr	r0, [pc, #196]	; (8002170 <main+0x10c>)
 80020aa:	23fa      	movs	r3, #250	; 0xfa
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2303      	movs	r3, #3
 80020b2:	f001 fccb 	bl	8003a4c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // bring chip select back to high
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <main+0x104>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fdf1 	bl	8002ca4 <HAL_GPIO_WritePin>

	// Extract 10-bit ADC value from the received SPI buffer
	ADCValue = ((RxBuffer[1] & 0b00000011) << 8) | RxBuffer[2];
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	789b      	ldrb	r3, [r3, #2]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21a      	sxth	r2, r3
 80020dc:	2116      	movs	r1, #22
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	801a      	strh	r2, [r3, #0]

	// Normalize the ADC value to a range of 0 to 1
	newADCValue = ADCValue / 1023.0;
 80020e2:	187b      	adds	r3, r7, r1
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fd22 	bl	8001b30 <__aeabi_i2d>
 80020ec:	2200      	movs	r2, #0
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <main+0x110>)
 80020f0:	f7fe ff6e 	bl	8000fd0 <__aeabi_ddiv>
 80020f4:	0002      	movs	r2, r0
 80020f6:	000b      	movs	r3, r1
 80020f8:	0010      	movs	r0, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	f7ff fd90 	bl	8001c20 <__aeabi_d2f>
 8002100:	1c03      	adds	r3, r0, #0
 8002102:	613b      	str	r3, [r7, #16]

	// Calculate the duty cycle in the range of 0.05 to 0.1
	dutyCycle = 0.05 + newADCValue * 0.05;
 8002104:	6938      	ldr	r0, [r7, #16]
 8002106:	f7ff fd43 	bl	8001b90 <__aeabi_f2d>
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <main+0x114>)
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <main+0x118>)
 800210e:	f7ff fa4d 	bl	80015ac <__aeabi_dmul>
 8002112:	0002      	movs	r2, r0
 8002114:	000b      	movs	r3, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <main+0x114>)
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <main+0x118>)
 800211e:	f7fe fbf7 	bl	8000910 <__aeabi_dadd>
 8002122:	0002      	movs	r2, r0
 8002124:	000b      	movs	r3, r1
 8002126:	0010      	movs	r0, r2
 8002128:	0019      	movs	r1, r3
 800212a:	f7ff fd79 	bl	8001c20 <__aeabi_d2f>
 800212e:	1c03      	adds	r3, r0, #0
 8002130:	60fb      	str	r3, [r7, #12]

	// Calculate the compare value for the timer
	pwmValue = dutyCycle * PERIOD;
 8002132:	23fa      	movs	r3, #250	; 0xfa
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe fb98 	bl	800086c <__aeabi_i2f>
 800213c:	1c03      	adds	r3, r0, #0
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	1c18      	adds	r0, r3, #0
 8002142:	f7fe f885 	bl	8000250 <__aeabi_fmul>
 8002146:	1c03      	adds	r3, r0, #0
 8002148:	250a      	movs	r5, #10
 800214a:	197c      	adds	r4, r7, r5
 800214c:	1c18      	adds	r0, r3, #0
 800214e:	f7fe f867 	bl	8000220 <__aeabi_f2uiz>
 8002152:	0003      	movs	r3, r0
 8002154:	8023      	strh	r3, [r4, #0]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmValue);
 8002156:	4b03      	ldr	r3, [pc, #12]	; (8002164 <main+0x100>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	197a      	adds	r2, r7, r5
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set chip select pin low
 8002160:	e79a      	b.n	8002098 <main+0x34>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	2000008c 	.word	0x2000008c
 8002168:	48000400 	.word	0x48000400
 800216c:	080056c4 	.word	0x080056c4
 8002170:	20000028 	.word	0x20000028
 8002174:	408ff800 	.word	0x408ff800
 8002178:	9999999a 	.word	0x9999999a
 800217c:	3fa99999 	.word	0x3fa99999

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b099      	sub	sp, #100	; 0x64
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	242c      	movs	r4, #44	; 0x2c
 8002188:	193b      	adds	r3, r7, r4
 800218a:	0018      	movs	r0, r3
 800218c:	2334      	movs	r3, #52	; 0x34
 800218e:	001a      	movs	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	f003 fa2f 	bl	80055f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002196:	231c      	movs	r3, #28
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	0018      	movs	r0, r3
 800219c:	2310      	movs	r3, #16
 800219e:	001a      	movs	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	f003 fa27 	bl	80055f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a6:	003b      	movs	r3, r7
 80021a8:	0018      	movs	r0, r3
 80021aa:	231c      	movs	r3, #28
 80021ac:	001a      	movs	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	f003 fa20 	bl	80055f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2220      	movs	r2, #32
 80021b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	2201      	movs	r2, #1
 80021be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021c0:	193b      	adds	r3, r7, r4
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fd89 	bl	8002ce0 <HAL_RCC_OscConfig>
 80021ce:	1e03      	subs	r3, r0, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80021d2:	f000 f828 	bl	8002226 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d6:	211c      	movs	r1, #28
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	2207      	movs	r2, #7
 80021dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2203      	movs	r2, #3
 80021e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2101      	movs	r1, #1
 80021f4:	0018      	movs	r0, r3
 80021f6:	f001 f8f9 	bl	80033ec <HAL_RCC_ClockConfig>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021fe:	f000 f812 	bl	8002226 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002202:	003b      	movs	r3, r7
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002208:	003b      	movs	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220e:	003b      	movs	r3, r7
 8002210:	0018      	movs	r0, r3
 8002212:	f001 fa65 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800221a:	f000 f804 	bl	8002226 <Error_Handler>
  }
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b019      	add	sp, #100	; 0x64
 8002224:	bd90      	pop	{r4, r7, pc}

08002226 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222a:	b672      	cpsid	i
}
 800222c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222e:	e7fe      	b.n	800222e <Error_Handler+0x8>

08002230 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <MX_SPI1_Init+0x78>)
 8002238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_SPI1_Init+0x74>)
 800223c:	2282      	movs	r2, #130	; 0x82
 800223e:	0052      	lsls	r2, r2, #1
 8002240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_SPI1_Init+0x74>)
 800224a:	22e0      	movs	r2, #224	; 0xe0
 800224c:	00d2      	lsls	r2, r2, #3
 800224e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_SPI1_Init+0x74>)
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002266:	2218      	movs	r2, #24
 8002268:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_SPI1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_SPI1_Init+0x74>)
 800227e:	2207      	movs	r2, #7
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_SPI1_Init+0x74>)
 800228a:	2208      	movs	r2, #8
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <MX_SPI1_Init+0x74>)
 8002290:	0018      	movs	r0, r3
 8002292:	f001 fb23 	bl	80038dc <HAL_SPI_Init>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800229a:	f7ff ffc4 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000028 	.word	0x20000028
 80022a8:	40013000 	.word	0x40013000

080022ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b08b      	sub	sp, #44	; 0x2c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	2414      	movs	r4, #20
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	0018      	movs	r0, r3
 80022ba:	2314      	movs	r3, #20
 80022bc:	001a      	movs	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f003 f998 	bl	80055f4 <memset>
  if(spiHandle->Instance==SPI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_SPI_MspInit+0xd8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d155      	bne.n	800237a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0149      	lsls	r1, r1, #5
 80022d8:	430a      	orrs	r2, r1
 80022da:	619a      	str	r2, [r3, #24]
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0289      	lsls	r1, r1, #10
 80022f4:	430a      	orrs	r2, r1
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	02c9      	lsls	r1, r1, #11
 8002310:	430a      	orrs	r2, r1
 8002312:	615a      	str	r2, [r3, #20]
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_SPI_MspInit+0xdc>)
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	02db      	lsls	r3, r3, #11
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002322:	193b      	adds	r3, r7, r4
 8002324:	22c0      	movs	r2, #192	; 0xc0
 8002326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	193b      	adds	r3, r7, r4
 800232a:	2202      	movs	r2, #2
 800232c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	193b      	adds	r3, r7, r4
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002334:	193b      	adds	r3, r7, r4
 8002336:	2203      	movs	r2, #3
 8002338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800233a:	193b      	adds	r3, r7, r4
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	193a      	adds	r2, r7, r4
 8002342:	2390      	movs	r3, #144	; 0x90
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f000 fb33 	bl	80029b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800234e:	0021      	movs	r1, r4
 8002350:	187b      	adds	r3, r7, r1
 8002352:	2208      	movs	r2, #8
 8002354:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	187b      	adds	r3, r7, r1
 8002358:	2202      	movs	r2, #2
 800235a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2203      	movs	r2, #3
 8002366:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	187b      	adds	r3, r7, r1
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_SPI_MspInit+0xe0>)
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f000 fb1d 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b00b      	add	sp, #44	; 0x2c
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	40013000 	.word	0x40013000
 8002388:	40021000 	.word	0x40021000
 800238c:	48000400 	.word	0x48000400

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_MspInit+0x44>)
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_MspInit+0x44>)
 800239c:	2101      	movs	r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_MspInit+0x44>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_MspInit+0x44>)
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_MspInit+0x44>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0549      	lsls	r1, r1, #21
 80023b8:	430a      	orrs	r2, r1
 80023ba:	61da      	str	r2, [r3, #28]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_MspInit+0x44>)
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	055b      	lsls	r3, r3, #21
 80023c4:	4013      	ands	r3, r2
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40021000 	.word	0x40021000

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <NMI_Handler+0x4>

080023de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 fa0a 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b096      	sub	sp, #88	; 0x58
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	2348      	movs	r3, #72	; 0x48
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	0018      	movs	r0, r3
 800241c:	2310      	movs	r3, #16
 800241e:	001a      	movs	r2, r3
 8002420:	2100      	movs	r1, #0
 8002422:	f003 f8e7 	bl	80055f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	0018      	movs	r0, r3
 800242c:	2308      	movs	r3, #8
 800242e:	001a      	movs	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	f003 f8df 	bl	80055f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	2324      	movs	r3, #36	; 0x24
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	0018      	movs	r0, r3
 800243c:	231c      	movs	r3, #28
 800243e:	001a      	movs	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f003 f8d7 	bl	80055f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	0018      	movs	r0, r3
 800244a:	2320      	movs	r3, #32
 800244c:	001a      	movs	r2, r3
 800244e:	2100      	movs	r1, #0
 8002450:	f003 f8d0 	bl	80055f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <MX_TIM1_Init+0x160>)
 8002456:	4a47      	ldr	r2, [pc, #284]	; (8002574 <MX_TIM1_Init+0x164>)
 8002458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 800245a:	4b45      	ldr	r3, [pc, #276]	; (8002570 <MX_TIM1_Init+0x160>)
 800245c:	220e      	movs	r2, #14
 800245e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <MX_TIM1_Init+0x160>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <MX_TIM1_Init+0x160>)
 8002468:	22fa      	movs	r2, #250	; 0xfa
 800246a:	0212      	lsls	r2, r2, #8
 800246c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <MX_TIM1_Init+0x160>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <MX_TIM1_Init+0x160>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <MX_TIM1_Init+0x160>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <MX_TIM1_Init+0x160>)
 8002482:	0018      	movs	r0, r3
 8002484:	f001 fe2a 	bl	80040dc <HAL_TIM_Base_Init>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800248c:	f7ff fecb 	bl	8002226 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002490:	2148      	movs	r1, #72	; 0x48
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	0152      	lsls	r2, r2, #5
 8002498:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800249a:	187a      	adds	r2, r7, r1
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <MX_TIM1_Init+0x160>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 f841 	bl	8004528 <HAL_TIM_ConfigClockSource>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80024aa:	f7ff febc 	bl	8002226 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <MX_TIM1_Init+0x160>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 fe63 	bl	800417c <HAL_TIM_PWM_Init>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80024ba:	f7ff feb4 	bl	8002226 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024cc:	187a      	adds	r2, r7, r1
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <MX_TIM1_Init+0x160>)
 80024d0:	0011      	movs	r1, r2
 80024d2:	0018      	movs	r0, r3
 80024d4:	f002 fc36 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80024dc:	f7ff fea3 	bl	8002226 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e0:	2124      	movs	r1, #36	; 0x24
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2260      	movs	r2, #96	; 0x60
 80024e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250c:	1879      	adds	r1, r7, r1
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_TIM1_Init+0x160>)
 8002510:	2200      	movs	r2, #0
 8002512:	0018      	movs	r0, r3
 8002514:	f001 ff42 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800251c:	f7ff fe83 	bl	8002226 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800254c:	1d3a      	adds	r2, r7, #4
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_TIM1_Init+0x160>)
 8002550:	0011      	movs	r1, r2
 8002552:	0018      	movs	r0, r3
 8002554:	f002 fc54 	bl	8004e00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800255c:	f7ff fe63 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <MX_TIM1_Init+0x160>)
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f828 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b016      	add	sp, #88	; 0x58
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000008c 	.word	0x2000008c
 8002574:	40012c00 	.word	0x40012c00

08002578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x38>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0109      	lsls	r1, r1, #4
 8002594:	430a      	orrs	r2, r1
 8002596:	619a      	str	r2, [r3, #24]
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	240c      	movs	r4, #12
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	0018      	movs	r0, r3
 80025c6:	2314      	movs	r3, #20
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f003 f812 	bl	80055f4 <memset>
  if(timHandle->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_TIM_MspPostInit+0x78>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d125      	bne.n	8002626 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_TIM_MspPostInit+0x7c>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_TIM_MspPostInit+0x7c>)
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	0289      	lsls	r1, r1, #10
 80025e4:	430a      	orrs	r2, r1
 80025e6:	615a      	str	r2, [r3, #20]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_TIM_MspPostInit+0x7c>)
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	0021      	movs	r1, r4
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2202      	movs	r2, #2
 8002604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	187b      	adds	r3, r7, r1
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002612:	187b      	adds	r3, r7, r1
 8002614:	2202      	movs	r2, #2
 8002616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	187a      	adds	r2, r7, r1
 800261a:	2390      	movs	r3, #144	; 0x90
 800261c:	05db      	lsls	r3, r3, #23
 800261e:	0011      	movs	r1, r2
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f9c7 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b009      	add	sp, #36	; 0x24
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40021000 	.word	0x40021000

08002638 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_USART2_UART_Init+0x58>)
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <MX_USART2_UART_Init+0x5c>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002644:	2296      	movs	r2, #150	; 0x96
 8002646:	0212      	lsls	r2, r2, #8
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_USART2_UART_Init+0x58>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_USART2_UART_Init+0x58>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_USART2_UART_Init+0x58>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_USART2_UART_Init+0x58>)
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <MX_USART2_UART_Init+0x58>)
 800267c:	0018      	movs	r0, r3
 800267e:	f002 fc1d 	bl	8004ebc <HAL_UART_Init>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002686:	f7ff fdce 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200000d4 	.word	0x200000d4
 8002694:	40004400 	.word	0x40004400

08002698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b08b      	sub	sp, #44	; 0x2c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	2414      	movs	r4, #20
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	0018      	movs	r0, r3
 80026a6:	2314      	movs	r3, #20
 80026a8:	001a      	movs	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f002 ffa2 	bl	80055f4 <memset>
  if(uartHandle->Instance==USART2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_UART_MspInit+0x90>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d132      	bne.n	8002720 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_UART_MspInit+0x94>)
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_UART_MspInit+0x94>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0289      	lsls	r1, r1, #10
 80026c4:	430a      	orrs	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0x94>)
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x94>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_UART_MspInit+0x94>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0289      	lsls	r1, r1, #10
 80026e0:	430a      	orrs	r2, r1
 80026e2:	615a      	str	r2, [r3, #20]
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_UART_MspInit+0x94>)
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026f2:	0021      	movs	r1, r4
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2202      	movs	r2, #2
 80026fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2201      	movs	r2, #1
 8002710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	187a      	adds	r2, r7, r1
 8002714:	2390      	movs	r3, #144	; 0x90
 8002716:	05db      	lsls	r3, r3, #23
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f94a 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b00b      	add	sp, #44	; 0x2c
 8002726:	bd90      	pop	{r4, r7, pc}
 8002728:	40004400 	.word	0x40004400
 800272c:	40021000 	.word	0x40021000

08002730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002730:	480d      	ldr	r0, [pc, #52]	; (8002768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800275a:	f7ff fe54 	bl	8002406 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800275e:	f002 ff51 	bl	8005604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002762:	f7ff fc7f 	bl	8002064 <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   r0, =_estack
 8002768:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002774:	080056e8 	.word	0x080056e8
  ldr r2, =_sbss
 8002778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800277c:	2000015c 	.word	0x2000015c

08002780 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_COMP_IRQHandler>
	...

08002784 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_Init+0x24>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_Init+0x24>)
 800278e:	2110      	movs	r1, #16
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002794:	2000      	movs	r0, #0
 8002796:	f000 f809 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800279a:	f7ff fdf9 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_InitTick+0x5c>)
 80027b6:	681c      	ldr	r4, [r3, #0]
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_InitTick+0x60>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	0019      	movs	r1, r3
 80027be:	23fa      	movs	r3, #250	; 0xfa
 80027c0:	0098      	lsls	r0, r3, #2
 80027c2:	f7fd fca1 	bl	8000108 <__udivsi3>
 80027c6:	0003      	movs	r3, r0
 80027c8:	0019      	movs	r1, r3
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f8e1 	bl	800299a <HAL_SYSTICK_Config>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e00f      	b.n	8002800 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d80b      	bhi.n	80027fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	2301      	movs	r3, #1
 80027ea:	425b      	negs	r3, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f8be 	bl	8002970 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_InitTick+0x64>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b003      	add	sp, #12
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	20000000 	.word	0x20000000
 800280c:	20000008 	.word	0x20000008
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_IncTick+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	001a      	movs	r2, r3
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_IncTick+0x20>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	18d2      	adds	r2, r2, r3
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_IncTick+0x20>)
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	20000008 	.word	0x20000008
 8002834:	20000158 	.word	0x20000158

08002838 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b02      	ldr	r3, [pc, #8]	; (8002848 <HAL_GetTick+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000158 	.word	0x20000158

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	0002      	movs	r2, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b7f      	cmp	r3, #127	; 0x7f
 8002860:	d828      	bhi.n	80028b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002862:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <__NVIC_SetPriority+0xd4>)
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b25b      	sxtb	r3, r3
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	33c0      	adds	r3, #192	; 0xc0
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	589b      	ldr	r3, [r3, r2]
 8002872:	1dfa      	adds	r2, r7, #7
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	0011      	movs	r1, r2
 8002878:	2203      	movs	r2, #3
 800287a:	400a      	ands	r2, r1
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	21ff      	movs	r1, #255	; 0xff
 8002880:	4091      	lsls	r1, r2
 8002882:	000a      	movs	r2, r1
 8002884:	43d2      	mvns	r2, r2
 8002886:	401a      	ands	r2, r3
 8002888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	22ff      	movs	r2, #255	; 0xff
 8002890:	401a      	ands	r2, r3
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	0018      	movs	r0, r3
 8002898:	2303      	movs	r3, #3
 800289a:	4003      	ands	r3, r0
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a0:	481f      	ldr	r0, [pc, #124]	; (8002920 <__NVIC_SetPriority+0xd4>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	430a      	orrs	r2, r1
 80028ac:	33c0      	adds	r3, #192	; 0xc0
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028b2:	e031      	b.n	8002918 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <__NVIC_SetPriority+0xd8>)
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0019      	movs	r1, r3
 80028bc:	230f      	movs	r3, #15
 80028be:	400b      	ands	r3, r1
 80028c0:	3b08      	subs	r3, #8
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3306      	adds	r3, #6
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	18d3      	adds	r3, r2, r3
 80028ca:	3304      	adds	r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1dfa      	adds	r2, r7, #7
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	0011      	movs	r1, r2
 80028d4:	2203      	movs	r2, #3
 80028d6:	400a      	ands	r2, r1
 80028d8:	00d2      	lsls	r2, r2, #3
 80028da:	21ff      	movs	r1, #255	; 0xff
 80028dc:	4091      	lsls	r1, r2
 80028de:	000a      	movs	r2, r1
 80028e0:	43d2      	mvns	r2, r2
 80028e2:	401a      	ands	r2, r3
 80028e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	22ff      	movs	r2, #255	; 0xff
 80028ec:	401a      	ands	r2, r3
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	0018      	movs	r0, r3
 80028f4:	2303      	movs	r3, #3
 80028f6:	4003      	ands	r3, r0
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028fc:	4809      	ldr	r0, [pc, #36]	; (8002924 <__NVIC_SetPriority+0xd8>)
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	001c      	movs	r4, r3
 8002904:	230f      	movs	r3, #15
 8002906:	4023      	ands	r3, r4
 8002908:	3b08      	subs	r3, #8
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	430a      	orrs	r2, r1
 800290e:	3306      	adds	r3, #6
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	18c3      	adds	r3, r0, r3
 8002914:	3304      	adds	r3, #4
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b003      	add	sp, #12
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	045b      	lsls	r3, r3, #17
 8002938:	429a      	cmp	r2, r3
 800293a:	d301      	bcc.n	8002940 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293c:	2301      	movs	r3, #1
 800293e:	e010      	b.n	8002962 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <SysTick_Config+0x44>)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	3a01      	subs	r2, #1
 8002946:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002948:	2301      	movs	r3, #1
 800294a:	425b      	negs	r3, r3
 800294c:	2103      	movs	r1, #3
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff ff7c 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Config+0x44>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <SysTick_Config+0x44>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	210f      	movs	r1, #15
 800297c:	187b      	adds	r3, r7, r1
 800297e:	1c02      	adds	r2, r0, #0
 8002980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	187b      	adds	r3, r7, r1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b25b      	sxtb	r3, r3
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ff5d 	bl	800284c <__NVIC_SetPriority>
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ffbf 	bl	8002928 <SysTick_Config>
 80029aa:	0003      	movs	r3, r0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	e155      	b.n	8002c70 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4091      	lsls	r1, r2
 80029ce:	000a      	movs	r2, r1
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d100      	bne.n	80029dc <HAL_GPIO_Init+0x28>
 80029da:	e146      	b.n	8002c6a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2203      	movs	r2, #3
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d005      	beq.n	80029f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d130      	bne.n	8002a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	409a      	lsls	r2, r3
 8002a02:	0013      	movs	r3, r2
 8002a04:	43da      	mvns	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	409a      	lsls	r2, r3
 8002a16:	0013      	movs	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	43da      	mvns	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	2201      	movs	r2, #1
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d017      	beq.n	8002a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	43da      	mvns	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d123      	bne.n	8002ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	58d3      	ldr	r3, [r2, r3]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	0013      	movs	r3, r2
 8002aba:	43da      	mvns	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2107      	movs	r1, #7
 8002aca:	400b      	ands	r3, r1
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3208      	adds	r2, #8
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	6939      	ldr	r1, [r7, #16]
 8002ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	43da      	mvns	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	401a      	ands	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	23c0      	movs	r3, #192	; 0xc0
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	4013      	ands	r3, r2
 8002b24:	d100      	bne.n	8002b28 <HAL_GPIO_Init+0x174>
 8002b26:	e0a0      	b.n	8002c6a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_GPIO_Init+0x2d4>)
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <HAL_GPIO_Init+0x2d4>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <HAL_GPIO_Init+0x2d4>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_GPIO_Init+0x2d8>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4013      	ands	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	2390      	movs	r3, #144	; 0x90
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a47      	ldr	r2, [pc, #284]	; (8002c90 <HAL_GPIO_Init+0x2dc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x1ea>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a46      	ldr	r2, [pc, #280]	; (8002c94 <HAL_GPIO_Init+0x2e0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x1e6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <HAL_GPIO_Init+0x2e4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x1e2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x1de>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x1f0>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x1f0>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x1f0>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x1f0>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x1f0>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	2103      	movs	r1, #3
 8002ba8:	400a      	ands	r2, r1
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	; (8002c8c <HAL_GPIO_Init+0x2d8>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	025b      	lsls	r3, r3, #9
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	039b      	lsls	r3, r3, #14
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	40da      	lsrs	r2, r3
 8002c78:	1e13      	subs	r3, r2, #0
 8002c7a:	d000      	beq.n	8002c7e <HAL_GPIO_Init+0x2ca>
 8002c7c:	e6a2      	b.n	80029c4 <HAL_GPIO_Init+0x10>
  } 
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	48000400 	.word	0x48000400
 8002c94:	48000800 	.word	0x48000800
 8002c98:	48000c00 	.word	0x48000c00
 8002c9c:	48001000 	.word	0x48001000
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	0008      	movs	r0, r1
 8002cae:	0011      	movs	r1, r2
 8002cb0:	1cbb      	adds	r3, r7, #2
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	1c7b      	adds	r3, r7, #1
 8002cb8:	1c0a      	adds	r2, r1, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cbc:	1c7b      	adds	r3, r7, #1
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc4:	1cbb      	adds	r3, r7, #2
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 fb76 	bl	80033e0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d100      	bne.n	8002d00 <HAL_RCC_OscConfig+0x20>
 8002cfe:	e08e      	b.n	8002e1e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d00:	4bc5      	ldr	r3, [pc, #788]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	220c      	movs	r2, #12
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d00e      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d0c:	4bc2      	ldr	r3, [pc, #776]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	220c      	movs	r2, #12
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d117      	bne.n	8002d48 <HAL_RCC_OscConfig+0x68>
 8002d18:	4bbf      	ldr	r3, [pc, #764]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	23c0      	movs	r3, #192	; 0xc0
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	401a      	ands	r2, r3
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	025b      	lsls	r3, r3, #9
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10e      	bne.n	8002d48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2a:	4bbb      	ldr	r3, [pc, #748]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	029b      	lsls	r3, r3, #10
 8002d32:	4013      	ands	r3, r2
 8002d34:	d100      	bne.n	8002d38 <HAL_RCC_OscConfig+0x58>
 8002d36:	e071      	b.n	8002e1c <HAL_RCC_OscConfig+0x13c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d000      	beq.n	8002d42 <HAL_RCC_OscConfig+0x62>
 8002d40:	e06c      	b.n	8002e1c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f000 fb4c 	bl	80033e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x80>
 8002d50:	4bb1      	ldr	r3, [pc, #708]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4bb0      	ldr	r3, [pc, #704]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	0249      	lsls	r1, r1, #9
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e02f      	b.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0xa2>
 8002d68:	4bab      	ldr	r3, [pc, #684]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4baa      	ldr	r3, [pc, #680]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d6e:	49ab      	ldr	r1, [pc, #684]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4ba8      	ldr	r3, [pc, #672]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4ba7      	ldr	r3, [pc, #668]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	49a9      	ldr	r1, [pc, #676]	; (8003020 <HAL_RCC_OscConfig+0x340>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e01e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10e      	bne.n	8002da8 <HAL_RCC_OscConfig+0xc8>
 8002d8a:	4ba3      	ldr	r3, [pc, #652]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4ba2      	ldr	r3, [pc, #648]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	02c9      	lsls	r1, r1, #11
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	4b9f      	ldr	r3, [pc, #636]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b9e      	ldr	r3, [pc, #632]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
 8002da8:	4b9b      	ldr	r3, [pc, #620]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b9a      	ldr	r3, [pc, #616]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002dae:	499b      	ldr	r1, [pc, #620]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b98      	ldr	r3, [pc, #608]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b97      	ldr	r3, [pc, #604]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002dba:	4999      	ldr	r1, [pc, #612]	; (8003020 <HAL_RCC_OscConfig+0x340>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d014      	beq.n	8002df2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fd36 	bl	8002838 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd2:	f7ff fd31 	bl	8002838 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e2fd      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	4b8c      	ldr	r3, [pc, #560]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	4013      	ands	r3, r2
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0xf2>
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff fd21 	bl	8002838 <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff fd1c 	bl	8002838 <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e2e8      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	4013      	ands	r3, r2
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x11c>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	d100      	bne.n	8002e2a <HAL_RCC_OscConfig+0x14a>
 8002e28:	e06c      	b.n	8002f04 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e2a:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	220c      	movs	r2, #12
 8002e30:	4013      	ands	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	220c      	movs	r2, #12
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d11f      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1a0>
 8002e40:	4b75      	ldr	r3, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	23c0      	movs	r3, #192	; 0xc0
 8002e46:	025b      	lsls	r3, r3, #9
 8002e48:	401a      	ands	r2, r3
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b71      	ldr	r3, [pc, #452]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x188>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e2bb      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b6b      	ldr	r3, [pc, #428]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	22f8      	movs	r2, #248	; 0xf8
 8002e6e:	4393      	bics	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00da      	lsls	r2, r3, #3
 8002e78:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e041      	b.n	8002f04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d024      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b62      	ldr	r3, [pc, #392]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7ff fcd0 	bl	8002838 <HAL_GetTick>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7ff fccb 	bl	8002838 <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e297      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d0f1      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	22f8      	movs	r2, #248	; 0xf8
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00da      	lsls	r2, r3, #3
 8002eca:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e018      	b.n	8002f04 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b51      	ldr	r3, [pc, #324]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7ff fcab 	bl	8002838 <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7ff fca6 	bl	8002838 <HAL_GetTick>
 8002eec:	0002      	movs	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e272      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2202      	movs	r2, #2
 8002f00:	4013      	ands	r3, r2
 8002f02:	d1f1      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b40      	ldr	r3, [pc, #256]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fc89 	bl	8002838 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7ff fc84 	bl	8002838 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e250      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d0f1      	beq.n	8002f2c <HAL_RCC_OscConfig+0x24c>
 8002f48:	e018      	b.n	8002f7c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	438a      	bics	r2, r1
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7ff fc6f 	bl	8002838 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7ff fc6a 	bl	8002838 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e236      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d1f1      	bne.n	8002f60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2204      	movs	r2, #4
 8002f82:	4013      	ands	r3, r2
 8002f84:	d100      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2a8>
 8002f86:	e0b5      	b.n	80030f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f88:	201f      	movs	r0, #31
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d110      	bne.n	8002fbe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0549      	lsls	r1, r1, #21
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	61da      	str	r2, [r3, #28]
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	055b      	lsls	r3, r3, #21
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_OscConfig+0x344>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d11a      	bne.n	8003000 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_RCC_OscConfig+0x344>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCC_OscConfig+0x344>)
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	0049      	lsls	r1, r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd8:	f7ff fc2e 	bl	8002838 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7ff fc29 	bl	8002838 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1f5      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x344>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10f      	bne.n	8003028 <HAL_RCC_OscConfig+0x348>
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 800300e:	2101      	movs	r1, #1
 8003010:	430a      	orrs	r2, r1
 8003012:	621a      	str	r2, [r3, #32]
 8003014:	e036      	b.n	8003084 <HAL_RCC_OscConfig+0x3a4>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	40021000 	.word	0x40021000
 800301c:	fffeffff 	.word	0xfffeffff
 8003020:	fffbffff 	.word	0xfffbffff
 8003024:	40007000 	.word	0x40007000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x36a>
 8003030:	4bca      	ldr	r3, [pc, #808]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	4bc9      	ldr	r3, [pc, #804]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003036:	2101      	movs	r1, #1
 8003038:	438a      	bics	r2, r1
 800303a:	621a      	str	r2, [r3, #32]
 800303c:	4bc7      	ldr	r3, [pc, #796]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	4bc6      	ldr	r3, [pc, #792]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003042:	2104      	movs	r1, #4
 8003044:	438a      	bics	r2, r1
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x3a4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x38c>
 8003052:	4bc2      	ldr	r3, [pc, #776]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	4bc1      	ldr	r3, [pc, #772]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003058:	2104      	movs	r1, #4
 800305a:	430a      	orrs	r2, r1
 800305c:	621a      	str	r2, [r3, #32]
 800305e:	4bbf      	ldr	r3, [pc, #764]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	4bbe      	ldr	r3, [pc, #760]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003064:	2101      	movs	r1, #1
 8003066:	430a      	orrs	r2, r1
 8003068:	621a      	str	r2, [r3, #32]
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x3a4>
 800306c:	4bbb      	ldr	r3, [pc, #748]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	4bba      	ldr	r3, [pc, #744]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	621a      	str	r2, [r3, #32]
 8003078:	4bb8      	ldr	r3, [pc, #736]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	4bb7      	ldr	r3, [pc, #732]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800307e:	2104      	movs	r1, #4
 8003080:	438a      	bics	r2, r1
 8003082:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d014      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7ff fbd4 	bl	8002838 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e009      	b.n	80030aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7ff fbcf 	bl	8002838 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4aaf      	ldr	r2, [pc, #700]	; (8003360 <HAL_RCC_OscConfig+0x680>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e19a      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4bac      	ldr	r3, [pc, #688]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	2202      	movs	r2, #2
 80030b0:	4013      	ands	r3, r2
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x3b6>
 80030b4:	e013      	b.n	80030de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7ff fbbf 	bl	8002838 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e009      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7ff fbba 	bl	8002838 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	4aa5      	ldr	r2, [pc, #660]	; (8003360 <HAL_RCC_OscConfig+0x680>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e185      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4ba1      	ldr	r3, [pc, #644]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030de:	231f      	movs	r3, #31
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b9c      	ldr	r3, [pc, #624]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	4b9b      	ldr	r3, [pc, #620]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80030ee:	499d      	ldr	r1, [pc, #628]	; (8003364 <HAL_RCC_OscConfig+0x684>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d12a      	bne.n	800315c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003106:	4b95      	ldr	r3, [pc, #596]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310a:	4b94      	ldr	r3, [pc, #592]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800310c:	2104      	movs	r1, #4
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003112:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	4b91      	ldr	r3, [pc, #580]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003118:	2101      	movs	r1, #1
 800311a:	430a      	orrs	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7ff fb8b 	bl	8002838 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003128:	f7ff fb86 	bl	8002838 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e152      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800313a:	4b88      	ldr	r3, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	2202      	movs	r2, #2
 8003140:	4013      	ands	r3, r2
 8003142:	d0f1      	beq.n	8003128 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003144:	4b85      	ldr	r3, [pc, #532]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	22f8      	movs	r2, #248	; 0xf8
 800314a:	4393      	bics	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	4b81      	ldr	r3, [pc, #516]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003156:	430a      	orrs	r2, r1
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
 800315a:	e034      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	3305      	adds	r3, #5
 8003162:	d111      	bne.n	8003188 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003164:	4b7d      	ldr	r3, [pc, #500]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003168:	4b7c      	ldr	r3, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800316a:	2104      	movs	r1, #4
 800316c:	438a      	bics	r2, r1
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003170:	4b7a      	ldr	r3, [pc, #488]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	22f8      	movs	r2, #248	; 0xf8
 8003176:	4393      	bics	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	00da      	lsls	r2, r3, #3
 8003180:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003182:	430a      	orrs	r2, r1
 8003184:	635a      	str	r2, [r3, #52]	; 0x34
 8003186:	e01e      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003188:	4b74      	ldr	r3, [pc, #464]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	4b73      	ldr	r3, [pc, #460]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800318e:	2104      	movs	r1, #4
 8003190:	430a      	orrs	r2, r1
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003194:	4b71      	ldr	r3, [pc, #452]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003198:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800319a:	2101      	movs	r1, #1
 800319c:	438a      	bics	r2, r1
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7ff fb4a 	bl	8002838 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031aa:	f7ff fb45 	bl	8002838 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e111      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031bc:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	2202      	movs	r2, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d1f1      	bne.n	80031aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d05c      	beq.n	800328a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031d0:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	220c      	movs	r2, #12
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d00e      	beq.n	80031fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031dc:	4b5f      	ldr	r3, [pc, #380]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	220c      	movs	r2, #12
 80031e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d114      	bne.n	8003212 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031e8:	4b5c      	ldr	r3, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	23c0      	movs	r3, #192	; 0xc0
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	401a      	ands	r2, r3
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	025b      	lsls	r3, r3, #9
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10b      	bne.n	8003212 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80031fa:	4b58      	ldr	r3, [pc, #352]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80031fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	4013      	ands	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_RCC_OscConfig+0x5a8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d03c      	beq.n	8003288 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0e6      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01b      	beq.n	8003252 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800321a:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0249      	lsls	r1, r1, #9
 8003224:	430a      	orrs	r2, r1
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7ff fb06 	bl	8002838 <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003232:	f7ff fb01 	bl	8002838 <HAL_GetTick>
 8003236:	0002      	movs	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0cd      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003244:	4b45      	ldr	r3, [pc, #276]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	025b      	lsls	r3, r3, #9
 800324c:	4013      	ands	r3, r2
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x552>
 8003250:	e01b      	b.n	800328a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003252:	4b42      	ldr	r3, [pc, #264]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003258:	4943      	ldr	r1, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x688>)
 800325a:	400a      	ands	r2, r1
 800325c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7ff faeb 	bl	8002838 <HAL_GetTick>
 8003262:	0003      	movs	r3, r0
 8003264:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003268:	f7ff fae6 	bl	8002838 <HAL_GetTick>
 800326c:	0002      	movs	r2, r0
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0b2      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	025b      	lsls	r3, r3, #9
 8003282:	4013      	ands	r3, r2
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x588>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003288:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d100      	bne.n	8003294 <HAL_RCC_OscConfig+0x5b4>
 8003292:	e0a4      	b.n	80033de <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	220c      	movs	r2, #12
 800329a:	4013      	ands	r3, r2
 800329c:	2b08      	cmp	r3, #8
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5c2>
 80032a0:	e078      	b.n	8003394 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d14c      	bne.n	8003344 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032b0:	492e      	ldr	r1, [pc, #184]	; (800336c <HAL_RCC_OscConfig+0x68c>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7ff fabf 	bl	8002838 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7ff faba 	bl	8002838 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e086      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	049b      	lsls	r3, r3, #18
 80032da:	4013      	ands	r3, r2
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	220f      	movs	r2, #15
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_RCC_OscConfig+0x690>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	431a      	orrs	r2, r3
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	0449      	lsls	r1, r1, #17
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7ff fa8d 	bl	8002838 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7ff fa88 	bl	8002838 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e054      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	049b      	lsls	r3, r3, #18
 800333e:	4013      	ands	r3, r2
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x644>
 8003342:	e04c      	b.n	80033de <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_RCC_OscConfig+0x67c>)
 800334a:	4908      	ldr	r1, [pc, #32]	; (800336c <HAL_RCC_OscConfig+0x68c>)
 800334c:	400a      	ands	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7ff fa72 	bl	8002838 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x6a6>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	40021000 	.word	0x40021000
 8003360:	00001388 	.word	0x00001388
 8003364:	efffffff 	.word	0xefffffff
 8003368:	fffeffff 	.word	0xfffeffff
 800336c:	feffffff 	.word	0xfeffffff
 8003370:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7ff fa60 	bl	8002838 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e02c      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_RCC_OscConfig+0x708>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	049b      	lsls	r3, r3, #18
 800338e:	4013      	ands	r3, r2
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x694>
 8003392:	e024      	b.n	80033de <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e01f      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_OscConfig+0x708>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_RCC_OscConfig+0x708>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	23c0      	movs	r3, #192	; 0xc0
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d10e      	bne.n	80033da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	220f      	movs	r2, #15
 80033c0:	401a      	ands	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	23f0      	movs	r3, #240	; 0xf0
 80033ce:	039b      	lsls	r3, r3, #14
 80033d0:	401a      	ands	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b008      	add	sp, #32
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0bf      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	4013      	ands	r3, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d911      	bls.n	8003432 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2201      	movs	r2, #1
 8003414:	4393      	bics	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d001      	beq.n	8003432 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0a6      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d015      	beq.n	8003468 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2204      	movs	r2, #4
 8003442:	4013      	ands	r3, r2
 8003444:	d006      	beq.n	8003454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003446:	4b51      	ldr	r3, [pc, #324]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 800344c:	21e0      	movs	r1, #224	; 0xe0
 800344e:	00c9      	lsls	r1, r1, #3
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	22f0      	movs	r2, #240	; 0xf0
 800345a:	4393      	bics	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d04c      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b44      	ldr	r3, [pc, #272]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	029b      	lsls	r3, r3, #10
 8003482:	4013      	ands	r3, r2
 8003484:	d120      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07a      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	049b      	lsls	r3, r3, #18
 800349a:	4013      	ands	r3, r2
 800349c:	d114      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06e      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80034aa:	4b38      	ldr	r3, [pc, #224]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 80034ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	025b      	lsls	r3, r3, #9
 80034b2:	4013      	ands	r3, r2
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e062      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e05b      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	4393      	bics	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7ff f9ac 	bl	8002838 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e4:	e009      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e6:	f7ff f9a7 	bl	8002838 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_RCC_ClockConfig+0x1a4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e042      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	220c      	movs	r2, #12
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1ec      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d211      	bcs.n	800353e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x19c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e020      	b.n	8003580 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a11      	ldr	r2, [pc, #68]	; (8003594 <HAL_RCC_ClockConfig+0x1a8>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800355c:	f000 f820 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8003560:	0001      	movs	r1, r0
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1a0>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	220f      	movs	r2, #15
 800356a:	4013      	ands	r3, r2
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1ac>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	000a      	movs	r2, r1
 8003572:	40da      	lsrs	r2, r3
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1b0>)
 8003576:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003578:	2000      	movs	r0, #0
 800357a:	f7ff f917 	bl	80027ac <HAL_InitTick>
  
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	00001388 	.word	0x00001388
 8003594:	fffff8ff 	.word	0xfffff8ff
 8003598:	080056c8 	.word	0x080056c8
 800359c:	20000000 	.word	0x20000000

080035a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b08f      	sub	sp, #60	; 0x3c
 80035a4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035a6:	2314      	movs	r3, #20
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	4a38      	ldr	r2, [pc, #224]	; (800368c <HAL_RCC_GetSysClockFreq+0xec>)
 80035ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035ae:	c313      	stmia	r3!, {r0, r1, r4}
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <HAL_RCC_GetSysClockFreq+0xf0>)
 80035b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035ba:	c313      	stmia	r3!, {r0, r1, r4}
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c4:	2300      	movs	r3, #0
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	220c      	movs	r2, #12
 80035de:	4013      	ands	r3, r2
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d047      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0xd4>
 80035e4:	d849      	bhi.n	800367a <HAL_RCC_GetSysClockFreq+0xda>
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x50>
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x56>
 80035ee:	e044      	b.n	800367a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035f4:	e044      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	0c9b      	lsrs	r3, r3, #18
 80035fa:	220f      	movs	r2, #15
 80035fc:	4013      	ands	r3, r2
 80035fe:	2214      	movs	r2, #20
 8003600:	18ba      	adds	r2, r7, r2
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	220f      	movs	r2, #15
 800360c:	4013      	ands	r3, r2
 800360e:	1d3a      	adds	r2, r7, #4
 8003610:	5cd3      	ldrb	r3, [r2, r3]
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	025b      	lsls	r3, r3, #9
 800361a:	401a      	ands	r2, r3
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	025b      	lsls	r3, r3, #9
 8003620:	429a      	cmp	r2, r3
 8003622:	d109      	bne.n	8003638 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003626:	481c      	ldr	r0, [pc, #112]	; (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003628:	f7fc fd6e 	bl	8000108 <__udivsi3>
 800362c:	0003      	movs	r3, r0
 800362e:	001a      	movs	r2, r3
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	4353      	muls	r3, r2
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
 8003636:	e01a      	b.n	800366e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363a:	23c0      	movs	r3, #192	; 0xc0
 800363c:	025b      	lsls	r3, r3, #9
 800363e:	401a      	ands	r2, r3
 8003640:	23c0      	movs	r3, #192	; 0xc0
 8003642:	025b      	lsls	r3, r3, #9
 8003644:	429a      	cmp	r2, r3
 8003646:	d109      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	4814      	ldr	r0, [pc, #80]	; (800369c <HAL_RCC_GetSysClockFreq+0xfc>)
 800364c:	f7fc fd5c 	bl	8000108 <__udivsi3>
 8003650:	0003      	movs	r3, r0
 8003652:	001a      	movs	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	4353      	muls	r3, r2
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	e008      	b.n	800366e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800365c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365e:	480e      	ldr	r0, [pc, #56]	; (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003660:	f7fc fd52 	bl	8000108 <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	001a      	movs	r2, r3
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	4353      	muls	r3, r2
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003672:	e005      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003678:	e002      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800367e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b00f      	add	sp, #60	; 0x3c
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	08005664 	.word	0x08005664
 8003690:	08005674 	.word	0x08005674
 8003694:	40021000 	.word	0x40021000
 8003698:	007a1200 	.word	0x007a1200
 800369c:	02dc6c00 	.word	0x02dc6c00

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80036b8:	f7ff fff2 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036bc:	0001      	movs	r1, r0
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	2207      	movs	r2, #7
 80036c6:	4013      	ands	r3, r2
 80036c8:	4a04      	ldr	r2, [pc, #16]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	40d9      	lsrs	r1, r3
 80036ce:	000b      	movs	r3, r1
}    
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	080056d8 	.word	0x080056d8

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	4013      	ands	r3, r2
 80036fa:	d100      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80036fc:	e08e      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2017      	movs	r0, #23
 8003700:	183b      	adds	r3, r7, r0
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	4013      	ands	r3, r2
 8003710:	d110      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	4b6a      	ldr	r3, [pc, #424]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0549      	lsls	r1, r1, #21
 800371c:	430a      	orrs	r2, r1
 800371e:	61da      	str	r2, [r3, #28]
 8003720:	4b67      	ldr	r3, [pc, #412]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	055b      	lsls	r3, r3, #21
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	183b      	adds	r3, r7, r0
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d11a      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0049      	lsls	r1, r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7ff f873 	bl	8002838 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7ff f86e 	bl	8002838 <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0a6      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d0f0      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003776:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	23c0      	movs	r3, #192	; 0xc0
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4013      	ands	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d034      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4013      	ands	r3, r2
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d02c      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800379e:	4013      	ands	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	0249      	lsls	r1, r1, #9
 80037ac:	430a      	orrs	r2, r1
 80037ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037b6:	4945      	ldr	r1, [pc, #276]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7ff f835 	bl	8002838 <HAL_GetTick>
 80037ce:	0003      	movs	r3, r0
 80037d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e009      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7ff f830 	bl	8002838 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e067      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f2:	4b33      	ldr	r3, [pc, #204]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003802:	430a      	orrs	r2, r1
 8003804:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003806:	2317      	movs	r3, #23
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003816:	492f      	ldr	r1, [pc, #188]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003818:	400a      	ands	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	2203      	movs	r2, #3
 800382c:	4393      	bics	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003836:	430a      	orrs	r2, r1
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2202      	movs	r2, #2
 8003840:	4013      	ands	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003844:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003854:	430a      	orrs	r2, r1
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2220      	movs	r2, #32
 800385e:	4013      	ands	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	2210      	movs	r2, #16
 8003868:	4393      	bics	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003872:	430a      	orrs	r2, r1
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	4013      	ands	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	4393      	bics	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003892:	430a      	orrs	r2, r1
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4013      	ands	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	4393      	bics	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b006      	add	sp, #24
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
 80038c8:	fffffcff 	.word	0xfffffcff
 80038cc:	fffeffff 	.word	0xfffeffff
 80038d0:	00001388 	.word	0x00001388
 80038d4:	efffffff 	.word	0xefffffff
 80038d8:	fffcffff 	.word	0xfffcffff

080038dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0a8      	b.n	8003a40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	2382      	movs	r3, #130	; 0x82
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	429a      	cmp	r2, r3
 8003900:	d009      	beq.n	8003916 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	61da      	str	r2, [r3, #28]
 8003908:	e005      	b.n	8003916 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	225d      	movs	r2, #93	; 0x5d
 8003920:	5c9b      	ldrb	r3, [r3, r2]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	225c      	movs	r2, #92	; 0x5c
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f7fe fcba 	bl	80022ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	225d      	movs	r2, #93	; 0x5d
 800393c:	2102      	movs	r1, #2
 800393e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	438a      	bics	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	23e0      	movs	r3, #224	; 0xe0
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	429a      	cmp	r2, r3
 800395a:	d902      	bls.n	8003962 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e002      	b.n	8003968 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	015b      	lsls	r3, r3, #5
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	23f0      	movs	r3, #240	; 0xf0
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	429a      	cmp	r2, r3
 8003972:	d008      	beq.n	8003986 <HAL_SPI_Init+0xaa>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	23e0      	movs	r3, #224	; 0xe0
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	429a      	cmp	r2, r3
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	2382      	movs	r3, #130	; 0x82
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	401a      	ands	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	2384      	movs	r3, #132	; 0x84
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	400b      	ands	r3, r1
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2102      	movs	r1, #2
 80039a2:	400b      	ands	r3, r1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2101      	movs	r1, #1
 80039ac:	400b      	ands	r3, r1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6999      	ldr	r1, [r3, #24]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	400b      	ands	r3, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2138      	movs	r1, #56	; 0x38
 80039c2:	400b      	ands	r3, r1
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	400b      	ands	r3, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	0011      	movs	r1, r2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	2204      	movs	r2, #4
 80039ec:	401a      	ands	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2110      	movs	r1, #16
 80039f4:	400b      	ands	r3, r1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	2108      	movs	r1, #8
 80039fe:	400b      	ands	r3, r1
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68d9      	ldr	r1, [r3, #12]
 8003a06:	23f0      	movs	r3, #240	; 0xf0
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	0011      	movs	r1, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	015b      	lsls	r3, r3, #5
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4907      	ldr	r1, [pc, #28]	; (8003a48 <HAL_SPI_Init+0x16c>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	225d      	movs	r2, #93	; 0x5d
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	fffff7ff 	.word	0xfffff7ff

08003a4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	001a      	movs	r2, r3
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a62:	2323      	movs	r3, #35	; 0x23
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	225c      	movs	r2, #92	; 0x5c
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x2c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e1b5      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x398>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	225c      	movs	r2, #92	; 0x5c
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a80:	f7fe feda 	bl	8002838 <HAL_GetTick>
 8003a84:	0003      	movs	r3, r0
 8003a86:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a88:	201b      	movs	r0, #27
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	215d      	movs	r1, #93	; 0x5d
 8003a90:	5c52      	ldrb	r2, [r2, r1]
 8003a92:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a9a:	2312      	movs	r3, #18
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	1cba      	adds	r2, r7, #2
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aa4:	183b      	adds	r3, r7, r0
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d011      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x84>
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	2382      	movs	r3, #130	; 0x82
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d107      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x7a>
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d004      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003ac6:	2323      	movs	r3, #35	; 0x23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ace:	e17e      	b.n	8003dce <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x98>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x98>
 8003adc:	1cbb      	adds	r3, r7, #2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003ae4:	2323      	movs	r3, #35	; 0x23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    goto error;
 8003aec:	e16f      	b.n	8003dce <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	225d      	movs	r2, #93	; 0x5d
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d003      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	225d      	movs	r2, #93	; 0x5d
 8003afe:	2105      	movs	r1, #5
 8003b00:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1cba      	adds	r2, r7, #2
 8003b12:	2146      	movs	r1, #70	; 0x46
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1cba      	adds	r2, r7, #2
 8003b1c:	2144      	movs	r1, #68	; 0x44
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1cba      	adds	r2, r7, #2
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1cba      	adds	r2, r7, #2
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	23e0      	movs	r3, #224	; 0xe0
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d908      	bls.n	8003b62 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	49a4      	ldr	r1, [pc, #656]	; (8003dec <HAL_SPI_TransmitReceive+0x3a0>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	e008      	b.n	8003b74 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	0149      	lsls	r1, r1, #5
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2240      	movs	r2, #64	; 0x40
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d007      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	23e0      	movs	r3, #224	; 0xe0
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d800      	bhi.n	8003ba0 <HAL_SPI_TransmitReceive+0x154>
 8003b9e:	e07f      	b.n	8003ca0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x168>
 8003ba8:	2312      	movs	r3, #18
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d000      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x168>
 8003bb2:	e069      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	881a      	ldrh	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd8:	e056      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d11b      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x1d4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x1d4>
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d113      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2201      	movs	r2, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d11c      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x21c>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2246      	movs	r2, #70	; 0x46
 8003c32:	5a9b      	ldrh	r3, [r3, r2]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	b292      	uxth	r2, r2
 8003c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	1c9a      	adds	r2, r3, #2
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2246      	movs	r2, #70	; 0x46
 8003c56:	5a9b      	ldrh	r3, [r3, r2]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b299      	uxth	r1, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2246      	movs	r2, #70	; 0x46
 8003c62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c68:	f7fe fde6 	bl	8002838 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d807      	bhi.n	8003c88 <HAL_SPI_TransmitReceive+0x23c>
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	d004      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003c7e:	2323      	movs	r3, #35	; 0x23
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2203      	movs	r2, #3
 8003c84:	701a      	strb	r2, [r3, #0]
        goto error;
 8003c86:	e0a2      	b.n	8003dce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1a3      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x18e>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2246      	movs	r2, #70	; 0x46
 8003c96:	5a9b      	ldrh	r3, [r3, r2]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d19d      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x18e>
 8003c9e:	e085      	b.n	8003dac <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x268>
 8003ca8:	2312      	movs	r3, #18
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d000      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x268>
 8003cb2:	e070      	b.n	8003d96 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cda:	e05c      	b.n	8003d96 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d11c      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x2d8>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x2d8>
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d114      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d11e      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x324>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2246      	movs	r2, #70	; 0x46
 8003d36:	5a9b      	ldrh	r3, [r3, r2]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	001a      	movs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	7812      	ldrb	r2, [r2, #0]
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2246      	movs	r2, #70	; 0x46
 8003d5e:	5a9b      	ldrh	r3, [r3, r2]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b299      	uxth	r1, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2246      	movs	r2, #70	; 0x46
 8003d6a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d70:	f7fe fd62 	bl	8002838 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d802      	bhi.n	8003d86 <HAL_SPI_TransmitReceive+0x33a>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	3301      	adds	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x340>
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003d8c:	2323      	movs	r3, #35	; 0x23
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	2203      	movs	r2, #3
 8003d92:	701a      	strb	r2, [r3, #0]
        goto error;
 8003d94:	e01b      	b.n	8003dce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d19d      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x290>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2246      	movs	r2, #70	; 0x46
 8003da4:	5a9b      	ldrh	r3, [r3, r2]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d197      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 f94c 	bl	8004050 <SPI_EndRxTxTransaction>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003dbc:	2323      	movs	r3, #35	; 0x23
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	661a      	str	r2, [r3, #96]	; 0x60
 8003dca:	e000      	b.n	8003dce <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003dcc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	225d      	movs	r2, #93	; 0x5d
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	225c      	movs	r2, #92	; 0x5c
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dde:	2323      	movs	r3, #35	; 0x23
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	781b      	ldrb	r3, [r3, #0]
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b00a      	add	sp, #40	; 0x28
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffffefff 	.word	0xffffefff

08003df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e00:	f7fe fd1a 	bl	8002838 <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	18d3      	adds	r3, r2, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e10:	f7fe fd12 	bl	8002838 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	015b      	lsls	r3, r3, #5
 8003e1e:	0d1b      	lsrs	r3, r3, #20
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	4353      	muls	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e26:	e058      	b.n	8003eda <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	d055      	beq.n	8003eda <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2e:	f7fe fd03 	bl	8002838 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d902      	bls.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d142      	bne.n	8003eca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	21e0      	movs	r1, #224	; 0xe0
 8003e50:	438a      	bics	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	2382      	movs	r3, #130	; 0x82
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d113      	bne.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d005      	beq.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2140      	movs	r1, #64	; 0x40
 8003e84:	438a      	bics	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	019b      	lsls	r3, r3, #6
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d110      	bne.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	491a      	ldr	r1, [pc, #104]	; (8003f08 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0189      	lsls	r1, r1, #6
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	225d      	movs	r2, #93	; 0x5d
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	225c      	movs	r2, #92	; 0x5c
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e017      	b.n	8003efa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	425a      	negs	r2, r3
 8003eea:	4153      	adcs	r3, r2
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	001a      	movs	r2, r3
 8003ef0:	1dfb      	adds	r3, r7, #7
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d197      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b008      	add	sp, #32
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	20000000 	.word	0x20000000
 8003f08:	ffffdfff 	.word	0xffffdfff

08003f0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f1a:	2317      	movs	r3, #23
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f22:	f7fe fc89 	bl	8002838 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	18d3      	adds	r3, r2, r3
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f32:	f7fe fc81 	bl	8002838 <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	0013      	movs	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	00da      	lsls	r2, r3, #3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	0d1b      	lsrs	r3, r3, #20
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	4353      	muls	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f58:	e068      	b.n	800402c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	23c0      	movs	r3, #192	; 0xc0
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d10a      	bne.n	8003f7a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	2117      	movs	r1, #23
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	d055      	beq.n	800402c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f80:	f7fe fc5a 	bl	8002838 <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d902      	bls.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d142      	bne.n	800401c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	21e0      	movs	r1, #224	; 0xe0
 8003fa2:	438a      	bics	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	2382      	movs	r3, #130	; 0x82
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d113      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xce>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d005      	beq.n	8003fca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d107      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d110      	bne.n	8004008 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	0189      	lsls	r1, r1, #6
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	225d      	movs	r2, #93	; 0x5d
 800400c:	2101      	movs	r1, #1
 800400e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	225c      	movs	r2, #92	; 0x5c
 8004014:	2100      	movs	r1, #0
 8004016:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e010      	b.n	800403e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	3b01      	subs	r3, #1
 800402a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d18e      	bne.n	8003f5a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b00a      	add	sp, #40	; 0x28
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20000000 	.word	0x20000000
 800404c:	ffffdfff 	.word	0xffffdfff

08004050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	23c0      	movs	r3, #192	; 0xc0
 8004060:	0159      	lsls	r1, r3, #5
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	0013      	movs	r3, r2
 800406a:	2200      	movs	r2, #0
 800406c:	f7ff ff4e 	bl	8003f0c <SPI_WaitFifoStateUntilTimeout>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d007      	beq.n	8004084 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	2220      	movs	r2, #32
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e027      	b.n	80040d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	0013      	movs	r3, r2
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	f7ff fead 	bl	8003df0 <SPI_WaitFlagStateUntilTimeout>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d007      	beq.n	80040aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	2220      	movs	r2, #32
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e014      	b.n	80040d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	23c0      	movs	r3, #192	; 0xc0
 80040ae:	00d9      	lsls	r1, r3, #3
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	0013      	movs	r3, r2
 80040b8:	2200      	movs	r2, #0
 80040ba:	f7ff ff27 	bl	8003f0c <SPI_WaitFifoStateUntilTimeout>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d007      	beq.n	80040d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	2220      	movs	r2, #32
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e000      	b.n	80040d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e042      	b.n	8004174 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223d      	movs	r2, #61	; 0x3d
 80040f2:	5c9b      	ldrb	r3, [r3, r2]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	223c      	movs	r2, #60	; 0x3c
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f7fe fa37 	bl	8002578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	223d      	movs	r2, #61	; 0x3d
 800410e:	2102      	movs	r1, #2
 8004110:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3304      	adds	r3, #4
 800411a:	0019      	movs	r1, r3
 800411c:	0010      	movs	r0, r2
 800411e:	f000 fad7 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2246      	movs	r2, #70	; 0x46
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223e      	movs	r2, #62	; 0x3e
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223f      	movs	r2, #63	; 0x3f
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2240      	movs	r2, #64	; 0x40
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2241      	movs	r2, #65	; 0x41
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2242      	movs	r2, #66	; 0x42
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2243      	movs	r2, #67	; 0x43
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2244      	movs	r2, #68	; 0x44
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2245      	movs	r2, #69	; 0x45
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223d      	movs	r2, #61	; 0x3d
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e042      	b.n	8004214 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	223d      	movs	r2, #61	; 0x3d
 8004192:	5c9b      	ldrb	r3, [r3, r2]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223c      	movs	r2, #60	; 0x3c
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 f839 	bl	800421c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	223d      	movs	r2, #61	; 0x3d
 80041ae:	2102      	movs	r1, #2
 80041b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	0019      	movs	r1, r3
 80041bc:	0010      	movs	r0, r2
 80041be:	f000 fa87 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2246      	movs	r2, #70	; 0x46
 80041c6:	2101      	movs	r1, #1
 80041c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	223e      	movs	r2, #62	; 0x3e
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223f      	movs	r2, #63	; 0x3f
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2241      	movs	r2, #65	; 0x41
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2242      	movs	r2, #66	; 0x42
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2243      	movs	r2, #67	; 0x43
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2244      	movs	r2, #68	; 0x44
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2245      	movs	r2, #69	; 0x45
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223d      	movs	r2, #61	; 0x3d
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <HAL_TIM_PWM_Start+0x22>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223e      	movs	r2, #62	; 0x3e
 8004240:	5c9b      	ldrb	r3, [r3, r2]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	1e5a      	subs	r2, r3, #1
 8004248:	4193      	sbcs	r3, r2
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e01f      	b.n	800428e <HAL_TIM_PWM_Start+0x62>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d108      	bne.n	8004266 <HAL_TIM_PWM_Start+0x3a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	223f      	movs	r2, #63	; 0x3f
 8004258:	5c9b      	ldrb	r3, [r3, r2]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	4193      	sbcs	r3, r2
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e013      	b.n	800428e <HAL_TIM_PWM_Start+0x62>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d108      	bne.n	800427e <HAL_TIM_PWM_Start+0x52>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2240      	movs	r2, #64	; 0x40
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	4193      	sbcs	r3, r2
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e007      	b.n	800428e <HAL_TIM_PWM_Start+0x62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2241      	movs	r2, #65	; 0x41
 8004282:	5c9b      	ldrb	r3, [r3, r2]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	4193      	sbcs	r3, r2
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e074      	b.n	8004380 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x7a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223e      	movs	r2, #62	; 0x3e
 80042a0:	2102      	movs	r1, #2
 80042a2:	5499      	strb	r1, [r3, r2]
 80042a4:	e013      	b.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start+0x8a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223f      	movs	r2, #63	; 0x3f
 80042b0:	2102      	movs	r1, #2
 80042b2:	5499      	strb	r1, [r3, r2]
 80042b4:	e00b      	b.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x9a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	2102      	movs	r1, #2
 80042c2:	5499      	strb	r1, [r3, r2]
 80042c4:	e003      	b.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2241      	movs	r2, #65	; 0x41
 80042ca:	2102      	movs	r1, #2
 80042cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fd10 	bl	8004cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_TIM_PWM_Start+0x15c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIM_PWM_Start+0xd8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_TIM_PWM_Start+0x160>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIM_PWM_Start+0xd8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <HAL_TIM_PWM_Start+0x164>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIM_PWM_Start+0xd8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a25      	ldr	r2, [pc, #148]	; (8004394 <HAL_TIM_PWM_Start+0x168>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_TIM_PWM_Start+0xdc>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_TIM_PWM_Start+0xde>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	0209      	lsls	r1, r1, #8
 800431c:	430a      	orrs	r2, r1
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_TIM_PWM_Start+0x15c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <HAL_TIM_PWM_Start+0x11e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	05db      	lsls	r3, r3, #23
 8004332:	429a      	cmp	r2, r3
 8004334:	d009      	beq.n	800434a <HAL_TIM_PWM_Start+0x11e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_TIM_PWM_Start+0x16c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIM_PWM_Start+0x11e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <HAL_TIM_PWM_Start+0x160>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d111      	bne.n	800436e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2207      	movs	r2, #7
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b06      	cmp	r3, #6
 800435a:	d010      	beq.n	800437e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	e007      	b.n	800437e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800
 8004398:	40000400 	.word	0x40000400

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2317      	movs	r3, #23
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	223c      	movs	r2, #60	; 0x3c
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_ConfigChannel+0x22>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0ad      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	223c      	movs	r2, #60	; 0x3c
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d100      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80043cc:	e076      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d900      	bls.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043d4:	e095      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d04e      	beq.n	800447a <HAL_TIM_PWM_ConfigChannel+0xde>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d900      	bls.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043e2:	e08e      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d021      	beq.n	8004434 <HAL_TIM_PWM_ConfigChannel+0x98>
 80043f0:	e087      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 f9e8 	bl	80047d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2108      	movs	r1, #8
 800440c:	430a      	orrs	r2, r1
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2104      	movs	r1, #4
 800441c:	438a      	bics	r2, r1
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
      break;
 8004432:	e06b      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fa4f 	bl	80048e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0109      	lsls	r1, r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4931      	ldr	r1, [pc, #196]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004460:	400a      	ands	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6999      	ldr	r1, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
      break;
 8004478:	e048      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0011      	movs	r1, r2
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fab0 	bl	80049e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2108      	movs	r1, #8
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2104      	movs	r1, #4
 80044a4:	438a      	bics	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69d9      	ldr	r1, [r3, #28]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	61da      	str	r2, [r3, #28]
      break;
 80044ba:	e027      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fb15 	bl	8004af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0109      	lsls	r1, r1, #4
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	490f      	ldr	r1, [pc, #60]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      break;
 8004500:	e004      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004502:	2317      	movs	r3, #23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	223c      	movs	r2, #60	; 0x3c
 8004510:	2100      	movs	r1, #0
 8004512:	5499      	strb	r1, [r3, r2]

  return status;
 8004514:	2317      	movs	r3, #23
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b006      	add	sp, #24
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	fffffbff 	.word	0xfffffbff

08004528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	230f      	movs	r3, #15
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223c      	movs	r2, #60	; 0x3c
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x20>
 8004544:	2302      	movs	r3, #2
 8004546:	e0bc      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x19a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	223c      	movs	r2, #60	; 0x3c
 800454c:	2101      	movs	r1, #1
 800454e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	223d      	movs	r2, #61	; 0x3d
 8004554:	2102      	movs	r1, #2
 8004556:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2277      	movs	r2, #119	; 0x77
 8004564:	4393      	bics	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0192      	lsls	r2, r2, #6
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xde>
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0192      	lsls	r2, r2, #6
 8004588:	4293      	cmp	r3, r2
 800458a:	d900      	bls.n	800458e <HAL_TIM_ConfigClockSource+0x66>
 800458c:	e088      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0152      	lsls	r2, r2, #5
 8004592:	4293      	cmp	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_TIM_ConfigClockSource+0x70>
 8004596:	e088      	b.n	80046aa <HAL_TIM_ConfigClockSource+0x182>
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0152      	lsls	r2, r2, #5
 800459c:	4293      	cmp	r3, r2
 800459e:	d900      	bls.n	80045a2 <HAL_TIM_ConfigClockSource+0x7a>
 80045a0:	e07e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045a2:	2b70      	cmp	r3, #112	; 0x70
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xb0>
 80045a6:	d900      	bls.n	80045aa <HAL_TIM_ConfigClockSource+0x82>
 80045a8:	e07a      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d04f      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x126>
 80045ae:	d900      	bls.n	80045b2 <HAL_TIM_ConfigClockSource+0x8a>
 80045b0:	e076      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d03b      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x106>
 80045b6:	d900      	bls.n	80045ba <HAL_TIM_ConfigClockSource+0x92>
 80045b8:	e072      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d057      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x146>
 80045be:	d900      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x9a>
 80045c0:	e06e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d063      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045cc:	d868      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d05d      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d05b      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d6:	e063      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f000 fb68 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2277      	movs	r2, #119	; 0x77
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e052      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f000 fb51 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	01c9      	lsls	r1, r1, #7
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	001a      	movs	r2, r3
 800463c:	f000 fac4 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fb1e 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	001a      	movs	r2, r3
 800465c:	f000 fae2 	bl	8004c24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fb0e 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	001a      	movs	r2, r3
 800467c:	f000 faa4 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fafe 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f000 faf5 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 800469e:	e005      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223d      	movs	r2, #61	; 0x3d
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223c      	movs	r2, #60	; 0x3c
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

  return status;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	ffff00ff 	.word	0xffff00ff

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a34      	ldr	r2, [pc, #208]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d008      	beq.n	80046fa <TIM_Base_SetConfig+0x2a>
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	05db      	lsls	r3, r3, #23
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x2a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <TIM_Base_SetConfig+0xe8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2270      	movs	r2, #112	; 0x70
 80046fe:	4393      	bics	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	429a      	cmp	r2, r3
 800471c:	d013      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0xe8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <TIM_Base_SetConfig+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <TIM_Base_SetConfig+0xf0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <TIM_Base_SetConfig+0xf4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x76>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <TIM_Base_SetConfig+0xf8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <TIM_Base_SetConfig+0xfc>)
 800474a:	4013      	ands	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	4393      	bics	r3, r2
 800475e:	001a      	movs	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <TIM_Base_SetConfig+0xe4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0xce>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <TIM_Base_SetConfig+0xf0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0xce>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0xf4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0xce>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <TIM_Base_SetConfig+0xf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d103      	bne.n	80047a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	615a      	str	r2, [r3, #20]
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40002000 	.word	0x40002000
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	fffffcff 	.word	0xfffffcff

080047d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2201      	movs	r2, #1
 80047e0:	4393      	bics	r3, r2
 80047e2:	001a      	movs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2270      	movs	r2, #112	; 0x70
 80047fe:	4393      	bics	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	4393      	bics	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2202      	movs	r2, #2
 8004818:	4393      	bics	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_OC1_SetConfig+0xf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00b      	beq.n	8004846 <TIM_OC1_SetConfig+0x76>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <TIM_OC1_SetConfig+0xfc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <TIM_OC1_SetConfig+0x76>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <TIM_OC1_SetConfig+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_OC1_SetConfig+0x76>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <TIM_OC1_SetConfig+0x104>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2208      	movs	r2, #8
 800484a:	4393      	bics	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2204      	movs	r2, #4
 800485c:	4393      	bics	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <TIM_OC1_SetConfig+0xf8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_OC1_SetConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a18      	ldr	r2, [pc, #96]	; (80048cc <TIM_OC1_SetConfig+0xfc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_OC1_SetConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <TIM_OC1_SetConfig+0x100>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC1_SetConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <TIM_OC1_SetConfig+0x104>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d111      	bne.n	80048a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <TIM_OC1_SetConfig+0x108>)
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <TIM_OC1_SetConfig+0x10c>)
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b006      	add	sp, #24
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800
 80048d8:	fffffeff 	.word	0xfffffeff
 80048dc:	fffffdff 	.word	0xfffffdff

080048e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	2210      	movs	r2, #16
 80048f0:	4393      	bics	r3, r2
 80048f2:	001a      	movs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <TIM_OC2_SetConfig+0xe8>)
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <TIM_OC2_SetConfig+0xec>)
 8004916:	4013      	ands	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2220      	movs	r2, #32
 800492a:	4393      	bics	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <TIM_OC2_SetConfig+0xf0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10d      	bne.n	800495e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	4393      	bics	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4393      	bics	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <TIM_OC2_SetConfig+0xf0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_OC2_SetConfig+0x9e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <TIM_OC2_SetConfig+0xf4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_OC2_SetConfig+0x9e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <TIM_OC2_SetConfig+0xf8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_OC2_SetConfig+0x9e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <TIM_OC2_SetConfig+0xfc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d113      	bne.n	80049a6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <TIM_OC2_SetConfig+0x100>)
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <TIM_OC2_SetConfig+0x104>)
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	621a      	str	r2, [r3, #32]
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b006      	add	sp, #24
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	ffff8fff 	.word	0xffff8fff
 80049cc:	fffffcff 	.word	0xfffffcff
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800
 80049e0:	fffffbff 	.word	0xfffffbff
 80049e4:	fffff7ff 	.word	0xfffff7ff

080049e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4a35      	ldr	r2, [pc, #212]	; (8004acc <TIM_OC3_SetConfig+0xe4>)
 80049f8:	401a      	ands	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2270      	movs	r2, #112	; 0x70
 8004a14:	4393      	bics	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	4393      	bics	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <TIM_OC3_SetConfig+0xe8>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <TIM_OC3_SetConfig+0xec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10d      	bne.n	8004a62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <TIM_OC3_SetConfig+0xf0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <TIM_OC3_SetConfig+0xf4>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <TIM_OC3_SetConfig+0xec>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_OC3_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <TIM_OC3_SetConfig+0xf8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_OC3_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <TIM_OC3_SetConfig+0xfc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <TIM_OC3_SetConfig+0x100>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC3_SetConfig+0x104>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <TIM_OC3_SetConfig+0x108>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	fffffeff 	.word	0xfffffeff
 8004ad0:	fffffdff 	.word	0xfffffdff
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	fffff7ff 	.word	0xfffff7ff
 8004adc:	fffffbff 	.word	0xfffffbff
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800
 8004aec:	ffffefff 	.word	0xffffefff
 8004af0:	ffffdfff 	.word	0xffffdfff

08004af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4a28      	ldr	r2, [pc, #160]	; (8004ba4 <TIM_OC4_SetConfig+0xb0>)
 8004b04:	401a      	ands	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <TIM_OC4_SetConfig+0xb4>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <TIM_OC4_SetConfig+0xb8>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <TIM_OC4_SetConfig+0xbc>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <TIM_OC4_SetConfig+0xc0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_OC4_SetConfig+0x78>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <TIM_OC4_SetConfig+0xc4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_OC4_SetConfig+0x78>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <TIM_OC4_SetConfig+0xc8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC4_SetConfig+0x78>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <TIM_OC4_SetConfig+0xcc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d109      	bne.n	8004b80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <TIM_OC4_SetConfig+0xd0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	019b      	lsls	r3, r3, #6
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b006      	add	sp, #24
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	ffffefff 	.word	0xffffefff
 8004ba8:	ffff8fff 	.word	0xffff8fff
 8004bac:	fffffcff 	.word	0xfffffcff
 8004bb0:	ffffdfff 	.word	0xffffdfff
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800
 8004bc4:	ffffbfff 	.word	0xffffbfff

08004bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4393      	bics	r3, r2
 8004be2:	001a      	movs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	22f0      	movs	r2, #240	; 0xf0
 8004bf2:	4393      	bics	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	220a      	movs	r2, #10
 8004c04:	4393      	bics	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b006      	add	sp, #24
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2210      	movs	r2, #16
 8004c36:	4393      	bics	r3, r2
 8004c38:	001a      	movs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <TIM_TI2_ConfigInputStage+0x60>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	22a0      	movs	r2, #160	; 0xa0
 8004c60:	4393      	bics	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b006      	add	sp, #24
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	ffff0fff 	.word	0xffff0fff

08004c88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2270      	movs	r2, #112	; 0x70
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <TIM_ETR_SetConfig+0x3c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	ffff00ff 	.word	0xffff00ff

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	221f      	movs	r2, #31
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2201      	movs	r2, #1
 8004d10:	409a      	lsls	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	43d2      	mvns	r2, r2
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	211f      	movs	r1, #31
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4099      	lsls	r1, r3
 8004d32:	000b      	movs	r3, r1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b006      	add	sp, #24
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	223c      	movs	r2, #60	; 0x3c
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e047      	b.n	8004dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223c      	movs	r2, #60	; 0x3c
 8004d60:	2101      	movs	r1, #1
 8004d62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223d      	movs	r2, #61	; 0x3d
 8004d68:	2102      	movs	r1, #2
 8004d6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2270      	movs	r2, #112	; 0x70
 8004d80:	4393      	bics	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d009      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a10      	ldr	r2, [pc, #64]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10c      	bne.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	223d      	movs	r2, #61	; 0x3d
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	223c      	movs	r2, #60	; 0x3c
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b004      	add	sp, #16
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	223c      	movs	r2, #60	; 0x3c
 8004e12:	5c9b      	ldrb	r3, [r3, r2]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e03e      	b.n	8004e9a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223c      	movs	r2, #60	; 0x3c
 8004e20:	2101      	movs	r1, #1
 8004e22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	22ff      	movs	r2, #255	; 0xff
 8004e28:	4393      	bics	r3, r2
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004e38:	401a      	ands	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004e46:	401a      	ands	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004e54:	401a      	ands	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004e62:	401a      	ands	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004e70:	401a      	ands	r2, r3
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004e7e:	401a      	ands	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	223c      	movs	r2, #60	; 0x3c
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b004      	add	sp, #16
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	fffffcff 	.word	0xfffffcff
 8004ea8:	fffffbff 	.word	0xfffffbff
 8004eac:	fffff7ff 	.word	0xfffff7ff
 8004eb0:	ffffefff 	.word	0xffffefff
 8004eb4:	ffffdfff 	.word	0xffffdfff
 8004eb8:	ffffbfff 	.word	0xffffbfff

08004ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e044      	b.n	8004f58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2274      	movs	r2, #116	; 0x74
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fd fbd9 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2224      	movs	r2, #36	; 0x24
 8004eea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	438a      	bics	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f830 	bl	8004f64 <UART_SetConfig>
 8004f04:	0003      	movs	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e024      	b.n	8004f58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f9ab 	bl	8005274 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	490d      	ldr	r1, [pc, #52]	; (8004f60 <HAL_UART_Init+0xa4>)
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	212a      	movs	r1, #42	; 0x2a
 8004f3a:	438a      	bics	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 fa43 	bl	80053dc <UART_CheckIdleState>
 8004f56:	0003      	movs	r3, r0
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ffffb7ff 	.word	0xffffb7ff

08004f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6c:	231e      	movs	r3, #30
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4aaf      	ldr	r2, [pc, #700]	; (8005250 <UART_SetConfig+0x2ec>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4aaa      	ldr	r2, [pc, #680]	; (8005254 <UART_SetConfig+0x2f0>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4aa1      	ldr	r2, [pc, #644]	; (8005258 <UART_SetConfig+0x2f4>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a9d      	ldr	r2, [pc, #628]	; (800525c <UART_SetConfig+0x2f8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d127      	bne.n	800503a <UART_SetConfig+0xd6>
 8004fea:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <UART_SetConfig+0x2fc>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	2203      	movs	r2, #3
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d00d      	beq.n	8005012 <UART_SetConfig+0xae>
 8004ff6:	d81b      	bhi.n	8005030 <UART_SetConfig+0xcc>
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d014      	beq.n	8005026 <UART_SetConfig+0xc2>
 8004ffc:	d818      	bhi.n	8005030 <UART_SetConfig+0xcc>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <UART_SetConfig+0xa4>
 8005002:	2b01      	cmp	r3, #1
 8005004:	d00a      	beq.n	800501c <UART_SetConfig+0xb8>
 8005006:	e013      	b.n	8005030 <UART_SetConfig+0xcc>
 8005008:	231f      	movs	r3, #31
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e065      	b.n	80050de <UART_SetConfig+0x17a>
 8005012:	231f      	movs	r3, #31
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e060      	b.n	80050de <UART_SetConfig+0x17a>
 800501c:	231f      	movs	r3, #31
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2204      	movs	r2, #4
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e05b      	b.n	80050de <UART_SetConfig+0x17a>
 8005026:	231f      	movs	r3, #31
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2208      	movs	r2, #8
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e056      	b.n	80050de <UART_SetConfig+0x17a>
 8005030:	231f      	movs	r3, #31
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	2210      	movs	r2, #16
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e051      	b.n	80050de <UART_SetConfig+0x17a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a89      	ldr	r2, [pc, #548]	; (8005264 <UART_SetConfig+0x300>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d134      	bne.n	80050ae <UART_SetConfig+0x14a>
 8005044:	4b86      	ldr	r3, [pc, #536]	; (8005260 <UART_SetConfig+0x2fc>)
 8005046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005048:	23c0      	movs	r3, #192	; 0xc0
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	4013      	ands	r3, r2
 800504e:	22c0      	movs	r2, #192	; 0xc0
 8005050:	0292      	lsls	r2, r2, #10
 8005052:	4293      	cmp	r3, r2
 8005054:	d017      	beq.n	8005086 <UART_SetConfig+0x122>
 8005056:	22c0      	movs	r2, #192	; 0xc0
 8005058:	0292      	lsls	r2, r2, #10
 800505a:	4293      	cmp	r3, r2
 800505c:	d822      	bhi.n	80050a4 <UART_SetConfig+0x140>
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0292      	lsls	r2, r2, #10
 8005062:	4293      	cmp	r3, r2
 8005064:	d019      	beq.n	800509a <UART_SetConfig+0x136>
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	0292      	lsls	r2, r2, #10
 800506a:	4293      	cmp	r3, r2
 800506c:	d81a      	bhi.n	80050a4 <UART_SetConfig+0x140>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <UART_SetConfig+0x118>
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0252      	lsls	r2, r2, #9
 8005076:	4293      	cmp	r3, r2
 8005078:	d00a      	beq.n	8005090 <UART_SetConfig+0x12c>
 800507a:	e013      	b.n	80050a4 <UART_SetConfig+0x140>
 800507c:	231f      	movs	r3, #31
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e02b      	b.n	80050de <UART_SetConfig+0x17a>
 8005086:	231f      	movs	r3, #31
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2202      	movs	r2, #2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e026      	b.n	80050de <UART_SetConfig+0x17a>
 8005090:	231f      	movs	r3, #31
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2204      	movs	r2, #4
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e021      	b.n	80050de <UART_SetConfig+0x17a>
 800509a:	231f      	movs	r3, #31
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e01c      	b.n	80050de <UART_SetConfig+0x17a>
 80050a4:	231f      	movs	r3, #31
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	2210      	movs	r2, #16
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e017      	b.n	80050de <UART_SetConfig+0x17a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <UART_SetConfig+0x304>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d104      	bne.n	80050c2 <UART_SetConfig+0x15e>
 80050b8:	231f      	movs	r3, #31
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e00d      	b.n	80050de <UART_SetConfig+0x17a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a69      	ldr	r2, [pc, #420]	; (800526c <UART_SetConfig+0x308>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d104      	bne.n	80050d6 <UART_SetConfig+0x172>
 80050cc:	231f      	movs	r3, #31
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e003      	b.n	80050de <UART_SetConfig+0x17a>
 80050d6:	231f      	movs	r3, #31
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	2210      	movs	r2, #16
 80050dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d15d      	bne.n	80051a6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80050ea:	231f      	movs	r3, #31
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d015      	beq.n	8005120 <UART_SetConfig+0x1bc>
 80050f4:	dc18      	bgt.n	8005128 <UART_SetConfig+0x1c4>
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00d      	beq.n	8005116 <UART_SetConfig+0x1b2>
 80050fa:	dc15      	bgt.n	8005128 <UART_SetConfig+0x1c4>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <UART_SetConfig+0x1a2>
 8005100:	2b02      	cmp	r3, #2
 8005102:	d005      	beq.n	8005110 <UART_SetConfig+0x1ac>
 8005104:	e010      	b.n	8005128 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005106:	f7fe fad5 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 800510a:	0003      	movs	r3, r0
 800510c:	61bb      	str	r3, [r7, #24]
        break;
 800510e:	e012      	b.n	8005136 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b57      	ldr	r3, [pc, #348]	; (8005270 <UART_SetConfig+0x30c>)
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e00f      	b.n	8005136 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe fa43 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800511a:	0003      	movs	r3, r0
 800511c:	61bb      	str	r3, [r7, #24]
        break;
 800511e:	e00a      	b.n	8005136 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	61bb      	str	r3, [r7, #24]
        break;
 8005126:	e006      	b.n	8005136 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512c:	231e      	movs	r3, #30
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
        break;
 8005134:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d100      	bne.n	800513e <UART_SetConfig+0x1da>
 800513c:	e07b      	b.n	8005236 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	0019      	movs	r1, r3
 8005150:	0010      	movs	r0, r2
 8005152:	f7fa ffd9 	bl	8000108 <__udivsi3>
 8005156:	0003      	movs	r3, r0
 8005158:	b29b      	uxth	r3, r3
 800515a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d91c      	bls.n	800519c <UART_SetConfig+0x238>
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	025b      	lsls	r3, r3, #9
 8005168:	429a      	cmp	r2, r3
 800516a:	d217      	bcs.n	800519c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	b29a      	uxth	r2, r3
 8005170:	200e      	movs	r0, #14
 8005172:	183b      	adds	r3, r7, r0
 8005174:	210f      	movs	r1, #15
 8005176:	438a      	bics	r2, r1
 8005178:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	b29b      	uxth	r3, r3
 8005180:	2207      	movs	r2, #7
 8005182:	4013      	ands	r3, r2
 8005184:	b299      	uxth	r1, r3
 8005186:	183b      	adds	r3, r7, r0
 8005188:	183a      	adds	r2, r7, r0
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	183a      	adds	r2, r7, r0
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e04c      	b.n	8005236 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	231e      	movs	r3, #30
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e047      	b.n	8005236 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a6:	231f      	movs	r3, #31
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d015      	beq.n	80051dc <UART_SetConfig+0x278>
 80051b0:	dc18      	bgt.n	80051e4 <UART_SetConfig+0x280>
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d00d      	beq.n	80051d2 <UART_SetConfig+0x26e>
 80051b6:	dc15      	bgt.n	80051e4 <UART_SetConfig+0x280>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <UART_SetConfig+0x25e>
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d005      	beq.n	80051cc <UART_SetConfig+0x268>
 80051c0:	e010      	b.n	80051e4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c2:	f7fe fa77 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80051c6:	0003      	movs	r3, r0
 80051c8:	61bb      	str	r3, [r7, #24]
        break;
 80051ca:	e012      	b.n	80051f2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <UART_SetConfig+0x30c>)
 80051ce:	61bb      	str	r3, [r7, #24]
        break;
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d2:	f7fe f9e5 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80051d6:	0003      	movs	r3, r0
 80051d8:	61bb      	str	r3, [r7, #24]
        break;
 80051da:	e00a      	b.n	80051f2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	61bb      	str	r3, [r7, #24]
        break;
 80051e2:	e006      	b.n	80051f2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e8:	231e      	movs	r3, #30
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
        break;
 80051f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01e      	beq.n	8005236 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	085a      	lsrs	r2, r3, #1
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	18d2      	adds	r2, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0019      	movs	r1, r3
 8005208:	0010      	movs	r0, r2
 800520a:	f7fa ff7d 	bl	8000108 <__udivsi3>
 800520e:	0003      	movs	r3, r0
 8005210:	b29b      	uxth	r3, r3
 8005212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d909      	bls.n	800522e <UART_SetConfig+0x2ca>
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	025b      	lsls	r3, r3, #9
 8005220:	429a      	cmp	r2, r3
 8005222:	d204      	bcs.n	800522e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	60da      	str	r2, [r3, #12]
 800522c:	e003      	b.n	8005236 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800522e:	231e      	movs	r3, #30
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005242:	231e      	movs	r3, #30
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	781b      	ldrb	r3, [r3, #0]
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b008      	add	sp, #32
 800524e:	bd80      	pop	{r7, pc}
 8005250:	efff69f3 	.word	0xefff69f3
 8005254:	ffffcfff 	.word	0xffffcfff
 8005258:	fffff4ff 	.word	0xfffff4ff
 800525c:	40013800 	.word	0x40013800
 8005260:	40021000 	.word	0x40021000
 8005264:	40004400 	.word	0x40004400
 8005268:	40004800 	.word	0x40004800
 800526c:	40004c00 	.word	0x40004c00
 8005270:	007a1200 	.word	0x007a1200

08005274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2201      	movs	r2, #1
 8005282:	4013      	ands	r3, r2
 8005284:	d00b      	beq.n	800529e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <UART_AdvFeatureConfig+0x144>)
 800528e:	4013      	ands	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2202      	movs	r2, #2
 80052a4:	4013      	ands	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4a43      	ldr	r2, [pc, #268]	; (80053bc <UART_AdvFeatureConfig+0x148>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2204      	movs	r2, #4
 80052c6:	4013      	ands	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a3b      	ldr	r2, [pc, #236]	; (80053c0 <UART_AdvFeatureConfig+0x14c>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	0019      	movs	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2208      	movs	r2, #8
 80052e8:	4013      	ands	r3, r2
 80052ea:	d00b      	beq.n	8005304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <UART_AdvFeatureConfig+0x150>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2210      	movs	r2, #16
 800530a:	4013      	ands	r3, r2
 800530c:	d00b      	beq.n	8005326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a2c      	ldr	r2, [pc, #176]	; (80053c8 <UART_AdvFeatureConfig+0x154>)
 8005316:	4013      	ands	r3, r2
 8005318:	0019      	movs	r1, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2220      	movs	r2, #32
 800532c:	4013      	ands	r3, r2
 800532e:	d00b      	beq.n	8005348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	4a25      	ldr	r2, [pc, #148]	; (80053cc <UART_AdvFeatureConfig+0x158>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	4013      	ands	r3, r2
 8005350:	d01d      	beq.n	800538e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <UART_AdvFeatureConfig+0x15c>)
 800535a:	4013      	ands	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	035b      	lsls	r3, r3, #13
 8005372:	429a      	cmp	r2, r3
 8005374:	d10b      	bne.n	800538e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <UART_AdvFeatureConfig+0x160>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	4013      	ands	r3, r2
 8005396:	d00b      	beq.n	80053b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <UART_AdvFeatureConfig+0x164>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	fffdffff 	.word	0xfffdffff
 80053bc:	fffeffff 	.word	0xfffeffff
 80053c0:	fffbffff 	.word	0xfffbffff
 80053c4:	ffff7fff 	.word	0xffff7fff
 80053c8:	ffffefff 	.word	0xffffefff
 80053cc:	ffffdfff 	.word	0xffffdfff
 80053d0:	ffefffff 	.word	0xffefffff
 80053d4:	ff9fffff 	.word	0xff9fffff
 80053d8:	fff7ffff 	.word	0xfff7ffff

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2280      	movs	r2, #128	; 0x80
 80053e8:	2100      	movs	r1, #0
 80053ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fd fa24 	bl	8002838 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2208      	movs	r2, #8
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d10c      	bne.n	800541c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	0391      	lsls	r1, r2, #14
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <UART_CheckIdleState+0x8c>)
 800540c:	9200      	str	r2, [sp, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	f000 f82c 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8005414:	1e03      	subs	r3, r0, #0
 8005416:	d001      	beq.n	800541c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e021      	b.n	8005460 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2204      	movs	r2, #4
 8005424:	4013      	ands	r3, r2
 8005426:	2b04      	cmp	r3, #4
 8005428:	d10c      	bne.n	8005444 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	03d1      	lsls	r1, r2, #15
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <UART_CheckIdleState+0x8c>)
 8005434:	9200      	str	r2, [sp, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	f000 f818 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 800543c:	1e03      	subs	r3, r0, #0
 800543e:	d001      	beq.n	8005444 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e00d      	b.n	8005460 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2274      	movs	r2, #116	; 0x74
 800545a:	2100      	movs	r1, #0
 800545c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}
 8005468:	01ffffff 	.word	0x01ffffff

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b094      	sub	sp, #80	; 0x50
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	1dfb      	adds	r3, r7, #7
 800547a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e0a3      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005480:	3301      	adds	r3, #1
 8005482:	d100      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005484:	e09f      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fd f9d7 	bl	8002838 <HAL_GetTick>
 800548a:	0002      	movs	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 8005496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005498:	2b00      	cmp	r3, #0
 800549a:	d13d      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549c:	f3ef 8310 	mrs	r3, PRIMASK
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	2301      	movs	r3, #1
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	f383 8810 	msr	PRIMASK, r3
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	494c      	ldr	r1, [pc, #304]	; (80055f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80054be:	400a      	ands	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	643b      	str	r3, [r7, #64]	; 0x40
 80054d8:	2301      	movs	r3, #1
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	438a      	bics	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2274      	movs	r2, #116	; 0x74
 8005510:	2100      	movs	r1, #0
 8005512:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e067      	b.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2204      	movs	r2, #4
 8005520:	4013      	ands	r3, r2
 8005522:	d050      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	401a      	ands	r2, r3
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	429a      	cmp	r2, r3
 8005536:	d146      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2280      	movs	r2, #128	; 0x80
 800553e:	0112      	lsls	r2, r2, #4
 8005540:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005542:	f3ef 8310 	mrs	r3, PRIMASK
 8005546:	613b      	str	r3, [r7, #16]
  return(result);
 8005548:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f383 8810 	msr	PRIMASK, r3
}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4923      	ldr	r1, [pc, #140]	; (80055f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f383 8810 	msr	PRIMASK, r3
}
 8005572:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005574:	f3ef 8310 	mrs	r3, PRIMASK
 8005578:	61fb      	str	r3, [r7, #28]
  return(result);
 800557a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	64bb      	str	r3, [r7, #72]	; 0x48
 800557e:	2301      	movs	r3, #1
 8005580:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f383 8810 	msr	PRIMASK, r3
}
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2101      	movs	r1, #1
 8005596:	438a      	bics	r2, r1
 8005598:	609a      	str	r2, [r3, #8]
 800559a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	f383 8810 	msr	PRIMASK, r3
}
 80055a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	2120      	movs	r1, #32
 80055b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2274      	movs	r2, #116	; 0x74
 80055be:	2100      	movs	r1, #0
 80055c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e010      	b.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	425a      	negs	r2, r3
 80055d6:	4153      	adcs	r3, r2
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	001a      	movs	r2, r3
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d100      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80055e4:	e74b      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b014      	add	sp, #80	; 0x50
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	fffffe5f 	.word	0xfffffe5f

080055f4 <memset>:
 80055f4:	0003      	movs	r3, r0
 80055f6:	1882      	adds	r2, r0, r2
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d100      	bne.n	80055fe <memset+0xa>
 80055fc:	4770      	bx	lr
 80055fe:	7019      	strb	r1, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	e7f9      	b.n	80055f8 <memset+0x4>

08005604 <__libc_init_array>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	2600      	movs	r6, #0
 8005608:	4c0c      	ldr	r4, [pc, #48]	; (800563c <__libc_init_array+0x38>)
 800560a:	4d0d      	ldr	r5, [pc, #52]	; (8005640 <__libc_init_array+0x3c>)
 800560c:	1b64      	subs	r4, r4, r5
 800560e:	10a4      	asrs	r4, r4, #2
 8005610:	42a6      	cmp	r6, r4
 8005612:	d109      	bne.n	8005628 <__libc_init_array+0x24>
 8005614:	2600      	movs	r6, #0
 8005616:	f000 f819 	bl	800564c <_init>
 800561a:	4c0a      	ldr	r4, [pc, #40]	; (8005644 <__libc_init_array+0x40>)
 800561c:	4d0a      	ldr	r5, [pc, #40]	; (8005648 <__libc_init_array+0x44>)
 800561e:	1b64      	subs	r4, r4, r5
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	42a6      	cmp	r6, r4
 8005624:	d105      	bne.n	8005632 <__libc_init_array+0x2e>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	00b3      	lsls	r3, r6, #2
 800562a:	58eb      	ldr	r3, [r5, r3]
 800562c:	4798      	blx	r3
 800562e:	3601      	adds	r6, #1
 8005630:	e7ee      	b.n	8005610 <__libc_init_array+0xc>
 8005632:	00b3      	lsls	r3, r6, #2
 8005634:	58eb      	ldr	r3, [r5, r3]
 8005636:	4798      	blx	r3
 8005638:	3601      	adds	r6, #1
 800563a:	e7f2      	b.n	8005622 <__libc_init_array+0x1e>
 800563c:	080056e0 	.word	0x080056e0
 8005640:	080056e0 	.word	0x080056e0
 8005644:	080056e4 	.word	0x080056e4
 8005648:	080056e0 	.word	0x080056e0

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
