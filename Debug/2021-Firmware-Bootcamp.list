
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005220  08005220  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005220  08005220  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005220  08005220  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005234  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005234  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e119  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b8  00000000  00000000  0002e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00030ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c97  00000000  00000000  00031aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011316  00000000  00000000  0004b751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096d49  00000000  00000000  0005ca67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032b4  00000000  00000000  000f37b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f6a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005188 	.word	0x08005188

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005188 	.word	0x08005188

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 faa7 	bl	800177c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f9e1 	bl	80015fc <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fe58 	bl	8000ef8 <__aeabi_dsub>
 8000248:	f001 f9d8 	bl	80015fc <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dadd>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0004      	movs	r4, r0
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	001f      	movs	r7, r3
 800026a:	030b      	lsls	r3, r1, #12
 800026c:	0010      	movs	r0, r2
 800026e:	004e      	lsls	r6, r1, #1
 8000270:	0a5b      	lsrs	r3, r3, #9
 8000272:	0fcd      	lsrs	r5, r1, #31
 8000274:	0f61      	lsrs	r1, r4, #29
 8000276:	007a      	lsls	r2, r7, #1
 8000278:	4319      	orrs	r1, r3
 800027a:	00e3      	lsls	r3, r4, #3
 800027c:	033c      	lsls	r4, r7, #12
 800027e:	0fff      	lsrs	r7, r7, #31
 8000280:	46bc      	mov	ip, r7
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	0f47      	lsrs	r7, r0, #29
 8000286:	4327      	orrs	r7, r4
 8000288:	0d76      	lsrs	r6, r6, #21
 800028a:	0d52      	lsrs	r2, r2, #21
 800028c:	00c0      	lsls	r0, r0, #3
 800028e:	46b9      	mov	r9, r7
 8000290:	4680      	mov	r8, r0
 8000292:	1ab7      	subs	r7, r6, r2
 8000294:	4565      	cmp	r5, ip
 8000296:	d100      	bne.n	800029a <__aeabi_dadd+0x3e>
 8000298:	e09b      	b.n	80003d2 <__aeabi_dadd+0x176>
 800029a:	2f00      	cmp	r7, #0
 800029c:	dc00      	bgt.n	80002a0 <__aeabi_dadd+0x44>
 800029e:	e084      	b.n	80003aa <__aeabi_dadd+0x14e>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d100      	bne.n	80002a6 <__aeabi_dadd+0x4a>
 80002a4:	e0be      	b.n	8000424 <__aeabi_dadd+0x1c8>
 80002a6:	4ac8      	ldr	r2, [pc, #800]	; (80005c8 <__aeabi_dadd+0x36c>)
 80002a8:	4296      	cmp	r6, r2
 80002aa:	d100      	bne.n	80002ae <__aeabi_dadd+0x52>
 80002ac:	e124      	b.n	80004f8 <__aeabi_dadd+0x29c>
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	464c      	mov	r4, r9
 80002b2:	0412      	lsls	r2, r2, #16
 80002b4:	4314      	orrs	r4, r2
 80002b6:	46a1      	mov	r9, r4
 80002b8:	2f38      	cmp	r7, #56	; 0x38
 80002ba:	dd00      	ble.n	80002be <__aeabi_dadd+0x62>
 80002bc:	e167      	b.n	800058e <__aeabi_dadd+0x332>
 80002be:	2f1f      	cmp	r7, #31
 80002c0:	dd00      	ble.n	80002c4 <__aeabi_dadd+0x68>
 80002c2:	e1d6      	b.n	8000672 <__aeabi_dadd+0x416>
 80002c4:	2220      	movs	r2, #32
 80002c6:	464c      	mov	r4, r9
 80002c8:	1bd2      	subs	r2, r2, r7
 80002ca:	4094      	lsls	r4, r2
 80002cc:	46a2      	mov	sl, r4
 80002ce:	4644      	mov	r4, r8
 80002d0:	40fc      	lsrs	r4, r7
 80002d2:	0020      	movs	r0, r4
 80002d4:	4654      	mov	r4, sl
 80002d6:	4304      	orrs	r4, r0
 80002d8:	4640      	mov	r0, r8
 80002da:	4090      	lsls	r0, r2
 80002dc:	1e42      	subs	r2, r0, #1
 80002de:	4190      	sbcs	r0, r2
 80002e0:	464a      	mov	r2, r9
 80002e2:	40fa      	lsrs	r2, r7
 80002e4:	4304      	orrs	r4, r0
 80002e6:	1a89      	subs	r1, r1, r2
 80002e8:	1b1c      	subs	r4, r3, r4
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	4192      	sbcs	r2, r2
 80002ee:	4252      	negs	r2, r2
 80002f0:	1a8b      	subs	r3, r1, r2
 80002f2:	469a      	mov	sl, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	021b      	lsls	r3, r3, #8
 80002f8:	d400      	bmi.n	80002fc <__aeabi_dadd+0xa0>
 80002fa:	e0d4      	b.n	80004a6 <__aeabi_dadd+0x24a>
 80002fc:	4653      	mov	r3, sl
 80002fe:	025a      	lsls	r2, r3, #9
 8000300:	0a53      	lsrs	r3, r2, #9
 8000302:	469a      	mov	sl, r3
 8000304:	4653      	mov	r3, sl
 8000306:	2b00      	cmp	r3, #0
 8000308:	d100      	bne.n	800030c <__aeabi_dadd+0xb0>
 800030a:	e104      	b.n	8000516 <__aeabi_dadd+0x2ba>
 800030c:	4650      	mov	r0, sl
 800030e:	f001 fa3f 	bl	8001790 <__clzsi2>
 8000312:	0003      	movs	r3, r0
 8000314:	3b08      	subs	r3, #8
 8000316:	2220      	movs	r2, #32
 8000318:	0020      	movs	r0, r4
 800031a:	1ad2      	subs	r2, r2, r3
 800031c:	4651      	mov	r1, sl
 800031e:	40d0      	lsrs	r0, r2
 8000320:	4099      	lsls	r1, r3
 8000322:	0002      	movs	r2, r0
 8000324:	409c      	lsls	r4, r3
 8000326:	430a      	orrs	r2, r1
 8000328:	42b3      	cmp	r3, r6
 800032a:	da00      	bge.n	800032e <__aeabi_dadd+0xd2>
 800032c:	e102      	b.n	8000534 <__aeabi_dadd+0x2d8>
 800032e:	1b9b      	subs	r3, r3, r6
 8000330:	1c59      	adds	r1, r3, #1
 8000332:	291f      	cmp	r1, #31
 8000334:	dd00      	ble.n	8000338 <__aeabi_dadd+0xdc>
 8000336:	e0a7      	b.n	8000488 <__aeabi_dadd+0x22c>
 8000338:	2320      	movs	r3, #32
 800033a:	0010      	movs	r0, r2
 800033c:	0026      	movs	r6, r4
 800033e:	1a5b      	subs	r3, r3, r1
 8000340:	409c      	lsls	r4, r3
 8000342:	4098      	lsls	r0, r3
 8000344:	40ce      	lsrs	r6, r1
 8000346:	40ca      	lsrs	r2, r1
 8000348:	1e63      	subs	r3, r4, #1
 800034a:	419c      	sbcs	r4, r3
 800034c:	4330      	orrs	r0, r6
 800034e:	4692      	mov	sl, r2
 8000350:	2600      	movs	r6, #0
 8000352:	4304      	orrs	r4, r0
 8000354:	0763      	lsls	r3, r4, #29
 8000356:	d009      	beq.n	800036c <__aeabi_dadd+0x110>
 8000358:	230f      	movs	r3, #15
 800035a:	4023      	ands	r3, r4
 800035c:	2b04      	cmp	r3, #4
 800035e:	d005      	beq.n	800036c <__aeabi_dadd+0x110>
 8000360:	1d23      	adds	r3, r4, #4
 8000362:	42a3      	cmp	r3, r4
 8000364:	41a4      	sbcs	r4, r4
 8000366:	4264      	negs	r4, r4
 8000368:	44a2      	add	sl, r4
 800036a:	001c      	movs	r4, r3
 800036c:	4653      	mov	r3, sl
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	d400      	bmi.n	8000374 <__aeabi_dadd+0x118>
 8000372:	e09b      	b.n	80004ac <__aeabi_dadd+0x250>
 8000374:	4b94      	ldr	r3, [pc, #592]	; (80005c8 <__aeabi_dadd+0x36c>)
 8000376:	3601      	adds	r6, #1
 8000378:	429e      	cmp	r6, r3
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x122>
 800037c:	e0b8      	b.n	80004f0 <__aeabi_dadd+0x294>
 800037e:	4653      	mov	r3, sl
 8000380:	4992      	ldr	r1, [pc, #584]	; (80005cc <__aeabi_dadd+0x370>)
 8000382:	08e4      	lsrs	r4, r4, #3
 8000384:	400b      	ands	r3, r1
 8000386:	0019      	movs	r1, r3
 8000388:	075b      	lsls	r3, r3, #29
 800038a:	4323      	orrs	r3, r4
 800038c:	0572      	lsls	r2, r6, #21
 800038e:	024c      	lsls	r4, r1, #9
 8000390:	0b24      	lsrs	r4, r4, #12
 8000392:	0d52      	lsrs	r2, r2, #21
 8000394:	0512      	lsls	r2, r2, #20
 8000396:	07ed      	lsls	r5, r5, #31
 8000398:	4322      	orrs	r2, r4
 800039a:	432a      	orrs	r2, r5
 800039c:	0018      	movs	r0, r3
 800039e:	0011      	movs	r1, r2
 80003a0:	bce0      	pop	{r5, r6, r7}
 80003a2:	46ba      	mov	sl, r7
 80003a4:	46b1      	mov	r9, r6
 80003a6:	46a8      	mov	r8, r5
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	2f00      	cmp	r7, #0
 80003ac:	d048      	beq.n	8000440 <__aeabi_dadd+0x1e4>
 80003ae:	1b97      	subs	r7, r2, r6
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_dadd+0x15a>
 80003b4:	e10e      	b.n	80005d4 <__aeabi_dadd+0x378>
 80003b6:	000c      	movs	r4, r1
 80003b8:	431c      	orrs	r4, r3
 80003ba:	d100      	bne.n	80003be <__aeabi_dadd+0x162>
 80003bc:	e1b7      	b.n	800072e <__aeabi_dadd+0x4d2>
 80003be:	1e7c      	subs	r4, r7, #1
 80003c0:	2f01      	cmp	r7, #1
 80003c2:	d100      	bne.n	80003c6 <__aeabi_dadd+0x16a>
 80003c4:	e226      	b.n	8000814 <__aeabi_dadd+0x5b8>
 80003c6:	4d80      	ldr	r5, [pc, #512]	; (80005c8 <__aeabi_dadd+0x36c>)
 80003c8:	42af      	cmp	r7, r5
 80003ca:	d100      	bne.n	80003ce <__aeabi_dadd+0x172>
 80003cc:	e1d5      	b.n	800077a <__aeabi_dadd+0x51e>
 80003ce:	0027      	movs	r7, r4
 80003d0:	e107      	b.n	80005e2 <__aeabi_dadd+0x386>
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	dc00      	bgt.n	80003d8 <__aeabi_dadd+0x17c>
 80003d6:	e0b2      	b.n	800053e <__aeabi_dadd+0x2e2>
 80003d8:	2a00      	cmp	r2, #0
 80003da:	d047      	beq.n	800046c <__aeabi_dadd+0x210>
 80003dc:	4a7a      	ldr	r2, [pc, #488]	; (80005c8 <__aeabi_dadd+0x36c>)
 80003de:	4296      	cmp	r6, r2
 80003e0:	d100      	bne.n	80003e4 <__aeabi_dadd+0x188>
 80003e2:	e089      	b.n	80004f8 <__aeabi_dadd+0x29c>
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	464c      	mov	r4, r9
 80003e8:	0412      	lsls	r2, r2, #16
 80003ea:	4314      	orrs	r4, r2
 80003ec:	46a1      	mov	r9, r4
 80003ee:	2f38      	cmp	r7, #56	; 0x38
 80003f0:	dc6b      	bgt.n	80004ca <__aeabi_dadd+0x26e>
 80003f2:	2f1f      	cmp	r7, #31
 80003f4:	dc00      	bgt.n	80003f8 <__aeabi_dadd+0x19c>
 80003f6:	e16e      	b.n	80006d6 <__aeabi_dadd+0x47a>
 80003f8:	003a      	movs	r2, r7
 80003fa:	4648      	mov	r0, r9
 80003fc:	3a20      	subs	r2, #32
 80003fe:	40d0      	lsrs	r0, r2
 8000400:	4684      	mov	ip, r0
 8000402:	2f20      	cmp	r7, #32
 8000404:	d007      	beq.n	8000416 <__aeabi_dadd+0x1ba>
 8000406:	2240      	movs	r2, #64	; 0x40
 8000408:	4648      	mov	r0, r9
 800040a:	1bd2      	subs	r2, r2, r7
 800040c:	4090      	lsls	r0, r2
 800040e:	0002      	movs	r2, r0
 8000410:	4640      	mov	r0, r8
 8000412:	4310      	orrs	r0, r2
 8000414:	4680      	mov	r8, r0
 8000416:	4640      	mov	r0, r8
 8000418:	1e42      	subs	r2, r0, #1
 800041a:	4190      	sbcs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	0004      	movs	r4, r0
 8000420:	4314      	orrs	r4, r2
 8000422:	e057      	b.n	80004d4 <__aeabi_dadd+0x278>
 8000424:	464a      	mov	r2, r9
 8000426:	4302      	orrs	r2, r0
 8000428:	d100      	bne.n	800042c <__aeabi_dadd+0x1d0>
 800042a:	e103      	b.n	8000634 <__aeabi_dadd+0x3d8>
 800042c:	1e7a      	subs	r2, r7, #1
 800042e:	2f01      	cmp	r7, #1
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x1d8>
 8000432:	e193      	b.n	800075c <__aeabi_dadd+0x500>
 8000434:	4c64      	ldr	r4, [pc, #400]	; (80005c8 <__aeabi_dadd+0x36c>)
 8000436:	42a7      	cmp	r7, r4
 8000438:	d100      	bne.n	800043c <__aeabi_dadd+0x1e0>
 800043a:	e18a      	b.n	8000752 <__aeabi_dadd+0x4f6>
 800043c:	0017      	movs	r7, r2
 800043e:	e73b      	b.n	80002b8 <__aeabi_dadd+0x5c>
 8000440:	4c63      	ldr	r4, [pc, #396]	; (80005d0 <__aeabi_dadd+0x374>)
 8000442:	1c72      	adds	r2, r6, #1
 8000444:	4222      	tst	r2, r4
 8000446:	d000      	beq.n	800044a <__aeabi_dadd+0x1ee>
 8000448:	e0e0      	b.n	800060c <__aeabi_dadd+0x3b0>
 800044a:	000a      	movs	r2, r1
 800044c:	431a      	orrs	r2, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d000      	beq.n	8000454 <__aeabi_dadd+0x1f8>
 8000452:	e174      	b.n	800073e <__aeabi_dadd+0x4e2>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x1fe>
 8000458:	e1d0      	b.n	80007fc <__aeabi_dadd+0x5a0>
 800045a:	464a      	mov	r2, r9
 800045c:	4302      	orrs	r2, r0
 800045e:	d000      	beq.n	8000462 <__aeabi_dadd+0x206>
 8000460:	e1e3      	b.n	800082a <__aeabi_dadd+0x5ce>
 8000462:	074a      	lsls	r2, r1, #29
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	4313      	orrs	r3, r2
 8000468:	08c9      	lsrs	r1, r1, #3
 800046a:	e029      	b.n	80004c0 <__aeabi_dadd+0x264>
 800046c:	464a      	mov	r2, r9
 800046e:	4302      	orrs	r2, r0
 8000470:	d100      	bne.n	8000474 <__aeabi_dadd+0x218>
 8000472:	e17d      	b.n	8000770 <__aeabi_dadd+0x514>
 8000474:	1e7a      	subs	r2, r7, #1
 8000476:	2f01      	cmp	r7, #1
 8000478:	d100      	bne.n	800047c <__aeabi_dadd+0x220>
 800047a:	e0e0      	b.n	800063e <__aeabi_dadd+0x3e2>
 800047c:	4c52      	ldr	r4, [pc, #328]	; (80005c8 <__aeabi_dadd+0x36c>)
 800047e:	42a7      	cmp	r7, r4
 8000480:	d100      	bne.n	8000484 <__aeabi_dadd+0x228>
 8000482:	e166      	b.n	8000752 <__aeabi_dadd+0x4f6>
 8000484:	0017      	movs	r7, r2
 8000486:	e7b2      	b.n	80003ee <__aeabi_dadd+0x192>
 8000488:	0010      	movs	r0, r2
 800048a:	3b1f      	subs	r3, #31
 800048c:	40d8      	lsrs	r0, r3
 800048e:	2920      	cmp	r1, #32
 8000490:	d003      	beq.n	800049a <__aeabi_dadd+0x23e>
 8000492:	2340      	movs	r3, #64	; 0x40
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	409a      	lsls	r2, r3
 8000498:	4314      	orrs	r4, r2
 800049a:	1e63      	subs	r3, r4, #1
 800049c:	419c      	sbcs	r4, r3
 800049e:	2300      	movs	r3, #0
 80004a0:	2600      	movs	r6, #0
 80004a2:	469a      	mov	sl, r3
 80004a4:	4304      	orrs	r4, r0
 80004a6:	0763      	lsls	r3, r4, #29
 80004a8:	d000      	beq.n	80004ac <__aeabi_dadd+0x250>
 80004aa:	e755      	b.n	8000358 <__aeabi_dadd+0xfc>
 80004ac:	4652      	mov	r2, sl
 80004ae:	08e3      	lsrs	r3, r4, #3
 80004b0:	0752      	lsls	r2, r2, #29
 80004b2:	4313      	orrs	r3, r2
 80004b4:	4652      	mov	r2, sl
 80004b6:	0037      	movs	r7, r6
 80004b8:	08d1      	lsrs	r1, r2, #3
 80004ba:	4a43      	ldr	r2, [pc, #268]	; (80005c8 <__aeabi_dadd+0x36c>)
 80004bc:	4297      	cmp	r7, r2
 80004be:	d01f      	beq.n	8000500 <__aeabi_dadd+0x2a4>
 80004c0:	0309      	lsls	r1, r1, #12
 80004c2:	057a      	lsls	r2, r7, #21
 80004c4:	0b0c      	lsrs	r4, r1, #12
 80004c6:	0d52      	lsrs	r2, r2, #21
 80004c8:	e764      	b.n	8000394 <__aeabi_dadd+0x138>
 80004ca:	4642      	mov	r2, r8
 80004cc:	464c      	mov	r4, r9
 80004ce:	4314      	orrs	r4, r2
 80004d0:	1e62      	subs	r2, r4, #1
 80004d2:	4194      	sbcs	r4, r2
 80004d4:	18e4      	adds	r4, r4, r3
 80004d6:	429c      	cmp	r4, r3
 80004d8:	4192      	sbcs	r2, r2
 80004da:	4252      	negs	r2, r2
 80004dc:	4692      	mov	sl, r2
 80004de:	448a      	add	sl, r1
 80004e0:	4653      	mov	r3, sl
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	d5df      	bpl.n	80004a6 <__aeabi_dadd+0x24a>
 80004e6:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <__aeabi_dadd+0x36c>)
 80004e8:	3601      	adds	r6, #1
 80004ea:	429e      	cmp	r6, r3
 80004ec:	d000      	beq.n	80004f0 <__aeabi_dadd+0x294>
 80004ee:	e0b3      	b.n	8000658 <__aeabi_dadd+0x3fc>
 80004f0:	0032      	movs	r2, r6
 80004f2:	2400      	movs	r4, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	e74d      	b.n	8000394 <__aeabi_dadd+0x138>
 80004f8:	074a      	lsls	r2, r1, #29
 80004fa:	08db      	lsrs	r3, r3, #3
 80004fc:	4313      	orrs	r3, r2
 80004fe:	08c9      	lsrs	r1, r1, #3
 8000500:	001a      	movs	r2, r3
 8000502:	430a      	orrs	r2, r1
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x2ac>
 8000506:	e200      	b.n	800090a <__aeabi_dadd+0x6ae>
 8000508:	2480      	movs	r4, #128	; 0x80
 800050a:	0324      	lsls	r4, r4, #12
 800050c:	430c      	orrs	r4, r1
 800050e:	0324      	lsls	r4, r4, #12
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <__aeabi_dadd+0x36c>)
 8000512:	0b24      	lsrs	r4, r4, #12
 8000514:	e73e      	b.n	8000394 <__aeabi_dadd+0x138>
 8000516:	0020      	movs	r0, r4
 8000518:	f001 f93a 	bl	8001790 <__clzsi2>
 800051c:	0003      	movs	r3, r0
 800051e:	3318      	adds	r3, #24
 8000520:	2b1f      	cmp	r3, #31
 8000522:	dc00      	bgt.n	8000526 <__aeabi_dadd+0x2ca>
 8000524:	e6f7      	b.n	8000316 <__aeabi_dadd+0xba>
 8000526:	0022      	movs	r2, r4
 8000528:	3808      	subs	r0, #8
 800052a:	4082      	lsls	r2, r0
 800052c:	2400      	movs	r4, #0
 800052e:	42b3      	cmp	r3, r6
 8000530:	db00      	blt.n	8000534 <__aeabi_dadd+0x2d8>
 8000532:	e6fc      	b.n	800032e <__aeabi_dadd+0xd2>
 8000534:	1af6      	subs	r6, r6, r3
 8000536:	4b25      	ldr	r3, [pc, #148]	; (80005cc <__aeabi_dadd+0x370>)
 8000538:	401a      	ands	r2, r3
 800053a:	4692      	mov	sl, r2
 800053c:	e70a      	b.n	8000354 <__aeabi_dadd+0xf8>
 800053e:	2f00      	cmp	r7, #0
 8000540:	d02b      	beq.n	800059a <__aeabi_dadd+0x33e>
 8000542:	1b97      	subs	r7, r2, r6
 8000544:	2e00      	cmp	r6, #0
 8000546:	d100      	bne.n	800054a <__aeabi_dadd+0x2ee>
 8000548:	e0b8      	b.n	80006bc <__aeabi_dadd+0x460>
 800054a:	4c1f      	ldr	r4, [pc, #124]	; (80005c8 <__aeabi_dadd+0x36c>)
 800054c:	42a2      	cmp	r2, r4
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x2f6>
 8000550:	e11c      	b.n	800078c <__aeabi_dadd+0x530>
 8000552:	2480      	movs	r4, #128	; 0x80
 8000554:	0424      	lsls	r4, r4, #16
 8000556:	4321      	orrs	r1, r4
 8000558:	2f38      	cmp	r7, #56	; 0x38
 800055a:	dd00      	ble.n	800055e <__aeabi_dadd+0x302>
 800055c:	e11e      	b.n	800079c <__aeabi_dadd+0x540>
 800055e:	2f1f      	cmp	r7, #31
 8000560:	dd00      	ble.n	8000564 <__aeabi_dadd+0x308>
 8000562:	e19e      	b.n	80008a2 <__aeabi_dadd+0x646>
 8000564:	2620      	movs	r6, #32
 8000566:	000c      	movs	r4, r1
 8000568:	1bf6      	subs	r6, r6, r7
 800056a:	0018      	movs	r0, r3
 800056c:	40b3      	lsls	r3, r6
 800056e:	40b4      	lsls	r4, r6
 8000570:	40f8      	lsrs	r0, r7
 8000572:	1e5e      	subs	r6, r3, #1
 8000574:	41b3      	sbcs	r3, r6
 8000576:	40f9      	lsrs	r1, r7
 8000578:	4304      	orrs	r4, r0
 800057a:	431c      	orrs	r4, r3
 800057c:	4489      	add	r9, r1
 800057e:	4444      	add	r4, r8
 8000580:	4544      	cmp	r4, r8
 8000582:	419b      	sbcs	r3, r3
 8000584:	425b      	negs	r3, r3
 8000586:	444b      	add	r3, r9
 8000588:	469a      	mov	sl, r3
 800058a:	0016      	movs	r6, r2
 800058c:	e7a8      	b.n	80004e0 <__aeabi_dadd+0x284>
 800058e:	4642      	mov	r2, r8
 8000590:	464c      	mov	r4, r9
 8000592:	4314      	orrs	r4, r2
 8000594:	1e62      	subs	r2, r4, #1
 8000596:	4194      	sbcs	r4, r2
 8000598:	e6a6      	b.n	80002e8 <__aeabi_dadd+0x8c>
 800059a:	4c0d      	ldr	r4, [pc, #52]	; (80005d0 <__aeabi_dadd+0x374>)
 800059c:	1c72      	adds	r2, r6, #1
 800059e:	4222      	tst	r2, r4
 80005a0:	d000      	beq.n	80005a4 <__aeabi_dadd+0x348>
 80005a2:	e0a8      	b.n	80006f6 <__aeabi_dadd+0x49a>
 80005a4:	000a      	movs	r2, r1
 80005a6:	431a      	orrs	r2, r3
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x352>
 80005ac:	e10a      	b.n	80007c4 <__aeabi_dadd+0x568>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dadd+0x358>
 80005b2:	e15e      	b.n	8000872 <__aeabi_dadd+0x616>
 80005b4:	464a      	mov	r2, r9
 80005b6:	4302      	orrs	r2, r0
 80005b8:	d000      	beq.n	80005bc <__aeabi_dadd+0x360>
 80005ba:	e161      	b.n	8000880 <__aeabi_dadd+0x624>
 80005bc:	074a      	lsls	r2, r1, #29
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	08c9      	lsrs	r1, r1, #3
 80005c4:	e77c      	b.n	80004c0 <__aeabi_dadd+0x264>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	000007ff 	.word	0x000007ff
 80005cc:	ff7fffff 	.word	0xff7fffff
 80005d0:	000007fe 	.word	0x000007fe
 80005d4:	4ccf      	ldr	r4, [pc, #828]	; (8000914 <__aeabi_dadd+0x6b8>)
 80005d6:	42a2      	cmp	r2, r4
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x380>
 80005da:	e0ce      	b.n	800077a <__aeabi_dadd+0x51e>
 80005dc:	2480      	movs	r4, #128	; 0x80
 80005de:	0424      	lsls	r4, r4, #16
 80005e0:	4321      	orrs	r1, r4
 80005e2:	2f38      	cmp	r7, #56	; 0x38
 80005e4:	dc5b      	bgt.n	800069e <__aeabi_dadd+0x442>
 80005e6:	2f1f      	cmp	r7, #31
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x390>
 80005ea:	e0dc      	b.n	80007a6 <__aeabi_dadd+0x54a>
 80005ec:	2520      	movs	r5, #32
 80005ee:	000c      	movs	r4, r1
 80005f0:	1bed      	subs	r5, r5, r7
 80005f2:	001e      	movs	r6, r3
 80005f4:	40ab      	lsls	r3, r5
 80005f6:	40ac      	lsls	r4, r5
 80005f8:	40fe      	lsrs	r6, r7
 80005fa:	1e5d      	subs	r5, r3, #1
 80005fc:	41ab      	sbcs	r3, r5
 80005fe:	4334      	orrs	r4, r6
 8000600:	40f9      	lsrs	r1, r7
 8000602:	431c      	orrs	r4, r3
 8000604:	464b      	mov	r3, r9
 8000606:	1a5b      	subs	r3, r3, r1
 8000608:	4699      	mov	r9, r3
 800060a:	e04c      	b.n	80006a6 <__aeabi_dadd+0x44a>
 800060c:	464a      	mov	r2, r9
 800060e:	1a1c      	subs	r4, r3, r0
 8000610:	1a88      	subs	r0, r1, r2
 8000612:	42a3      	cmp	r3, r4
 8000614:	4192      	sbcs	r2, r2
 8000616:	4252      	negs	r2, r2
 8000618:	4692      	mov	sl, r2
 800061a:	0002      	movs	r2, r0
 800061c:	4650      	mov	r0, sl
 800061e:	1a12      	subs	r2, r2, r0
 8000620:	4692      	mov	sl, r2
 8000622:	0212      	lsls	r2, r2, #8
 8000624:	d478      	bmi.n	8000718 <__aeabi_dadd+0x4bc>
 8000626:	4653      	mov	r3, sl
 8000628:	4323      	orrs	r3, r4
 800062a:	d000      	beq.n	800062e <__aeabi_dadd+0x3d2>
 800062c:	e66a      	b.n	8000304 <__aeabi_dadd+0xa8>
 800062e:	2100      	movs	r1, #0
 8000630:	2500      	movs	r5, #0
 8000632:	e745      	b.n	80004c0 <__aeabi_dadd+0x264>
 8000634:	074a      	lsls	r2, r1, #29
 8000636:	08db      	lsrs	r3, r3, #3
 8000638:	4313      	orrs	r3, r2
 800063a:	08c9      	lsrs	r1, r1, #3
 800063c:	e73d      	b.n	80004ba <__aeabi_dadd+0x25e>
 800063e:	181c      	adds	r4, r3, r0
 8000640:	429c      	cmp	r4, r3
 8000642:	419b      	sbcs	r3, r3
 8000644:	4449      	add	r1, r9
 8000646:	468a      	mov	sl, r1
 8000648:	425b      	negs	r3, r3
 800064a:	449a      	add	sl, r3
 800064c:	4653      	mov	r3, sl
 800064e:	2601      	movs	r6, #1
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	d400      	bmi.n	8000656 <__aeabi_dadd+0x3fa>
 8000654:	e727      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000656:	2602      	movs	r6, #2
 8000658:	4652      	mov	r2, sl
 800065a:	4baf      	ldr	r3, [pc, #700]	; (8000918 <__aeabi_dadd+0x6bc>)
 800065c:	2101      	movs	r1, #1
 800065e:	401a      	ands	r2, r3
 8000660:	0013      	movs	r3, r2
 8000662:	4021      	ands	r1, r4
 8000664:	0862      	lsrs	r2, r4, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	07dc      	lsls	r4, r3, #31
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	469a      	mov	sl, r3
 800066e:	4314      	orrs	r4, r2
 8000670:	e670      	b.n	8000354 <__aeabi_dadd+0xf8>
 8000672:	003a      	movs	r2, r7
 8000674:	464c      	mov	r4, r9
 8000676:	3a20      	subs	r2, #32
 8000678:	40d4      	lsrs	r4, r2
 800067a:	46a4      	mov	ip, r4
 800067c:	2f20      	cmp	r7, #32
 800067e:	d007      	beq.n	8000690 <__aeabi_dadd+0x434>
 8000680:	2240      	movs	r2, #64	; 0x40
 8000682:	4648      	mov	r0, r9
 8000684:	1bd2      	subs	r2, r2, r7
 8000686:	4090      	lsls	r0, r2
 8000688:	0002      	movs	r2, r0
 800068a:	4640      	mov	r0, r8
 800068c:	4310      	orrs	r0, r2
 800068e:	4680      	mov	r8, r0
 8000690:	4640      	mov	r0, r8
 8000692:	1e42      	subs	r2, r0, #1
 8000694:	4190      	sbcs	r0, r2
 8000696:	4662      	mov	r2, ip
 8000698:	0004      	movs	r4, r0
 800069a:	4314      	orrs	r4, r2
 800069c:	e624      	b.n	80002e8 <__aeabi_dadd+0x8c>
 800069e:	4319      	orrs	r1, r3
 80006a0:	000c      	movs	r4, r1
 80006a2:	1e63      	subs	r3, r4, #1
 80006a4:	419c      	sbcs	r4, r3
 80006a6:	4643      	mov	r3, r8
 80006a8:	1b1c      	subs	r4, r3, r4
 80006aa:	45a0      	cmp	r8, r4
 80006ac:	419b      	sbcs	r3, r3
 80006ae:	4649      	mov	r1, r9
 80006b0:	425b      	negs	r3, r3
 80006b2:	1acb      	subs	r3, r1, r3
 80006b4:	469a      	mov	sl, r3
 80006b6:	4665      	mov	r5, ip
 80006b8:	0016      	movs	r6, r2
 80006ba:	e61b      	b.n	80002f4 <__aeabi_dadd+0x98>
 80006bc:	000c      	movs	r4, r1
 80006be:	431c      	orrs	r4, r3
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x468>
 80006c2:	e0c7      	b.n	8000854 <__aeabi_dadd+0x5f8>
 80006c4:	1e7c      	subs	r4, r7, #1
 80006c6:	2f01      	cmp	r7, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x470>
 80006ca:	e0f9      	b.n	80008c0 <__aeabi_dadd+0x664>
 80006cc:	4e91      	ldr	r6, [pc, #580]	; (8000914 <__aeabi_dadd+0x6b8>)
 80006ce:	42b7      	cmp	r7, r6
 80006d0:	d05c      	beq.n	800078c <__aeabi_dadd+0x530>
 80006d2:	0027      	movs	r7, r4
 80006d4:	e740      	b.n	8000558 <__aeabi_dadd+0x2fc>
 80006d6:	2220      	movs	r2, #32
 80006d8:	464c      	mov	r4, r9
 80006da:	4640      	mov	r0, r8
 80006dc:	1bd2      	subs	r2, r2, r7
 80006de:	4094      	lsls	r4, r2
 80006e0:	40f8      	lsrs	r0, r7
 80006e2:	4304      	orrs	r4, r0
 80006e4:	4640      	mov	r0, r8
 80006e6:	4090      	lsls	r0, r2
 80006e8:	1e42      	subs	r2, r0, #1
 80006ea:	4190      	sbcs	r0, r2
 80006ec:	464a      	mov	r2, r9
 80006ee:	40fa      	lsrs	r2, r7
 80006f0:	4304      	orrs	r4, r0
 80006f2:	1889      	adds	r1, r1, r2
 80006f4:	e6ee      	b.n	80004d4 <__aeabi_dadd+0x278>
 80006f6:	4c87      	ldr	r4, [pc, #540]	; (8000914 <__aeabi_dadd+0x6b8>)
 80006f8:	42a2      	cmp	r2, r4
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x4a2>
 80006fc:	e6f9      	b.n	80004f2 <__aeabi_dadd+0x296>
 80006fe:	1818      	adds	r0, r3, r0
 8000700:	4298      	cmp	r0, r3
 8000702:	419b      	sbcs	r3, r3
 8000704:	4449      	add	r1, r9
 8000706:	425b      	negs	r3, r3
 8000708:	18cb      	adds	r3, r1, r3
 800070a:	07dc      	lsls	r4, r3, #31
 800070c:	0840      	lsrs	r0, r0, #1
 800070e:	085b      	lsrs	r3, r3, #1
 8000710:	469a      	mov	sl, r3
 8000712:	0016      	movs	r6, r2
 8000714:	4304      	orrs	r4, r0
 8000716:	e6c6      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000718:	4642      	mov	r2, r8
 800071a:	1ad4      	subs	r4, r2, r3
 800071c:	45a0      	cmp	r8, r4
 800071e:	4180      	sbcs	r0, r0
 8000720:	464b      	mov	r3, r9
 8000722:	4240      	negs	r0, r0
 8000724:	1a59      	subs	r1, r3, r1
 8000726:	1a0b      	subs	r3, r1, r0
 8000728:	469a      	mov	sl, r3
 800072a:	4665      	mov	r5, ip
 800072c:	e5ea      	b.n	8000304 <__aeabi_dadd+0xa8>
 800072e:	464b      	mov	r3, r9
 8000730:	464a      	mov	r2, r9
 8000732:	08c0      	lsrs	r0, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	4665      	mov	r5, ip
 8000738:	4303      	orrs	r3, r0
 800073a:	08d1      	lsrs	r1, r2, #3
 800073c:	e6bd      	b.n	80004ba <__aeabi_dadd+0x25e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_dadd+0x4e8>
 8000742:	e08e      	b.n	8000862 <__aeabi_dadd+0x606>
 8000744:	464b      	mov	r3, r9
 8000746:	4303      	orrs	r3, r0
 8000748:	d117      	bne.n	800077a <__aeabi_dadd+0x51e>
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	2500      	movs	r5, #0
 800074e:	0309      	lsls	r1, r1, #12
 8000750:	e6da      	b.n	8000508 <__aeabi_dadd+0x2ac>
 8000752:	074a      	lsls	r2, r1, #29
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	4313      	orrs	r3, r2
 8000758:	08c9      	lsrs	r1, r1, #3
 800075a:	e6d1      	b.n	8000500 <__aeabi_dadd+0x2a4>
 800075c:	1a1c      	subs	r4, r3, r0
 800075e:	464a      	mov	r2, r9
 8000760:	42a3      	cmp	r3, r4
 8000762:	419b      	sbcs	r3, r3
 8000764:	1a89      	subs	r1, r1, r2
 8000766:	425b      	negs	r3, r3
 8000768:	1acb      	subs	r3, r1, r3
 800076a:	469a      	mov	sl, r3
 800076c:	2601      	movs	r6, #1
 800076e:	e5c1      	b.n	80002f4 <__aeabi_dadd+0x98>
 8000770:	074a      	lsls	r2, r1, #29
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	4313      	orrs	r3, r2
 8000776:	08c9      	lsrs	r1, r1, #3
 8000778:	e69f      	b.n	80004ba <__aeabi_dadd+0x25e>
 800077a:	4643      	mov	r3, r8
 800077c:	08d8      	lsrs	r0, r3, #3
 800077e:	464b      	mov	r3, r9
 8000780:	464a      	mov	r2, r9
 8000782:	075b      	lsls	r3, r3, #29
 8000784:	4665      	mov	r5, ip
 8000786:	4303      	orrs	r3, r0
 8000788:	08d1      	lsrs	r1, r2, #3
 800078a:	e6b9      	b.n	8000500 <__aeabi_dadd+0x2a4>
 800078c:	4643      	mov	r3, r8
 800078e:	08d8      	lsrs	r0, r3, #3
 8000790:	464b      	mov	r3, r9
 8000792:	464a      	mov	r2, r9
 8000794:	075b      	lsls	r3, r3, #29
 8000796:	4303      	orrs	r3, r0
 8000798:	08d1      	lsrs	r1, r2, #3
 800079a:	e6b1      	b.n	8000500 <__aeabi_dadd+0x2a4>
 800079c:	4319      	orrs	r1, r3
 800079e:	000c      	movs	r4, r1
 80007a0:	1e63      	subs	r3, r4, #1
 80007a2:	419c      	sbcs	r4, r3
 80007a4:	e6eb      	b.n	800057e <__aeabi_dadd+0x322>
 80007a6:	003c      	movs	r4, r7
 80007a8:	000d      	movs	r5, r1
 80007aa:	3c20      	subs	r4, #32
 80007ac:	40e5      	lsrs	r5, r4
 80007ae:	2f20      	cmp	r7, #32
 80007b0:	d003      	beq.n	80007ba <__aeabi_dadd+0x55e>
 80007b2:	2440      	movs	r4, #64	; 0x40
 80007b4:	1be4      	subs	r4, r4, r7
 80007b6:	40a1      	lsls	r1, r4
 80007b8:	430b      	orrs	r3, r1
 80007ba:	001c      	movs	r4, r3
 80007bc:	1e63      	subs	r3, r4, #1
 80007be:	419c      	sbcs	r4, r3
 80007c0:	432c      	orrs	r4, r5
 80007c2:	e770      	b.n	80006a6 <__aeabi_dadd+0x44a>
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d0e1      	beq.n	800078c <__aeabi_dadd+0x530>
 80007c8:	464a      	mov	r2, r9
 80007ca:	4302      	orrs	r2, r0
 80007cc:	d0c1      	beq.n	8000752 <__aeabi_dadd+0x4f6>
 80007ce:	074a      	lsls	r2, r1, #29
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	08c9      	lsrs	r1, r1, #3
 80007d8:	0312      	lsls	r2, r2, #12
 80007da:	4211      	tst	r1, r2
 80007dc:	d008      	beq.n	80007f0 <__aeabi_dadd+0x594>
 80007de:	4648      	mov	r0, r9
 80007e0:	08c4      	lsrs	r4, r0, #3
 80007e2:	4214      	tst	r4, r2
 80007e4:	d104      	bne.n	80007f0 <__aeabi_dadd+0x594>
 80007e6:	4643      	mov	r3, r8
 80007e8:	0021      	movs	r1, r4
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	0742      	lsls	r2, r0, #29
 80007ee:	4313      	orrs	r3, r2
 80007f0:	0f5a      	lsrs	r2, r3, #29
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	0752      	lsls	r2, r2, #29
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	e681      	b.n	8000500 <__aeabi_dadd+0x2a4>
 80007fc:	464b      	mov	r3, r9
 80007fe:	4303      	orrs	r3, r0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x5a8>
 8000802:	e714      	b.n	800062e <__aeabi_dadd+0x3d2>
 8000804:	464b      	mov	r3, r9
 8000806:	464a      	mov	r2, r9
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	075b      	lsls	r3, r3, #29
 800080c:	4665      	mov	r5, ip
 800080e:	4303      	orrs	r3, r0
 8000810:	08d1      	lsrs	r1, r2, #3
 8000812:	e655      	b.n	80004c0 <__aeabi_dadd+0x264>
 8000814:	1ac4      	subs	r4, r0, r3
 8000816:	45a0      	cmp	r8, r4
 8000818:	4180      	sbcs	r0, r0
 800081a:	464b      	mov	r3, r9
 800081c:	4240      	negs	r0, r0
 800081e:	1a59      	subs	r1, r3, r1
 8000820:	1a0b      	subs	r3, r1, r0
 8000822:	469a      	mov	sl, r3
 8000824:	4665      	mov	r5, ip
 8000826:	2601      	movs	r6, #1
 8000828:	e564      	b.n	80002f4 <__aeabi_dadd+0x98>
 800082a:	1a1c      	subs	r4, r3, r0
 800082c:	464a      	mov	r2, r9
 800082e:	42a3      	cmp	r3, r4
 8000830:	4180      	sbcs	r0, r0
 8000832:	1a8a      	subs	r2, r1, r2
 8000834:	4240      	negs	r0, r0
 8000836:	1a12      	subs	r2, r2, r0
 8000838:	4692      	mov	sl, r2
 800083a:	0212      	lsls	r2, r2, #8
 800083c:	d549      	bpl.n	80008d2 <__aeabi_dadd+0x676>
 800083e:	4642      	mov	r2, r8
 8000840:	1ad4      	subs	r4, r2, r3
 8000842:	45a0      	cmp	r8, r4
 8000844:	4180      	sbcs	r0, r0
 8000846:	464b      	mov	r3, r9
 8000848:	4240      	negs	r0, r0
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	1a0b      	subs	r3, r1, r0
 800084e:	469a      	mov	sl, r3
 8000850:	4665      	mov	r5, ip
 8000852:	e57f      	b.n	8000354 <__aeabi_dadd+0xf8>
 8000854:	464b      	mov	r3, r9
 8000856:	464a      	mov	r2, r9
 8000858:	08c0      	lsrs	r0, r0, #3
 800085a:	075b      	lsls	r3, r3, #29
 800085c:	4303      	orrs	r3, r0
 800085e:	08d1      	lsrs	r1, r2, #3
 8000860:	e62b      	b.n	80004ba <__aeabi_dadd+0x25e>
 8000862:	464a      	mov	r2, r9
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	4302      	orrs	r2, r0
 8000868:	d138      	bne.n	80008dc <__aeabi_dadd+0x680>
 800086a:	074a      	lsls	r2, r1, #29
 800086c:	4313      	orrs	r3, r2
 800086e:	08c9      	lsrs	r1, r1, #3
 8000870:	e646      	b.n	8000500 <__aeabi_dadd+0x2a4>
 8000872:	464b      	mov	r3, r9
 8000874:	464a      	mov	r2, r9
 8000876:	08c0      	lsrs	r0, r0, #3
 8000878:	075b      	lsls	r3, r3, #29
 800087a:	4303      	orrs	r3, r0
 800087c:	08d1      	lsrs	r1, r2, #3
 800087e:	e61f      	b.n	80004c0 <__aeabi_dadd+0x264>
 8000880:	181c      	adds	r4, r3, r0
 8000882:	429c      	cmp	r4, r3
 8000884:	419b      	sbcs	r3, r3
 8000886:	4449      	add	r1, r9
 8000888:	468a      	mov	sl, r1
 800088a:	425b      	negs	r3, r3
 800088c:	449a      	add	sl, r3
 800088e:	4653      	mov	r3, sl
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	d400      	bmi.n	8000896 <__aeabi_dadd+0x63a>
 8000894:	e607      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000896:	4652      	mov	r2, sl
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <__aeabi_dadd+0x6bc>)
 800089a:	2601      	movs	r6, #1
 800089c:	401a      	ands	r2, r3
 800089e:	4692      	mov	sl, r2
 80008a0:	e601      	b.n	80004a6 <__aeabi_dadd+0x24a>
 80008a2:	003c      	movs	r4, r7
 80008a4:	000e      	movs	r6, r1
 80008a6:	3c20      	subs	r4, #32
 80008a8:	40e6      	lsrs	r6, r4
 80008aa:	2f20      	cmp	r7, #32
 80008ac:	d003      	beq.n	80008b6 <__aeabi_dadd+0x65a>
 80008ae:	2440      	movs	r4, #64	; 0x40
 80008b0:	1be4      	subs	r4, r4, r7
 80008b2:	40a1      	lsls	r1, r4
 80008b4:	430b      	orrs	r3, r1
 80008b6:	001c      	movs	r4, r3
 80008b8:	1e63      	subs	r3, r4, #1
 80008ba:	419c      	sbcs	r4, r3
 80008bc:	4334      	orrs	r4, r6
 80008be:	e65e      	b.n	800057e <__aeabi_dadd+0x322>
 80008c0:	4443      	add	r3, r8
 80008c2:	4283      	cmp	r3, r0
 80008c4:	4180      	sbcs	r0, r0
 80008c6:	4449      	add	r1, r9
 80008c8:	468a      	mov	sl, r1
 80008ca:	4240      	negs	r0, r0
 80008cc:	001c      	movs	r4, r3
 80008ce:	4482      	add	sl, r0
 80008d0:	e6bc      	b.n	800064c <__aeabi_dadd+0x3f0>
 80008d2:	4653      	mov	r3, sl
 80008d4:	4323      	orrs	r3, r4
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x67e>
 80008d8:	e6a9      	b.n	800062e <__aeabi_dadd+0x3d2>
 80008da:	e5e4      	b.n	80004a6 <__aeabi_dadd+0x24a>
 80008dc:	074a      	lsls	r2, r1, #29
 80008de:	4313      	orrs	r3, r2
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	08c9      	lsrs	r1, r1, #3
 80008e4:	0312      	lsls	r2, r2, #12
 80008e6:	4211      	tst	r1, r2
 80008e8:	d009      	beq.n	80008fe <__aeabi_dadd+0x6a2>
 80008ea:	4648      	mov	r0, r9
 80008ec:	08c4      	lsrs	r4, r0, #3
 80008ee:	4214      	tst	r4, r2
 80008f0:	d105      	bne.n	80008fe <__aeabi_dadd+0x6a2>
 80008f2:	4643      	mov	r3, r8
 80008f4:	4665      	mov	r5, ip
 80008f6:	0021      	movs	r1, r4
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	0742      	lsls	r2, r0, #29
 80008fc:	4313      	orrs	r3, r2
 80008fe:	0f5a      	lsrs	r2, r3, #29
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	0752      	lsls	r2, r2, #29
 8000906:	4313      	orrs	r3, r2
 8000908:	e5fa      	b.n	8000500 <__aeabi_dadd+0x2a4>
 800090a:	2300      	movs	r3, #0
 800090c:	4a01      	ldr	r2, [pc, #4]	; (8000914 <__aeabi_dadd+0x6b8>)
 800090e:	001c      	movs	r4, r3
 8000910:	e540      	b.n	8000394 <__aeabi_dadd+0x138>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	000007ff 	.word	0x000007ff
 8000918:	ff7fffff 	.word	0xff7fffff

0800091c <__aeabi_ddiv>:
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	4657      	mov	r7, sl
 8000920:	464e      	mov	r6, r9
 8000922:	4645      	mov	r5, r8
 8000924:	46de      	mov	lr, fp
 8000926:	b5e0      	push	{r5, r6, r7, lr}
 8000928:	030c      	lsls	r4, r1, #12
 800092a:	001f      	movs	r7, r3
 800092c:	004b      	lsls	r3, r1, #1
 800092e:	4681      	mov	r9, r0
 8000930:	4692      	mov	sl, r2
 8000932:	0005      	movs	r5, r0
 8000934:	b085      	sub	sp, #20
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	0d5b      	lsrs	r3, r3, #21
 800093a:	0fce      	lsrs	r6, r1, #31
 800093c:	2b00      	cmp	r3, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_ddiv+0x26>
 8000940:	e152      	b.n	8000be8 <__aeabi_ddiv+0x2cc>
 8000942:	4ad2      	ldr	r2, [pc, #840]	; (8000c8c <__aeabi_ddiv+0x370>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d100      	bne.n	800094a <__aeabi_ddiv+0x2e>
 8000948:	e16e      	b.n	8000c28 <__aeabi_ddiv+0x30c>
 800094a:	0f42      	lsrs	r2, r0, #29
 800094c:	00e4      	lsls	r4, r4, #3
 800094e:	4314      	orrs	r4, r2
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	0412      	lsls	r2, r2, #16
 8000954:	4322      	orrs	r2, r4
 8000956:	4690      	mov	r8, r2
 8000958:	4acd      	ldr	r2, [pc, #820]	; (8000c90 <__aeabi_ddiv+0x374>)
 800095a:	00c5      	lsls	r5, r0, #3
 800095c:	4693      	mov	fp, r2
 800095e:	449b      	add	fp, r3
 8000960:	2300      	movs	r3, #0
 8000962:	4699      	mov	r9, r3
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	033c      	lsls	r4, r7, #12
 8000968:	007b      	lsls	r3, r7, #1
 800096a:	4650      	mov	r0, sl
 800096c:	0b24      	lsrs	r4, r4, #12
 800096e:	0d5b      	lsrs	r3, r3, #21
 8000970:	0fff      	lsrs	r7, r7, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_ddiv+0x5c>
 8000976:	e11a      	b.n	8000bae <__aeabi_ddiv+0x292>
 8000978:	4ac4      	ldr	r2, [pc, #784]	; (8000c8c <__aeabi_ddiv+0x370>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d100      	bne.n	8000980 <__aeabi_ddiv+0x64>
 800097e:	e15e      	b.n	8000c3e <__aeabi_ddiv+0x322>
 8000980:	0f42      	lsrs	r2, r0, #29
 8000982:	00e4      	lsls	r4, r4, #3
 8000984:	4322      	orrs	r2, r4
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	0424      	lsls	r4, r4, #16
 800098a:	4314      	orrs	r4, r2
 800098c:	4ac0      	ldr	r2, [pc, #768]	; (8000c90 <__aeabi_ddiv+0x374>)
 800098e:	00c1      	lsls	r1, r0, #3
 8000990:	4694      	mov	ip, r2
 8000992:	465a      	mov	r2, fp
 8000994:	4463      	add	r3, ip
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	469b      	mov	fp, r3
 800099a:	2000      	movs	r0, #0
 800099c:	0033      	movs	r3, r6
 800099e:	407b      	eors	r3, r7
 80009a0:	469a      	mov	sl, r3
 80009a2:	464b      	mov	r3, r9
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d827      	bhi.n	80009f8 <__aeabi_ddiv+0xdc>
 80009a8:	4aba      	ldr	r2, [pc, #744]	; (8000c94 <__aeabi_ddiv+0x378>)
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	58d3      	ldr	r3, [r2, r3]
 80009ae:	469f      	mov	pc, r3
 80009b0:	46b2      	mov	sl, r6
 80009b2:	9b00      	ldr	r3, [sp, #0]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d016      	beq.n	80009e6 <__aeabi_ddiv+0xca>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d100      	bne.n	80009be <__aeabi_ddiv+0xa2>
 80009bc:	e287      	b.n	8000ece <__aeabi_ddiv+0x5b2>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d000      	beq.n	80009c4 <__aeabi_ddiv+0xa8>
 80009c2:	e0d5      	b.n	8000b70 <__aeabi_ddiv+0x254>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	2500      	movs	r5, #0
 80009ca:	051b      	lsls	r3, r3, #20
 80009cc:	4313      	orrs	r3, r2
 80009ce:	4652      	mov	r2, sl
 80009d0:	07d2      	lsls	r2, r2, #31
 80009d2:	4313      	orrs	r3, r2
 80009d4:	0028      	movs	r0, r5
 80009d6:	0019      	movs	r1, r3
 80009d8:	b005      	add	sp, #20
 80009da:	bcf0      	pop	{r4, r5, r6, r7}
 80009dc:	46bb      	mov	fp, r7
 80009de:	46b2      	mov	sl, r6
 80009e0:	46a9      	mov	r9, r5
 80009e2:	46a0      	mov	r8, r4
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e6:	2200      	movs	r2, #0
 80009e8:	2500      	movs	r5, #0
 80009ea:	4ba8      	ldr	r3, [pc, #672]	; (8000c8c <__aeabi_ddiv+0x370>)
 80009ec:	e7ed      	b.n	80009ca <__aeabi_ddiv+0xae>
 80009ee:	46ba      	mov	sl, r7
 80009f0:	46a0      	mov	r8, r4
 80009f2:	000d      	movs	r5, r1
 80009f4:	9000      	str	r0, [sp, #0]
 80009f6:	e7dc      	b.n	80009b2 <__aeabi_ddiv+0x96>
 80009f8:	4544      	cmp	r4, r8
 80009fa:	d200      	bcs.n	80009fe <__aeabi_ddiv+0xe2>
 80009fc:	e1c4      	b.n	8000d88 <__aeabi_ddiv+0x46c>
 80009fe:	d100      	bne.n	8000a02 <__aeabi_ddiv+0xe6>
 8000a00:	e1bf      	b.n	8000d82 <__aeabi_ddiv+0x466>
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
 8000a06:	469c      	mov	ip, r3
 8000a08:	002e      	movs	r6, r5
 8000a0a:	4640      	mov	r0, r8
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	44e3      	add	fp, ip
 8000a10:	0223      	lsls	r3, r4, #8
 8000a12:	0e0c      	lsrs	r4, r1, #24
 8000a14:	431c      	orrs	r4, r3
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	4699      	mov	r9, r3
 8000a1a:	0423      	lsls	r3, r4, #16
 8000a1c:	020a      	lsls	r2, r1, #8
 8000a1e:	0c1f      	lsrs	r7, r3, #16
 8000a20:	4649      	mov	r1, r9
 8000a22:	9200      	str	r2, [sp, #0]
 8000a24:	9701      	str	r7, [sp, #4]
 8000a26:	f7ff fbf5 	bl	8000214 <__aeabi_uidivmod>
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	437a      	muls	r2, r7
 8000a2e:	040b      	lsls	r3, r1, #16
 8000a30:	0c31      	lsrs	r1, r6, #16
 8000a32:	4680      	mov	r8, r0
 8000a34:	4319      	orrs	r1, r3
 8000a36:	428a      	cmp	r2, r1
 8000a38:	d907      	bls.n	8000a4a <__aeabi_ddiv+0x12e>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	469c      	mov	ip, r3
 8000a40:	1909      	adds	r1, r1, r4
 8000a42:	44e0      	add	r8, ip
 8000a44:	428c      	cmp	r4, r1
 8000a46:	d800      	bhi.n	8000a4a <__aeabi_ddiv+0x12e>
 8000a48:	e201      	b.n	8000e4e <__aeabi_ddiv+0x532>
 8000a4a:	1a88      	subs	r0, r1, r2
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	f7ff fbe1 	bl	8000214 <__aeabi_uidivmod>
 8000a52:	9a01      	ldr	r2, [sp, #4]
 8000a54:	0436      	lsls	r6, r6, #16
 8000a56:	4342      	muls	r2, r0
 8000a58:	0409      	lsls	r1, r1, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	430e      	orrs	r6, r1
 8000a60:	42b2      	cmp	r2, r6
 8000a62:	d904      	bls.n	8000a6e <__aeabi_ddiv+0x152>
 8000a64:	1936      	adds	r6, r6, r4
 8000a66:	3b01      	subs	r3, #1
 8000a68:	42b4      	cmp	r4, r6
 8000a6a:	d800      	bhi.n	8000a6e <__aeabi_ddiv+0x152>
 8000a6c:	e1e9      	b.n	8000e42 <__aeabi_ddiv+0x526>
 8000a6e:	1ab0      	subs	r0, r6, r2
 8000a70:	4642      	mov	r2, r8
 8000a72:	9e00      	ldr	r6, [sp, #0]
 8000a74:	0412      	lsls	r2, r2, #16
 8000a76:	431a      	orrs	r2, r3
 8000a78:	0c33      	lsrs	r3, r6, #16
 8000a7a:	001f      	movs	r7, r3
 8000a7c:	0c11      	lsrs	r1, r2, #16
 8000a7e:	4690      	mov	r8, r2
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	0413      	lsls	r3, r2, #16
 8000a84:	0432      	lsls	r2, r6, #16
 8000a86:	0c16      	lsrs	r6, r2, #16
 8000a88:	0032      	movs	r2, r6
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	435a      	muls	r2, r3
 8000a8e:	9603      	str	r6, [sp, #12]
 8000a90:	437b      	muls	r3, r7
 8000a92:	434e      	muls	r6, r1
 8000a94:	4379      	muls	r1, r7
 8000a96:	0c17      	lsrs	r7, r2, #16
 8000a98:	46bc      	mov	ip, r7
 8000a9a:	199b      	adds	r3, r3, r6
 8000a9c:	4463      	add	r3, ip
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d903      	bls.n	8000aaa <__aeabi_ddiv+0x18e>
 8000aa2:	2680      	movs	r6, #128	; 0x80
 8000aa4:	0276      	lsls	r6, r6, #9
 8000aa6:	46b4      	mov	ip, r6
 8000aa8:	4461      	add	r1, ip
 8000aaa:	0c1e      	lsrs	r6, r3, #16
 8000aac:	1871      	adds	r1, r6, r1
 8000aae:	0416      	lsls	r6, r2, #16
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	0c36      	lsrs	r6, r6, #16
 8000ab4:	199e      	adds	r6, r3, r6
 8000ab6:	4288      	cmp	r0, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__aeabi_ddiv+0x1a4>
 8000aba:	d112      	bne.n	8000ae2 <__aeabi_ddiv+0x1c6>
 8000abc:	42b5      	cmp	r5, r6
 8000abe:	d210      	bcs.n	8000ae2 <__aeabi_ddiv+0x1c6>
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	9b00      	ldr	r3, [sp, #0]
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	4465      	add	r5, ip
 8000aca:	001f      	movs	r7, r3
 8000acc:	429d      	cmp	r5, r3
 8000ace:	419b      	sbcs	r3, r3
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	191b      	adds	r3, r3, r4
 8000ad4:	18c0      	adds	r0, r0, r3
 8000ad6:	4284      	cmp	r4, r0
 8000ad8:	d200      	bcs.n	8000adc <__aeabi_ddiv+0x1c0>
 8000ada:	e19e      	b.n	8000e1a <__aeabi_ddiv+0x4fe>
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_ddiv+0x1c4>
 8000ade:	e199      	b.n	8000e14 <__aeabi_ddiv+0x4f8>
 8000ae0:	4690      	mov	r8, r2
 8000ae2:	1bae      	subs	r6, r5, r6
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	41ad      	sbcs	r5, r5
 8000ae8:	1a40      	subs	r0, r0, r1
 8000aea:	426d      	negs	r5, r5
 8000aec:	1b40      	subs	r0, r0, r5
 8000aee:	4284      	cmp	r4, r0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_ddiv+0x1d8>
 8000af2:	e1d2      	b.n	8000e9a <__aeabi_ddiv+0x57e>
 8000af4:	4649      	mov	r1, r9
 8000af6:	f7ff fb8d 	bl	8000214 <__aeabi_uidivmod>
 8000afa:	9a01      	ldr	r2, [sp, #4]
 8000afc:	040b      	lsls	r3, r1, #16
 8000afe:	4342      	muls	r2, r0
 8000b00:	0c31      	lsrs	r1, r6, #16
 8000b02:	0005      	movs	r5, r0
 8000b04:	4319      	orrs	r1, r3
 8000b06:	428a      	cmp	r2, r1
 8000b08:	d900      	bls.n	8000b0c <__aeabi_ddiv+0x1f0>
 8000b0a:	e16c      	b.n	8000de6 <__aeabi_ddiv+0x4ca>
 8000b0c:	1a88      	subs	r0, r1, r2
 8000b0e:	4649      	mov	r1, r9
 8000b10:	f7ff fb80 	bl	8000214 <__aeabi_uidivmod>
 8000b14:	9a01      	ldr	r2, [sp, #4]
 8000b16:	0436      	lsls	r6, r6, #16
 8000b18:	4342      	muls	r2, r0
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c36      	lsrs	r6, r6, #16
 8000b1e:	0003      	movs	r3, r0
 8000b20:	430e      	orrs	r6, r1
 8000b22:	42b2      	cmp	r2, r6
 8000b24:	d900      	bls.n	8000b28 <__aeabi_ddiv+0x20c>
 8000b26:	e153      	b.n	8000dd0 <__aeabi_ddiv+0x4b4>
 8000b28:	9803      	ldr	r0, [sp, #12]
 8000b2a:	1ab6      	subs	r6, r6, r2
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	042d      	lsls	r5, r5, #16
 8000b30:	431d      	orrs	r5, r3
 8000b32:	9f02      	ldr	r7, [sp, #8]
 8000b34:	042b      	lsls	r3, r5, #16
 8000b36:	0c1b      	lsrs	r3, r3, #16
 8000b38:	435a      	muls	r2, r3
 8000b3a:	437b      	muls	r3, r7
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	0c29      	lsrs	r1, r5, #16
 8000b40:	4348      	muls	r0, r1
 8000b42:	0c13      	lsrs	r3, r2, #16
 8000b44:	4484      	add	ip, r0
 8000b46:	4463      	add	r3, ip
 8000b48:	4379      	muls	r1, r7
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d903      	bls.n	8000b56 <__aeabi_ddiv+0x23a>
 8000b4e:	2080      	movs	r0, #128	; 0x80
 8000b50:	0240      	lsls	r0, r0, #9
 8000b52:	4684      	mov	ip, r0
 8000b54:	4461      	add	r1, ip
 8000b56:	0c18      	lsrs	r0, r3, #16
 8000b58:	0412      	lsls	r2, r2, #16
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	1840      	adds	r0, r0, r1
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	4286      	cmp	r6, r0
 8000b64:	d200      	bcs.n	8000b68 <__aeabi_ddiv+0x24c>
 8000b66:	e100      	b.n	8000d6a <__aeabi_ddiv+0x44e>
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x250>
 8000b6a:	e0fb      	b.n	8000d64 <__aeabi_ddiv+0x448>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	431d      	orrs	r5, r3
 8000b70:	4b49      	ldr	r3, [pc, #292]	; (8000c98 <__aeabi_ddiv+0x37c>)
 8000b72:	445b      	add	r3, fp
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_ddiv+0x25e>
 8000b78:	e0aa      	b.n	8000cd0 <__aeabi_ddiv+0x3b4>
 8000b7a:	076a      	lsls	r2, r5, #29
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_ddiv+0x264>
 8000b7e:	e13d      	b.n	8000dfc <__aeabi_ddiv+0x4e0>
 8000b80:	08e9      	lsrs	r1, r5, #3
 8000b82:	4642      	mov	r2, r8
 8000b84:	01d2      	lsls	r2, r2, #7
 8000b86:	d506      	bpl.n	8000b96 <__aeabi_ddiv+0x27a>
 8000b88:	4642      	mov	r2, r8
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <__aeabi_ddiv+0x380>)
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4690      	mov	r8, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	445b      	add	r3, fp
 8000b96:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <__aeabi_ddiv+0x384>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	dd00      	ble.n	8000b9e <__aeabi_ddiv+0x282>
 8000b9c:	e723      	b.n	80009e6 <__aeabi_ddiv+0xca>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	055b      	lsls	r3, r3, #21
 8000ba2:	0755      	lsls	r5, r2, #29
 8000ba4:	0252      	lsls	r2, r2, #9
 8000ba6:	430d      	orrs	r5, r1
 8000ba8:	0b12      	lsrs	r2, r2, #12
 8000baa:	0d5b      	lsrs	r3, r3, #21
 8000bac:	e70d      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000bae:	4651      	mov	r1, sl
 8000bb0:	4321      	orrs	r1, r4
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0x29a>
 8000bb4:	e07c      	b.n	8000cb0 <__aeabi_ddiv+0x394>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_ddiv+0x2a0>
 8000bba:	e0fb      	b.n	8000db4 <__aeabi_ddiv+0x498>
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fde7 	bl	8001790 <__clzsi2>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	3a0b      	subs	r2, #11
 8000bc6:	231d      	movs	r3, #29
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	4652      	mov	r2, sl
 8000bcc:	0001      	movs	r1, r0
 8000bce:	40da      	lsrs	r2, r3
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	3908      	subs	r1, #8
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	408c      	lsls	r4, r1
 8000bd8:	0019      	movs	r1, r3
 8000bda:	4314      	orrs	r4, r2
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <__aeabi_ddiv+0x388>)
 8000bde:	4458      	add	r0, fp
 8000be0:	469b      	mov	fp, r3
 8000be2:	4483      	add	fp, r0
 8000be4:	2000      	movs	r0, #0
 8000be6:	e6d9      	b.n	800099c <__aeabi_ddiv+0x80>
 8000be8:	0003      	movs	r3, r0
 8000bea:	4323      	orrs	r3, r4
 8000bec:	4698      	mov	r8, r3
 8000bee:	d044      	beq.n	8000c7a <__aeabi_ddiv+0x35e>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_ddiv+0x2da>
 8000bf4:	e0cf      	b.n	8000d96 <__aeabi_ddiv+0x47a>
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f000 fdca 	bl	8001790 <__clzsi2>
 8000bfc:	0001      	movs	r1, r0
 8000bfe:	0002      	movs	r2, r0
 8000c00:	390b      	subs	r1, #11
 8000c02:	231d      	movs	r3, #29
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	4649      	mov	r1, r9
 8000c08:	0010      	movs	r0, r2
 8000c0a:	40d9      	lsrs	r1, r3
 8000c0c:	3808      	subs	r0, #8
 8000c0e:	4084      	lsls	r4, r0
 8000c10:	000b      	movs	r3, r1
 8000c12:	464d      	mov	r5, r9
 8000c14:	4323      	orrs	r3, r4
 8000c16:	4698      	mov	r8, r3
 8000c18:	4085      	lsls	r5, r0
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <__aeabi_ddiv+0x38c>)
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	469b      	mov	fp, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	4699      	mov	r9, r3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	e69e      	b.n	8000966 <__aeabi_ddiv+0x4a>
 8000c28:	0002      	movs	r2, r0
 8000c2a:	4322      	orrs	r2, r4
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	d11d      	bne.n	8000c6c <__aeabi_ddiv+0x350>
 8000c30:	2208      	movs	r2, #8
 8000c32:	469b      	mov	fp, r3
 8000c34:	2302      	movs	r3, #2
 8000c36:	2500      	movs	r5, #0
 8000c38:	4691      	mov	r9, r2
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	e693      	b.n	8000966 <__aeabi_ddiv+0x4a>
 8000c3e:	4651      	mov	r1, sl
 8000c40:	4321      	orrs	r1, r4
 8000c42:	d109      	bne.n	8000c58 <__aeabi_ddiv+0x33c>
 8000c44:	2302      	movs	r3, #2
 8000c46:	464a      	mov	r2, r9
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <__aeabi_ddiv+0x390>)
 8000c4c:	4691      	mov	r9, r2
 8000c4e:	469c      	mov	ip, r3
 8000c50:	2400      	movs	r4, #0
 8000c52:	2002      	movs	r0, #2
 8000c54:	44e3      	add	fp, ip
 8000c56:	e6a1      	b.n	800099c <__aeabi_ddiv+0x80>
 8000c58:	2303      	movs	r3, #3
 8000c5a:	464a      	mov	r2, r9
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <__aeabi_ddiv+0x390>)
 8000c60:	4691      	mov	r9, r2
 8000c62:	469c      	mov	ip, r3
 8000c64:	4651      	mov	r1, sl
 8000c66:	2003      	movs	r0, #3
 8000c68:	44e3      	add	fp, ip
 8000c6a:	e697      	b.n	800099c <__aeabi_ddiv+0x80>
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	469b      	mov	fp, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	46a0      	mov	r8, r4
 8000c74:	4691      	mov	r9, r2
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	e675      	b.n	8000966 <__aeabi_ddiv+0x4a>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	2300      	movs	r3, #0
 8000c80:	469b      	mov	fp, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	2500      	movs	r5, #0
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	e66d      	b.n	8000966 <__aeabi_ddiv+0x4a>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	000007ff 	.word	0x000007ff
 8000c90:	fffffc01 	.word	0xfffffc01
 8000c94:	080051c8 	.word	0x080051c8
 8000c98:	000003ff 	.word	0x000003ff
 8000c9c:	feffffff 	.word	0xfeffffff
 8000ca0:	000007fe 	.word	0x000007fe
 8000ca4:	000003f3 	.word	0x000003f3
 8000ca8:	fffffc0d 	.word	0xfffffc0d
 8000cac:	fffff801 	.word	0xfffff801
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	4691      	mov	r9, r2
 8000cb8:	2400      	movs	r4, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	e66e      	b.n	800099c <__aeabi_ddiv+0x80>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	4b88      	ldr	r3, [pc, #544]	; (8000ee8 <__aeabi_ddiv+0x5cc>)
 8000cc8:	0312      	lsls	r2, r2, #12
 8000cca:	e67e      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000ccc:	2501      	movs	r5, #1
 8000cce:	426d      	negs	r5, r5
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	1ad2      	subs	r2, r2, r3
 8000cd4:	2a38      	cmp	r2, #56	; 0x38
 8000cd6:	dd00      	ble.n	8000cda <__aeabi_ddiv+0x3be>
 8000cd8:	e674      	b.n	80009c4 <__aeabi_ddiv+0xa8>
 8000cda:	2a1f      	cmp	r2, #31
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_ddiv+0x3c4>
 8000cde:	e0bd      	b.n	8000e5c <__aeabi_ddiv+0x540>
 8000ce0:	211f      	movs	r1, #31
 8000ce2:	4249      	negs	r1, r1
 8000ce4:	1acb      	subs	r3, r1, r3
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	40d9      	lsrs	r1, r3
 8000cea:	000b      	movs	r3, r1
 8000cec:	2a20      	cmp	r2, #32
 8000cee:	d004      	beq.n	8000cfa <__aeabi_ddiv+0x3de>
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	4a7e      	ldr	r2, [pc, #504]	; (8000eec <__aeabi_ddiv+0x5d0>)
 8000cf4:	445a      	add	r2, fp
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	430d      	orrs	r5, r1
 8000cfa:	0029      	movs	r1, r5
 8000cfc:	1e4a      	subs	r2, r1, #1
 8000cfe:	4191      	sbcs	r1, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	2307      	movs	r3, #7
 8000d04:	001d      	movs	r5, r3
 8000d06:	2200      	movs	r2, #0
 8000d08:	400d      	ands	r5, r1
 8000d0a:	420b      	tst	r3, r1
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_ddiv+0x3f4>
 8000d0e:	e0d0      	b.n	8000eb2 <__aeabi_ddiv+0x596>
 8000d10:	220f      	movs	r2, #15
 8000d12:	2300      	movs	r3, #0
 8000d14:	400a      	ands	r2, r1
 8000d16:	2a04      	cmp	r2, #4
 8000d18:	d100      	bne.n	8000d1c <__aeabi_ddiv+0x400>
 8000d1a:	e0c7      	b.n	8000eac <__aeabi_ddiv+0x590>
 8000d1c:	1d0a      	adds	r2, r1, #4
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	4189      	sbcs	r1, r1
 8000d22:	4249      	negs	r1, r1
 8000d24:	185b      	adds	r3, r3, r1
 8000d26:	0011      	movs	r1, r2
 8000d28:	021a      	lsls	r2, r3, #8
 8000d2a:	d400      	bmi.n	8000d2e <__aeabi_ddiv+0x412>
 8000d2c:	e0be      	b.n	8000eac <__aeabi_ddiv+0x590>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2200      	movs	r2, #0
 8000d32:	2500      	movs	r5, #0
 8000d34:	e649      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	4643      	mov	r3, r8
 8000d3a:	0312      	lsls	r2, r2, #12
 8000d3c:	4213      	tst	r3, r2
 8000d3e:	d008      	beq.n	8000d52 <__aeabi_ddiv+0x436>
 8000d40:	4214      	tst	r4, r2
 8000d42:	d106      	bne.n	8000d52 <__aeabi_ddiv+0x436>
 8000d44:	4322      	orrs	r2, r4
 8000d46:	0312      	lsls	r2, r2, #12
 8000d48:	46ba      	mov	sl, r7
 8000d4a:	000d      	movs	r5, r1
 8000d4c:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <__aeabi_ddiv+0x5cc>)
 8000d4e:	0b12      	lsrs	r2, r2, #12
 8000d50:	e63b      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	4643      	mov	r3, r8
 8000d56:	0312      	lsls	r2, r2, #12
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	0312      	lsls	r2, r2, #12
 8000d5c:	46b2      	mov	sl, r6
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <__aeabi_ddiv+0x5cc>)
 8000d60:	0b12      	lsrs	r2, r2, #12
 8000d62:	e632      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x44e>
 8000d68:	e702      	b.n	8000b70 <__aeabi_ddiv+0x254>
 8000d6a:	19a6      	adds	r6, r4, r6
 8000d6c:	1e6a      	subs	r2, r5, #1
 8000d6e:	42a6      	cmp	r6, r4
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x458>
 8000d72:	e089      	b.n	8000e88 <__aeabi_ddiv+0x56c>
 8000d74:	4286      	cmp	r6, r0
 8000d76:	d200      	bcs.n	8000d7a <__aeabi_ddiv+0x45e>
 8000d78:	e09f      	b.n	8000eba <__aeabi_ddiv+0x59e>
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_ddiv+0x462>
 8000d7c:	e0af      	b.n	8000ede <__aeabi_ddiv+0x5c2>
 8000d7e:	0015      	movs	r5, r2
 8000d80:	e6f4      	b.n	8000b6c <__aeabi_ddiv+0x250>
 8000d82:	42a9      	cmp	r1, r5
 8000d84:	d900      	bls.n	8000d88 <__aeabi_ddiv+0x46c>
 8000d86:	e63c      	b.n	8000a02 <__aeabi_ddiv+0xe6>
 8000d88:	4643      	mov	r3, r8
 8000d8a:	07de      	lsls	r6, r3, #31
 8000d8c:	0858      	lsrs	r0, r3, #1
 8000d8e:	086b      	lsrs	r3, r5, #1
 8000d90:	431e      	orrs	r6, r3
 8000d92:	07ed      	lsls	r5, r5, #31
 8000d94:	e63c      	b.n	8000a10 <__aeabi_ddiv+0xf4>
 8000d96:	f000 fcfb 	bl	8001790 <__clzsi2>
 8000d9a:	0001      	movs	r1, r0
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	3115      	adds	r1, #21
 8000da0:	3220      	adds	r2, #32
 8000da2:	291c      	cmp	r1, #28
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_ddiv+0x48c>
 8000da6:	e72c      	b.n	8000c02 <__aeabi_ddiv+0x2e6>
 8000da8:	464b      	mov	r3, r9
 8000daa:	3808      	subs	r0, #8
 8000dac:	4083      	lsls	r3, r0
 8000dae:	2500      	movs	r5, #0
 8000db0:	4698      	mov	r8, r3
 8000db2:	e732      	b.n	8000c1a <__aeabi_ddiv+0x2fe>
 8000db4:	f000 fcec 	bl	8001790 <__clzsi2>
 8000db8:	0003      	movs	r3, r0
 8000dba:	001a      	movs	r2, r3
 8000dbc:	3215      	adds	r2, #21
 8000dbe:	3020      	adds	r0, #32
 8000dc0:	2a1c      	cmp	r2, #28
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x4aa>
 8000dc4:	e6ff      	b.n	8000bc6 <__aeabi_ddiv+0x2aa>
 8000dc6:	4654      	mov	r4, sl
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	2100      	movs	r1, #0
 8000dcc:	409c      	lsls	r4, r3
 8000dce:	e705      	b.n	8000bdc <__aeabi_ddiv+0x2c0>
 8000dd0:	1936      	adds	r6, r6, r4
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	42b4      	cmp	r4, r6
 8000dd6:	d900      	bls.n	8000dda <__aeabi_ddiv+0x4be>
 8000dd8:	e6a6      	b.n	8000b28 <__aeabi_ddiv+0x20c>
 8000dda:	42b2      	cmp	r2, r6
 8000ddc:	d800      	bhi.n	8000de0 <__aeabi_ddiv+0x4c4>
 8000dde:	e6a3      	b.n	8000b28 <__aeabi_ddiv+0x20c>
 8000de0:	1e83      	subs	r3, r0, #2
 8000de2:	1936      	adds	r6, r6, r4
 8000de4:	e6a0      	b.n	8000b28 <__aeabi_ddiv+0x20c>
 8000de6:	1909      	adds	r1, r1, r4
 8000de8:	3d01      	subs	r5, #1
 8000dea:	428c      	cmp	r4, r1
 8000dec:	d900      	bls.n	8000df0 <__aeabi_ddiv+0x4d4>
 8000dee:	e68d      	b.n	8000b0c <__aeabi_ddiv+0x1f0>
 8000df0:	428a      	cmp	r2, r1
 8000df2:	d800      	bhi.n	8000df6 <__aeabi_ddiv+0x4da>
 8000df4:	e68a      	b.n	8000b0c <__aeabi_ddiv+0x1f0>
 8000df6:	1e85      	subs	r5, r0, #2
 8000df8:	1909      	adds	r1, r1, r4
 8000dfa:	e687      	b.n	8000b0c <__aeabi_ddiv+0x1f0>
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	402a      	ands	r2, r5
 8000e00:	2a04      	cmp	r2, #4
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x4ea>
 8000e04:	e6bc      	b.n	8000b80 <__aeabi_ddiv+0x264>
 8000e06:	1d29      	adds	r1, r5, #4
 8000e08:	42a9      	cmp	r1, r5
 8000e0a:	41ad      	sbcs	r5, r5
 8000e0c:	426d      	negs	r5, r5
 8000e0e:	08c9      	lsrs	r1, r1, #3
 8000e10:	44a8      	add	r8, r5
 8000e12:	e6b6      	b.n	8000b82 <__aeabi_ddiv+0x266>
 8000e14:	42af      	cmp	r7, r5
 8000e16:	d900      	bls.n	8000e1a <__aeabi_ddiv+0x4fe>
 8000e18:	e662      	b.n	8000ae0 <__aeabi_ddiv+0x1c4>
 8000e1a:	4281      	cmp	r1, r0
 8000e1c:	d804      	bhi.n	8000e28 <__aeabi_ddiv+0x50c>
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_ddiv+0x506>
 8000e20:	e65e      	b.n	8000ae0 <__aeabi_ddiv+0x1c4>
 8000e22:	42ae      	cmp	r6, r5
 8000e24:	d800      	bhi.n	8000e28 <__aeabi_ddiv+0x50c>
 8000e26:	e65b      	b.n	8000ae0 <__aeabi_ddiv+0x1c4>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	44e0      	add	r8, ip
 8000e32:	469c      	mov	ip, r3
 8000e34:	4465      	add	r5, ip
 8000e36:	429d      	cmp	r5, r3
 8000e38:	419b      	sbcs	r3, r3
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	191b      	adds	r3, r3, r4
 8000e3e:	18c0      	adds	r0, r0, r3
 8000e40:	e64f      	b.n	8000ae2 <__aeabi_ddiv+0x1c6>
 8000e42:	42b2      	cmp	r2, r6
 8000e44:	d800      	bhi.n	8000e48 <__aeabi_ddiv+0x52c>
 8000e46:	e612      	b.n	8000a6e <__aeabi_ddiv+0x152>
 8000e48:	1e83      	subs	r3, r0, #2
 8000e4a:	1936      	adds	r6, r6, r4
 8000e4c:	e60f      	b.n	8000a6e <__aeabi_ddiv+0x152>
 8000e4e:	428a      	cmp	r2, r1
 8000e50:	d800      	bhi.n	8000e54 <__aeabi_ddiv+0x538>
 8000e52:	e5fa      	b.n	8000a4a <__aeabi_ddiv+0x12e>
 8000e54:	1e83      	subs	r3, r0, #2
 8000e56:	4698      	mov	r8, r3
 8000e58:	1909      	adds	r1, r1, r4
 8000e5a:	e5f6      	b.n	8000a4a <__aeabi_ddiv+0x12e>
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <__aeabi_ddiv+0x5d4>)
 8000e5e:	0028      	movs	r0, r5
 8000e60:	445b      	add	r3, fp
 8000e62:	4641      	mov	r1, r8
 8000e64:	409d      	lsls	r5, r3
 8000e66:	4099      	lsls	r1, r3
 8000e68:	40d0      	lsrs	r0, r2
 8000e6a:	1e6b      	subs	r3, r5, #1
 8000e6c:	419d      	sbcs	r5, r3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	4301      	orrs	r1, r0
 8000e72:	4329      	orrs	r1, r5
 8000e74:	40d3      	lsrs	r3, r2
 8000e76:	074a      	lsls	r2, r1, #29
 8000e78:	d100      	bne.n	8000e7c <__aeabi_ddiv+0x560>
 8000e7a:	e755      	b.n	8000d28 <__aeabi_ddiv+0x40c>
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	400a      	ands	r2, r1
 8000e80:	2a04      	cmp	r2, #4
 8000e82:	d000      	beq.n	8000e86 <__aeabi_ddiv+0x56a>
 8000e84:	e74a      	b.n	8000d1c <__aeabi_ddiv+0x400>
 8000e86:	e74f      	b.n	8000d28 <__aeabi_ddiv+0x40c>
 8000e88:	0015      	movs	r5, r2
 8000e8a:	4286      	cmp	r6, r0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_ddiv+0x574>
 8000e8e:	e66d      	b.n	8000b6c <__aeabi_ddiv+0x250>
 8000e90:	9a00      	ldr	r2, [sp, #0]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d000      	beq.n	8000e98 <__aeabi_ddiv+0x57c>
 8000e96:	e669      	b.n	8000b6c <__aeabi_ddiv+0x250>
 8000e98:	e66a      	b.n	8000b70 <__aeabi_ddiv+0x254>
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <__aeabi_ddiv+0x5d8>)
 8000e9c:	445b      	add	r3, fp
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_ddiv+0x588>
 8000ea2:	e713      	b.n	8000ccc <__aeabi_ddiv+0x3b0>
 8000ea4:	2501      	movs	r5, #1
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	44a8      	add	r8, r5
 8000eaa:	e66a      	b.n	8000b82 <__aeabi_ddiv+0x266>
 8000eac:	075d      	lsls	r5, r3, #29
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	0b1a      	lsrs	r2, r3, #12
 8000eb2:	08c9      	lsrs	r1, r1, #3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	430d      	orrs	r5, r1
 8000eb8:	e587      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000eba:	9900      	ldr	r1, [sp, #0]
 8000ebc:	3d02      	subs	r5, #2
 8000ebe:	004a      	lsls	r2, r1, #1
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	41bf      	sbcs	r7, r7
 8000ec4:	427f      	negs	r7, r7
 8000ec6:	193f      	adds	r7, r7, r4
 8000ec8:	19f6      	adds	r6, r6, r7
 8000eca:	9200      	str	r2, [sp, #0]
 8000ecc:	e7dd      	b.n	8000e8a <__aeabi_ddiv+0x56e>
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0312      	lsls	r2, r2, #12
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	0312      	lsls	r2, r2, #12
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <__aeabi_ddiv+0x5cc>)
 8000eda:	0b12      	lsrs	r2, r2, #12
 8000edc:	e575      	b.n	80009ca <__aeabi_ddiv+0xae>
 8000ede:	9900      	ldr	r1, [sp, #0]
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	d3ea      	bcc.n	8000eba <__aeabi_ddiv+0x59e>
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	e7d3      	b.n	8000e90 <__aeabi_ddiv+0x574>
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	0000043e 	.word	0x0000043e
 8000ef0:	0000041e 	.word	0x0000041e
 8000ef4:	000003ff 	.word	0x000003ff

08000ef8 <__aeabi_dsub>:
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	4657      	mov	r7, sl
 8000efc:	464e      	mov	r6, r9
 8000efe:	4645      	mov	r5, r8
 8000f00:	46de      	mov	lr, fp
 8000f02:	b5e0      	push	{r5, r6, r7, lr}
 8000f04:	000d      	movs	r5, r1
 8000f06:	0004      	movs	r4, r0
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	032b      	lsls	r3, r5, #12
 8000f0e:	0a5b      	lsrs	r3, r3, #9
 8000f10:	0f62      	lsrs	r2, r4, #29
 8000f12:	431a      	orrs	r2, r3
 8000f14:	00e3      	lsls	r3, r4, #3
 8000f16:	030c      	lsls	r4, r1, #12
 8000f18:	0a64      	lsrs	r4, r4, #9
 8000f1a:	0f47      	lsrs	r7, r0, #29
 8000f1c:	4327      	orrs	r7, r4
 8000f1e:	4cd0      	ldr	r4, [pc, #832]	; (8001260 <__aeabi_dsub+0x368>)
 8000f20:	006e      	lsls	r6, r5, #1
 8000f22:	4691      	mov	r9, r2
 8000f24:	b083      	sub	sp, #12
 8000f26:	004a      	lsls	r2, r1, #1
 8000f28:	00c0      	lsls	r0, r0, #3
 8000f2a:	4698      	mov	r8, r3
 8000f2c:	46a2      	mov	sl, r4
 8000f2e:	0d76      	lsrs	r6, r6, #21
 8000f30:	0fed      	lsrs	r5, r5, #31
 8000f32:	0d52      	lsrs	r2, r2, #21
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	42a2      	cmp	r2, r4
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dsub+0x46>
 8000f3c:	e0b9      	b.n	80010b2 <__aeabi_dsub+0x1ba>
 8000f3e:	2401      	movs	r4, #1
 8000f40:	4061      	eors	r1, r4
 8000f42:	468b      	mov	fp, r1
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dsub+0x52>
 8000f48:	e08d      	b.n	8001066 <__aeabi_dsub+0x16e>
 8000f4a:	1ab4      	subs	r4, r6, r2
 8000f4c:	46a4      	mov	ip, r4
 8000f4e:	2c00      	cmp	r4, #0
 8000f50:	dc00      	bgt.n	8000f54 <__aeabi_dsub+0x5c>
 8000f52:	e0b7      	b.n	80010c4 <__aeabi_dsub+0x1cc>
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dsub+0x62>
 8000f58:	e0cb      	b.n	80010f2 <__aeabi_dsub+0x1fa>
 8000f5a:	4ac1      	ldr	r2, [pc, #772]	; (8001260 <__aeabi_dsub+0x368>)
 8000f5c:	4296      	cmp	r6, r2
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_dsub+0x6a>
 8000f60:	e186      	b.n	8001270 <__aeabi_dsub+0x378>
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	0412      	lsls	r2, r2, #16
 8000f66:	4317      	orrs	r7, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	2a38      	cmp	r2, #56	; 0x38
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dsub+0x78>
 8000f6e:	e1a4      	b.n	80012ba <__aeabi_dsub+0x3c2>
 8000f70:	2a1f      	cmp	r2, #31
 8000f72:	dd00      	ble.n	8000f76 <__aeabi_dsub+0x7e>
 8000f74:	e21d      	b.n	80013b2 <__aeabi_dsub+0x4ba>
 8000f76:	4661      	mov	r1, ip
 8000f78:	2220      	movs	r2, #32
 8000f7a:	003c      	movs	r4, r7
 8000f7c:	1a52      	subs	r2, r2, r1
 8000f7e:	0001      	movs	r1, r0
 8000f80:	4090      	lsls	r0, r2
 8000f82:	4094      	lsls	r4, r2
 8000f84:	1e42      	subs	r2, r0, #1
 8000f86:	4190      	sbcs	r0, r2
 8000f88:	4662      	mov	r2, ip
 8000f8a:	46a0      	mov	r8, r4
 8000f8c:	4664      	mov	r4, ip
 8000f8e:	40d7      	lsrs	r7, r2
 8000f90:	464a      	mov	r2, r9
 8000f92:	40e1      	lsrs	r1, r4
 8000f94:	4644      	mov	r4, r8
 8000f96:	1bd2      	subs	r2, r2, r7
 8000f98:	4691      	mov	r9, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	4304      	orrs	r4, r0
 8000f9e:	1b1c      	subs	r4, r3, r4
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	4192      	sbcs	r2, r2
 8000fa4:	464b      	mov	r3, r9
 8000fa6:	4252      	negs	r2, r2
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	469a      	mov	sl, r3
 8000fac:	4653      	mov	r3, sl
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	d400      	bmi.n	8000fb4 <__aeabi_dsub+0xbc>
 8000fb2:	e12b      	b.n	800120c <__aeabi_dsub+0x314>
 8000fb4:	4653      	mov	r3, sl
 8000fb6:	025a      	lsls	r2, r3, #9
 8000fb8:	0a53      	lsrs	r3, r2, #9
 8000fba:	469a      	mov	sl, r3
 8000fbc:	4653      	mov	r3, sl
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0xcc>
 8000fc2:	e166      	b.n	8001292 <__aeabi_dsub+0x39a>
 8000fc4:	4650      	mov	r0, sl
 8000fc6:	f000 fbe3 	bl	8001790 <__clzsi2>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	2220      	movs	r2, #32
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	1ad2      	subs	r2, r2, r3
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	40d0      	lsrs	r0, r2
 8000fd8:	4099      	lsls	r1, r3
 8000fda:	0002      	movs	r2, r0
 8000fdc:	409c      	lsls	r4, r3
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	dd00      	ble.n	8000fe6 <__aeabi_dsub+0xee>
 8000fe4:	e164      	b.n	80012b0 <__aeabi_dsub+0x3b8>
 8000fe6:	1b9b      	subs	r3, r3, r6
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	291f      	cmp	r1, #31
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_dsub+0xf8>
 8000fee:	e0fe      	b.n	80011ee <__aeabi_dsub+0x2f6>
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	0026      	movs	r6, r4
 8000ff6:	1a5b      	subs	r3, r3, r1
 8000ff8:	409c      	lsls	r4, r3
 8000ffa:	4098      	lsls	r0, r3
 8000ffc:	40ce      	lsrs	r6, r1
 8000ffe:	40ca      	lsrs	r2, r1
 8001000:	1e63      	subs	r3, r4, #1
 8001002:	419c      	sbcs	r4, r3
 8001004:	4330      	orrs	r0, r6
 8001006:	4692      	mov	sl, r2
 8001008:	2600      	movs	r6, #0
 800100a:	4304      	orrs	r4, r0
 800100c:	0763      	lsls	r3, r4, #29
 800100e:	d009      	beq.n	8001024 <__aeabi_dsub+0x12c>
 8001010:	230f      	movs	r3, #15
 8001012:	4023      	ands	r3, r4
 8001014:	2b04      	cmp	r3, #4
 8001016:	d005      	beq.n	8001024 <__aeabi_dsub+0x12c>
 8001018:	1d23      	adds	r3, r4, #4
 800101a:	42a3      	cmp	r3, r4
 800101c:	41a4      	sbcs	r4, r4
 800101e:	4264      	negs	r4, r4
 8001020:	44a2      	add	sl, r4
 8001022:	001c      	movs	r4, r3
 8001024:	4653      	mov	r3, sl
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	d400      	bmi.n	800102c <__aeabi_dsub+0x134>
 800102a:	e0f2      	b.n	8001212 <__aeabi_dsub+0x31a>
 800102c:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <__aeabi_dsub+0x368>)
 800102e:	3601      	adds	r6, #1
 8001030:	429e      	cmp	r6, r3
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x13e>
 8001034:	e10f      	b.n	8001256 <__aeabi_dsub+0x35e>
 8001036:	4653      	mov	r3, sl
 8001038:	498a      	ldr	r1, [pc, #552]	; (8001264 <__aeabi_dsub+0x36c>)
 800103a:	08e4      	lsrs	r4, r4, #3
 800103c:	400b      	ands	r3, r1
 800103e:	0019      	movs	r1, r3
 8001040:	075b      	lsls	r3, r3, #29
 8001042:	4323      	orrs	r3, r4
 8001044:	0572      	lsls	r2, r6, #21
 8001046:	024c      	lsls	r4, r1, #9
 8001048:	0b24      	lsrs	r4, r4, #12
 800104a:	0d52      	lsrs	r2, r2, #21
 800104c:	0512      	lsls	r2, r2, #20
 800104e:	4322      	orrs	r2, r4
 8001050:	07ed      	lsls	r5, r5, #31
 8001052:	432a      	orrs	r2, r5
 8001054:	0018      	movs	r0, r3
 8001056:	0011      	movs	r1, r2
 8001058:	b003      	add	sp, #12
 800105a:	bcf0      	pop	{r4, r5, r6, r7}
 800105c:	46bb      	mov	fp, r7
 800105e:	46b2      	mov	sl, r6
 8001060:	46a9      	mov	r9, r5
 8001062:	46a0      	mov	r8, r4
 8001064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001066:	1ab4      	subs	r4, r6, r2
 8001068:	46a4      	mov	ip, r4
 800106a:	2c00      	cmp	r4, #0
 800106c:	dd59      	ble.n	8001122 <__aeabi_dsub+0x22a>
 800106e:	2a00      	cmp	r2, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_dsub+0x17c>
 8001072:	e0b0      	b.n	80011d6 <__aeabi_dsub+0x2de>
 8001074:	4556      	cmp	r6, sl
 8001076:	d100      	bne.n	800107a <__aeabi_dsub+0x182>
 8001078:	e0fa      	b.n	8001270 <__aeabi_dsub+0x378>
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0412      	lsls	r2, r2, #16
 800107e:	4317      	orrs	r7, r2
 8001080:	4662      	mov	r2, ip
 8001082:	2a38      	cmp	r2, #56	; 0x38
 8001084:	dd00      	ble.n	8001088 <__aeabi_dsub+0x190>
 8001086:	e0d4      	b.n	8001232 <__aeabi_dsub+0x33a>
 8001088:	2a1f      	cmp	r2, #31
 800108a:	dc00      	bgt.n	800108e <__aeabi_dsub+0x196>
 800108c:	e1c0      	b.n	8001410 <__aeabi_dsub+0x518>
 800108e:	0039      	movs	r1, r7
 8001090:	3a20      	subs	r2, #32
 8001092:	40d1      	lsrs	r1, r2
 8001094:	4662      	mov	r2, ip
 8001096:	2a20      	cmp	r2, #32
 8001098:	d006      	beq.n	80010a8 <__aeabi_dsub+0x1b0>
 800109a:	4664      	mov	r4, ip
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	1b12      	subs	r2, r2, r4
 80010a0:	003c      	movs	r4, r7
 80010a2:	4094      	lsls	r4, r2
 80010a4:	4304      	orrs	r4, r0
 80010a6:	9401      	str	r4, [sp, #4]
 80010a8:	9c01      	ldr	r4, [sp, #4]
 80010aa:	1e62      	subs	r2, r4, #1
 80010ac:	4194      	sbcs	r4, r2
 80010ae:	430c      	orrs	r4, r1
 80010b0:	e0c3      	b.n	800123a <__aeabi_dsub+0x342>
 80010b2:	003c      	movs	r4, r7
 80010b4:	4304      	orrs	r4, r0
 80010b6:	d02b      	beq.n	8001110 <__aeabi_dsub+0x218>
 80010b8:	468b      	mov	fp, r1
 80010ba:	428d      	cmp	r5, r1
 80010bc:	d02e      	beq.n	800111c <__aeabi_dsub+0x224>
 80010be:	4c6a      	ldr	r4, [pc, #424]	; (8001268 <__aeabi_dsub+0x370>)
 80010c0:	46a4      	mov	ip, r4
 80010c2:	44b4      	add	ip, r6
 80010c4:	4664      	mov	r4, ip
 80010c6:	2c00      	cmp	r4, #0
 80010c8:	d05f      	beq.n	800118a <__aeabi_dsub+0x292>
 80010ca:	1b94      	subs	r4, r2, r6
 80010cc:	46a4      	mov	ip, r4
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d000      	beq.n	80010d4 <__aeabi_dsub+0x1dc>
 80010d2:	e120      	b.n	8001316 <__aeabi_dsub+0x41e>
 80010d4:	464c      	mov	r4, r9
 80010d6:	431c      	orrs	r4, r3
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1e4>
 80010da:	e1c7      	b.n	800146c <__aeabi_dsub+0x574>
 80010dc:	4661      	mov	r1, ip
 80010de:	1e4c      	subs	r4, r1, #1
 80010e0:	2901      	cmp	r1, #1
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dsub+0x1ee>
 80010e4:	e223      	b.n	800152e <__aeabi_dsub+0x636>
 80010e6:	4d5e      	ldr	r5, [pc, #376]	; (8001260 <__aeabi_dsub+0x368>)
 80010e8:	45ac      	cmp	ip, r5
 80010ea:	d100      	bne.n	80010ee <__aeabi_dsub+0x1f6>
 80010ec:	e1d8      	b.n	80014a0 <__aeabi_dsub+0x5a8>
 80010ee:	46a4      	mov	ip, r4
 80010f0:	e11a      	b.n	8001328 <__aeabi_dsub+0x430>
 80010f2:	003a      	movs	r2, r7
 80010f4:	4302      	orrs	r2, r0
 80010f6:	d100      	bne.n	80010fa <__aeabi_dsub+0x202>
 80010f8:	e0e4      	b.n	80012c4 <__aeabi_dsub+0x3cc>
 80010fa:	0022      	movs	r2, r4
 80010fc:	3a01      	subs	r2, #1
 80010fe:	2c01      	cmp	r4, #1
 8001100:	d100      	bne.n	8001104 <__aeabi_dsub+0x20c>
 8001102:	e1c3      	b.n	800148c <__aeabi_dsub+0x594>
 8001104:	4956      	ldr	r1, [pc, #344]	; (8001260 <__aeabi_dsub+0x368>)
 8001106:	428c      	cmp	r4, r1
 8001108:	d100      	bne.n	800110c <__aeabi_dsub+0x214>
 800110a:	e0b1      	b.n	8001270 <__aeabi_dsub+0x378>
 800110c:	4694      	mov	ip, r2
 800110e:	e72b      	b.n	8000f68 <__aeabi_dsub+0x70>
 8001110:	2401      	movs	r4, #1
 8001112:	4061      	eors	r1, r4
 8001114:	468b      	mov	fp, r1
 8001116:	428d      	cmp	r5, r1
 8001118:	d000      	beq.n	800111c <__aeabi_dsub+0x224>
 800111a:	e716      	b.n	8000f4a <__aeabi_dsub+0x52>
 800111c:	4952      	ldr	r1, [pc, #328]	; (8001268 <__aeabi_dsub+0x370>)
 800111e:	468c      	mov	ip, r1
 8001120:	44b4      	add	ip, r6
 8001122:	4664      	mov	r4, ip
 8001124:	2c00      	cmp	r4, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dsub+0x232>
 8001128:	e0d3      	b.n	80012d2 <__aeabi_dsub+0x3da>
 800112a:	1b91      	subs	r1, r2, r6
 800112c:	468c      	mov	ip, r1
 800112e:	2e00      	cmp	r6, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_dsub+0x23c>
 8001132:	e15e      	b.n	80013f2 <__aeabi_dsub+0x4fa>
 8001134:	494a      	ldr	r1, [pc, #296]	; (8001260 <__aeabi_dsub+0x368>)
 8001136:	428a      	cmp	r2, r1
 8001138:	d100      	bne.n	800113c <__aeabi_dsub+0x244>
 800113a:	e1be      	b.n	80014ba <__aeabi_dsub+0x5c2>
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	464c      	mov	r4, r9
 8001140:	0409      	lsls	r1, r1, #16
 8001142:	430c      	orrs	r4, r1
 8001144:	46a1      	mov	r9, r4
 8001146:	4661      	mov	r1, ip
 8001148:	2938      	cmp	r1, #56	; 0x38
 800114a:	dd00      	ble.n	800114e <__aeabi_dsub+0x256>
 800114c:	e1ba      	b.n	80014c4 <__aeabi_dsub+0x5cc>
 800114e:	291f      	cmp	r1, #31
 8001150:	dd00      	ble.n	8001154 <__aeabi_dsub+0x25c>
 8001152:	e227      	b.n	80015a4 <__aeabi_dsub+0x6ac>
 8001154:	2420      	movs	r4, #32
 8001156:	1a64      	subs	r4, r4, r1
 8001158:	4649      	mov	r1, r9
 800115a:	40a1      	lsls	r1, r4
 800115c:	001e      	movs	r6, r3
 800115e:	4688      	mov	r8, r1
 8001160:	4661      	mov	r1, ip
 8001162:	40a3      	lsls	r3, r4
 8001164:	40ce      	lsrs	r6, r1
 8001166:	4641      	mov	r1, r8
 8001168:	1e5c      	subs	r4, r3, #1
 800116a:	41a3      	sbcs	r3, r4
 800116c:	4331      	orrs	r1, r6
 800116e:	4319      	orrs	r1, r3
 8001170:	000c      	movs	r4, r1
 8001172:	4663      	mov	r3, ip
 8001174:	4649      	mov	r1, r9
 8001176:	40d9      	lsrs	r1, r3
 8001178:	187f      	adds	r7, r7, r1
 800117a:	1824      	adds	r4, r4, r0
 800117c:	4284      	cmp	r4, r0
 800117e:	419b      	sbcs	r3, r3
 8001180:	425b      	negs	r3, r3
 8001182:	469a      	mov	sl, r3
 8001184:	0016      	movs	r6, r2
 8001186:	44ba      	add	sl, r7
 8001188:	e05d      	b.n	8001246 <__aeabi_dsub+0x34e>
 800118a:	4c38      	ldr	r4, [pc, #224]	; (800126c <__aeabi_dsub+0x374>)
 800118c:	1c72      	adds	r2, r6, #1
 800118e:	4222      	tst	r2, r4
 8001190:	d000      	beq.n	8001194 <__aeabi_dsub+0x29c>
 8001192:	e0df      	b.n	8001354 <__aeabi_dsub+0x45c>
 8001194:	464a      	mov	r2, r9
 8001196:	431a      	orrs	r2, r3
 8001198:	2e00      	cmp	r6, #0
 800119a:	d000      	beq.n	800119e <__aeabi_dsub+0x2a6>
 800119c:	e15c      	b.n	8001458 <__aeabi_dsub+0x560>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dsub+0x2ac>
 80011a2:	e1cf      	b.n	8001544 <__aeabi_dsub+0x64c>
 80011a4:	003a      	movs	r2, r7
 80011a6:	4302      	orrs	r2, r0
 80011a8:	d100      	bne.n	80011ac <__aeabi_dsub+0x2b4>
 80011aa:	e17f      	b.n	80014ac <__aeabi_dsub+0x5b4>
 80011ac:	1a1c      	subs	r4, r3, r0
 80011ae:	464a      	mov	r2, r9
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	4189      	sbcs	r1, r1
 80011b4:	1bd2      	subs	r2, r2, r7
 80011b6:	4249      	negs	r1, r1
 80011b8:	1a52      	subs	r2, r2, r1
 80011ba:	4692      	mov	sl, r2
 80011bc:	0212      	lsls	r2, r2, #8
 80011be:	d400      	bmi.n	80011c2 <__aeabi_dsub+0x2ca>
 80011c0:	e20a      	b.n	80015d8 <__aeabi_dsub+0x6e0>
 80011c2:	1ac4      	subs	r4, r0, r3
 80011c4:	42a0      	cmp	r0, r4
 80011c6:	4180      	sbcs	r0, r0
 80011c8:	464b      	mov	r3, r9
 80011ca:	4240      	negs	r0, r0
 80011cc:	1aff      	subs	r7, r7, r3
 80011ce:	1a3b      	subs	r3, r7, r0
 80011d0:	469a      	mov	sl, r3
 80011d2:	465d      	mov	r5, fp
 80011d4:	e71a      	b.n	800100c <__aeabi_dsub+0x114>
 80011d6:	003a      	movs	r2, r7
 80011d8:	4302      	orrs	r2, r0
 80011da:	d073      	beq.n	80012c4 <__aeabi_dsub+0x3cc>
 80011dc:	0022      	movs	r2, r4
 80011de:	3a01      	subs	r2, #1
 80011e0:	2c01      	cmp	r4, #1
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dsub+0x2ee>
 80011e4:	e0cb      	b.n	800137e <__aeabi_dsub+0x486>
 80011e6:	4554      	cmp	r4, sl
 80011e8:	d042      	beq.n	8001270 <__aeabi_dsub+0x378>
 80011ea:	4694      	mov	ip, r2
 80011ec:	e748      	b.n	8001080 <__aeabi_dsub+0x188>
 80011ee:	0010      	movs	r0, r2
 80011f0:	3b1f      	subs	r3, #31
 80011f2:	40d8      	lsrs	r0, r3
 80011f4:	2920      	cmp	r1, #32
 80011f6:	d003      	beq.n	8001200 <__aeabi_dsub+0x308>
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	4314      	orrs	r4, r2
 8001200:	1e63      	subs	r3, r4, #1
 8001202:	419c      	sbcs	r4, r3
 8001204:	2300      	movs	r3, #0
 8001206:	2600      	movs	r6, #0
 8001208:	469a      	mov	sl, r3
 800120a:	4304      	orrs	r4, r0
 800120c:	0763      	lsls	r3, r4, #29
 800120e:	d000      	beq.n	8001212 <__aeabi_dsub+0x31a>
 8001210:	e6fe      	b.n	8001010 <__aeabi_dsub+0x118>
 8001212:	4652      	mov	r2, sl
 8001214:	08e3      	lsrs	r3, r4, #3
 8001216:	0752      	lsls	r2, r2, #29
 8001218:	4313      	orrs	r3, r2
 800121a:	4652      	mov	r2, sl
 800121c:	46b4      	mov	ip, r6
 800121e:	08d2      	lsrs	r2, r2, #3
 8001220:	490f      	ldr	r1, [pc, #60]	; (8001260 <__aeabi_dsub+0x368>)
 8001222:	458c      	cmp	ip, r1
 8001224:	d02a      	beq.n	800127c <__aeabi_dsub+0x384>
 8001226:	0312      	lsls	r2, r2, #12
 8001228:	0b14      	lsrs	r4, r2, #12
 800122a:	4662      	mov	r2, ip
 800122c:	0552      	lsls	r2, r2, #21
 800122e:	0d52      	lsrs	r2, r2, #21
 8001230:	e70c      	b.n	800104c <__aeabi_dsub+0x154>
 8001232:	003c      	movs	r4, r7
 8001234:	4304      	orrs	r4, r0
 8001236:	1e62      	subs	r2, r4, #1
 8001238:	4194      	sbcs	r4, r2
 800123a:	18e4      	adds	r4, r4, r3
 800123c:	429c      	cmp	r4, r3
 800123e:	4192      	sbcs	r2, r2
 8001240:	4252      	negs	r2, r2
 8001242:	444a      	add	r2, r9
 8001244:	4692      	mov	sl, r2
 8001246:	4653      	mov	r3, sl
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	d5df      	bpl.n	800120c <__aeabi_dsub+0x314>
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__aeabi_dsub+0x368>)
 800124e:	3601      	adds	r6, #1
 8001250:	429e      	cmp	r6, r3
 8001252:	d000      	beq.n	8001256 <__aeabi_dsub+0x35e>
 8001254:	e0a0      	b.n	8001398 <__aeabi_dsub+0x4a0>
 8001256:	0032      	movs	r2, r6
 8001258:	2400      	movs	r4, #0
 800125a:	2300      	movs	r3, #0
 800125c:	e6f6      	b.n	800104c <__aeabi_dsub+0x154>
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	000007ff 	.word	0x000007ff
 8001264:	ff7fffff 	.word	0xff7fffff
 8001268:	fffff801 	.word	0xfffff801
 800126c:	000007fe 	.word	0x000007fe
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	464a      	mov	r2, r9
 8001274:	0752      	lsls	r2, r2, #29
 8001276:	4313      	orrs	r3, r2
 8001278:	464a      	mov	r2, r9
 800127a:	08d2      	lsrs	r2, r2, #3
 800127c:	0019      	movs	r1, r3
 800127e:	4311      	orrs	r1, r2
 8001280:	d100      	bne.n	8001284 <__aeabi_dsub+0x38c>
 8001282:	e1b5      	b.n	80015f0 <__aeabi_dsub+0x6f8>
 8001284:	2480      	movs	r4, #128	; 0x80
 8001286:	0324      	lsls	r4, r4, #12
 8001288:	4314      	orrs	r4, r2
 800128a:	0324      	lsls	r4, r4, #12
 800128c:	4ad5      	ldr	r2, [pc, #852]	; (80015e4 <__aeabi_dsub+0x6ec>)
 800128e:	0b24      	lsrs	r4, r4, #12
 8001290:	e6dc      	b.n	800104c <__aeabi_dsub+0x154>
 8001292:	0020      	movs	r0, r4
 8001294:	f000 fa7c 	bl	8001790 <__clzsi2>
 8001298:	0003      	movs	r3, r0
 800129a:	3318      	adds	r3, #24
 800129c:	2b1f      	cmp	r3, #31
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_dsub+0x3aa>
 80012a0:	e695      	b.n	8000fce <__aeabi_dsub+0xd6>
 80012a2:	0022      	movs	r2, r4
 80012a4:	3808      	subs	r0, #8
 80012a6:	4082      	lsls	r2, r0
 80012a8:	2400      	movs	r4, #0
 80012aa:	429e      	cmp	r6, r3
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_dsub+0x3b8>
 80012ae:	e69a      	b.n	8000fe6 <__aeabi_dsub+0xee>
 80012b0:	1af6      	subs	r6, r6, r3
 80012b2:	4bcd      	ldr	r3, [pc, #820]	; (80015e8 <__aeabi_dsub+0x6f0>)
 80012b4:	401a      	ands	r2, r3
 80012b6:	4692      	mov	sl, r2
 80012b8:	e6a8      	b.n	800100c <__aeabi_dsub+0x114>
 80012ba:	003c      	movs	r4, r7
 80012bc:	4304      	orrs	r4, r0
 80012be:	1e62      	subs	r2, r4, #1
 80012c0:	4194      	sbcs	r4, r2
 80012c2:	e66c      	b.n	8000f9e <__aeabi_dsub+0xa6>
 80012c4:	464a      	mov	r2, r9
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	0752      	lsls	r2, r2, #29
 80012ca:	4313      	orrs	r3, r2
 80012cc:	464a      	mov	r2, r9
 80012ce:	08d2      	lsrs	r2, r2, #3
 80012d0:	e7a6      	b.n	8001220 <__aeabi_dsub+0x328>
 80012d2:	4cc6      	ldr	r4, [pc, #792]	; (80015ec <__aeabi_dsub+0x6f4>)
 80012d4:	1c72      	adds	r2, r6, #1
 80012d6:	4222      	tst	r2, r4
 80012d8:	d000      	beq.n	80012dc <__aeabi_dsub+0x3e4>
 80012da:	e0ac      	b.n	8001436 <__aeabi_dsub+0x53e>
 80012dc:	464a      	mov	r2, r9
 80012de:	431a      	orrs	r2, r3
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d000      	beq.n	80012e6 <__aeabi_dsub+0x3ee>
 80012e4:	e105      	b.n	80014f2 <__aeabi_dsub+0x5fa>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dsub+0x3f4>
 80012ea:	e156      	b.n	800159a <__aeabi_dsub+0x6a2>
 80012ec:	003a      	movs	r2, r7
 80012ee:	4302      	orrs	r2, r0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dsub+0x3fc>
 80012f2:	e0db      	b.n	80014ac <__aeabi_dsub+0x5b4>
 80012f4:	181c      	adds	r4, r3, r0
 80012f6:	429c      	cmp	r4, r3
 80012f8:	419b      	sbcs	r3, r3
 80012fa:	444f      	add	r7, r9
 80012fc:	46ba      	mov	sl, r7
 80012fe:	425b      	negs	r3, r3
 8001300:	449a      	add	sl, r3
 8001302:	4653      	mov	r3, sl
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	d400      	bmi.n	800130a <__aeabi_dsub+0x412>
 8001308:	e780      	b.n	800120c <__aeabi_dsub+0x314>
 800130a:	4652      	mov	r2, sl
 800130c:	4bb6      	ldr	r3, [pc, #728]	; (80015e8 <__aeabi_dsub+0x6f0>)
 800130e:	2601      	movs	r6, #1
 8001310:	401a      	ands	r2, r3
 8001312:	4692      	mov	sl, r2
 8001314:	e77a      	b.n	800120c <__aeabi_dsub+0x314>
 8001316:	4cb3      	ldr	r4, [pc, #716]	; (80015e4 <__aeabi_dsub+0x6ec>)
 8001318:	42a2      	cmp	r2, r4
 800131a:	d100      	bne.n	800131e <__aeabi_dsub+0x426>
 800131c:	e0c0      	b.n	80014a0 <__aeabi_dsub+0x5a8>
 800131e:	2480      	movs	r4, #128	; 0x80
 8001320:	464d      	mov	r5, r9
 8001322:	0424      	lsls	r4, r4, #16
 8001324:	4325      	orrs	r5, r4
 8001326:	46a9      	mov	r9, r5
 8001328:	4664      	mov	r4, ip
 800132a:	2c38      	cmp	r4, #56	; 0x38
 800132c:	dc53      	bgt.n	80013d6 <__aeabi_dsub+0x4de>
 800132e:	4661      	mov	r1, ip
 8001330:	2c1f      	cmp	r4, #31
 8001332:	dd00      	ble.n	8001336 <__aeabi_dsub+0x43e>
 8001334:	e0cd      	b.n	80014d2 <__aeabi_dsub+0x5da>
 8001336:	2520      	movs	r5, #32
 8001338:	001e      	movs	r6, r3
 800133a:	1b2d      	subs	r5, r5, r4
 800133c:	464c      	mov	r4, r9
 800133e:	40ab      	lsls	r3, r5
 8001340:	40ac      	lsls	r4, r5
 8001342:	40ce      	lsrs	r6, r1
 8001344:	1e5d      	subs	r5, r3, #1
 8001346:	41ab      	sbcs	r3, r5
 8001348:	4334      	orrs	r4, r6
 800134a:	4323      	orrs	r3, r4
 800134c:	464c      	mov	r4, r9
 800134e:	40cc      	lsrs	r4, r1
 8001350:	1b3f      	subs	r7, r7, r4
 8001352:	e045      	b.n	80013e0 <__aeabi_dsub+0x4e8>
 8001354:	464a      	mov	r2, r9
 8001356:	1a1c      	subs	r4, r3, r0
 8001358:	1bd1      	subs	r1, r2, r7
 800135a:	42a3      	cmp	r3, r4
 800135c:	4192      	sbcs	r2, r2
 800135e:	4252      	negs	r2, r2
 8001360:	4692      	mov	sl, r2
 8001362:	000a      	movs	r2, r1
 8001364:	4651      	mov	r1, sl
 8001366:	1a52      	subs	r2, r2, r1
 8001368:	4692      	mov	sl, r2
 800136a:	0212      	lsls	r2, r2, #8
 800136c:	d500      	bpl.n	8001370 <__aeabi_dsub+0x478>
 800136e:	e083      	b.n	8001478 <__aeabi_dsub+0x580>
 8001370:	4653      	mov	r3, sl
 8001372:	4323      	orrs	r3, r4
 8001374:	d000      	beq.n	8001378 <__aeabi_dsub+0x480>
 8001376:	e621      	b.n	8000fbc <__aeabi_dsub+0xc4>
 8001378:	2200      	movs	r2, #0
 800137a:	2500      	movs	r5, #0
 800137c:	e753      	b.n	8001226 <__aeabi_dsub+0x32e>
 800137e:	181c      	adds	r4, r3, r0
 8001380:	429c      	cmp	r4, r3
 8001382:	419b      	sbcs	r3, r3
 8001384:	444f      	add	r7, r9
 8001386:	46ba      	mov	sl, r7
 8001388:	425b      	negs	r3, r3
 800138a:	449a      	add	sl, r3
 800138c:	4653      	mov	r3, sl
 800138e:	2601      	movs	r6, #1
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	d400      	bmi.n	8001396 <__aeabi_dsub+0x49e>
 8001394:	e73a      	b.n	800120c <__aeabi_dsub+0x314>
 8001396:	2602      	movs	r6, #2
 8001398:	4652      	mov	r2, sl
 800139a:	4b93      	ldr	r3, [pc, #588]	; (80015e8 <__aeabi_dsub+0x6f0>)
 800139c:	2101      	movs	r1, #1
 800139e:	401a      	ands	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	4021      	ands	r1, r4
 80013a4:	0862      	lsrs	r2, r4, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	07dc      	lsls	r4, r3, #31
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	469a      	mov	sl, r3
 80013ae:	4314      	orrs	r4, r2
 80013b0:	e62c      	b.n	800100c <__aeabi_dsub+0x114>
 80013b2:	0039      	movs	r1, r7
 80013b4:	3a20      	subs	r2, #32
 80013b6:	40d1      	lsrs	r1, r2
 80013b8:	4662      	mov	r2, ip
 80013ba:	2a20      	cmp	r2, #32
 80013bc:	d006      	beq.n	80013cc <__aeabi_dsub+0x4d4>
 80013be:	4664      	mov	r4, ip
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	1b12      	subs	r2, r2, r4
 80013c4:	003c      	movs	r4, r7
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4304      	orrs	r4, r0
 80013ca:	9401      	str	r4, [sp, #4]
 80013cc:	9c01      	ldr	r4, [sp, #4]
 80013ce:	1e62      	subs	r2, r4, #1
 80013d0:	4194      	sbcs	r4, r2
 80013d2:	430c      	orrs	r4, r1
 80013d4:	e5e3      	b.n	8000f9e <__aeabi_dsub+0xa6>
 80013d6:	4649      	mov	r1, r9
 80013d8:	4319      	orrs	r1, r3
 80013da:	000b      	movs	r3, r1
 80013dc:	1e5c      	subs	r4, r3, #1
 80013de:	41a3      	sbcs	r3, r4
 80013e0:	1ac4      	subs	r4, r0, r3
 80013e2:	42a0      	cmp	r0, r4
 80013e4:	419b      	sbcs	r3, r3
 80013e6:	425b      	negs	r3, r3
 80013e8:	1afb      	subs	r3, r7, r3
 80013ea:	469a      	mov	sl, r3
 80013ec:	465d      	mov	r5, fp
 80013ee:	0016      	movs	r6, r2
 80013f0:	e5dc      	b.n	8000fac <__aeabi_dsub+0xb4>
 80013f2:	4649      	mov	r1, r9
 80013f4:	4319      	orrs	r1, r3
 80013f6:	d100      	bne.n	80013fa <__aeabi_dsub+0x502>
 80013f8:	e0ae      	b.n	8001558 <__aeabi_dsub+0x660>
 80013fa:	4661      	mov	r1, ip
 80013fc:	4664      	mov	r4, ip
 80013fe:	3901      	subs	r1, #1
 8001400:	2c01      	cmp	r4, #1
 8001402:	d100      	bne.n	8001406 <__aeabi_dsub+0x50e>
 8001404:	e0e0      	b.n	80015c8 <__aeabi_dsub+0x6d0>
 8001406:	4c77      	ldr	r4, [pc, #476]	; (80015e4 <__aeabi_dsub+0x6ec>)
 8001408:	45a4      	cmp	ip, r4
 800140a:	d056      	beq.n	80014ba <__aeabi_dsub+0x5c2>
 800140c:	468c      	mov	ip, r1
 800140e:	e69a      	b.n	8001146 <__aeabi_dsub+0x24e>
 8001410:	4661      	mov	r1, ip
 8001412:	2220      	movs	r2, #32
 8001414:	003c      	movs	r4, r7
 8001416:	1a52      	subs	r2, r2, r1
 8001418:	4094      	lsls	r4, r2
 800141a:	0001      	movs	r1, r0
 800141c:	4090      	lsls	r0, r2
 800141e:	46a0      	mov	r8, r4
 8001420:	4664      	mov	r4, ip
 8001422:	1e42      	subs	r2, r0, #1
 8001424:	4190      	sbcs	r0, r2
 8001426:	4662      	mov	r2, ip
 8001428:	40e1      	lsrs	r1, r4
 800142a:	4644      	mov	r4, r8
 800142c:	40d7      	lsrs	r7, r2
 800142e:	430c      	orrs	r4, r1
 8001430:	4304      	orrs	r4, r0
 8001432:	44b9      	add	r9, r7
 8001434:	e701      	b.n	800123a <__aeabi_dsub+0x342>
 8001436:	496b      	ldr	r1, [pc, #428]	; (80015e4 <__aeabi_dsub+0x6ec>)
 8001438:	428a      	cmp	r2, r1
 800143a:	d100      	bne.n	800143e <__aeabi_dsub+0x546>
 800143c:	e70c      	b.n	8001258 <__aeabi_dsub+0x360>
 800143e:	1818      	adds	r0, r3, r0
 8001440:	4298      	cmp	r0, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	444f      	add	r7, r9
 8001446:	425b      	negs	r3, r3
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	07dc      	lsls	r4, r3, #31
 800144c:	0840      	lsrs	r0, r0, #1
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	469a      	mov	sl, r3
 8001452:	0016      	movs	r6, r2
 8001454:	4304      	orrs	r4, r0
 8001456:	e6d9      	b.n	800120c <__aeabi_dsub+0x314>
 8001458:	2a00      	cmp	r2, #0
 800145a:	d000      	beq.n	800145e <__aeabi_dsub+0x566>
 800145c:	e081      	b.n	8001562 <__aeabi_dsub+0x66a>
 800145e:	003b      	movs	r3, r7
 8001460:	4303      	orrs	r3, r0
 8001462:	d11d      	bne.n	80014a0 <__aeabi_dsub+0x5a8>
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	2500      	movs	r5, #0
 8001468:	0312      	lsls	r2, r2, #12
 800146a:	e70b      	b.n	8001284 <__aeabi_dsub+0x38c>
 800146c:	08c0      	lsrs	r0, r0, #3
 800146e:	077b      	lsls	r3, r7, #29
 8001470:	465d      	mov	r5, fp
 8001472:	4303      	orrs	r3, r0
 8001474:	08fa      	lsrs	r2, r7, #3
 8001476:	e6d3      	b.n	8001220 <__aeabi_dsub+0x328>
 8001478:	1ac4      	subs	r4, r0, r3
 800147a:	42a0      	cmp	r0, r4
 800147c:	4180      	sbcs	r0, r0
 800147e:	464b      	mov	r3, r9
 8001480:	4240      	negs	r0, r0
 8001482:	1aff      	subs	r7, r7, r3
 8001484:	1a3b      	subs	r3, r7, r0
 8001486:	469a      	mov	sl, r3
 8001488:	465d      	mov	r5, fp
 800148a:	e597      	b.n	8000fbc <__aeabi_dsub+0xc4>
 800148c:	1a1c      	subs	r4, r3, r0
 800148e:	464a      	mov	r2, r9
 8001490:	42a3      	cmp	r3, r4
 8001492:	419b      	sbcs	r3, r3
 8001494:	1bd7      	subs	r7, r2, r7
 8001496:	425b      	negs	r3, r3
 8001498:	1afb      	subs	r3, r7, r3
 800149a:	469a      	mov	sl, r3
 800149c:	2601      	movs	r6, #1
 800149e:	e585      	b.n	8000fac <__aeabi_dsub+0xb4>
 80014a0:	08c0      	lsrs	r0, r0, #3
 80014a2:	077b      	lsls	r3, r7, #29
 80014a4:	465d      	mov	r5, fp
 80014a6:	4303      	orrs	r3, r0
 80014a8:	08fa      	lsrs	r2, r7, #3
 80014aa:	e6e7      	b.n	800127c <__aeabi_dsub+0x384>
 80014ac:	464a      	mov	r2, r9
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	0752      	lsls	r2, r2, #29
 80014b2:	4313      	orrs	r3, r2
 80014b4:	464a      	mov	r2, r9
 80014b6:	08d2      	lsrs	r2, r2, #3
 80014b8:	e6b5      	b.n	8001226 <__aeabi_dsub+0x32e>
 80014ba:	08c0      	lsrs	r0, r0, #3
 80014bc:	077b      	lsls	r3, r7, #29
 80014be:	4303      	orrs	r3, r0
 80014c0:	08fa      	lsrs	r2, r7, #3
 80014c2:	e6db      	b.n	800127c <__aeabi_dsub+0x384>
 80014c4:	4649      	mov	r1, r9
 80014c6:	4319      	orrs	r1, r3
 80014c8:	000b      	movs	r3, r1
 80014ca:	1e59      	subs	r1, r3, #1
 80014cc:	418b      	sbcs	r3, r1
 80014ce:	001c      	movs	r4, r3
 80014d0:	e653      	b.n	800117a <__aeabi_dsub+0x282>
 80014d2:	464d      	mov	r5, r9
 80014d4:	3c20      	subs	r4, #32
 80014d6:	40e5      	lsrs	r5, r4
 80014d8:	2920      	cmp	r1, #32
 80014da:	d005      	beq.n	80014e8 <__aeabi_dsub+0x5f0>
 80014dc:	2440      	movs	r4, #64	; 0x40
 80014de:	1a64      	subs	r4, r4, r1
 80014e0:	4649      	mov	r1, r9
 80014e2:	40a1      	lsls	r1, r4
 80014e4:	430b      	orrs	r3, r1
 80014e6:	4698      	mov	r8, r3
 80014e8:	4643      	mov	r3, r8
 80014ea:	1e5c      	subs	r4, r3, #1
 80014ec:	41a3      	sbcs	r3, r4
 80014ee:	432b      	orrs	r3, r5
 80014f0:	e776      	b.n	80013e0 <__aeabi_dsub+0x4e8>
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d0e1      	beq.n	80014ba <__aeabi_dsub+0x5c2>
 80014f6:	003a      	movs	r2, r7
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	4302      	orrs	r2, r0
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x608>
 80014fe:	e6b8      	b.n	8001272 <__aeabi_dsub+0x37a>
 8001500:	464a      	mov	r2, r9
 8001502:	0752      	lsls	r2, r2, #29
 8001504:	2480      	movs	r4, #128	; 0x80
 8001506:	4313      	orrs	r3, r2
 8001508:	464a      	mov	r2, r9
 800150a:	0324      	lsls	r4, r4, #12
 800150c:	08d2      	lsrs	r2, r2, #3
 800150e:	4222      	tst	r2, r4
 8001510:	d007      	beq.n	8001522 <__aeabi_dsub+0x62a>
 8001512:	08fe      	lsrs	r6, r7, #3
 8001514:	4226      	tst	r6, r4
 8001516:	d104      	bne.n	8001522 <__aeabi_dsub+0x62a>
 8001518:	465d      	mov	r5, fp
 800151a:	0032      	movs	r2, r6
 800151c:	08c3      	lsrs	r3, r0, #3
 800151e:	077f      	lsls	r7, r7, #29
 8001520:	433b      	orrs	r3, r7
 8001522:	0f59      	lsrs	r1, r3, #29
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	0749      	lsls	r1, r1, #29
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	430b      	orrs	r3, r1
 800152c:	e6a6      	b.n	800127c <__aeabi_dsub+0x384>
 800152e:	1ac4      	subs	r4, r0, r3
 8001530:	42a0      	cmp	r0, r4
 8001532:	4180      	sbcs	r0, r0
 8001534:	464b      	mov	r3, r9
 8001536:	4240      	negs	r0, r0
 8001538:	1aff      	subs	r7, r7, r3
 800153a:	1a3b      	subs	r3, r7, r0
 800153c:	469a      	mov	sl, r3
 800153e:	465d      	mov	r5, fp
 8001540:	2601      	movs	r6, #1
 8001542:	e533      	b.n	8000fac <__aeabi_dsub+0xb4>
 8001544:	003b      	movs	r3, r7
 8001546:	4303      	orrs	r3, r0
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x654>
 800154a:	e715      	b.n	8001378 <__aeabi_dsub+0x480>
 800154c:	08c0      	lsrs	r0, r0, #3
 800154e:	077b      	lsls	r3, r7, #29
 8001550:	465d      	mov	r5, fp
 8001552:	4303      	orrs	r3, r0
 8001554:	08fa      	lsrs	r2, r7, #3
 8001556:	e666      	b.n	8001226 <__aeabi_dsub+0x32e>
 8001558:	08c0      	lsrs	r0, r0, #3
 800155a:	077b      	lsls	r3, r7, #29
 800155c:	4303      	orrs	r3, r0
 800155e:	08fa      	lsrs	r2, r7, #3
 8001560:	e65e      	b.n	8001220 <__aeabi_dsub+0x328>
 8001562:	003a      	movs	r2, r7
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	4302      	orrs	r2, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dsub+0x674>
 800156a:	e682      	b.n	8001272 <__aeabi_dsub+0x37a>
 800156c:	464a      	mov	r2, r9
 800156e:	0752      	lsls	r2, r2, #29
 8001570:	2480      	movs	r4, #128	; 0x80
 8001572:	4313      	orrs	r3, r2
 8001574:	464a      	mov	r2, r9
 8001576:	0324      	lsls	r4, r4, #12
 8001578:	08d2      	lsrs	r2, r2, #3
 800157a:	4222      	tst	r2, r4
 800157c:	d007      	beq.n	800158e <__aeabi_dsub+0x696>
 800157e:	08fe      	lsrs	r6, r7, #3
 8001580:	4226      	tst	r6, r4
 8001582:	d104      	bne.n	800158e <__aeabi_dsub+0x696>
 8001584:	465d      	mov	r5, fp
 8001586:	0032      	movs	r2, r6
 8001588:	08c3      	lsrs	r3, r0, #3
 800158a:	077f      	lsls	r7, r7, #29
 800158c:	433b      	orrs	r3, r7
 800158e:	0f59      	lsrs	r1, r3, #29
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	0749      	lsls	r1, r1, #29
 8001596:	430b      	orrs	r3, r1
 8001598:	e670      	b.n	800127c <__aeabi_dsub+0x384>
 800159a:	08c0      	lsrs	r0, r0, #3
 800159c:	077b      	lsls	r3, r7, #29
 800159e:	4303      	orrs	r3, r0
 80015a0:	08fa      	lsrs	r2, r7, #3
 80015a2:	e640      	b.n	8001226 <__aeabi_dsub+0x32e>
 80015a4:	464c      	mov	r4, r9
 80015a6:	3920      	subs	r1, #32
 80015a8:	40cc      	lsrs	r4, r1
 80015aa:	4661      	mov	r1, ip
 80015ac:	2920      	cmp	r1, #32
 80015ae:	d006      	beq.n	80015be <__aeabi_dsub+0x6c6>
 80015b0:	4666      	mov	r6, ip
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	1b89      	subs	r1, r1, r6
 80015b6:	464e      	mov	r6, r9
 80015b8:	408e      	lsls	r6, r1
 80015ba:	4333      	orrs	r3, r6
 80015bc:	4698      	mov	r8, r3
 80015be:	4643      	mov	r3, r8
 80015c0:	1e59      	subs	r1, r3, #1
 80015c2:	418b      	sbcs	r3, r1
 80015c4:	431c      	orrs	r4, r3
 80015c6:	e5d8      	b.n	800117a <__aeabi_dsub+0x282>
 80015c8:	181c      	adds	r4, r3, r0
 80015ca:	4284      	cmp	r4, r0
 80015cc:	4180      	sbcs	r0, r0
 80015ce:	444f      	add	r7, r9
 80015d0:	46ba      	mov	sl, r7
 80015d2:	4240      	negs	r0, r0
 80015d4:	4482      	add	sl, r0
 80015d6:	e6d9      	b.n	800138c <__aeabi_dsub+0x494>
 80015d8:	4653      	mov	r3, sl
 80015da:	4323      	orrs	r3, r4
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dsub+0x6e8>
 80015de:	e6cb      	b.n	8001378 <__aeabi_dsub+0x480>
 80015e0:	e614      	b.n	800120c <__aeabi_dsub+0x314>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	000007ff 	.word	0x000007ff
 80015e8:	ff7fffff 	.word	0xff7fffff
 80015ec:	000007fe 	.word	0x000007fe
 80015f0:	2300      	movs	r3, #0
 80015f2:	4a01      	ldr	r2, [pc, #4]	; (80015f8 <__aeabi_dsub+0x700>)
 80015f4:	001c      	movs	r4, r3
 80015f6:	e529      	b.n	800104c <__aeabi_dsub+0x154>
 80015f8:	000007ff 	.word	0x000007ff

080015fc <__aeabi_d2iz>:
 80015fc:	000a      	movs	r2, r1
 80015fe:	b530      	push	{r4, r5, lr}
 8001600:	4c13      	ldr	r4, [pc, #76]	; (8001650 <__aeabi_d2iz+0x54>)
 8001602:	0053      	lsls	r3, r2, #1
 8001604:	0309      	lsls	r1, r1, #12
 8001606:	0005      	movs	r5, r0
 8001608:	0b09      	lsrs	r1, r1, #12
 800160a:	2000      	movs	r0, #0
 800160c:	0d5b      	lsrs	r3, r3, #21
 800160e:	0fd2      	lsrs	r2, r2, #31
 8001610:	42a3      	cmp	r3, r4
 8001612:	dd04      	ble.n	800161e <__aeabi_d2iz+0x22>
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <__aeabi_d2iz+0x58>)
 8001616:	4283      	cmp	r3, r0
 8001618:	dd02      	ble.n	8001620 <__aeabi_d2iz+0x24>
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <__aeabi_d2iz+0x5c>)
 800161c:	18d0      	adds	r0, r2, r3
 800161e:	bd30      	pop	{r4, r5, pc}
 8001620:	2080      	movs	r0, #128	; 0x80
 8001622:	0340      	lsls	r0, r0, #13
 8001624:	4301      	orrs	r1, r0
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <__aeabi_d2iz+0x60>)
 8001628:	1ac0      	subs	r0, r0, r3
 800162a:	281f      	cmp	r0, #31
 800162c:	dd08      	ble.n	8001640 <__aeabi_d2iz+0x44>
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <__aeabi_d2iz+0x64>)
 8001630:	1ac3      	subs	r3, r0, r3
 8001632:	40d9      	lsrs	r1, r3
 8001634:	000b      	movs	r3, r1
 8001636:	4258      	negs	r0, r3
 8001638:	2a00      	cmp	r2, #0
 800163a:	d1f0      	bne.n	800161e <__aeabi_d2iz+0x22>
 800163c:	0018      	movs	r0, r3
 800163e:	e7ee      	b.n	800161e <__aeabi_d2iz+0x22>
 8001640:	4c08      	ldr	r4, [pc, #32]	; (8001664 <__aeabi_d2iz+0x68>)
 8001642:	40c5      	lsrs	r5, r0
 8001644:	46a4      	mov	ip, r4
 8001646:	4463      	add	r3, ip
 8001648:	4099      	lsls	r1, r3
 800164a:	000b      	movs	r3, r1
 800164c:	432b      	orrs	r3, r5
 800164e:	e7f2      	b.n	8001636 <__aeabi_d2iz+0x3a>
 8001650:	000003fe 	.word	0x000003fe
 8001654:	0000041d 	.word	0x0000041d
 8001658:	7fffffff 	.word	0x7fffffff
 800165c:	00000433 	.word	0x00000433
 8001660:	00000413 	.word	0x00000413
 8001664:	fffffbed 	.word	0xfffffbed

08001668 <__aeabi_i2d>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	2800      	cmp	r0, #0
 800166c:	d016      	beq.n	800169c <__aeabi_i2d+0x34>
 800166e:	17c3      	asrs	r3, r0, #31
 8001670:	18c5      	adds	r5, r0, r3
 8001672:	405d      	eors	r5, r3
 8001674:	0fc4      	lsrs	r4, r0, #31
 8001676:	0028      	movs	r0, r5
 8001678:	f000 f88a 	bl	8001790 <__clzsi2>
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <__aeabi_i2d+0x5c>)
 800167e:	1a1b      	subs	r3, r3, r0
 8001680:	280a      	cmp	r0, #10
 8001682:	dc16      	bgt.n	80016b2 <__aeabi_i2d+0x4a>
 8001684:	0002      	movs	r2, r0
 8001686:	002e      	movs	r6, r5
 8001688:	3215      	adds	r2, #21
 800168a:	4096      	lsls	r6, r2
 800168c:	220b      	movs	r2, #11
 800168e:	1a12      	subs	r2, r2, r0
 8001690:	40d5      	lsrs	r5, r2
 8001692:	055b      	lsls	r3, r3, #21
 8001694:	032d      	lsls	r5, r5, #12
 8001696:	0b2d      	lsrs	r5, r5, #12
 8001698:	0d5b      	lsrs	r3, r3, #21
 800169a:	e003      	b.n	80016a4 <__aeabi_i2d+0x3c>
 800169c:	2400      	movs	r4, #0
 800169e:	2300      	movs	r3, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	2600      	movs	r6, #0
 80016a4:	051b      	lsls	r3, r3, #20
 80016a6:	432b      	orrs	r3, r5
 80016a8:	07e4      	lsls	r4, r4, #31
 80016aa:	4323      	orrs	r3, r4
 80016ac:	0030      	movs	r0, r6
 80016ae:	0019      	movs	r1, r3
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	380b      	subs	r0, #11
 80016b4:	4085      	lsls	r5, r0
 80016b6:	055b      	lsls	r3, r3, #21
 80016b8:	032d      	lsls	r5, r5, #12
 80016ba:	2600      	movs	r6, #0
 80016bc:	0b2d      	lsrs	r5, r5, #12
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	e7f0      	b.n	80016a4 <__aeabi_i2d+0x3c>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	0000041e 	.word	0x0000041e

080016c8 <__aeabi_ui2d>:
 80016c8:	b510      	push	{r4, lr}
 80016ca:	1e04      	subs	r4, r0, #0
 80016cc:	d010      	beq.n	80016f0 <__aeabi_ui2d+0x28>
 80016ce:	f000 f85f 	bl	8001790 <__clzsi2>
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <__aeabi_ui2d+0x48>)
 80016d4:	1a1b      	subs	r3, r3, r0
 80016d6:	280a      	cmp	r0, #10
 80016d8:	dc11      	bgt.n	80016fe <__aeabi_ui2d+0x36>
 80016da:	220b      	movs	r2, #11
 80016dc:	0021      	movs	r1, r4
 80016de:	1a12      	subs	r2, r2, r0
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	3015      	adds	r0, #21
 80016e4:	030a      	lsls	r2, r1, #12
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4084      	lsls	r4, r0
 80016ea:	0b12      	lsrs	r2, r2, #12
 80016ec:	0d5b      	lsrs	r3, r3, #21
 80016ee:	e001      	b.n	80016f4 <__aeabi_ui2d+0x2c>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4313      	orrs	r3, r2
 80016f8:	0020      	movs	r0, r4
 80016fa:	0019      	movs	r1, r3
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	0022      	movs	r2, r4
 8001700:	380b      	subs	r0, #11
 8001702:	4082      	lsls	r2, r0
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	0312      	lsls	r2, r2, #12
 8001708:	2400      	movs	r4, #0
 800170a:	0b12      	lsrs	r2, r2, #12
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	e7f1      	b.n	80016f4 <__aeabi_ui2d+0x2c>
 8001710:	0000041e 	.word	0x0000041e

08001714 <__aeabi_cdrcmple>:
 8001714:	4684      	mov	ip, r0
 8001716:	0010      	movs	r0, r2
 8001718:	4662      	mov	r2, ip
 800171a:	468c      	mov	ip, r1
 800171c:	0019      	movs	r1, r3
 800171e:	4663      	mov	r3, ip
 8001720:	e000      	b.n	8001724 <__aeabi_cdcmpeq>
 8001722:	46c0      	nop			; (mov r8, r8)

08001724 <__aeabi_cdcmpeq>:
 8001724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001726:	f000 f8f9 	bl	800191c <__ledf2>
 800172a:	2800      	cmp	r0, #0
 800172c:	d401      	bmi.n	8001732 <__aeabi_cdcmpeq+0xe>
 800172e:	2100      	movs	r1, #0
 8001730:	42c8      	cmn	r0, r1
 8001732:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001734 <__aeabi_dcmpeq>:
 8001734:	b510      	push	{r4, lr}
 8001736:	f000 f849 	bl	80017cc <__eqdf2>
 800173a:	4240      	negs	r0, r0
 800173c:	3001      	adds	r0, #1
 800173e:	bd10      	pop	{r4, pc}

08001740 <__aeabi_dcmplt>:
 8001740:	b510      	push	{r4, lr}
 8001742:	f000 f8eb 	bl	800191c <__ledf2>
 8001746:	2800      	cmp	r0, #0
 8001748:	db01      	blt.n	800174e <__aeabi_dcmplt+0xe>
 800174a:	2000      	movs	r0, #0
 800174c:	bd10      	pop	{r4, pc}
 800174e:	2001      	movs	r0, #1
 8001750:	bd10      	pop	{r4, pc}
 8001752:	46c0      	nop			; (mov r8, r8)

08001754 <__aeabi_dcmple>:
 8001754:	b510      	push	{r4, lr}
 8001756:	f000 f8e1 	bl	800191c <__ledf2>
 800175a:	2800      	cmp	r0, #0
 800175c:	dd01      	ble.n	8001762 <__aeabi_dcmple+0xe>
 800175e:	2000      	movs	r0, #0
 8001760:	bd10      	pop	{r4, pc}
 8001762:	2001      	movs	r0, #1
 8001764:	bd10      	pop	{r4, pc}
 8001766:	46c0      	nop			; (mov r8, r8)

08001768 <__aeabi_dcmpgt>:
 8001768:	b510      	push	{r4, lr}
 800176a:	f000 f871 	bl	8001850 <__gedf2>
 800176e:	2800      	cmp	r0, #0
 8001770:	dc01      	bgt.n	8001776 <__aeabi_dcmpgt+0xe>
 8001772:	2000      	movs	r0, #0
 8001774:	bd10      	pop	{r4, pc}
 8001776:	2001      	movs	r0, #1
 8001778:	bd10      	pop	{r4, pc}
 800177a:	46c0      	nop			; (mov r8, r8)

0800177c <__aeabi_dcmpge>:
 800177c:	b510      	push	{r4, lr}
 800177e:	f000 f867 	bl	8001850 <__gedf2>
 8001782:	2800      	cmp	r0, #0
 8001784:	da01      	bge.n	800178a <__aeabi_dcmpge+0xe>
 8001786:	2000      	movs	r0, #0
 8001788:	bd10      	pop	{r4, pc}
 800178a:	2001      	movs	r0, #1
 800178c:	bd10      	pop	{r4, pc}
 800178e:	46c0      	nop			; (mov r8, r8)

08001790 <__clzsi2>:
 8001790:	211c      	movs	r1, #28
 8001792:	2301      	movs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	4298      	cmp	r0, r3
 8001798:	d301      	bcc.n	800179e <__clzsi2+0xe>
 800179a:	0c00      	lsrs	r0, r0, #16
 800179c:	3910      	subs	r1, #16
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	4298      	cmp	r0, r3
 80017a2:	d301      	bcc.n	80017a8 <__clzsi2+0x18>
 80017a4:	0a00      	lsrs	r0, r0, #8
 80017a6:	3908      	subs	r1, #8
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	4298      	cmp	r0, r3
 80017ac:	d301      	bcc.n	80017b2 <__clzsi2+0x22>
 80017ae:	0900      	lsrs	r0, r0, #4
 80017b0:	3904      	subs	r1, #4
 80017b2:	a202      	add	r2, pc, #8	; (adr r2, 80017bc <__clzsi2+0x2c>)
 80017b4:	5c10      	ldrb	r0, [r2, r0]
 80017b6:	1840      	adds	r0, r0, r1
 80017b8:	4770      	bx	lr
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	02020304 	.word	0x02020304
 80017c0:	01010101 	.word	0x01010101
	...

080017cc <__eqdf2>:
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	464e      	mov	r6, r9
 80017d0:	4645      	mov	r5, r8
 80017d2:	46de      	mov	lr, fp
 80017d4:	4657      	mov	r7, sl
 80017d6:	4690      	mov	r8, r2
 80017d8:	b5e0      	push	{r5, r6, r7, lr}
 80017da:	0017      	movs	r7, r2
 80017dc:	031a      	lsls	r2, r3, #12
 80017de:	0b12      	lsrs	r2, r2, #12
 80017e0:	0005      	movs	r5, r0
 80017e2:	4684      	mov	ip, r0
 80017e4:	4819      	ldr	r0, [pc, #100]	; (800184c <__eqdf2+0x80>)
 80017e6:	030e      	lsls	r6, r1, #12
 80017e8:	004c      	lsls	r4, r1, #1
 80017ea:	4691      	mov	r9, r2
 80017ec:	005a      	lsls	r2, r3, #1
 80017ee:	0fdb      	lsrs	r3, r3, #31
 80017f0:	469b      	mov	fp, r3
 80017f2:	0b36      	lsrs	r6, r6, #12
 80017f4:	0d64      	lsrs	r4, r4, #21
 80017f6:	0fc9      	lsrs	r1, r1, #31
 80017f8:	0d52      	lsrs	r2, r2, #21
 80017fa:	4284      	cmp	r4, r0
 80017fc:	d019      	beq.n	8001832 <__eqdf2+0x66>
 80017fe:	4282      	cmp	r2, r0
 8001800:	d010      	beq.n	8001824 <__eqdf2+0x58>
 8001802:	2001      	movs	r0, #1
 8001804:	4294      	cmp	r4, r2
 8001806:	d10e      	bne.n	8001826 <__eqdf2+0x5a>
 8001808:	454e      	cmp	r6, r9
 800180a:	d10c      	bne.n	8001826 <__eqdf2+0x5a>
 800180c:	2001      	movs	r0, #1
 800180e:	45c4      	cmp	ip, r8
 8001810:	d109      	bne.n	8001826 <__eqdf2+0x5a>
 8001812:	4559      	cmp	r1, fp
 8001814:	d017      	beq.n	8001846 <__eqdf2+0x7a>
 8001816:	2c00      	cmp	r4, #0
 8001818:	d105      	bne.n	8001826 <__eqdf2+0x5a>
 800181a:	0030      	movs	r0, r6
 800181c:	4328      	orrs	r0, r5
 800181e:	1e43      	subs	r3, r0, #1
 8001820:	4198      	sbcs	r0, r3
 8001822:	e000      	b.n	8001826 <__eqdf2+0x5a>
 8001824:	2001      	movs	r0, #1
 8001826:	bcf0      	pop	{r4, r5, r6, r7}
 8001828:	46bb      	mov	fp, r7
 800182a:	46b2      	mov	sl, r6
 800182c:	46a9      	mov	r9, r5
 800182e:	46a0      	mov	r8, r4
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001832:	0033      	movs	r3, r6
 8001834:	2001      	movs	r0, #1
 8001836:	432b      	orrs	r3, r5
 8001838:	d1f5      	bne.n	8001826 <__eqdf2+0x5a>
 800183a:	42a2      	cmp	r2, r4
 800183c:	d1f3      	bne.n	8001826 <__eqdf2+0x5a>
 800183e:	464b      	mov	r3, r9
 8001840:	433b      	orrs	r3, r7
 8001842:	d1f0      	bne.n	8001826 <__eqdf2+0x5a>
 8001844:	e7e2      	b.n	800180c <__eqdf2+0x40>
 8001846:	2000      	movs	r0, #0
 8001848:	e7ed      	b.n	8001826 <__eqdf2+0x5a>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff

08001850 <__gedf2>:
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	4647      	mov	r7, r8
 8001854:	46ce      	mov	lr, r9
 8001856:	0004      	movs	r4, r0
 8001858:	0018      	movs	r0, r3
 800185a:	0016      	movs	r6, r2
 800185c:	031b      	lsls	r3, r3, #12
 800185e:	0b1b      	lsrs	r3, r3, #12
 8001860:	4d2d      	ldr	r5, [pc, #180]	; (8001918 <__gedf2+0xc8>)
 8001862:	004a      	lsls	r2, r1, #1
 8001864:	4699      	mov	r9, r3
 8001866:	b580      	push	{r7, lr}
 8001868:	0043      	lsls	r3, r0, #1
 800186a:	030f      	lsls	r7, r1, #12
 800186c:	46a4      	mov	ip, r4
 800186e:	46b0      	mov	r8, r6
 8001870:	0b3f      	lsrs	r7, r7, #12
 8001872:	0d52      	lsrs	r2, r2, #21
 8001874:	0fc9      	lsrs	r1, r1, #31
 8001876:	0d5b      	lsrs	r3, r3, #21
 8001878:	0fc0      	lsrs	r0, r0, #31
 800187a:	42aa      	cmp	r2, r5
 800187c:	d021      	beq.n	80018c2 <__gedf2+0x72>
 800187e:	42ab      	cmp	r3, r5
 8001880:	d013      	beq.n	80018aa <__gedf2+0x5a>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d122      	bne.n	80018cc <__gedf2+0x7c>
 8001886:	433c      	orrs	r4, r7
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <__gedf2+0x42>
 800188c:	464d      	mov	r5, r9
 800188e:	432e      	orrs	r6, r5
 8001890:	d022      	beq.n	80018d8 <__gedf2+0x88>
 8001892:	2c00      	cmp	r4, #0
 8001894:	d010      	beq.n	80018b8 <__gedf2+0x68>
 8001896:	4281      	cmp	r1, r0
 8001898:	d022      	beq.n	80018e0 <__gedf2+0x90>
 800189a:	2002      	movs	r0, #2
 800189c:	3901      	subs	r1, #1
 800189e:	4008      	ands	r0, r1
 80018a0:	3801      	subs	r0, #1
 80018a2:	bcc0      	pop	{r6, r7}
 80018a4:	46b9      	mov	r9, r7
 80018a6:	46b0      	mov	r8, r6
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	464d      	mov	r5, r9
 80018ac:	432e      	orrs	r6, r5
 80018ae:	d129      	bne.n	8001904 <__gedf2+0xb4>
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d1f0      	bne.n	8001896 <__gedf2+0x46>
 80018b4:	433c      	orrs	r4, r7
 80018b6:	d1ee      	bne.n	8001896 <__gedf2+0x46>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d1f2      	bne.n	80018a2 <__gedf2+0x52>
 80018bc:	2001      	movs	r0, #1
 80018be:	4240      	negs	r0, r0
 80018c0:	e7ef      	b.n	80018a2 <__gedf2+0x52>
 80018c2:	003d      	movs	r5, r7
 80018c4:	4325      	orrs	r5, r4
 80018c6:	d11d      	bne.n	8001904 <__gedf2+0xb4>
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d0ee      	beq.n	80018aa <__gedf2+0x5a>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e2      	bne.n	8001896 <__gedf2+0x46>
 80018d0:	464c      	mov	r4, r9
 80018d2:	4326      	orrs	r6, r4
 80018d4:	d1df      	bne.n	8001896 <__gedf2+0x46>
 80018d6:	e7e0      	b.n	800189a <__gedf2+0x4a>
 80018d8:	2000      	movs	r0, #0
 80018da:	2c00      	cmp	r4, #0
 80018dc:	d0e1      	beq.n	80018a2 <__gedf2+0x52>
 80018de:	e7dc      	b.n	800189a <__gedf2+0x4a>
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dc0a      	bgt.n	80018fa <__gedf2+0xaa>
 80018e4:	dbe8      	blt.n	80018b8 <__gedf2+0x68>
 80018e6:	454f      	cmp	r7, r9
 80018e8:	d8d7      	bhi.n	800189a <__gedf2+0x4a>
 80018ea:	d00e      	beq.n	800190a <__gedf2+0xba>
 80018ec:	2000      	movs	r0, #0
 80018ee:	454f      	cmp	r7, r9
 80018f0:	d2d7      	bcs.n	80018a2 <__gedf2+0x52>
 80018f2:	2900      	cmp	r1, #0
 80018f4:	d0e2      	beq.n	80018bc <__gedf2+0x6c>
 80018f6:	0008      	movs	r0, r1
 80018f8:	e7d3      	b.n	80018a2 <__gedf2+0x52>
 80018fa:	4243      	negs	r3, r0
 80018fc:	4158      	adcs	r0, r3
 80018fe:	0040      	lsls	r0, r0, #1
 8001900:	3801      	subs	r0, #1
 8001902:	e7ce      	b.n	80018a2 <__gedf2+0x52>
 8001904:	2002      	movs	r0, #2
 8001906:	4240      	negs	r0, r0
 8001908:	e7cb      	b.n	80018a2 <__gedf2+0x52>
 800190a:	45c4      	cmp	ip, r8
 800190c:	d8c5      	bhi.n	800189a <__gedf2+0x4a>
 800190e:	2000      	movs	r0, #0
 8001910:	45c4      	cmp	ip, r8
 8001912:	d2c6      	bcs.n	80018a2 <__gedf2+0x52>
 8001914:	e7ed      	b.n	80018f2 <__gedf2+0xa2>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	000007ff 	.word	0x000007ff

0800191c <__ledf2>:
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	4647      	mov	r7, r8
 8001920:	46ce      	mov	lr, r9
 8001922:	0004      	movs	r4, r0
 8001924:	0018      	movs	r0, r3
 8001926:	0016      	movs	r6, r2
 8001928:	031b      	lsls	r3, r3, #12
 800192a:	0b1b      	lsrs	r3, r3, #12
 800192c:	4d2c      	ldr	r5, [pc, #176]	; (80019e0 <__ledf2+0xc4>)
 800192e:	004a      	lsls	r2, r1, #1
 8001930:	4699      	mov	r9, r3
 8001932:	b580      	push	{r7, lr}
 8001934:	0043      	lsls	r3, r0, #1
 8001936:	030f      	lsls	r7, r1, #12
 8001938:	46a4      	mov	ip, r4
 800193a:	46b0      	mov	r8, r6
 800193c:	0b3f      	lsrs	r7, r7, #12
 800193e:	0d52      	lsrs	r2, r2, #21
 8001940:	0fc9      	lsrs	r1, r1, #31
 8001942:	0d5b      	lsrs	r3, r3, #21
 8001944:	0fc0      	lsrs	r0, r0, #31
 8001946:	42aa      	cmp	r2, r5
 8001948:	d00d      	beq.n	8001966 <__ledf2+0x4a>
 800194a:	42ab      	cmp	r3, r5
 800194c:	d010      	beq.n	8001970 <__ledf2+0x54>
 800194e:	2a00      	cmp	r2, #0
 8001950:	d127      	bne.n	80019a2 <__ledf2+0x86>
 8001952:	433c      	orrs	r4, r7
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <__ledf2+0x60>
 8001958:	464d      	mov	r5, r9
 800195a:	432e      	orrs	r6, r5
 800195c:	d10e      	bne.n	800197c <__ledf2+0x60>
 800195e:	2000      	movs	r0, #0
 8001960:	2c00      	cmp	r4, #0
 8001962:	d015      	beq.n	8001990 <__ledf2+0x74>
 8001964:	e00e      	b.n	8001984 <__ledf2+0x68>
 8001966:	003d      	movs	r5, r7
 8001968:	4325      	orrs	r5, r4
 800196a:	d110      	bne.n	800198e <__ledf2+0x72>
 800196c:	4293      	cmp	r3, r2
 800196e:	d118      	bne.n	80019a2 <__ledf2+0x86>
 8001970:	464d      	mov	r5, r9
 8001972:	432e      	orrs	r6, r5
 8001974:	d10b      	bne.n	800198e <__ledf2+0x72>
 8001976:	2a00      	cmp	r2, #0
 8001978:	d102      	bne.n	8001980 <__ledf2+0x64>
 800197a:	433c      	orrs	r4, r7
 800197c:	2c00      	cmp	r4, #0
 800197e:	d00b      	beq.n	8001998 <__ledf2+0x7c>
 8001980:	4281      	cmp	r1, r0
 8001982:	d014      	beq.n	80019ae <__ledf2+0x92>
 8001984:	2002      	movs	r0, #2
 8001986:	3901      	subs	r1, #1
 8001988:	4008      	ands	r0, r1
 800198a:	3801      	subs	r0, #1
 800198c:	e000      	b.n	8001990 <__ledf2+0x74>
 800198e:	2002      	movs	r0, #2
 8001990:	bcc0      	pop	{r6, r7}
 8001992:	46b9      	mov	r9, r7
 8001994:	46b0      	mov	r8, r6
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001998:	2800      	cmp	r0, #0
 800199a:	d1f9      	bne.n	8001990 <__ledf2+0x74>
 800199c:	2001      	movs	r0, #1
 800199e:	4240      	negs	r0, r0
 80019a0:	e7f6      	b.n	8001990 <__ledf2+0x74>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ec      	bne.n	8001980 <__ledf2+0x64>
 80019a6:	464c      	mov	r4, r9
 80019a8:	4326      	orrs	r6, r4
 80019aa:	d1e9      	bne.n	8001980 <__ledf2+0x64>
 80019ac:	e7ea      	b.n	8001984 <__ledf2+0x68>
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dd04      	ble.n	80019bc <__ledf2+0xa0>
 80019b2:	4243      	negs	r3, r0
 80019b4:	4158      	adcs	r0, r3
 80019b6:	0040      	lsls	r0, r0, #1
 80019b8:	3801      	subs	r0, #1
 80019ba:	e7e9      	b.n	8001990 <__ledf2+0x74>
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbeb      	blt.n	8001998 <__ledf2+0x7c>
 80019c0:	454f      	cmp	r7, r9
 80019c2:	d8df      	bhi.n	8001984 <__ledf2+0x68>
 80019c4:	d006      	beq.n	80019d4 <__ledf2+0xb8>
 80019c6:	2000      	movs	r0, #0
 80019c8:	454f      	cmp	r7, r9
 80019ca:	d2e1      	bcs.n	8001990 <__ledf2+0x74>
 80019cc:	2900      	cmp	r1, #0
 80019ce:	d0e5      	beq.n	800199c <__ledf2+0x80>
 80019d0:	0008      	movs	r0, r1
 80019d2:	e7dd      	b.n	8001990 <__ledf2+0x74>
 80019d4:	45c4      	cmp	ip, r8
 80019d6:	d8d5      	bhi.n	8001984 <__ledf2+0x68>
 80019d8:	2000      	movs	r0, #0
 80019da:	45c4      	cmp	ip, r8
 80019dc:	d2d8      	bcs.n	8001990 <__ledf2+0x74>
 80019de:	e7f5      	b.n	80019cc <__ledf2+0xb0>
 80019e0:	000007ff 	.word	0x000007ff

080019e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	2414      	movs	r4, #20
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	0018      	movs	r0, r3
 80019f0:	2314      	movs	r3, #20
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f003 fb9b 	bl	8005130 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <MX_GPIO_Init+0x11c>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0309      	lsls	r1, r1, #12
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	031b      	lsls	r3, r3, #12
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	03c9      	lsls	r1, r1, #15
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	03db      	lsls	r3, r3, #15
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	0289      	lsls	r1, r1, #10
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	02c9      	lsls	r1, r1, #11
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <MX_GPIO_Init+0x11c>)
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	02db      	lsls	r3, r3, #11
 8001a64:	4013      	ands	r3, r2
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a6a:	2390      	movs	r3, #144	; 0x90
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2120      	movs	r1, #32
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 feb4 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4821      	ldr	r0, [pc, #132]	; (8001b04 <MX_GPIO_Init+0x120>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	0019      	movs	r1, r3
 8001a82:	f000 fead 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	0192      	lsls	r2, r2, #6
 8001a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2284      	movs	r2, #132	; 0x84
 8001a92:	0392      	lsls	r2, r2, #14
 8001a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <MX_GPIO_Init+0x124>)
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	f000 fd24 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	2220      	movs	r2, #32
 8001aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	193a      	adds	r2, r7, r4
 8001ac2:	2390      	movs	r3, #144	; 0x90
 8001ac4:	05db      	lsls	r3, r3, #23
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fd11 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ace:	0021      	movs	r1, r4
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2201      	movs	r2, #1
 8001adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <MX_GPIO_Init+0x120>)
 8001aee:	0019      	movs	r1, r3
 8001af0:	0010      	movs	r0, r2
 8001af2:	f000 fcfd 	bl	80024f0 <HAL_GPIO_Init>

}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b00b      	add	sp, #44	; 0x2c
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t SPI_Tran[3] = {0X0, 0X80, 0X0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4a51      	ldr	r2, [pc, #324]	; (8001c5c <main+0x150>)
 8001b16:	8811      	ldrh	r1, [r2, #0]
 8001b18:	8019      	strh	r1, [r3, #0]
 8001b1a:	7892      	ldrb	r2, [r2, #2]
 8001b1c:	709a      	strb	r2, [r3, #2]
	uint8_t SPI_Rec[3] = {0x0, 0x0, 0x0};
 8001b1e:	003b      	movs	r3, r7
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <main+0x154>)
 8001b22:	8811      	ldrh	r1, [r2, #0]
 8001b24:	8019      	strh	r1, [r3, #0]
 8001b26:	7892      	ldrb	r2, [r2, #2]
 8001b28:	709a      	strb	r2, [r3, #2]

	const uint16_t ADC_MAX = 1024;
 8001b2a:	231e      	movs	r3, #30
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	801a      	strh	r2, [r3, #0]
	const uint16_t COUNTER_PERIOD = 65535;
 8001b34:	211c      	movs	r1, #28
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	801a      	strh	r2, [r3, #0]
	const int SPI_TIMEOUT = 1000;
 8001b3e:	23fa      	movs	r3, #250	; 0xfa
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]

	const int MIN_COUNT_VALUE = 0.05;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
	const uint8_t MIN_COMPARE_VAL = MIN_COUNT_VALUE * COUNTER_PERIOD;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	b2d9      	uxtb	r1, r3
 8001b52:	2313      	movs	r3, #19
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	434a      	muls	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]

	uint16_t adc_input = 0;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f000 fb89 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 f883 	bl	8001c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f7ff ff3b 	bl	80019e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b6e:	f000 fadd 	bl	800212c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b72:	f000 f8d5 	bl	8001d20 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001b76:	f000 f9c3 	bl	8001f00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4839      	ldr	r0, [pc, #228]	; (8001c64 <main+0x158>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	0019      	movs	r1, r3
 8001b84:	f000 fe2c 	bl	80027e0 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <main+0x15c>)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f002 f8eb 	bl	8003d68 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4833      	ldr	r0, [pc, #204]	; (8001c64 <main+0x158>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	f000 fe20 	bl	80027e0 <HAL_GPIO_WritePin>

	  HAL_SPI_TransmitReceive(&hspi1, SPI_Tran, SPI_Rec, 3, SPI_TIMEOUT);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	003a      	movs	r2, r7
 8001ba4:	1d39      	adds	r1, r7, #4
 8001ba6:	4831      	ldr	r0, [pc, #196]	; (8001c6c <main+0x160>)
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2303      	movs	r3, #3
 8001bac:	f001 fcec 	bl	8003588 <HAL_SPI_TransmitReceive>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	482b      	ldr	r0, [pc, #172]	; (8001c64 <main+0x158>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	0019      	movs	r1, r3
 8001bba:	f000 fe11 	bl	80027e0 <HAL_GPIO_WritePin>

	  adc_input = ( ( SPI_Tran[1] <<8 ) | (SPI_Rec[2]));
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	003b      	movs	r3, r7
 8001bc8:	789b      	ldrb	r3, [r3, #2]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	801a      	strh	r2, [r3, #0]

	  double compare_value = (double)adc_input /ADC_MAX + MIN_COMPARE_VAL + MIN_COMPARE_VAL;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fd74 	bl	80016c8 <__aeabi_ui2d>
 8001be0:	0004      	movs	r4, r0
 8001be2:	000d      	movs	r5, r1
 8001be4:	231e      	movs	r3, #30
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff fd3c 	bl	8001668 <__aeabi_i2d>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	000b      	movs	r3, r1
 8001bf4:	0020      	movs	r0, r4
 8001bf6:	0029      	movs	r1, r5
 8001bf8:	f7fe fe90 	bl	800091c <__aeabi_ddiv>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	000b      	movs	r3, r1
 8001c00:	0014      	movs	r4, r2
 8001c02:	001d      	movs	r5, r3
 8001c04:	2613      	movs	r6, #19
 8001c06:	19bb      	adds	r3, r7, r6
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fd2c 	bl	8001668 <__aeabi_i2d>
 8001c10:	0002      	movs	r2, r0
 8001c12:	000b      	movs	r3, r1
 8001c14:	0020      	movs	r0, r4
 8001c16:	0029      	movs	r1, r5
 8001c18:	f7fe fb20 	bl	800025c <__aeabi_dadd>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	000b      	movs	r3, r1
 8001c20:	0014      	movs	r4, r2
 8001c22:	001d      	movs	r5, r3
 8001c24:	19bb      	adds	r3, r7, r6
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fd1d 	bl	8001668 <__aeabi_i2d>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	000b      	movs	r3, r1
 8001c32:	0020      	movs	r0, r4
 8001c34:	0029      	movs	r1, r5
 8001c36:	f7fe fb11 	bl	800025c <__aeabi_dadd>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	000b      	movs	r3, r1
 8001c3e:	60ba      	str	r2, [r7, #8]
 8001c40:	60fb      	str	r3, [r7, #12]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <main+0x15c>)
 8001c44:	681c      	ldr	r4, [r3, #0]
 8001c46:	68b8      	ldr	r0, [r7, #8]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	f7fe fae9 	bl	8000220 <__aeabi_d2uiz>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	6363      	str	r3, [r4, #52]	; 0x34

	  HAL_Delay(10);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f000 fb74 	bl	8002340 <HAL_Delay>
  {
 8001c58:	e79b      	b.n	8001b92 <main+0x86>
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	080051a0 	.word	0x080051a0
 8001c60:	080051a4 	.word	0x080051a4
 8001c64:	48000400 	.word	0x48000400
 8001c68:	2000008c 	.word	0x2000008c
 8001c6c:	20000028 	.word	0x20000028

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b099      	sub	sp, #100	; 0x64
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	242c      	movs	r4, #44	; 0x2c
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	2334      	movs	r3, #52	; 0x34
 8001c7e:	001a      	movs	r2, r3
 8001c80:	2100      	movs	r1, #0
 8001c82:	f003 fa55 	bl	8005130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c86:	231c      	movs	r3, #28
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	001a      	movs	r2, r3
 8001c90:	2100      	movs	r1, #0
 8001c92:	f003 fa4d 	bl	8005130 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c96:	003b      	movs	r3, r7
 8001c98:	0018      	movs	r0, r3
 8001c9a:	231c      	movs	r3, #28
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f003 fa46 	bl	8005130 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	2201      	movs	r2, #1
 8001cae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fdaf 	bl	800281c <HAL_RCC_OscConfig>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001cc2:	f000 f828 	bl	8001d16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	211c      	movs	r1, #28
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2207      	movs	r2, #7
 8001ccc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 f91f 	bl	8002f28 <HAL_RCC_ClockConfig>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cee:	f000 f812 	bl	8001d16 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf2:	003b      	movs	r3, r7
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf8:	003b      	movs	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfe:	003b      	movs	r3, r7
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 fa8b 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d0a:	f000 f804 	bl	8001d16 <Error_Handler>
  }
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b019      	add	sp, #100	; 0x64
 8001d14:	bd90      	pop	{r4, r7, pc}

08001d16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1a:	b672      	cpsid	i
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <Error_Handler+0x8>

08001d20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <MX_SPI1_Init+0x78>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d2c:	2282      	movs	r2, #130	; 0x82
 8001d2e:	0052      	lsls	r2, r2, #1
 8001d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d3a:	22e0      	movs	r2, #224	; 0xe0
 8001d3c:	00d2      	lsls	r2, r2, #3
 8001d3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d56:	2218      	movs	r2, #24
 8001d58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d6e:	2207      	movs	r2, #7
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <MX_SPI1_Init+0x74>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f001 fb49 	bl	8003418 <HAL_SPI_Init>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d001      	beq.n	8001d8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d8a:	f7ff ffc4 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000028 	.word	0x20000028
 8001d98:	40013000 	.word	0x40013000

08001d9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	2414      	movs	r4, #20
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	0018      	movs	r0, r3
 8001daa:	2314      	movs	r3, #20
 8001dac:	001a      	movs	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	f003 f9be 	bl	8005130 <memset>
  if(spiHandle->Instance==SPI1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <HAL_SPI_MspInit+0xd8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d155      	bne.n	8001e6a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0149      	lsls	r1, r1, #5
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0289      	lsls	r1, r1, #10
 8001de4:	430a      	orrs	r2, r1
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	02c9      	lsls	r1, r1, #11
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_SPI_MspInit+0xdc>)
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	02db      	lsls	r3, r3, #11
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	22c0      	movs	r2, #192	; 0xc0
 8001e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	2203      	movs	r2, #3
 8001e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	193a      	adds	r2, r7, r4
 8001e32:	2390      	movs	r3, #144	; 0x90
 8001e34:	05db      	lsls	r3, r3, #23
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fb59 	bl	80024f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e3e:	0021      	movs	r1, r4
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2208      	movs	r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2202      	movs	r2, #2
 8001e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2203      	movs	r2, #3
 8001e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_SPI_MspInit+0xe0>)
 8001e62:	0019      	movs	r1, r3
 8001e64:	0010      	movs	r0, r2
 8001e66:	f000 fb43 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b00b      	add	sp, #44	; 0x2c
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	48000400 	.word	0x48000400

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_MspInit+0x44>)
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_MspInit+0x44>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	619a      	str	r2, [r3, #24]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_MspInit+0x44>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_MspInit+0x44>)
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_MspInit+0x44>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0549      	lsls	r1, r1, #21
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	61da      	str	r2, [r3, #28]
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_MspInit+0x44>)
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	055b      	lsls	r3, r3, #21
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eec:	f000 fa0c 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b096      	sub	sp, #88	; 0x58
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	2348      	movs	r3, #72	; 0x48
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	001a      	movs	r2, r3
 8001f10:	2100      	movs	r1, #0
 8001f12:	f003 f90d 	bl	8005130 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	001a      	movs	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	f003 f905 	bl	8005130 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	2324      	movs	r3, #36	; 0x24
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	231c      	movs	r3, #28
 8001f2e:	001a      	movs	r2, r3
 8001f30:	2100      	movs	r1, #0
 8001f32:	f003 f8fd 	bl	8005130 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	0018      	movs	r0, r3
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f003 f8f6 	bl	8005130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f46:	4a47      	ldr	r2, [pc, #284]	; (8002064 <MX_TIM1_Init+0x164>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8001f4a:	4b45      	ldr	r3, [pc, #276]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f4c:	220e      	movs	r2, #14
 8001f4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f58:	4a43      	ldr	r2, [pc, #268]	; (8002068 <MX_TIM1_Init+0x168>)
 8001f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f70:	0018      	movs	r0, r3
 8001f72:	f001 fe51 	bl	8003c18 <HAL_TIM_Base_Init>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001f7a:	f7ff fecc 	bl	8001d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7e:	2148      	movs	r1, #72	; 0x48
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	0152      	lsls	r2, r2, #5
 8001f86:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f88:	187a      	adds	r2, r7, r1
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f002 f868 	bl	8004064 <HAL_TIM_ConfigClockSource>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f98:	f7ff febd 	bl	8001d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <MX_TIM1_Init+0x160>)
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f001 fe8a 	bl	8003cb8 <HAL_TIM_PWM_Init>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001fa8:	f7ff feb5 	bl	8001d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2140      	movs	r1, #64	; 0x40
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fba:	187a      	adds	r2, r7, r1
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_TIM1_Init+0x160>)
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 fc5d 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001fca:	f7ff fea4 	bl	8001d16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2124      	movs	r1, #36	; 0x24
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2260      	movs	r2, #96	; 0x60
 8001fd4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	1879      	adds	r1, r7, r1
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_TIM1_Init+0x160>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	0018      	movs	r0, r3
 8002002:	f001 ff69 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800200a:	f7ff fe84 	bl	8001d16 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	0192      	lsls	r2, r2, #6
 8002032:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_TIM1_Init+0x160>)
 800203e:	0011      	movs	r1, r2
 8002040:	0018      	movs	r0, r3
 8002042:	f002 fc7b 	bl	800493c <HAL_TIMEx_ConfigBreakDeadTime>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800204a:	f7ff fe64 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <MX_TIM1_Init+0x160>)
 8002050:	0018      	movs	r0, r3
 8002052:	f000 f82b 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b016      	add	sp, #88	; 0x58
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	2000008c 	.word	0x2000008c
 8002064:	40012c00 	.word	0x40012c00
 8002068:	0000ffff 	.word	0x0000ffff

0800206c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_TIM_Base_MspInit+0x38>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10d      	bne.n	800209a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0109      	lsls	r1, r1, #4
 8002088:	430a      	orrs	r2, r1
 800208a:	619a      	str	r2, [r3, #24]
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_TIM_Base_MspInit+0x3c>)
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	240c      	movs	r4, #12
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	0018      	movs	r0, r3
 80020ba:	2314      	movs	r3, #20
 80020bc:	001a      	movs	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f003 f836 	bl	8005130 <memset>
  if(timHandle->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_TIM_MspPostInit+0x78>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d125      	bne.n	800211a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_TIM_MspPostInit+0x7c>)
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_TIM_MspPostInit+0x7c>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0289      	lsls	r1, r1, #10
 80020d8:	430a      	orrs	r2, r1
 80020da:	615a      	str	r2, [r3, #20]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_TIM_MspPostInit+0x7c>)
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	0052      	lsls	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	0021      	movs	r1, r4
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2202      	movs	r2, #2
 80020f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	187b      	adds	r3, r7, r1
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002106:	187b      	adds	r3, r7, r1
 8002108:	2202      	movs	r2, #2
 800210a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	187a      	adds	r2, r7, r1
 800210e:	2390      	movs	r3, #144	; 0x90
 8002110:	05db      	lsls	r3, r3, #23
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f9eb 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b009      	add	sp, #36	; 0x24
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000

0800212c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <MX_USART2_UART_Init+0x5c>)
 8002134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002138:	2296      	movs	r2, #150	; 0x96
 800213a:	0212      	lsls	r2, r2, #8
 800213c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002170:	0018      	movs	r0, r3
 8002172:	f002 fc41 	bl	80049f8 <HAL_UART_Init>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800217a:	f7ff fdcc 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200000d4 	.word	0x200000d4
 8002188:	40004400 	.word	0x40004400

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	2414      	movs	r4, #20
 8002196:	193b      	adds	r3, r7, r4
 8002198:	0018      	movs	r0, r3
 800219a:	2314      	movs	r3, #20
 800219c:	001a      	movs	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	f002 ffc6 	bl	8005130 <memset>
  if(uartHandle->Instance==USART2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_UART_MspInit+0x90>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d132      	bne.n	8002214 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0289      	lsls	r1, r1, #10
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0289      	lsls	r1, r1, #10
 80021d4:	430a      	orrs	r2, r1
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021e6:	0021      	movs	r1, r4
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2202      	movs	r2, #2
 80021f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2201      	movs	r2, #1
 8002204:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	187a      	adds	r2, r7, r1
 8002208:	2390      	movs	r3, #144	; 0x90
 800220a:	05db      	lsls	r3, r3, #23
 800220c:	0011      	movs	r1, r2
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f96e 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b00b      	add	sp, #44	; 0x2c
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	40004400 	.word	0x40004400
 8002220:	40021000 	.word	0x40021000

08002224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002226:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	; (8002270 <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800224e:	f7ff fe52 	bl	8001ef6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002252:	f002 ff75 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002256:	f7ff fc59 	bl	8001b0c <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
  ldr   r0, =_estack
 800225c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002268:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 800226c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002270:	2000015c 	.word	0x2000015c

08002274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_COMP_IRQHandler>
	...

08002278 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_Init+0x24>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_Init+0x24>)
 8002282:	2110      	movs	r1, #16
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f809 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228e:	f7ff fdf7 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_InitTick+0x5c>)
 80022aa:	681c      	ldr	r4, [r3, #0]
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_InitTick+0x60>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	0019      	movs	r1, r3
 80022b2:	23fa      	movs	r3, #250	; 0xfa
 80022b4:	0098      	lsls	r0, r3, #2
 80022b6:	f7fd ff27 	bl	8000108 <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	0019      	movs	r1, r3
 80022be:	0020      	movs	r0, r4
 80022c0:	f7fd ff22 	bl	8000108 <__udivsi3>
 80022c4:	0003      	movs	r3, r0
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f905 	bl	80024d6 <HAL_SYSTICK_Config>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e00f      	b.n	80022f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d80b      	bhi.n	80022f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	2301      	movs	r3, #1
 80022de:	425b      	negs	r3, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f8e2 	bl	80024ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_InitTick+0x64>)
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b003      	add	sp, #12
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000008 	.word	0x20000008
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x1c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	001a      	movs	r2, r3
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x20>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	18d2      	adds	r2, r2, r3
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_IncTick+0x20>)
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	20000008 	.word	0x20000008
 8002328:	20000158 	.word	0x20000158

0800232c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_GetTick+0x10>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	20000158 	.word	0x20000158

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff fff0 	bl	800232c <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	001a      	movs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	189b      	adds	r3, r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	f7ff ffe0 	bl	800232c <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000008 	.word	0x20000008

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	0002      	movs	r2, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b7f      	cmp	r3, #127	; 0x7f
 800239c:	d828      	bhi.n	80023f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239e:	4a2f      	ldr	r2, [pc, #188]	; (800245c <__NVIC_SetPriority+0xd4>)
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	33c0      	adds	r3, #192	; 0xc0
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	589b      	ldr	r3, [r3, r2]
 80023ae:	1dfa      	adds	r2, r7, #7
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	0011      	movs	r1, r2
 80023b4:	2203      	movs	r2, #3
 80023b6:	400a      	ands	r2, r1
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	21ff      	movs	r1, #255	; 0xff
 80023bc:	4091      	lsls	r1, r2
 80023be:	000a      	movs	r2, r1
 80023c0:	43d2      	mvns	r2, r2
 80023c2:	401a      	ands	r2, r3
 80023c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	22ff      	movs	r2, #255	; 0xff
 80023cc:	401a      	ands	r2, r3
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	2303      	movs	r3, #3
 80023d6:	4003      	ands	r3, r0
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023dc:	481f      	ldr	r0, [pc, #124]	; (800245c <__NVIC_SetPriority+0xd4>)
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	430a      	orrs	r2, r1
 80023e8:	33c0      	adds	r3, #192	; 0xc0
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ee:	e031      	b.n	8002454 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <__NVIC_SetPriority+0xd8>)
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	0019      	movs	r1, r3
 80023f8:	230f      	movs	r3, #15
 80023fa:	400b      	ands	r3, r1
 80023fc:	3b08      	subs	r3, #8
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3306      	adds	r3, #6
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	18d3      	adds	r3, r2, r3
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	1dfa      	adds	r2, r7, #7
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	0011      	movs	r1, r2
 8002410:	2203      	movs	r2, #3
 8002412:	400a      	ands	r2, r1
 8002414:	00d2      	lsls	r2, r2, #3
 8002416:	21ff      	movs	r1, #255	; 0xff
 8002418:	4091      	lsls	r1, r2
 800241a:	000a      	movs	r2, r1
 800241c:	43d2      	mvns	r2, r2
 800241e:	401a      	ands	r2, r3
 8002420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	401a      	ands	r2, r3
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	0018      	movs	r0, r3
 8002430:	2303      	movs	r3, #3
 8002432:	4003      	ands	r3, r0
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <__NVIC_SetPriority+0xd8>)
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	001c      	movs	r4, r3
 8002440:	230f      	movs	r3, #15
 8002442:	4023      	ands	r3, r4
 8002444:	3b08      	subs	r3, #8
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	430a      	orrs	r2, r1
 800244a:	3306      	adds	r3, #6
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	18c3      	adds	r3, r0, r3
 8002450:	3304      	adds	r3, #4
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b003      	add	sp, #12
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	045b      	lsls	r3, r3, #17
 8002474:	429a      	cmp	r2, r3
 8002476:	d301      	bcc.n	800247c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002478:	2301      	movs	r3, #1
 800247a:	e010      	b.n	800249e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <SysTick_Config+0x44>)
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	3a01      	subs	r2, #1
 8002482:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002484:	2301      	movs	r3, #1
 8002486:	425b      	negs	r3, r3
 8002488:	2103      	movs	r1, #3
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff ff7c 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Config+0x44>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SysTick_Config+0x44>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	210f      	movs	r1, #15
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	1c02      	adds	r2, r0, #0
 80024bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ff5d 	bl	8002388 <__NVIC_SetPriority>
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff ffbf 	bl	8002464 <SysTick_Config>
 80024e6:	0003      	movs	r3, r0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	e155      	b.n	80027ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4091      	lsls	r1, r2
 800250a:	000a      	movs	r2, r1
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_GPIO_Init+0x28>
 8002516:	e146      	b.n	80027a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	4013      	ands	r3, r2
 8002520:	2b01      	cmp	r3, #1
 8002522:	d005      	beq.n	8002530 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800252c:	2b02      	cmp	r3, #2
 800252e:	d130      	bne.n	8002592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	409a      	lsls	r2, r3
 800253e:	0013      	movs	r3, r2
 8002540:	43da      	mvns	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002566:	2201      	movs	r2, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	2201      	movs	r2, #1
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	4013      	ands	r3, r2
 800259a:	2b03      	cmp	r3, #3
 800259c:	d017      	beq.n	80025ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	43da      	mvns	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d123      	bne.n	8002622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	58d3      	ldr	r3, [r2, r3]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2207      	movs	r2, #7
 80025ec:	4013      	ands	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2107      	movs	r1, #7
 8002606:	400b      	ands	r3, r1
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	6939      	ldr	r1, [r7, #16]
 8002620:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	43da      	mvns	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	401a      	ands	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	23c0      	movs	r3, #192	; 0xc0
 800265c:	029b      	lsls	r3, r3, #10
 800265e:	4013      	ands	r3, r2
 8002660:	d100      	bne.n	8002664 <HAL_GPIO_Init+0x174>
 8002662:	e0a0      	b.n	80027a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_GPIO_Init+0x2d4>)
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <HAL_GPIO_Init+0x2d4>)
 800266a:	2101      	movs	r1, #1
 800266c:	430a      	orrs	r2, r1
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x2d4>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_GPIO_Init+0x2d8>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	589b      	ldr	r3, [r3, r2]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2203      	movs	r2, #3
 800268e:	4013      	ands	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	409a      	lsls	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	43da      	mvns	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	2390      	movs	r3, #144	; 0x90
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x1ee>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_GPIO_Init+0x2dc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x1ea>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a46      	ldr	r2, [pc, #280]	; (80027d0 <HAL_GPIO_Init+0x2e0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x1e6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x1e2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a44      	ldr	r2, [pc, #272]	; (80027d8 <HAL_GPIO_Init+0x2e8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x1de>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x1f0>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x1f0>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x1f0>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x1f0>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x1f0>
 80026de:	2300      	movs	r3, #0
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	2103      	movs	r1, #3
 80026e4:	400a      	ands	r2, r1
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x2d8>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43da      	mvns	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	4013      	ands	r3, r2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43da      	mvns	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	4013      	ands	r3, r2
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	035b      	lsls	r3, r3, #13
 800276a:	4013      	ands	r3, r2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43da      	mvns	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	039b      	lsls	r3, r3, #14
 8002794:	4013      	ands	r3, r2
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	1e13      	subs	r3, r2, #0
 80027b6:	d000      	beq.n	80027ba <HAL_GPIO_Init+0x2ca>
 80027b8:	e6a2      	b.n	8002500 <HAL_GPIO_Init+0x10>
  } 
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b006      	add	sp, #24
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010000 	.word	0x40010000
 80027cc:	48000400 	.word	0x48000400
 80027d0:	48000800 	.word	0x48000800
 80027d4:	48000c00 	.word	0x48000c00
 80027d8:	48001000 	.word	0x48001000
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	0008      	movs	r0, r1
 80027ea:	0011      	movs	r1, r2
 80027ec:	1cbb      	adds	r3, r7, #2
 80027ee:	1c02      	adds	r2, r0, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	1c7b      	adds	r3, r7, #1
 80027f4:	1c0a      	adds	r2, r1, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f8:	1c7b      	adds	r3, r7, #1
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002800:	1cbb      	adds	r3, r7, #2
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f000 fb76 	bl	8002f1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	d100      	bne.n	800283c <HAL_RCC_OscConfig+0x20>
 800283a:	e08e      	b.n	800295a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800283c:	4bc5      	ldr	r3, [pc, #788]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	220c      	movs	r2, #12
 8002842:	4013      	ands	r3, r2
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00e      	beq.n	8002866 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002848:	4bc2      	ldr	r3, [pc, #776]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	220c      	movs	r2, #12
 800284e:	4013      	ands	r3, r2
 8002850:	2b08      	cmp	r3, #8
 8002852:	d117      	bne.n	8002884 <HAL_RCC_OscConfig+0x68>
 8002854:	4bbf      	ldr	r3, [pc, #764]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	401a      	ands	r2, r3
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	025b      	lsls	r3, r3, #9
 8002862:	429a      	cmp	r2, r3
 8002864:	d10e      	bne.n	8002884 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4bbb      	ldr	r3, [pc, #748]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d100      	bne.n	8002874 <HAL_RCC_OscConfig+0x58>
 8002872:	e071      	b.n	8002958 <HAL_RCC_OscConfig+0x13c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d000      	beq.n	800287e <HAL_RCC_OscConfig+0x62>
 800287c:	e06c      	b.n	8002958 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f000 fb4c 	bl	8002f1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x80>
 800288c:	4bb1      	ldr	r3, [pc, #708]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4bb0      	ldr	r3, [pc, #704]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0249      	lsls	r1, r1, #9
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e02f      	b.n	80028fc <HAL_RCC_OscConfig+0xe0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0xa2>
 80028a4:	4bab      	ldr	r3, [pc, #684]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4baa      	ldr	r3, [pc, #680]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028aa:	49ab      	ldr	r1, [pc, #684]	; (8002b58 <HAL_RCC_OscConfig+0x33c>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	4ba8      	ldr	r3, [pc, #672]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba7      	ldr	r3, [pc, #668]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028b6:	49a9      	ldr	r1, [pc, #676]	; (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e01e      	b.n	80028fc <HAL_RCC_OscConfig+0xe0>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10e      	bne.n	80028e4 <HAL_RCC_OscConfig+0xc8>
 80028c6:	4ba3      	ldr	r3, [pc, #652]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4ba2      	ldr	r3, [pc, #648]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	02c9      	lsls	r1, r1, #11
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	4b9f      	ldr	r3, [pc, #636]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b9e      	ldr	r3, [pc, #632]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	0249      	lsls	r1, r1, #9
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xe0>
 80028e4:	4b9b      	ldr	r3, [pc, #620]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b9a      	ldr	r3, [pc, #616]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028ea:	499b      	ldr	r1, [pc, #620]	; (8002b58 <HAL_RCC_OscConfig+0x33c>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	4b98      	ldr	r3, [pc, #608]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b97      	ldr	r3, [pc, #604]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80028f6:	4999      	ldr	r1, [pc, #612]	; (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d014      	beq.n	800292e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff fd12 	bl	800232c <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290e:	f7ff fd0d 	bl	800232c <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	; 0x64
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e2fd      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002920:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	4013      	ands	r3, r2
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0xf2>
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fcfd 	bl	800232c <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fcf8 	bl	800232c <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e2e8      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x11c>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d100      	bne.n	8002966 <HAL_RCC_OscConfig+0x14a>
 8002964:	e06c      	b.n	8002a40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002966:	4b7b      	ldr	r3, [pc, #492]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	220c      	movs	r2, #12
 800296c:	4013      	ands	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002970:	4b78      	ldr	r3, [pc, #480]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	220c      	movs	r2, #12
 8002976:	4013      	ands	r3, r2
 8002978:	2b08      	cmp	r3, #8
 800297a:	d11f      	bne.n	80029bc <HAL_RCC_OscConfig+0x1a0>
 800297c:	4b75      	ldr	r3, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	23c0      	movs	r3, #192	; 0xc0
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	401a      	ands	r2, r3
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	429a      	cmp	r2, r3
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b71      	ldr	r3, [pc, #452]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x188>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e2bb      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b6b      	ldr	r3, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	22f8      	movs	r2, #248	; 0xf8
 80029aa:	4393      	bics	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e041      	b.n	8002a40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d024      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff fcac 	bl	800232c <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7ff fca7 	bl	800232c <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e297      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	22f8      	movs	r2, #248	; 0xf8
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00da      	lsls	r2, r3, #3
 8002a06:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e018      	b.n	8002a40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fc87 	bl	800232c <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a24:	f7ff fc82 	bl	800232c <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d1f1      	bne.n	8002a24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	4013      	ands	r3, r2
 8002a48:	d036      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7ff fc65 	bl	800232c <HAL_GetTick>
 8002a62:	0003      	movs	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fc60 	bl	800232c <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e250      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2202      	movs	r2, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_OscConfig+0x24c>
 8002a84:	e018      	b.n	8002ab8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a8a:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	438a      	bics	r2, r1
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fc4b 	bl	800232c <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fc46 	bl	800232c <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e236      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d1f1      	bne.n	8002a9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2a8>
 8002ac2:	e0b5      	b.n	8002c30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac4:	201f      	movs	r0, #31
 8002ac6:	183b      	adds	r3, r7, r0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d110      	bne.n	8002afa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0549      	lsls	r1, r1, #21
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	61da      	str	r2, [r3, #28]
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	055b      	lsls	r3, r3, #21
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_OscConfig+0x344>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_RCC_OscConfig+0x344>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_RCC_OscConfig+0x344>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0049      	lsls	r1, r1, #1
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b14:	f7ff fc0a 	bl	800232c <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7ff fc05 	bl	800232c <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1f5      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x344>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10f      	bne.n	8002b64 <HAL_RCC_OscConfig+0x348>
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	621a      	str	r2, [r3, #32]
 8002b50:	e036      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3a4>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	40021000 	.word	0x40021000
 8002b58:	fffeffff 	.word	0xfffeffff
 8002b5c:	fffbffff 	.word	0xfffbffff
 8002b60:	40007000 	.word	0x40007000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x36a>
 8002b6c:	4bca      	ldr	r3, [pc, #808]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	4bc9      	ldr	r3, [pc, #804]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	438a      	bics	r2, r1
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	4bc7      	ldr	r3, [pc, #796]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	4bc6      	ldr	r3, [pc, #792]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	2104      	movs	r1, #4
 8002b80:	438a      	bics	r2, r1
 8002b82:	621a      	str	r2, [r3, #32]
 8002b84:	e01c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3a4>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x38c>
 8002b8e:	4bc2      	ldr	r3, [pc, #776]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	4bc1      	ldr	r3, [pc, #772]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b94:	2104      	movs	r1, #4
 8002b96:	430a      	orrs	r2, r1
 8002b98:	621a      	str	r2, [r3, #32]
 8002b9a:	4bbf      	ldr	r3, [pc, #764]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	4bbe      	ldr	r3, [pc, #760]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	621a      	str	r2, [r3, #32]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3a4>
 8002ba8:	4bbb      	ldr	r3, [pc, #748]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4bba      	ldr	r3, [pc, #744]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	4bb8      	ldr	r3, [pc, #736]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	4bb7      	ldr	r3, [pc, #732]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	2104      	movs	r1, #4
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d014      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7ff fbb0 	bl	800232c <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7ff fbab 	bl	800232c <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4aaf      	ldr	r2, [pc, #700]	; (8002e9c <HAL_RCC_OscConfig+0x680>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e19a      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	4bac      	ldr	r3, [pc, #688]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3b6>
 8002bf0:	e013      	b.n	8002c1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff fb9b 	bl	800232c <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfa:	e009      	b.n	8002c10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7ff fb96 	bl	800232c <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	4aa5      	ldr	r2, [pc, #660]	; (8002e9c <HAL_RCC_OscConfig+0x680>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e185      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c10:	4ba1      	ldr	r3, [pc, #644]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c24:	4b9c      	ldr	r3, [pc, #624]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	4b9b      	ldr	r3, [pc, #620]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	499d      	ldr	r1, [pc, #628]	; (8002ea0 <HAL_RCC_OscConfig+0x684>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	4013      	ands	r3, r2
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d12a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c42:	4b95      	ldr	r3, [pc, #596]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c48:	2104      	movs	r1, #4
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c4e:	4b92      	ldr	r3, [pc, #584]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	4b91      	ldr	r3, [pc, #580]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fb67 	bl	800232c <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c64:	f7ff fb62 	bl	800232c <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e152      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c76:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d0f1      	beq.n	8002c64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c80:	4b85      	ldr	r3, [pc, #532]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	22f8      	movs	r2, #248	; 0xf8
 8002c86:	4393      	bics	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	00da      	lsls	r2, r3, #3
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
 8002c96:	e034      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	3305      	adds	r3, #5
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ca0:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	438a      	bics	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cac:	4b7a      	ldr	r3, [pc, #488]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	22f8      	movs	r2, #248	; 0xf8
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	00da      	lsls	r2, r3, #3
 8002cbc:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc2:	e01e      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cc4:	4b74      	ldr	r3, [pc, #464]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc8:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	2104      	movs	r1, #4
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd4:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7ff fb26 	bl	800232c <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ce6:	f7ff fb21 	bl	800232c <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e111      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cf8:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d1f1      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2220      	movs	r2, #32
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d05c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d0c:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	220c      	movs	r2, #12
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d00e      	beq.n	8002d36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d18:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	220c      	movs	r2, #12
 8002d1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d114      	bne.n	8002d4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d24:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d36:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	025b      	lsls	r3, r3, #9
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5a8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d03c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0e6      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d56:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5a:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0249      	lsls	r1, r1, #9
 8002d60:	430a      	orrs	r2, r1
 8002d62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff fae2 	bl	800232c <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6e:	f7ff fadd 	bl	800232c <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0cd      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d80:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	025b      	lsls	r3, r3, #9
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x552>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d8e:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	4943      	ldr	r1, [pc, #268]	; (8002ea4 <HAL_RCC_OscConfig+0x688>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff fac7 	bl	800232c <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7ff fac2 	bl	800232c <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0b2      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x588>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dc4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d100      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x5b4>
 8002dce:	e0a4      	b.n	8002f1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	220c      	movs	r2, #12
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d100      	bne.n	8002dde <HAL_RCC_OscConfig+0x5c2>
 8002ddc:	e078      	b.n	8002ed0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d14c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002dec:	492e      	ldr	r1, [pc, #184]	; (8002ea8 <HAL_RCC_OscConfig+0x68c>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff fa9b 	bl	800232c <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7ff fa96 	bl	800232c <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e086      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	049b      	lsls	r3, r3, #18
 8002e16:	4013      	ands	r3, r2
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	220f      	movs	r2, #15
 8002e20:	4393      	bics	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_RCC_OscConfig+0x690>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	431a      	orrs	r2, r3
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	0449      	lsls	r1, r1, #17
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7ff fa69 	bl	800232c <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7ff fa64 	bl	800232c <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e054      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	049b      	lsls	r3, r3, #18
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x644>
 8002e7e:	e04c      	b.n	8002f1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <HAL_RCC_OscConfig+0x67c>)
 8002e86:	4908      	ldr	r1, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x68c>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff fa4e 	bl	800232c <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6a6>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	00001388 	.word	0x00001388
 8002ea0:	efffffff 	.word	0xefffffff
 8002ea4:	fffeffff 	.word	0xfffeffff
 8002ea8:	feffffff 	.word	0xfeffffff
 8002eac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7ff fa3c 	bl	800232c <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e02c      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_RCC_OscConfig+0x708>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	049b      	lsls	r3, r3, #18
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x694>
 8002ece:	e024      	b.n	8002f1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01f      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCC_OscConfig+0x708>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_OscConfig+0x708>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	23c0      	movs	r3, #192	; 0xc0
 8002eec:	025b      	lsls	r3, r3, #9
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	220f      	movs	r2, #15
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	23f0      	movs	r3, #240	; 0xf0
 8002f0a:	039b      	lsls	r3, r3, #14
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b008      	add	sp, #32
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0bf      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d911      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4393      	bics	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0a6      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d015      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d006      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f88:	21e0      	movs	r1, #224	; 0xe0
 8002f8a:	00c9      	lsls	r1, r1, #3
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	22f0      	movs	r2, #240	; 0xf0
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d04c      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d120      	bne.n	8003004 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07a      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d114      	bne.n	8003004 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06e      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d108      	bne.n	8003004 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e062      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e05b      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	4393      	bics	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff f988 	bl	800232c <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	e009      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7ff f983 	bl	800232c <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_RCC_ClockConfig+0x1a4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e042      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	220c      	movs	r2, #12
 800303c:	401a      	ands	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1ec      	bne.n	8003022 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d211      	bcs.n	800307a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	4393      	bics	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003068:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x19c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e020      	b.n	80030bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2204      	movs	r2, #4
 8003080:	4013      	ands	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x1a8>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003098:	f000 f820 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309c:	0001      	movs	r1, r0
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1a0>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	220f      	movs	r2, #15
 80030a6:	4013      	ands	r3, r2
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1ac>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	000a      	movs	r2, r1
 80030ae:	40da      	lsrs	r2, r3
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1b0>)
 80030b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff f8f3 	bl	80022a0 <HAL_InitTick>
  
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	00001388 	.word	0x00001388
 80030d0:	fffff8ff 	.word	0xfffff8ff
 80030d4:	08005208 	.word	0x08005208
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08f      	sub	sp, #60	; 0x3c
 80030e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80030e2:	2314      	movs	r3, #20
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80030e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030ea:	c313      	stmia	r3!, {r0, r1, r4}
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4a36      	ldr	r2, [pc, #216]	; (80031cc <HAL_RCC_GetSysClockFreq+0xf0>)
 80030f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030f6:	c313      	stmia	r3!, {r0, r1, r4}
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	220c      	movs	r2, #12
 800311a:	4013      	ands	r3, r2
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d047      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xd4>
 8003120:	d849      	bhi.n	80031b6 <HAL_RCC_GetSysClockFreq+0xda>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x50>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x56>
 800312a:	e044      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003130:	e044      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	220f      	movs	r2, #15
 8003138:	4013      	ands	r3, r2
 800313a:	2214      	movs	r2, #20
 800313c:	18ba      	adds	r2, r7, r2
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	220f      	movs	r2, #15
 8003148:	4013      	ands	r3, r2
 800314a:	1d3a      	adds	r2, r7, #4
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	025b      	lsls	r3, r3, #9
 8003156:	401a      	ands	r2, r3
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	429a      	cmp	r2, r3
 800315e:	d109      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003162:	481c      	ldr	r0, [pc, #112]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003164:	f7fc ffd0 	bl	8000108 <__udivsi3>
 8003168:	0003      	movs	r3, r0
 800316a:	001a      	movs	r2, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	4353      	muls	r3, r2
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
 8003172:	e01a      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	025b      	lsls	r3, r3, #9
 800317a:	401a      	ands	r2, r3
 800317c:	23c0      	movs	r3, #192	; 0xc0
 800317e:	025b      	lsls	r3, r3, #9
 8003180:	429a      	cmp	r2, r3
 8003182:	d109      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003186:	4814      	ldr	r0, [pc, #80]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003188:	f7fc ffbe 	bl	8000108 <__udivsi3>
 800318c:	0003      	movs	r3, r0
 800318e:	001a      	movs	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	4353      	muls	r3, r2
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
 8003196:	e008      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319a:	480e      	ldr	r0, [pc, #56]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319c:	f7fc ffb4 	bl	8000108 <__udivsi3>
 80031a0:	0003      	movs	r3, r0
 80031a2:	001a      	movs	r2, r3
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	4353      	muls	r3, r2
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031ae:	e005      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b4:	e002      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b00f      	add	sp, #60	; 0x3c
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	080051a8 	.word	0x080051a8
 80031cc:	080051b8 	.word	0x080051b8
 80031d0:	40021000 	.word	0x40021000
 80031d4:	007a1200 	.word	0x007a1200
 80031d8:	02dc6c00 	.word	0x02dc6c00

080031dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <HAL_RCC_GetHCLKFreq+0x10>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031f4:	f7ff fff2 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031f8:	0001      	movs	r1, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	2207      	movs	r2, #7
 8003202:	4013      	ands	r3, r2
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	40d9      	lsrs	r1, r3
 800320a:	000b      	movs	r3, r1
}    
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021000 	.word	0x40021000
 8003218:	08005218 	.word	0x08005218

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	4013      	ands	r3, r2
 8003236:	d100      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003238:	e08e      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2017      	movs	r0, #23
 800323c:	183b      	adds	r3, r7, r0
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	055b      	lsls	r3, r3, #21
 800324a:	4013      	ands	r3, r2
 800324c:	d110      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0549      	lsls	r1, r1, #21
 8003258:	430a      	orrs	r2, r1
 800325a:	61da      	str	r2, [r3, #28]
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	055b      	lsls	r3, r3, #21
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	183b      	adds	r3, r7, r0
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d11a      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327c:	4b60      	ldr	r3, [pc, #384]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0049      	lsls	r1, r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7ff f84f 	bl	800232c <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	e008      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7ff f84a 	bl	800232c <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e0a6      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b2:	4b52      	ldr	r3, [pc, #328]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d034      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	23c0      	movs	r3, #192	; 0xc0
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d02c      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d4:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a4a      	ldr	r2, [pc, #296]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0249      	lsls	r1, r1, #9
 80032e8:	430a      	orrs	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f2:	4945      	ldr	r1, [pc, #276]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032f8:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff f811 	bl	800232c <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e009      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7ff f80c 	bl	800232c <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	4a3c      	ldr	r2, [pc, #240]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e067      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800333e:	430a      	orrs	r2, r1
 8003340:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003352:	492f      	ldr	r1, [pc, #188]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003354:	400a      	ands	r2, r1
 8003356:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	2203      	movs	r2, #3
 8003368:	4393      	bics	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003372:	430a      	orrs	r2, r1
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2202      	movs	r2, #2
 800337c:	4013      	ands	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003390:	430a      	orrs	r2, r1
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2220      	movs	r2, #32
 800339a:	4013      	ands	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2210      	movs	r2, #16
 80033a4:	4393      	bics	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ae:	430a      	orrs	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4013      	ands	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4013      	ands	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	4393      	bics	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b006      	add	sp, #24
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
 8003404:	fffffcff 	.word	0xfffffcff
 8003408:	fffeffff 	.word	0xfffeffff
 800340c:	00001388 	.word	0x00001388
 8003410:	efffffff 	.word	0xefffffff
 8003414:	fffcffff 	.word	0xfffcffff

08003418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0a8      	b.n	800357c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	2382      	movs	r3, #130	; 0x82
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	429a      	cmp	r2, r3
 800343c:	d009      	beq.n	8003452 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
 8003444:	e005      	b.n	8003452 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	225d      	movs	r2, #93	; 0x5d
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	225c      	movs	r2, #92	; 0x5c
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f7fe fc94 	bl	8001d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	225d      	movs	r2, #93	; 0x5d
 8003478:	2102      	movs	r1, #2
 800347a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	23e0      	movs	r3, #224	; 0xe0
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	429a      	cmp	r2, r3
 8003496:	d902      	bls.n	800349e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e002      	b.n	80034a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	23f0      	movs	r3, #240	; 0xf0
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d008      	beq.n	80034c2 <HAL_SPI_Init+0xaa>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	23e0      	movs	r3, #224	; 0xe0
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	2382      	movs	r3, #130	; 0x82
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	2384      	movs	r3, #132	; 0x84
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	400b      	ands	r3, r1
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2102      	movs	r1, #2
 80034de:	400b      	ands	r3, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2101      	movs	r1, #1
 80034e8:	400b      	ands	r3, r1
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6999      	ldr	r1, [r3, #24]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	400b      	ands	r3, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2138      	movs	r1, #56	; 0x38
 80034fe:	400b      	ands	r3, r1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	400b      	ands	r3, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	0011      	movs	r1, r2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	401a      	ands	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	2204      	movs	r2, #4
 8003528:	401a      	ands	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2110      	movs	r1, #16
 8003530:	400b      	ands	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2108      	movs	r1, #8
 800353a:	400b      	ands	r3, r1
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68d9      	ldr	r1, [r3, #12]
 8003542:	23f0      	movs	r3, #240	; 0xf0
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	0011      	movs	r1, r2
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	015b      	lsls	r3, r3, #5
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4907      	ldr	r1, [pc, #28]	; (8003584 <HAL_SPI_Init+0x16c>)
 8003568:	400a      	ands	r2, r1
 800356a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	225d      	movs	r2, #93	; 0x5d
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bd80      	pop	{r7, pc}
 8003584:	fffff7ff 	.word	0xfffff7ff

08003588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	001a      	movs	r2, r3
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800359e:	2323      	movs	r3, #35	; 0x23
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	225c      	movs	r2, #92	; 0x5c
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x2c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e1b5      	b.n	8003920 <HAL_SPI_TransmitReceive+0x398>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	225c      	movs	r2, #92	; 0x5c
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035bc:	f7fe feb6 	bl	800232c <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035c4:	201b      	movs	r0, #27
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	215d      	movs	r1, #93	; 0x5d
 80035cc:	5c52      	ldrb	r2, [r2, r1]
 80035ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035d6:	2312      	movs	r3, #18
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	1cba      	adds	r2, r7, #2
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035e0:	183b      	adds	r3, r7, r0
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d011      	beq.n	800360c <HAL_SPI_TransmitReceive+0x84>
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	2382      	movs	r3, #130	; 0x82
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d107      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x7a>
 80035fa:	183b      	adds	r3, r7, r0
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d004      	beq.n	800360c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003602:	2323      	movs	r3, #35	; 0x23
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
    goto error;
 800360a:	e17e      	b.n	800390a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x98>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x98>
 8003618:	1cbb      	adds	r3, r7, #2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003620:	2323      	movs	r3, #35	; 0x23
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
    goto error;
 8003628:	e16f      	b.n	800390a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	225d      	movs	r2, #93	; 0x5d
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b04      	cmp	r3, #4
 8003634:	d003      	beq.n	800363e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	225d      	movs	r2, #93	; 0x5d
 800363a:	2105      	movs	r1, #5
 800363c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1cba      	adds	r2, r7, #2
 800364e:	2146      	movs	r1, #70	; 0x46
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1cba      	adds	r2, r7, #2
 8003658:	2144      	movs	r1, #68	; 0x44
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1cba      	adds	r2, r7, #2
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1cba      	adds	r2, r7, #2
 8003670:	8812      	ldrh	r2, [r2, #0]
 8003672:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	23e0      	movs	r3, #224	; 0xe0
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	49a4      	ldr	r1, [pc, #656]	; (8003928 <HAL_SPI_TransmitReceive+0x3a0>)
 8003698:	400a      	ands	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	e008      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	0149      	lsls	r1, r1, #5
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d007      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	23e0      	movs	r3, #224	; 0xe0
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d800      	bhi.n	80036dc <HAL_SPI_TransmitReceive+0x154>
 80036da:	e07f      	b.n	80037dc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x168>
 80036e4:	2312      	movs	r3, #18
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d000      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x168>
 80036ee:	e069      	b.n	80037c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003714:	e056      	b.n	80037c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_SPI_TransmitReceive+0x1d4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <HAL_SPI_TransmitReceive+0x1d4>
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b01      	cmp	r3, #1
 8003732:	d113      	bne.n	800375c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2201      	movs	r2, #1
 8003764:	4013      	ands	r3, r2
 8003766:	2b01      	cmp	r3, #1
 8003768:	d11c      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x21c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2246      	movs	r2, #70	; 0x46
 800376e:	5a9b      	ldrh	r3, [r3, r2]
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2246      	movs	r2, #70	; 0x46
 8003792:	5a9b      	ldrh	r3, [r3, r2]
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b299      	uxth	r1, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2246      	movs	r2, #70	; 0x46
 800379e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037a0:	2301      	movs	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a4:	f7fe fdc2 	bl	800232c <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d807      	bhi.n	80037c4 <HAL_SPI_TransmitReceive+0x23c>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	3301      	adds	r3, #1
 80037b8:	d004      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80037ba:	2323      	movs	r3, #35	; 0x23
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2203      	movs	r2, #3
 80037c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80037c2:	e0a2      	b.n	800390a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1a3      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x18e>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2246      	movs	r2, #70	; 0x46
 80037d2:	5a9b      	ldrh	r3, [r3, r2]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d19d      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x18e>
 80037da:	e085      	b.n	80038e8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x268>
 80037e4:	2312      	movs	r3, #18
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d000      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x268>
 80037ee:	e070      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003816:	e05c      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d11c      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x2d8>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x2d8>
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	2b01      	cmp	r3, #1
 8003834:	d114      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2201      	movs	r2, #1
 8003868:	4013      	ands	r3, r2
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11e      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x324>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2246      	movs	r2, #70	; 0x46
 8003872:	5a9b      	ldrh	r3, [r3, r2]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	001a      	movs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2246      	movs	r2, #70	; 0x46
 800389a:	5a9b      	ldrh	r3, [r3, r2]
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b299      	uxth	r1, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2246      	movs	r2, #70	; 0x46
 80038a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ac:	f7fe fd3e 	bl	800232c <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d802      	bhi.n	80038c2 <HAL_SPI_TransmitReceive+0x33a>
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	3301      	adds	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x340>
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80038c8:	2323      	movs	r3, #35	; 0x23
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2203      	movs	r2, #3
 80038ce:	701a      	strb	r2, [r3, #0]
        goto error;
 80038d0:	e01b      	b.n	800390a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d19d      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x290>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2246      	movs	r2, #70	; 0x46
 80038e0:	5a9b      	ldrh	r3, [r3, r2]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d197      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f94c 	bl	8003b8c <SPI_EndRxTxTransaction>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d007      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80038f8:	2323      	movs	r3, #35	; 0x23
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
 8003906:	e000      	b.n	800390a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003908:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	225d      	movs	r2, #93	; 0x5d
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	225c      	movs	r2, #92	; 0x5c
 8003916:	2100      	movs	r1, #0
 8003918:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800391a:	2323      	movs	r3, #35	; 0x23
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	781b      	ldrb	r3, [r3, #0]
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b00a      	add	sp, #40	; 0x28
 8003926:	bd80      	pop	{r7, pc}
 8003928:	ffffefff 	.word	0xffffefff

0800392c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800393c:	f7fe fcf6 	bl	800232c <HAL_GetTick>
 8003940:	0002      	movs	r2, r0
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	18d3      	adds	r3, r2, r3
 800394a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800394c:	f7fe fcee 	bl	800232c <HAL_GetTick>
 8003950:	0003      	movs	r3, r0
 8003952:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	015b      	lsls	r3, r3, #5
 800395a:	0d1b      	lsrs	r3, r3, #20
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	4353      	muls	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	e058      	b.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	d055      	beq.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800396a:	f7fe fcdf 	bl	800232c <HAL_GetTick>
 800396e:	0002      	movs	r2, r0
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	429a      	cmp	r2, r3
 8003978:	d902      	bls.n	8003980 <SPI_WaitFlagStateUntilTimeout+0x54>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d142      	bne.n	8003a06 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	21e0      	movs	r1, #224	; 0xe0
 800398c:	438a      	bics	r2, r1
 800398e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	2382      	movs	r3, #130	; 0x82
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	429a      	cmp	r2, r3
 800399a:	d113      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d005      	beq.n	80039b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d107      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2140      	movs	r1, #64	; 0x40
 80039c0:	438a      	bics	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	019b      	lsls	r3, r3, #6
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d110      	bne.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	0189      	lsls	r1, r1, #6
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	225d      	movs	r2, #93	; 0x5d
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	225c      	movs	r2, #92	; 0x5c
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e017      	b.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	425a      	negs	r2, r3
 8003a26:	4153      	adcs	r3, r2
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d197      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b008      	add	sp, #32
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	20000000 	.word	0x20000000
 8003a44:	ffffdfff 	.word	0xffffdfff

08003a48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a56:	2317      	movs	r3, #23
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a5e:	f7fe fc65 	bl	800232c <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a6e:	f7fe fc5d 	bl	800232c <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	0013      	movs	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	00da      	lsls	r2, r3, #3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a90:	4353      	muls	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a94:	e068      	b.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	23c0      	movs	r3, #192	; 0xc0
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10a      	bne.n	8003ab6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	2117      	movs	r1, #23
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	d055      	beq.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003abc:	f7fe fc36 	bl	800232c <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d902      	bls.n	8003ad2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d142      	bne.n	8003b58 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	21e0      	movs	r1, #224	; 0xe0
 8003ade:	438a      	bics	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	2382      	movs	r3, #130	; 0x82
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d113      	bne.n	8003b16 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d005      	beq.n	8003b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d107      	bne.n	8003b16 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2140      	movs	r1, #64	; 0x40
 8003b12:	438a      	bics	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	019b      	lsls	r3, r3, #6
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d110      	bne.n	8003b44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0189      	lsls	r1, r1, #6
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	225d      	movs	r2, #93	; 0x5d
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	225c      	movs	r2, #92	; 0x5c
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e010      	b.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d18e      	bne.n	8003a96 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b00a      	add	sp, #40	; 0x28
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000000 	.word	0x20000000
 8003b88:	ffffdfff 	.word	0xffffdfff

08003b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	23c0      	movs	r3, #192	; 0xc0
 8003b9c:	0159      	lsls	r1, r3, #5
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f7ff ff4e 	bl	8003a48 <SPI_WaitFifoStateUntilTimeout>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d007      	beq.n	8003bc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e027      	b.n	8003c10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	0013      	movs	r3, r2
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	f7ff fead 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003bd2:	1e03      	subs	r3, r0, #0
 8003bd4:	d007      	beq.n	8003be6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bda:	2220      	movs	r2, #32
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e014      	b.n	8003c10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	23c0      	movs	r3, #192	; 0xc0
 8003bea:	00d9      	lsls	r1, r3, #3
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f7ff ff27 	bl	8003a48 <SPI_WaitFifoStateUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d007      	beq.n	8003c0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c02:	2220      	movs	r2, #32
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e000      	b.n	8003c10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e042      	b.n	8003cb0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	223d      	movs	r2, #61	; 0x3d
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223c      	movs	r2, #60	; 0x3c
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe fa13 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223d      	movs	r2, #61	; 0x3d
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f000 fad7 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2246      	movs	r2, #70	; 0x46
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223e      	movs	r2, #62	; 0x3e
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223f      	movs	r2, #63	; 0x3f
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2241      	movs	r2, #65	; 0x41
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2242      	movs	r2, #66	; 0x42
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2243      	movs	r2, #67	; 0x43
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2244      	movs	r2, #68	; 0x44
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2245      	movs	r2, #69	; 0x45
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	223d      	movs	r2, #61	; 0x3d
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e042      	b.n	8003d50 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223d      	movs	r2, #61	; 0x3d
 8003cce:	5c9b      	ldrb	r3, [r3, r2]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d107      	bne.n	8003ce6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	223c      	movs	r2, #60	; 0x3c
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 f839 	bl	8003d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223d      	movs	r2, #61	; 0x3d
 8003cea:	2102      	movs	r1, #2
 8003cec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	f000 fa87 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2246      	movs	r2, #70	; 0x46
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	223e      	movs	r2, #62	; 0x3e
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	223f      	movs	r2, #63	; 0x3f
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2242      	movs	r2, #66	; 0x42
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	5499      	strb	r1, [r3, r2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2243      	movs	r2, #67	; 0x43
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2244      	movs	r2, #68	; 0x44
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5499      	strb	r1, [r3, r2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2245      	movs	r2, #69	; 0x45
 8003d42:	2101      	movs	r1, #1
 8003d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	223d      	movs	r2, #61	; 0x3d
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x22>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	223e      	movs	r2, #62	; 0x3e
 8003d7c:	5c9b      	ldrb	r3, [r3, r2]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	4193      	sbcs	r3, r2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e01f      	b.n	8003dca <HAL_TIM_PWM_Start+0x62>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d108      	bne.n	8003da2 <HAL_TIM_PWM_Start+0x3a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223f      	movs	r2, #63	; 0x3f
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	4193      	sbcs	r3, r2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e013      	b.n	8003dca <HAL_TIM_PWM_Start+0x62>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d108      	bne.n	8003dba <HAL_TIM_PWM_Start+0x52>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	1e5a      	subs	r2, r3, #1
 8003db4:	4193      	sbcs	r3, r2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e007      	b.n	8003dca <HAL_TIM_PWM_Start+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2241      	movs	r2, #65	; 0x41
 8003dbe:	5c9b      	ldrb	r3, [r3, r2]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	4193      	sbcs	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e074      	b.n	8003ebc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x7a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	223e      	movs	r2, #62	; 0x3e
 8003ddc:	2102      	movs	r1, #2
 8003dde:	5499      	strb	r1, [r3, r2]
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_PWM_Start+0xa2>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x8a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223f      	movs	r2, #63	; 0x3f
 8003dec:	2102      	movs	r1, #2
 8003dee:	5499      	strb	r1, [r3, r2]
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_PWM_Start+0xa2>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x9a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	5499      	strb	r1, [r3, r2]
 8003e00:	e003      	b.n	8003e0a <HAL_TIM_PWM_Start+0xa2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2241      	movs	r2, #65	; 0x41
 8003e06:	2102      	movs	r1, #2
 8003e08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 fd10 	bl	8004838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_TIM_PWM_Start+0x15c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_PWM_Start+0xd8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_TIM_PWM_Start+0x160>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_PWM_Start+0xd8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_TIM_PWM_Start+0x164>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_PWM_Start+0xd8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_TIM_PWM_Start+0x168>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_PWM_Start+0xdc>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_PWM_Start+0xde>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0209      	lsls	r1, r1, #8
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_TIM_PWM_Start+0x15c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x11e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	05db      	lsls	r3, r3, #23
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d009      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x11e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_TIM_PWM_Start+0x16c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x11e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <HAL_TIM_PWM_Start+0x160>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d111      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d010      	beq.n	8003eba <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	e007      	b.n	8003eba <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b004      	add	sp, #16
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800
 8003ed4:	40000400 	.word	0x40000400

08003ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2317      	movs	r3, #23
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	223c      	movs	r2, #60	; 0x3c
 8003ef0:	5c9b      	ldrb	r3, [r3, r2]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0ad      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	223c      	movs	r2, #60	; 0x3c
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d100      	bne.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f08:	e076      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d900      	bls.n	8003f12 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003f10:	e095      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d04e      	beq.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d900      	bls.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003f1e:	e08e      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d021      	beq.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003f2c:	e087      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f9e8 	bl	800430c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2108      	movs	r1, #8
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2104      	movs	r1, #4
 8003f58:	438a      	bics	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6999      	ldr	r1, [r3, #24]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]
      break;
 8003f6e:	e06b      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 fa4f 	bl	800441c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	0109      	lsls	r1, r1, #4
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4931      	ldr	r1, [pc, #196]	; (8004060 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	021a      	lsls	r2, r3, #8
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	619a      	str	r2, [r3, #24]
      break;
 8003fb4:	e048      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 fab0 	bl	8004524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2108      	movs	r1, #8
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2104      	movs	r1, #4
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69d9      	ldr	r1, [r3, #28]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	61da      	str	r2, [r3, #28]
      break;
 8003ff6:	e027      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	0011      	movs	r1, r2
 8004000:	0018      	movs	r0, r3
 8004002:	f000 fb15 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	0109      	lsls	r1, r1, #4
 8004014:	430a      	orrs	r2, r1
 8004016:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	490f      	ldr	r1, [pc, #60]	; (8004060 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004024:	400a      	ands	r2, r1
 8004026:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69d9      	ldr	r1, [r3, #28]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	021a      	lsls	r2, r3, #8
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	61da      	str	r2, [r3, #28]
      break;
 800403c:	e004      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800403e:	2317      	movs	r3, #23
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
      break;
 8004046:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	223c      	movs	r2, #60	; 0x3c
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]

  return status;
 8004050:	2317      	movs	r3, #23
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b006      	add	sp, #24
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	fffffbff 	.word	0xfffffbff

08004064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	230f      	movs	r3, #15
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	223c      	movs	r2, #60	; 0x3c
 800407a:	5c9b      	ldrb	r3, [r3, r2]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIM_ConfigClockSource+0x20>
 8004080:	2302      	movs	r3, #2
 8004082:	e0bc      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x19a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223c      	movs	r2, #60	; 0x3c
 8004088:	2101      	movs	r1, #1
 800408a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	223d      	movs	r2, #61	; 0x3d
 8004090:	2102      	movs	r1, #2
 8004092:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2277      	movs	r2, #119	; 0x77
 80040a0:	4393      	bics	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_TIM_ConfigClockSource+0x1a4>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	0192      	lsls	r2, r2, #6
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xde>
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	0192      	lsls	r2, r2, #6
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d900      	bls.n	80040ca <HAL_TIM_ConfigClockSource+0x66>
 80040c8:	e088      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	0152      	lsls	r2, r2, #5
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d100      	bne.n	80040d4 <HAL_TIM_ConfigClockSource+0x70>
 80040d2:	e088      	b.n	80041e6 <HAL_TIM_ConfigClockSource+0x182>
 80040d4:	2280      	movs	r2, #128	; 0x80
 80040d6:	0152      	lsls	r2, r2, #5
 80040d8:	4293      	cmp	r3, r2
 80040da:	d900      	bls.n	80040de <HAL_TIM_ConfigClockSource+0x7a>
 80040dc:	e07e      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040de:	2b70      	cmp	r3, #112	; 0x70
 80040e0:	d018      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0xb0>
 80040e2:	d900      	bls.n	80040e6 <HAL_TIM_ConfigClockSource+0x82>
 80040e4:	e07a      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040e6:	2b60      	cmp	r3, #96	; 0x60
 80040e8:	d04f      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x126>
 80040ea:	d900      	bls.n	80040ee <HAL_TIM_ConfigClockSource+0x8a>
 80040ec:	e076      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040ee:	2b50      	cmp	r3, #80	; 0x50
 80040f0:	d03b      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x106>
 80040f2:	d900      	bls.n	80040f6 <HAL_TIM_ConfigClockSource+0x92>
 80040f4:	e072      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d057      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x146>
 80040fa:	d900      	bls.n	80040fe <HAL_TIM_ConfigClockSource+0x9a>
 80040fc:	e06e      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d063      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x166>
 8004102:	d86b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d060      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x166>
 8004108:	d868      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d05d      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x166>
 800410e:	2b10      	cmp	r3, #16
 8004110:	d05b      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x166>
 8004112:	e063      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f000 fb68 	bl	80047f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2277      	movs	r2, #119	; 0x77
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
      break;
 8004140:	e052      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f000 fb51 	bl	80047f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	01c9      	lsls	r1, r1, #7
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
      break;
 8004168:	e03e      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	001a      	movs	r2, r3
 8004178:	f000 fac4 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2150      	movs	r1, #80	; 0x50
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fb1e 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 8004188:	e02e      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	001a      	movs	r2, r3
 8004198:	f000 fae2 	bl	8004760 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2160      	movs	r1, #96	; 0x60
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fb0e 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e01e      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	001a      	movs	r2, r3
 80041b8:	f000 faa4 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 fafe 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 80041c8:	e00e      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0019      	movs	r1, r3
 80041d4:	0010      	movs	r0, r2
 80041d6:	f000 faf5 	bl	80047c4 <TIM_ITRx_SetConfig>
      break;
 80041da:	e005      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80041dc:	230f      	movs	r3, #15
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80041e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	223d      	movs	r2, #61	; 0x3d
 80041ec:	2101      	movs	r1, #1
 80041ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	223c      	movs	r2, #60	; 0x3c
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]

  return status;
 80041f8:	230f      	movs	r3, #15
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	ffff00ff 	.word	0xffff00ff

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <TIM_Base_SetConfig+0xe4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d008      	beq.n	8004236 <TIM_Base_SetConfig+0x2a>
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	05db      	lsls	r3, r3, #23
 800422a:	429a      	cmp	r2, r3
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0x2a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <TIM_Base_SetConfig+0xe8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2270      	movs	r2, #112	; 0x70
 800423a:	4393      	bics	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <TIM_Base_SetConfig+0xe4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	05db      	lsls	r3, r3, #23
 8004256:	429a      	cmp	r2, r3
 8004258:	d013      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0xe8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_Base_SetConfig+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_Base_SetConfig+0xf0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <TIM_Base_SetConfig+0xf4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_Base_SetConfig+0x76>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_Base_SetConfig+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_Base_SetConfig+0xfc>)
 8004286:	4013      	ands	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	4393      	bics	r3, r2
 800429a:	001a      	movs	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <TIM_Base_SetConfig+0xe4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xce>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <TIM_Base_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xce>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <TIM_Base_SetConfig+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xce>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d103      	bne.n	80042e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	615a      	str	r2, [r3, #20]
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40002000 	.word	0x40002000
 80042fc:	40014000 	.word	0x40014000
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800
 8004308:	fffffcff 	.word	0xfffffcff

0800430c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2201      	movs	r2, #1
 800431c:	4393      	bics	r3, r2
 800431e:	001a      	movs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2270      	movs	r2, #112	; 0x70
 800433a:	4393      	bics	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2203      	movs	r2, #3
 8004342:	4393      	bics	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2202      	movs	r2, #2
 8004354:	4393      	bics	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <TIM_OC1_SetConfig+0xf8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_OC1_SetConfig+0x76>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <TIM_OC1_SetConfig+0xfc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <TIM_OC1_SetConfig+0x76>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <TIM_OC1_SetConfig+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC1_SetConfig+0x76>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a24      	ldr	r2, [pc, #144]	; (8004410 <TIM_OC1_SetConfig+0x104>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10c      	bne.n	800439c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2208      	movs	r2, #8
 8004386:	4393      	bics	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2204      	movs	r2, #4
 8004398:	4393      	bics	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a19      	ldr	r2, [pc, #100]	; (8004404 <TIM_OC1_SetConfig+0xf8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_OC1_SetConfig+0xb0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <TIM_OC1_SetConfig+0xfc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_OC1_SetConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <TIM_OC1_SetConfig+0x100>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC1_SetConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <TIM_OC1_SetConfig+0x104>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d111      	bne.n	80043e0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <TIM_OC1_SetConfig+0x108>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <TIM_OC1_SetConfig+0x10c>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b006      	add	sp, #24
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	fffffdff 	.word	0xfffffdff

0800441c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	2210      	movs	r2, #16
 800442c:	4393      	bics	r3, r2
 800442e:	001a      	movs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <TIM_OC2_SetConfig+0xe8>)
 800444a:	4013      	ands	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <TIM_OC2_SetConfig+0xec>)
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2220      	movs	r2, #32
 8004466:	4393      	bics	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a24      	ldr	r2, [pc, #144]	; (800450c <TIM_OC2_SetConfig+0xf0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10d      	bne.n	800449a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	4393      	bics	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2240      	movs	r2, #64	; 0x40
 8004496:	4393      	bics	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <TIM_OC2_SetConfig+0xf0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_OC2_SetConfig+0x9e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <TIM_OC2_SetConfig+0xf4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_OC2_SetConfig+0x9e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <TIM_OC2_SetConfig+0xf8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_OC2_SetConfig+0x9e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <TIM_OC2_SetConfig+0xfc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d113      	bne.n	80044e2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a17      	ldr	r2, [pc, #92]	; (800451c <TIM_OC2_SetConfig+0x100>)
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <TIM_OC2_SetConfig+0x104>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b006      	add	sp, #24
 8004502:	bd80      	pop	{r7, pc}
 8004504:	ffff8fff 	.word	0xffff8fff
 8004508:	fffffcff 	.word	0xfffffcff
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	fffffbff 	.word	0xfffffbff
 8004520:	fffff7ff 	.word	0xfffff7ff

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a35      	ldr	r2, [pc, #212]	; (8004608 <TIM_OC3_SetConfig+0xe4>)
 8004534:	401a      	ands	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2270      	movs	r2, #112	; 0x70
 8004550:	4393      	bics	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2203      	movs	r2, #3
 8004558:	4393      	bics	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4a28      	ldr	r2, [pc, #160]	; (800460c <TIM_OC3_SetConfig+0xe8>)
 800456a:	4013      	ands	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <TIM_OC3_SetConfig+0xec>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10d      	bne.n	800459e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4a23      	ldr	r2, [pc, #140]	; (8004614 <TIM_OC3_SetConfig+0xf0>)
 8004586:	4013      	ands	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <TIM_OC3_SetConfig+0xf4>)
 800459a:	4013      	ands	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <TIM_OC3_SetConfig+0xec>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_OC3_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <TIM_OC3_SetConfig+0xf8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_OC3_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <TIM_OC3_SetConfig+0xfc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_OC3_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <TIM_OC3_SetConfig+0x100>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d113      	bne.n	80045e6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <TIM_OC3_SetConfig+0x104>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <TIM_OC3_SetConfig+0x108>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b006      	add	sp, #24
 8004606:	bd80      	pop	{r7, pc}
 8004608:	fffffeff 	.word	0xfffffeff
 800460c:	fffffdff 	.word	0xfffffdff
 8004610:	40012c00 	.word	0x40012c00
 8004614:	fffff7ff 	.word	0xfffff7ff
 8004618:	fffffbff 	.word	0xfffffbff
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800
 8004628:	ffffefff 	.word	0xffffefff
 800462c:	ffffdfff 	.word	0xffffdfff

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <TIM_OC4_SetConfig+0xb0>)
 8004640:	401a      	ands	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <TIM_OC4_SetConfig+0xb4>)
 800465c:	4013      	ands	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_OC4_SetConfig+0xb8>)
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <TIM_OC4_SetConfig+0xbc>)
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <TIM_OC4_SetConfig+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_OC4_SetConfig+0x78>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <TIM_OC4_SetConfig+0xc4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_OC4_SetConfig+0x78>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <TIM_OC4_SetConfig+0xc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC4_SetConfig+0x78>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a16      	ldr	r2, [pc, #88]	; (80046fc <TIM_OC4_SetConfig+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <TIM_OC4_SetConfig+0xd0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	ffffefff 	.word	0xffffefff
 80046e4:	ffff8fff 	.word	0xffff8fff
 80046e8:	fffffcff 	.word	0xfffffcff
 80046ec:	ffffdfff 	.word	0xffffdfff
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	ffffbfff 	.word	0xffffbfff

08004704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	2201      	movs	r2, #1
 800471c:	4393      	bics	r3, r2
 800471e:	001a      	movs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	22f0      	movs	r2, #240	; 0xf0
 800472e:	4393      	bics	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	220a      	movs	r2, #10
 8004740:	4393      	bics	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b006      	add	sp, #24
 800475e:	bd80      	pop	{r7, pc}

08004760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	2210      	movs	r2, #16
 8004772:	4393      	bics	r3, r2
 8004774:	001a      	movs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <TIM_TI2_ConfigInputStage+0x60>)
 800478a:	4013      	ands	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	22a0      	movs	r2, #160	; 0xa0
 800479c:	4393      	bics	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b006      	add	sp, #24
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	ffff0fff 	.word	0xffff0fff

080047c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2270      	movs	r2, #112	; 0x70
 80047d8:	4393      	bics	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	2207      	movs	r2, #7
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b004      	add	sp, #16
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <TIM_ETR_SetConfig+0x3c>)
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	431a      	orrs	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b006      	add	sp, #24
 8004832:	bd80      	pop	{r7, pc}
 8004834:	ffff00ff 	.word	0xffff00ff

08004838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	221f      	movs	r2, #31
 8004848:	4013      	ands	r3, r2
 800484a:	2201      	movs	r2, #1
 800484c:	409a      	lsls	r2, r3
 800484e:	0013      	movs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	43d2      	mvns	r2, r2
 800485a:	401a      	ands	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	211f      	movs	r1, #31
 8004868:	400b      	ands	r3, r1
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4099      	lsls	r1, r3
 800486e:	000b      	movs	r3, r1
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b006      	add	sp, #24
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	223c      	movs	r2, #60	; 0x3c
 800488e:	5c9b      	ldrb	r3, [r3, r2]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e047      	b.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	223c      	movs	r2, #60	; 0x3c
 800489c:	2101      	movs	r1, #1
 800489e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	223d      	movs	r2, #61	; 0x3d
 80048a4:	2102      	movs	r1, #2
 80048a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2270      	movs	r2, #112	; 0x70
 80048bc:	4393      	bics	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d009      	beq.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10c      	bne.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	4393      	bics	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	223d      	movs	r2, #61	; 0x3d
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	223c      	movs	r2, #60	; 0x3c
 8004922:	2100      	movs	r1, #0
 8004924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	0018      	movs	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	b004      	add	sp, #16
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40000400 	.word	0x40000400
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	223c      	movs	r2, #60	; 0x3c
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e03e      	b.n	80049d6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	223c      	movs	r2, #60	; 0x3c
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	22ff      	movs	r2, #255	; 0xff
 8004964:	4393      	bics	r3, r2
 8004966:	001a      	movs	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004974:	401a      	ands	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004982:	401a      	ands	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004990:	401a      	ands	r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800499e:	401a      	ands	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80049ac:	401a      	ands	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80049ba:	401a      	ands	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	223c      	movs	r2, #60	; 0x3c
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	fffffcff 	.word	0xfffffcff
 80049e4:	fffffbff 	.word	0xfffffbff
 80049e8:	fffff7ff 	.word	0xfffff7ff
 80049ec:	ffffefff 	.word	0xffffefff
 80049f0:	ffffdfff 	.word	0xffffdfff
 80049f4:	ffffbfff 	.word	0xffffbfff

080049f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e044      	b.n	8004a94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2274      	movs	r2, #116	; 0x74
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fd fbb5 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2101      	movs	r1, #1
 8004a34:	438a      	bics	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f830 	bl	8004aa0 <UART_SetConfig>
 8004a40:	0003      	movs	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e024      	b.n	8004a94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f9ab 	bl	8004db0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	490d      	ldr	r1, [pc, #52]	; (8004a9c <HAL_UART_Init+0xa4>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	212a      	movs	r1, #42	; 0x2a
 8004a76:	438a      	bics	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 fa43 	bl	8004f18 <UART_CheckIdleState>
 8004a92:	0003      	movs	r3, r0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	ffffb7ff 	.word	0xffffb7ff

08004aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa8:	231e      	movs	r3, #30
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4aaf      	ldr	r2, [pc, #700]	; (8004d8c <UART_SetConfig+0x2ec>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4aaa      	ldr	r2, [pc, #680]	; (8004d90 <UART_SetConfig+0x2f0>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	0019      	movs	r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4aa1      	ldr	r2, [pc, #644]	; (8004d94 <UART_SetConfig+0x2f4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a9d      	ldr	r2, [pc, #628]	; (8004d98 <UART_SetConfig+0x2f8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d127      	bne.n	8004b76 <UART_SetConfig+0xd6>
 8004b26:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <UART_SetConfig+0x2fc>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d00d      	beq.n	8004b4e <UART_SetConfig+0xae>
 8004b32:	d81b      	bhi.n	8004b6c <UART_SetConfig+0xcc>
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d014      	beq.n	8004b62 <UART_SetConfig+0xc2>
 8004b38:	d818      	bhi.n	8004b6c <UART_SetConfig+0xcc>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <UART_SetConfig+0xa4>
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d00a      	beq.n	8004b58 <UART_SetConfig+0xb8>
 8004b42:	e013      	b.n	8004b6c <UART_SetConfig+0xcc>
 8004b44:	231f      	movs	r3, #31
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e065      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004b4e:	231f      	movs	r3, #31
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e060      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004b58:	231f      	movs	r3, #31
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e05b      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004b62:	231f      	movs	r3, #31
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2208      	movs	r2, #8
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e056      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2210      	movs	r2, #16
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e051      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a89      	ldr	r2, [pc, #548]	; (8004da0 <UART_SetConfig+0x300>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d134      	bne.n	8004bea <UART_SetConfig+0x14a>
 8004b80:	4b86      	ldr	r3, [pc, #536]	; (8004d9c <UART_SetConfig+0x2fc>)
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	23c0      	movs	r3, #192	; 0xc0
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	4013      	ands	r3, r2
 8004b8a:	22c0      	movs	r2, #192	; 0xc0
 8004b8c:	0292      	lsls	r2, r2, #10
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d017      	beq.n	8004bc2 <UART_SetConfig+0x122>
 8004b92:	22c0      	movs	r2, #192	; 0xc0
 8004b94:	0292      	lsls	r2, r2, #10
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d822      	bhi.n	8004be0 <UART_SetConfig+0x140>
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	0292      	lsls	r2, r2, #10
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d019      	beq.n	8004bd6 <UART_SetConfig+0x136>
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	0292      	lsls	r2, r2, #10
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d81a      	bhi.n	8004be0 <UART_SetConfig+0x140>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <UART_SetConfig+0x118>
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	0252      	lsls	r2, r2, #9
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00a      	beq.n	8004bcc <UART_SetConfig+0x12c>
 8004bb6:	e013      	b.n	8004be0 <UART_SetConfig+0x140>
 8004bb8:	231f      	movs	r3, #31
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e02b      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e026      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004bcc:	231f      	movs	r3, #31
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e021      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004bd6:	231f      	movs	r3, #31
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	2208      	movs	r2, #8
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e01c      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004be0:	231f      	movs	r3, #31
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2210      	movs	r2, #16
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e017      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6d      	ldr	r2, [pc, #436]	; (8004da4 <UART_SetConfig+0x304>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d104      	bne.n	8004bfe <UART_SetConfig+0x15e>
 8004bf4:	231f      	movs	r3, #31
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a69      	ldr	r2, [pc, #420]	; (8004da8 <UART_SetConfig+0x308>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0x172>
 8004c08:	231f      	movs	r3, #31
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0x17a>
 8004c12:	231f      	movs	r3, #31
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	2210      	movs	r2, #16
 8004c18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d15d      	bne.n	8004ce2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004c26:	231f      	movs	r3, #31
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d015      	beq.n	8004c5c <UART_SetConfig+0x1bc>
 8004c30:	dc18      	bgt.n	8004c64 <UART_SetConfig+0x1c4>
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00d      	beq.n	8004c52 <UART_SetConfig+0x1b2>
 8004c36:	dc15      	bgt.n	8004c64 <UART_SetConfig+0x1c4>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UART_SetConfig+0x1a2>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0x1ac>
 8004c40:	e010      	b.n	8004c64 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c42:	f7fe fad5 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
        break;
 8004c4a:	e012      	b.n	8004c72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b57      	ldr	r3, [pc, #348]	; (8004dac <UART_SetConfig+0x30c>)
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e00f      	b.n	8004c72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe fa43 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8004c56:	0003      	movs	r3, r0
 8004c58:	61bb      	str	r3, [r7, #24]
        break;
 8004c5a:	e00a      	b.n	8004c72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	61bb      	str	r3, [r7, #24]
        break;
 8004c62:	e006      	b.n	8004c72 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c68:	231e      	movs	r3, #30
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
        break;
 8004c70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d100      	bne.n	8004c7a <UART_SetConfig+0x1da>
 8004c78:	e07b      	b.n	8004d72 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	005a      	lsls	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	18d2      	adds	r2, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	0010      	movs	r0, r2
 8004c8e:	f7fb fa3b 	bl	8000108 <__udivsi3>
 8004c92:	0003      	movs	r3, r0
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	d91c      	bls.n	8004cd8 <UART_SetConfig+0x238>
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	025b      	lsls	r3, r3, #9
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d217      	bcs.n	8004cd8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	200e      	movs	r0, #14
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b299      	uxth	r1, r3
 8004cc2:	183b      	adds	r3, r7, r0
 8004cc4:	183a      	adds	r2, r7, r0
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	183a      	adds	r2, r7, r0
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	e04c      	b.n	8004d72 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd8:	231e      	movs	r3, #30
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e047      	b.n	8004d72 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce2:	231f      	movs	r3, #31
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d015      	beq.n	8004d18 <UART_SetConfig+0x278>
 8004cec:	dc18      	bgt.n	8004d20 <UART_SetConfig+0x280>
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d00d      	beq.n	8004d0e <UART_SetConfig+0x26e>
 8004cf2:	dc15      	bgt.n	8004d20 <UART_SetConfig+0x280>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <UART_SetConfig+0x25e>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d005      	beq.n	8004d08 <UART_SetConfig+0x268>
 8004cfc:	e010      	b.n	8004d20 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fe fa77 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8004d02:	0003      	movs	r3, r0
 8004d04:	61bb      	str	r3, [r7, #24]
        break;
 8004d06:	e012      	b.n	8004d2e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b28      	ldr	r3, [pc, #160]	; (8004dac <UART_SetConfig+0x30c>)
 8004d0a:	61bb      	str	r3, [r7, #24]
        break;
 8004d0c:	e00f      	b.n	8004d2e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe f9e5 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8004d12:	0003      	movs	r3, r0
 8004d14:	61bb      	str	r3, [r7, #24]
        break;
 8004d16:	e00a      	b.n	8004d2e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	61bb      	str	r3, [r7, #24]
        break;
 8004d1e:	e006      	b.n	8004d2e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d24:	231e      	movs	r3, #30
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
        break;
 8004d2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01e      	beq.n	8004d72 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	085a      	lsrs	r2, r3, #1
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	18d2      	adds	r2, r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	0019      	movs	r1, r3
 8004d44:	0010      	movs	r0, r2
 8004d46:	f7fb f9df 	bl	8000108 <__udivsi3>
 8004d4a:	0003      	movs	r3, r0
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b0f      	cmp	r3, #15
 8004d54:	d909      	bls.n	8004d6a <UART_SetConfig+0x2ca>
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	025b      	lsls	r3, r3, #9
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d204      	bcs.n	8004d6a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	60da      	str	r2, [r3, #12]
 8004d68:	e003      	b.n	8004d72 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6a:	231e      	movs	r3, #30
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d7e:	231e      	movs	r3, #30
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	781b      	ldrb	r3, [r3, #0]
}
 8004d84:	0018      	movs	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b008      	add	sp, #32
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	efff69f3 	.word	0xefff69f3
 8004d90:	ffffcfff 	.word	0xffffcfff
 8004d94:	fffff4ff 	.word	0xfffff4ff
 8004d98:	40013800 	.word	0x40013800
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40004400 	.word	0x40004400
 8004da4:	40004800 	.word	0x40004800
 8004da8:	40004c00 	.word	0x40004c00
 8004dac:	007a1200 	.word	0x007a1200

08004db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a4a      	ldr	r2, [pc, #296]	; (8004ef4 <UART_AdvFeatureConfig+0x144>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2202      	movs	r2, #2
 8004de0:	4013      	ands	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4a43      	ldr	r2, [pc, #268]	; (8004ef8 <UART_AdvFeatureConfig+0x148>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	0019      	movs	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2204      	movs	r2, #4
 8004e02:	4013      	ands	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	; (8004efc <UART_AdvFeatureConfig+0x14c>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2208      	movs	r2, #8
 8004e24:	4013      	ands	r3, r2
 8004e26:	d00b      	beq.n	8004e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4a34      	ldr	r2, [pc, #208]	; (8004f00 <UART_AdvFeatureConfig+0x150>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2210      	movs	r2, #16
 8004e46:	4013      	ands	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <UART_AdvFeatureConfig+0x154>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2220      	movs	r2, #32
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <UART_AdvFeatureConfig+0x158>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	0019      	movs	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2240      	movs	r2, #64	; 0x40
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <UART_AdvFeatureConfig+0x15c>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	0019      	movs	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	035b      	lsls	r3, r3, #13
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d10b      	bne.n	8004eca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <UART_AdvFeatureConfig+0x160>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a0e      	ldr	r2, [pc, #56]	; (8004f14 <UART_AdvFeatureConfig+0x164>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	fffdffff 	.word	0xfffdffff
 8004ef8:	fffeffff 	.word	0xfffeffff
 8004efc:	fffbffff 	.word	0xfffbffff
 8004f00:	ffff7fff 	.word	0xffff7fff
 8004f04:	ffffefff 	.word	0xffffefff
 8004f08:	ffffdfff 	.word	0xffffdfff
 8004f0c:	ffefffff 	.word	0xffefffff
 8004f10:	ff9fffff 	.word	0xff9fffff
 8004f14:	fff7ffff 	.word	0xfff7ffff

08004f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2280      	movs	r2, #128	; 0x80
 8004f24:	2100      	movs	r1, #0
 8004f26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f28:	f7fd fa00 	bl	800232c <HAL_GetTick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2208      	movs	r2, #8
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d10c      	bne.n	8004f58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	0391      	lsls	r1, r2, #14
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <UART_CheckIdleState+0x8c>)
 8004f48:	9200      	str	r2, [sp, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f000 f82c 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004f50:	1e03      	subs	r3, r0, #0
 8004f52:	d001      	beq.n	8004f58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e021      	b.n	8004f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d10c      	bne.n	8004f80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	03d1      	lsls	r1, r2, #15
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <UART_CheckIdleState+0x8c>)
 8004f70:	9200      	str	r2, [sp, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f000 f818 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004f78:	1e03      	subs	r3, r0, #0
 8004f7a:	d001      	beq.n	8004f80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e00d      	b.n	8004f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2274      	movs	r2, #116	; 0x74
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b004      	add	sp, #16
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	01ffffff 	.word	0x01ffffff

08004fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b094      	sub	sp, #80	; 0x50
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	1dfb      	adds	r3, r7, #7
 8004fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	e0a3      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	d100      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fc0:	e09f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc2:	f7fd f9b3 	bl	800232c <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d13d      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	494c      	ldr	r1, [pc, #304]	; (800512c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ffa:	400a      	ands	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
 8005014:	2301      	movs	r3, #1
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	438a      	bics	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2274      	movs	r2, #116	; 0x74
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e067      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	d050      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	401a      	ands	r2, r3
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	429a      	cmp	r2, r3
 8005072:	d146      	bne.n	8005102 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507e:	f3ef 8310 	mrs	r3, PRIMASK
 8005082:	613b      	str	r3, [r7, #16]
  return(result);
 8005084:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4923      	ldr	r1, [pc, #140]	; (800512c <UART_WaitOnFlagUntilTimeout+0x184>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80050b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ba:	2301      	movs	r3, #1
 80050bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	438a      	bics	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	2120      	movs	r1, #32
 80050f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2274      	movs	r2, #116	; 0x74
 80050fa:	2100      	movs	r1, #0
 80050fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e010      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	425a      	negs	r2, r3
 8005112:	4153      	adcs	r3, r2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d100      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005120:	e74b      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b014      	add	sp, #80	; 0x50
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffe5f 	.word	0xfffffe5f

08005130 <memset>:
 8005130:	0003      	movs	r3, r0
 8005132:	1882      	adds	r2, r0, r2
 8005134:	4293      	cmp	r3, r2
 8005136:	d100      	bne.n	800513a <memset+0xa>
 8005138:	4770      	bx	lr
 800513a:	7019      	strb	r1, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	e7f9      	b.n	8005134 <memset+0x4>

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	2600      	movs	r6, #0
 8005144:	4c0c      	ldr	r4, [pc, #48]	; (8005178 <__libc_init_array+0x38>)
 8005146:	4d0d      	ldr	r5, [pc, #52]	; (800517c <__libc_init_array+0x3c>)
 8005148:	1b64      	subs	r4, r4, r5
 800514a:	10a4      	asrs	r4, r4, #2
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	2600      	movs	r6, #0
 8005152:	f000 f819 	bl	8005188 <_init>
 8005156:	4c0a      	ldr	r4, [pc, #40]	; (8005180 <__libc_init_array+0x40>)
 8005158:	4d0a      	ldr	r5, [pc, #40]	; (8005184 <__libc_init_array+0x44>)
 800515a:	1b64      	subs	r4, r4, r5
 800515c:	10a4      	asrs	r4, r4, #2
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	00b3      	lsls	r3, r6, #2
 8005166:	58eb      	ldr	r3, [r5, r3]
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	00b3      	lsls	r3, r6, #2
 8005170:	58eb      	ldr	r3, [r5, r3]
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08005220 	.word	0x08005220
 800517c:	08005220 	.word	0x08005220
 8005180:	08005224 	.word	0x08005224
 8005184:	08005220 	.word	0x08005220

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
