
Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08005b58  08005b58  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b58  08005b58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08005b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000004  08005b64  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005b64  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178a2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e11  00000000  00000000  000378ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0003a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0003b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001062e  00000000  00000000  0003c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cce  00000000  00000000  0004c746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005516c  00000000  00000000  0005e414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  000b35d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005a24 	.word	0x08005a24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08005a24 	.word	0x08005a24

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fd27 	bl	8001c78 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 fc61 	bl	8001af8 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f001 f8c8 	bl	80013d4 <__aeabi_dsub>
 8000244:	f001 fc58 	bl	8001af8 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dadd>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	464f      	mov	r7, r9
 800025c:	46d6      	mov	lr, sl
 800025e:	4646      	mov	r6, r8
 8000260:	000d      	movs	r5, r1
 8000262:	0001      	movs	r1, r0
 8000264:	0018      	movs	r0, r3
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0017      	movs	r7, r2
 800026a:	032b      	lsls	r3, r5, #12
 800026c:	0a5a      	lsrs	r2, r3, #9
 800026e:	0f4b      	lsrs	r3, r1, #29
 8000270:	4313      	orrs	r3, r2
 8000272:	00ca      	lsls	r2, r1, #3
 8000274:	4691      	mov	r9, r2
 8000276:	0302      	lsls	r2, r0, #12
 8000278:	006e      	lsls	r6, r5, #1
 800027a:	0041      	lsls	r1, r0, #1
 800027c:	0a52      	lsrs	r2, r2, #9
 800027e:	0fec      	lsrs	r4, r5, #31
 8000280:	0f7d      	lsrs	r5, r7, #29
 8000282:	4315      	orrs	r5, r2
 8000284:	0d76      	lsrs	r6, r6, #21
 8000286:	0d49      	lsrs	r1, r1, #21
 8000288:	0fc0      	lsrs	r0, r0, #31
 800028a:	4682      	mov	sl, r0
 800028c:	46ac      	mov	ip, r5
 800028e:	00ff      	lsls	r7, r7, #3
 8000290:	1a72      	subs	r2, r6, r1
 8000292:	4284      	cmp	r4, r0
 8000294:	d100      	bne.n	8000298 <__aeabi_dadd+0x40>
 8000296:	e098      	b.n	80003ca <__aeabi_dadd+0x172>
 8000298:	2a00      	cmp	r2, #0
 800029a:	dc00      	bgt.n	800029e <__aeabi_dadd+0x46>
 800029c:	e081      	b.n	80003a2 <__aeabi_dadd+0x14a>
 800029e:	2900      	cmp	r1, #0
 80002a0:	d100      	bne.n	80002a4 <__aeabi_dadd+0x4c>
 80002a2:	e0b6      	b.n	8000412 <__aeabi_dadd+0x1ba>
 80002a4:	49c9      	ldr	r1, [pc, #804]	; (80005cc <__aeabi_dadd+0x374>)
 80002a6:	428e      	cmp	r6, r1
 80002a8:	d100      	bne.n	80002ac <__aeabi_dadd+0x54>
 80002aa:	e172      	b.n	8000592 <__aeabi_dadd+0x33a>
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0028      	movs	r0, r5
 80002b0:	0409      	lsls	r1, r1, #16
 80002b2:	4308      	orrs	r0, r1
 80002b4:	4684      	mov	ip, r0
 80002b6:	2a38      	cmp	r2, #56	; 0x38
 80002b8:	dd00      	ble.n	80002bc <__aeabi_dadd+0x64>
 80002ba:	e15e      	b.n	800057a <__aeabi_dadd+0x322>
 80002bc:	2a1f      	cmp	r2, #31
 80002be:	dd00      	ble.n	80002c2 <__aeabi_dadd+0x6a>
 80002c0:	e1ee      	b.n	80006a0 <__aeabi_dadd+0x448>
 80002c2:	2020      	movs	r0, #32
 80002c4:	0039      	movs	r1, r7
 80002c6:	4665      	mov	r5, ip
 80002c8:	1a80      	subs	r0, r0, r2
 80002ca:	4087      	lsls	r7, r0
 80002cc:	40d1      	lsrs	r1, r2
 80002ce:	4085      	lsls	r5, r0
 80002d0:	430d      	orrs	r5, r1
 80002d2:	0039      	movs	r1, r7
 80002d4:	1e4f      	subs	r7, r1, #1
 80002d6:	41b9      	sbcs	r1, r7
 80002d8:	4667      	mov	r7, ip
 80002da:	40d7      	lsrs	r7, r2
 80002dc:	4329      	orrs	r1, r5
 80002de:	1bdb      	subs	r3, r3, r7
 80002e0:	464a      	mov	r2, r9
 80002e2:	1a55      	subs	r5, r2, r1
 80002e4:	45a9      	cmp	r9, r5
 80002e6:	4189      	sbcs	r1, r1
 80002e8:	4249      	negs	r1, r1
 80002ea:	1a5b      	subs	r3, r3, r1
 80002ec:	4698      	mov	r8, r3
 80002ee:	4643      	mov	r3, r8
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	d400      	bmi.n	80002f6 <__aeabi_dadd+0x9e>
 80002f4:	e0cc      	b.n	8000490 <__aeabi_dadd+0x238>
 80002f6:	4643      	mov	r3, r8
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	0a5b      	lsrs	r3, r3, #9
 80002fc:	4698      	mov	r8, r3
 80002fe:	4643      	mov	r3, r8
 8000300:	2b00      	cmp	r3, #0
 8000302:	d100      	bne.n	8000306 <__aeabi_dadd+0xae>
 8000304:	e12c      	b.n	8000560 <__aeabi_dadd+0x308>
 8000306:	4640      	mov	r0, r8
 8000308:	f001 fcc0 	bl	8001c8c <__clzsi2>
 800030c:	0001      	movs	r1, r0
 800030e:	3908      	subs	r1, #8
 8000310:	2220      	movs	r2, #32
 8000312:	0028      	movs	r0, r5
 8000314:	4643      	mov	r3, r8
 8000316:	1a52      	subs	r2, r2, r1
 8000318:	408b      	lsls	r3, r1
 800031a:	40d0      	lsrs	r0, r2
 800031c:	408d      	lsls	r5, r1
 800031e:	4303      	orrs	r3, r0
 8000320:	428e      	cmp	r6, r1
 8000322:	dd00      	ble.n	8000326 <__aeabi_dadd+0xce>
 8000324:	e117      	b.n	8000556 <__aeabi_dadd+0x2fe>
 8000326:	1b8e      	subs	r6, r1, r6
 8000328:	1c72      	adds	r2, r6, #1
 800032a:	2a1f      	cmp	r2, #31
 800032c:	dd00      	ble.n	8000330 <__aeabi_dadd+0xd8>
 800032e:	e1a7      	b.n	8000680 <__aeabi_dadd+0x428>
 8000330:	2120      	movs	r1, #32
 8000332:	0018      	movs	r0, r3
 8000334:	002e      	movs	r6, r5
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	408d      	lsls	r5, r1
 800033a:	4088      	lsls	r0, r1
 800033c:	40d6      	lsrs	r6, r2
 800033e:	40d3      	lsrs	r3, r2
 8000340:	1e69      	subs	r1, r5, #1
 8000342:	418d      	sbcs	r5, r1
 8000344:	4330      	orrs	r0, r6
 8000346:	4698      	mov	r8, r3
 8000348:	2600      	movs	r6, #0
 800034a:	4305      	orrs	r5, r0
 800034c:	076b      	lsls	r3, r5, #29
 800034e:	d009      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000350:	230f      	movs	r3, #15
 8000352:	402b      	ands	r3, r5
 8000354:	2b04      	cmp	r3, #4
 8000356:	d005      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000358:	1d2b      	adds	r3, r5, #4
 800035a:	42ab      	cmp	r3, r5
 800035c:	41ad      	sbcs	r5, r5
 800035e:	426d      	negs	r5, r5
 8000360:	44a8      	add	r8, r5
 8000362:	001d      	movs	r5, r3
 8000364:	4643      	mov	r3, r8
 8000366:	021b      	lsls	r3, r3, #8
 8000368:	d400      	bmi.n	800036c <__aeabi_dadd+0x114>
 800036a:	e094      	b.n	8000496 <__aeabi_dadd+0x23e>
 800036c:	4b97      	ldr	r3, [pc, #604]	; (80005cc <__aeabi_dadd+0x374>)
 800036e:	1c72      	adds	r2, r6, #1
 8000370:	429a      	cmp	r2, r3
 8000372:	d100      	bne.n	8000376 <__aeabi_dadd+0x11e>
 8000374:	e09d      	b.n	80004b2 <__aeabi_dadd+0x25a>
 8000376:	4641      	mov	r1, r8
 8000378:	4b95      	ldr	r3, [pc, #596]	; (80005d0 <__aeabi_dadd+0x378>)
 800037a:	08ed      	lsrs	r5, r5, #3
 800037c:	4019      	ands	r1, r3
 800037e:	000b      	movs	r3, r1
 8000380:	0552      	lsls	r2, r2, #21
 8000382:	0749      	lsls	r1, r1, #29
 8000384:	025b      	lsls	r3, r3, #9
 8000386:	4329      	orrs	r1, r5
 8000388:	0b1b      	lsrs	r3, r3, #12
 800038a:	0d52      	lsrs	r2, r2, #21
 800038c:	0512      	lsls	r2, r2, #20
 800038e:	4313      	orrs	r3, r2
 8000390:	07e4      	lsls	r4, r4, #31
 8000392:	4323      	orrs	r3, r4
 8000394:	0008      	movs	r0, r1
 8000396:	0019      	movs	r1, r3
 8000398:	bce0      	pop	{r5, r6, r7}
 800039a:	46ba      	mov	sl, r7
 800039c:	46b1      	mov	r9, r6
 800039e:	46a8      	mov	r8, r5
 80003a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d043      	beq.n	800042e <__aeabi_dadd+0x1d6>
 80003a6:	1b8a      	subs	r2, r1, r6
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d000      	beq.n	80003ae <__aeabi_dadd+0x156>
 80003ac:	e12a      	b.n	8000604 <__aeabi_dadd+0x3ac>
 80003ae:	464c      	mov	r4, r9
 80003b0:	431c      	orrs	r4, r3
 80003b2:	d100      	bne.n	80003b6 <__aeabi_dadd+0x15e>
 80003b4:	e1d1      	b.n	800075a <__aeabi_dadd+0x502>
 80003b6:	1e54      	subs	r4, r2, #1
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d100      	bne.n	80003be <__aeabi_dadd+0x166>
 80003bc:	e21f      	b.n	80007fe <__aeabi_dadd+0x5a6>
 80003be:	4d83      	ldr	r5, [pc, #524]	; (80005cc <__aeabi_dadd+0x374>)
 80003c0:	42aa      	cmp	r2, r5
 80003c2:	d100      	bne.n	80003c6 <__aeabi_dadd+0x16e>
 80003c4:	e272      	b.n	80008ac <__aeabi_dadd+0x654>
 80003c6:	0022      	movs	r2, r4
 80003c8:	e123      	b.n	8000612 <__aeabi_dadd+0x3ba>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	dc00      	bgt.n	80003d0 <__aeabi_dadd+0x178>
 80003ce:	e098      	b.n	8000502 <__aeabi_dadd+0x2aa>
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d042      	beq.n	800045a <__aeabi_dadd+0x202>
 80003d4:	497d      	ldr	r1, [pc, #500]	; (80005cc <__aeabi_dadd+0x374>)
 80003d6:	428e      	cmp	r6, r1
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x184>
 80003da:	e0da      	b.n	8000592 <__aeabi_dadd+0x33a>
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0028      	movs	r0, r5
 80003e0:	0409      	lsls	r1, r1, #16
 80003e2:	4308      	orrs	r0, r1
 80003e4:	4684      	mov	ip, r0
 80003e6:	2a38      	cmp	r2, #56	; 0x38
 80003e8:	dd00      	ble.n	80003ec <__aeabi_dadd+0x194>
 80003ea:	e129      	b.n	8000640 <__aeabi_dadd+0x3e8>
 80003ec:	2a1f      	cmp	r2, #31
 80003ee:	dc00      	bgt.n	80003f2 <__aeabi_dadd+0x19a>
 80003f0:	e187      	b.n	8000702 <__aeabi_dadd+0x4aa>
 80003f2:	0011      	movs	r1, r2
 80003f4:	4665      	mov	r5, ip
 80003f6:	3920      	subs	r1, #32
 80003f8:	40cd      	lsrs	r5, r1
 80003fa:	2a20      	cmp	r2, #32
 80003fc:	d004      	beq.n	8000408 <__aeabi_dadd+0x1b0>
 80003fe:	2040      	movs	r0, #64	; 0x40
 8000400:	4661      	mov	r1, ip
 8000402:	1a82      	subs	r2, r0, r2
 8000404:	4091      	lsls	r1, r2
 8000406:	430f      	orrs	r7, r1
 8000408:	0039      	movs	r1, r7
 800040a:	1e4f      	subs	r7, r1, #1
 800040c:	41b9      	sbcs	r1, r7
 800040e:	430d      	orrs	r5, r1
 8000410:	e11b      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000412:	0029      	movs	r1, r5
 8000414:	4339      	orrs	r1, r7
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1c2>
 8000418:	e0b5      	b.n	8000586 <__aeabi_dadd+0x32e>
 800041a:	1e51      	subs	r1, r2, #1
 800041c:	2a01      	cmp	r2, #1
 800041e:	d100      	bne.n	8000422 <__aeabi_dadd+0x1ca>
 8000420:	e1ab      	b.n	800077a <__aeabi_dadd+0x522>
 8000422:	486a      	ldr	r0, [pc, #424]	; (80005cc <__aeabi_dadd+0x374>)
 8000424:	4282      	cmp	r2, r0
 8000426:	d100      	bne.n	800042a <__aeabi_dadd+0x1d2>
 8000428:	e1b2      	b.n	8000790 <__aeabi_dadd+0x538>
 800042a:	000a      	movs	r2, r1
 800042c:	e743      	b.n	80002b6 <__aeabi_dadd+0x5e>
 800042e:	4969      	ldr	r1, [pc, #420]	; (80005d4 <__aeabi_dadd+0x37c>)
 8000430:	1c75      	adds	r5, r6, #1
 8000432:	420d      	tst	r5, r1
 8000434:	d000      	beq.n	8000438 <__aeabi_dadd+0x1e0>
 8000436:	e0cf      	b.n	80005d8 <__aeabi_dadd+0x380>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d000      	beq.n	800043e <__aeabi_dadd+0x1e6>
 800043c:	e193      	b.n	8000766 <__aeabi_dadd+0x50e>
 800043e:	4649      	mov	r1, r9
 8000440:	4319      	orrs	r1, r3
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x1ee>
 8000444:	e1d1      	b.n	80007ea <__aeabi_dadd+0x592>
 8000446:	4661      	mov	r1, ip
 8000448:	4339      	orrs	r1, r7
 800044a:	d000      	beq.n	800044e <__aeabi_dadd+0x1f6>
 800044c:	e1e3      	b.n	8000816 <__aeabi_dadd+0x5be>
 800044e:	4649      	mov	r1, r9
 8000450:	0758      	lsls	r0, r3, #29
 8000452:	08c9      	lsrs	r1, r1, #3
 8000454:	4301      	orrs	r1, r0
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	e026      	b.n	80004a8 <__aeabi_dadd+0x250>
 800045a:	0029      	movs	r1, r5
 800045c:	4339      	orrs	r1, r7
 800045e:	d100      	bne.n	8000462 <__aeabi_dadd+0x20a>
 8000460:	e091      	b.n	8000586 <__aeabi_dadd+0x32e>
 8000462:	1e51      	subs	r1, r2, #1
 8000464:	2a01      	cmp	r2, #1
 8000466:	d005      	beq.n	8000474 <__aeabi_dadd+0x21c>
 8000468:	4858      	ldr	r0, [pc, #352]	; (80005cc <__aeabi_dadd+0x374>)
 800046a:	4282      	cmp	r2, r0
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x218>
 800046e:	e18f      	b.n	8000790 <__aeabi_dadd+0x538>
 8000470:	000a      	movs	r2, r1
 8000472:	e7b8      	b.n	80003e6 <__aeabi_dadd+0x18e>
 8000474:	003d      	movs	r5, r7
 8000476:	444d      	add	r5, r9
 8000478:	454d      	cmp	r5, r9
 800047a:	4189      	sbcs	r1, r1
 800047c:	4463      	add	r3, ip
 800047e:	4698      	mov	r8, r3
 8000480:	4249      	negs	r1, r1
 8000482:	4488      	add	r8, r1
 8000484:	4643      	mov	r3, r8
 8000486:	2602      	movs	r6, #2
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	d500      	bpl.n	800048e <__aeabi_dadd+0x236>
 800048c:	e0eb      	b.n	8000666 <__aeabi_dadd+0x40e>
 800048e:	3e01      	subs	r6, #1
 8000490:	076b      	lsls	r3, r5, #29
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x23e>
 8000494:	e75c      	b.n	8000350 <__aeabi_dadd+0xf8>
 8000496:	4643      	mov	r3, r8
 8000498:	08e9      	lsrs	r1, r5, #3
 800049a:	075a      	lsls	r2, r3, #29
 800049c:	4311      	orrs	r1, r2
 800049e:	0032      	movs	r2, r6
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	484a      	ldr	r0, [pc, #296]	; (80005cc <__aeabi_dadd+0x374>)
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d021      	beq.n	80004ec <__aeabi_dadd+0x294>
 80004a8:	031b      	lsls	r3, r3, #12
 80004aa:	0552      	lsls	r2, r2, #21
 80004ac:	0b1b      	lsrs	r3, r3, #12
 80004ae:	0d52      	lsrs	r2, r2, #21
 80004b0:	e76c      	b.n	800038c <__aeabi_dadd+0x134>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	e769      	b.n	800038c <__aeabi_dadd+0x134>
 80004b8:	002a      	movs	r2, r5
 80004ba:	433a      	orrs	r2, r7
 80004bc:	d069      	beq.n	8000592 <__aeabi_dadd+0x33a>
 80004be:	464a      	mov	r2, r9
 80004c0:	0758      	lsls	r0, r3, #29
 80004c2:	08d1      	lsrs	r1, r2, #3
 80004c4:	08da      	lsrs	r2, r3, #3
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	031b      	lsls	r3, r3, #12
 80004ca:	4308      	orrs	r0, r1
 80004cc:	421a      	tst	r2, r3
 80004ce:	d007      	beq.n	80004e0 <__aeabi_dadd+0x288>
 80004d0:	0029      	movs	r1, r5
 80004d2:	08ed      	lsrs	r5, r5, #3
 80004d4:	421d      	tst	r5, r3
 80004d6:	d103      	bne.n	80004e0 <__aeabi_dadd+0x288>
 80004d8:	002a      	movs	r2, r5
 80004da:	08ff      	lsrs	r7, r7, #3
 80004dc:	0748      	lsls	r0, r1, #29
 80004de:	4338      	orrs	r0, r7
 80004e0:	0f43      	lsrs	r3, r0, #29
 80004e2:	00c1      	lsls	r1, r0, #3
 80004e4:	075b      	lsls	r3, r3, #29
 80004e6:	08c9      	lsrs	r1, r1, #3
 80004e8:	4319      	orrs	r1, r3
 80004ea:	0013      	movs	r3, r2
 80004ec:	000a      	movs	r2, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x29c>
 80004f2:	e213      	b.n	800091c <__aeabi_dadd+0x6c4>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0312      	lsls	r2, r2, #12
 80004f8:	4313      	orrs	r3, r2
 80004fa:	031b      	lsls	r3, r3, #12
 80004fc:	4a33      	ldr	r2, [pc, #204]	; (80005cc <__aeabi_dadd+0x374>)
 80004fe:	0b1b      	lsrs	r3, r3, #12
 8000500:	e744      	b.n	800038c <__aeabi_dadd+0x134>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d04b      	beq.n	800059e <__aeabi_dadd+0x346>
 8000506:	1b8a      	subs	r2, r1, r6
 8000508:	2e00      	cmp	r6, #0
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x2b6>
 800050c:	e0e7      	b.n	80006de <__aeabi_dadd+0x486>
 800050e:	482f      	ldr	r0, [pc, #188]	; (80005cc <__aeabi_dadd+0x374>)
 8000510:	4281      	cmp	r1, r0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x2be>
 8000514:	e195      	b.n	8000842 <__aeabi_dadd+0x5ea>
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	4303      	orrs	r3, r0
 800051c:	2a38      	cmp	r2, #56	; 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x2ca>
 8000520:	e143      	b.n	80007aa <__aeabi_dadd+0x552>
 8000522:	2a1f      	cmp	r2, #31
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0x2d0>
 8000526:	e1db      	b.n	80008e0 <__aeabi_dadd+0x688>
 8000528:	2020      	movs	r0, #32
 800052a:	001d      	movs	r5, r3
 800052c:	464e      	mov	r6, r9
 800052e:	1a80      	subs	r0, r0, r2
 8000530:	4085      	lsls	r5, r0
 8000532:	40d6      	lsrs	r6, r2
 8000534:	4335      	orrs	r5, r6
 8000536:	464e      	mov	r6, r9
 8000538:	4086      	lsls	r6, r0
 800053a:	0030      	movs	r0, r6
 800053c:	40d3      	lsrs	r3, r2
 800053e:	1e46      	subs	r6, r0, #1
 8000540:	41b0      	sbcs	r0, r6
 8000542:	449c      	add	ip, r3
 8000544:	4305      	orrs	r5, r0
 8000546:	19ed      	adds	r5, r5, r7
 8000548:	42bd      	cmp	r5, r7
 800054a:	419b      	sbcs	r3, r3
 800054c:	425b      	negs	r3, r3
 800054e:	4463      	add	r3, ip
 8000550:	4698      	mov	r8, r3
 8000552:	000e      	movs	r6, r1
 8000554:	e07f      	b.n	8000656 <__aeabi_dadd+0x3fe>
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <__aeabi_dadd+0x378>)
 8000558:	1a76      	subs	r6, r6, r1
 800055a:	4013      	ands	r3, r2
 800055c:	4698      	mov	r8, r3
 800055e:	e6f5      	b.n	800034c <__aeabi_dadd+0xf4>
 8000560:	0028      	movs	r0, r5
 8000562:	f001 fb93 	bl	8001c8c <__clzsi2>
 8000566:	0001      	movs	r1, r0
 8000568:	3118      	adds	r1, #24
 800056a:	291f      	cmp	r1, #31
 800056c:	dc00      	bgt.n	8000570 <__aeabi_dadd+0x318>
 800056e:	e6cf      	b.n	8000310 <__aeabi_dadd+0xb8>
 8000570:	002b      	movs	r3, r5
 8000572:	3808      	subs	r0, #8
 8000574:	4083      	lsls	r3, r0
 8000576:	2500      	movs	r5, #0
 8000578:	e6d2      	b.n	8000320 <__aeabi_dadd+0xc8>
 800057a:	4662      	mov	r2, ip
 800057c:	433a      	orrs	r2, r7
 800057e:	0011      	movs	r1, r2
 8000580:	1e4f      	subs	r7, r1, #1
 8000582:	41b9      	sbcs	r1, r7
 8000584:	e6ac      	b.n	80002e0 <__aeabi_dadd+0x88>
 8000586:	4649      	mov	r1, r9
 8000588:	0758      	lsls	r0, r3, #29
 800058a:	08c9      	lsrs	r1, r1, #3
 800058c:	4301      	orrs	r1, r0
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	e787      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000592:	4649      	mov	r1, r9
 8000594:	075a      	lsls	r2, r3, #29
 8000596:	08c9      	lsrs	r1, r1, #3
 8000598:	4311      	orrs	r1, r2
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	e7a6      	b.n	80004ec <__aeabi_dadd+0x294>
 800059e:	490d      	ldr	r1, [pc, #52]	; (80005d4 <__aeabi_dadd+0x37c>)
 80005a0:	1c70      	adds	r0, r6, #1
 80005a2:	4208      	tst	r0, r1
 80005a4:	d000      	beq.n	80005a8 <__aeabi_dadd+0x350>
 80005a6:	e0bb      	b.n	8000720 <__aeabi_dadd+0x4c8>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x356>
 80005ac:	e114      	b.n	80007d8 <__aeabi_dadd+0x580>
 80005ae:	4649      	mov	r1, r9
 80005b0:	4319      	orrs	r1, r3
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x35e>
 80005b4:	e175      	b.n	80008a2 <__aeabi_dadd+0x64a>
 80005b6:	0029      	movs	r1, r5
 80005b8:	4339      	orrs	r1, r7
 80005ba:	d000      	beq.n	80005be <__aeabi_dadd+0x366>
 80005bc:	e17e      	b.n	80008bc <__aeabi_dadd+0x664>
 80005be:	4649      	mov	r1, r9
 80005c0:	0758      	lsls	r0, r3, #29
 80005c2:	08c9      	lsrs	r1, r1, #3
 80005c4:	4301      	orrs	r1, r0
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	e76e      	b.n	80004a8 <__aeabi_dadd+0x250>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	ff7fffff 	.word	0xff7fffff
 80005d4:	000007fe 	.word	0x000007fe
 80005d8:	4649      	mov	r1, r9
 80005da:	1bcd      	subs	r5, r1, r7
 80005dc:	4661      	mov	r1, ip
 80005de:	1a58      	subs	r0, r3, r1
 80005e0:	45a9      	cmp	r9, r5
 80005e2:	4189      	sbcs	r1, r1
 80005e4:	4249      	negs	r1, r1
 80005e6:	4688      	mov	r8, r1
 80005e8:	0001      	movs	r1, r0
 80005ea:	4640      	mov	r0, r8
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	0209      	lsls	r1, r1, #8
 80005f2:	d500      	bpl.n	80005f6 <__aeabi_dadd+0x39e>
 80005f4:	e0a6      	b.n	8000744 <__aeabi_dadd+0x4ec>
 80005f6:	4641      	mov	r1, r8
 80005f8:	4329      	orrs	r1, r5
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x3a6>
 80005fc:	e67f      	b.n	80002fe <__aeabi_dadd+0xa6>
 80005fe:	2300      	movs	r3, #0
 8000600:	2400      	movs	r4, #0
 8000602:	e751      	b.n	80004a8 <__aeabi_dadd+0x250>
 8000604:	4cc7      	ldr	r4, [pc, #796]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000606:	42a1      	cmp	r1, r4
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x3b4>
 800060a:	e0c7      	b.n	800079c <__aeabi_dadd+0x544>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	0424      	lsls	r4, r4, #16
 8000610:	4323      	orrs	r3, r4
 8000612:	2a38      	cmp	r2, #56	; 0x38
 8000614:	dc54      	bgt.n	80006c0 <__aeabi_dadd+0x468>
 8000616:	2a1f      	cmp	r2, #31
 8000618:	dd00      	ble.n	800061c <__aeabi_dadd+0x3c4>
 800061a:	e0cc      	b.n	80007b6 <__aeabi_dadd+0x55e>
 800061c:	2420      	movs	r4, #32
 800061e:	4648      	mov	r0, r9
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	001d      	movs	r5, r3
 8000624:	464e      	mov	r6, r9
 8000626:	40a0      	lsls	r0, r4
 8000628:	40d6      	lsrs	r6, r2
 800062a:	40a5      	lsls	r5, r4
 800062c:	0004      	movs	r4, r0
 800062e:	40d3      	lsrs	r3, r2
 8000630:	4662      	mov	r2, ip
 8000632:	4335      	orrs	r5, r6
 8000634:	1e66      	subs	r6, r4, #1
 8000636:	41b4      	sbcs	r4, r6
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	469c      	mov	ip, r3
 800063c:	4325      	orrs	r5, r4
 800063e:	e044      	b.n	80006ca <__aeabi_dadd+0x472>
 8000640:	4662      	mov	r2, ip
 8000642:	433a      	orrs	r2, r7
 8000644:	0015      	movs	r5, r2
 8000646:	1e6f      	subs	r7, r5, #1
 8000648:	41bd      	sbcs	r5, r7
 800064a:	444d      	add	r5, r9
 800064c:	454d      	cmp	r5, r9
 800064e:	4189      	sbcs	r1, r1
 8000650:	4249      	negs	r1, r1
 8000652:	4688      	mov	r8, r1
 8000654:	4498      	add	r8, r3
 8000656:	4643      	mov	r3, r8
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	d400      	bmi.n	800065e <__aeabi_dadd+0x406>
 800065c:	e718      	b.n	8000490 <__aeabi_dadd+0x238>
 800065e:	4bb1      	ldr	r3, [pc, #708]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000660:	3601      	adds	r6, #1
 8000662:	429e      	cmp	r6, r3
 8000664:	d049      	beq.n	80006fa <__aeabi_dadd+0x4a2>
 8000666:	4642      	mov	r2, r8
 8000668:	4baf      	ldr	r3, [pc, #700]	; (8000928 <__aeabi_dadd+0x6d0>)
 800066a:	2101      	movs	r1, #1
 800066c:	401a      	ands	r2, r3
 800066e:	0013      	movs	r3, r2
 8000670:	086a      	lsrs	r2, r5, #1
 8000672:	400d      	ands	r5, r1
 8000674:	4315      	orrs	r5, r2
 8000676:	07d9      	lsls	r1, r3, #31
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	4698      	mov	r8, r3
 800067c:	430d      	orrs	r5, r1
 800067e:	e665      	b.n	800034c <__aeabi_dadd+0xf4>
 8000680:	0018      	movs	r0, r3
 8000682:	3e1f      	subs	r6, #31
 8000684:	40f0      	lsrs	r0, r6
 8000686:	2a20      	cmp	r2, #32
 8000688:	d003      	beq.n	8000692 <__aeabi_dadd+0x43a>
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	1a8a      	subs	r2, r1, r2
 800068e:	4093      	lsls	r3, r2
 8000690:	431d      	orrs	r5, r3
 8000692:	1e69      	subs	r1, r5, #1
 8000694:	418d      	sbcs	r5, r1
 8000696:	2300      	movs	r3, #0
 8000698:	2600      	movs	r6, #0
 800069a:	4698      	mov	r8, r3
 800069c:	4305      	orrs	r5, r0
 800069e:	e6f7      	b.n	8000490 <__aeabi_dadd+0x238>
 80006a0:	0011      	movs	r1, r2
 80006a2:	4665      	mov	r5, ip
 80006a4:	3920      	subs	r1, #32
 80006a6:	40cd      	lsrs	r5, r1
 80006a8:	2a20      	cmp	r2, #32
 80006aa:	d004      	beq.n	80006b6 <__aeabi_dadd+0x45e>
 80006ac:	2040      	movs	r0, #64	; 0x40
 80006ae:	4661      	mov	r1, ip
 80006b0:	1a82      	subs	r2, r0, r2
 80006b2:	4091      	lsls	r1, r2
 80006b4:	430f      	orrs	r7, r1
 80006b6:	0039      	movs	r1, r7
 80006b8:	1e4f      	subs	r7, r1, #1
 80006ba:	41b9      	sbcs	r1, r7
 80006bc:	4329      	orrs	r1, r5
 80006be:	e60f      	b.n	80002e0 <__aeabi_dadd+0x88>
 80006c0:	464a      	mov	r2, r9
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	1e6b      	subs	r3, r5, #1
 80006c8:	419d      	sbcs	r5, r3
 80006ca:	1b7d      	subs	r5, r7, r5
 80006cc:	42af      	cmp	r7, r5
 80006ce:	419b      	sbcs	r3, r3
 80006d0:	4662      	mov	r2, ip
 80006d2:	425b      	negs	r3, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4698      	mov	r8, r3
 80006d8:	4654      	mov	r4, sl
 80006da:	000e      	movs	r6, r1
 80006dc:	e607      	b.n	80002ee <__aeabi_dadd+0x96>
 80006de:	4648      	mov	r0, r9
 80006e0:	4318      	orrs	r0, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x48e>
 80006e4:	e0b3      	b.n	800084e <__aeabi_dadd+0x5f6>
 80006e6:	1e50      	subs	r0, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x496>
 80006ec:	e10d      	b.n	800090a <__aeabi_dadd+0x6b2>
 80006ee:	4d8d      	ldr	r5, [pc, #564]	; (8000924 <__aeabi_dadd+0x6cc>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x49e>
 80006f4:	e0a5      	b.n	8000842 <__aeabi_dadd+0x5ea>
 80006f6:	0002      	movs	r2, r0
 80006f8:	e710      	b.n	800051c <__aeabi_dadd+0x2c4>
 80006fa:	0032      	movs	r2, r6
 80006fc:	2300      	movs	r3, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	e644      	b.n	800038c <__aeabi_dadd+0x134>
 8000702:	2120      	movs	r1, #32
 8000704:	0038      	movs	r0, r7
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	4665      	mov	r5, ip
 800070a:	408f      	lsls	r7, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d0      	lsrs	r0, r2
 8000710:	1e79      	subs	r1, r7, #1
 8000712:	418f      	sbcs	r7, r1
 8000714:	4305      	orrs	r5, r0
 8000716:	433d      	orrs	r5, r7
 8000718:	4667      	mov	r7, ip
 800071a:	40d7      	lsrs	r7, r2
 800071c:	19db      	adds	r3, r3, r7
 800071e:	e794      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000720:	4a80      	ldr	r2, [pc, #512]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000722:	4290      	cmp	r0, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x4d0>
 8000726:	e0ec      	b.n	8000902 <__aeabi_dadd+0x6aa>
 8000728:	0039      	movs	r1, r7
 800072a:	4449      	add	r1, r9
 800072c:	4549      	cmp	r1, r9
 800072e:	4192      	sbcs	r2, r2
 8000730:	4463      	add	r3, ip
 8000732:	4252      	negs	r2, r2
 8000734:	189b      	adds	r3, r3, r2
 8000736:	07dd      	lsls	r5, r3, #31
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	4698      	mov	r8, r3
 800073e:	0006      	movs	r6, r0
 8000740:	430d      	orrs	r5, r1
 8000742:	e6a5      	b.n	8000490 <__aeabi_dadd+0x238>
 8000744:	464a      	mov	r2, r9
 8000746:	1abd      	subs	r5, r7, r2
 8000748:	42af      	cmp	r7, r5
 800074a:	4189      	sbcs	r1, r1
 800074c:	4662      	mov	r2, ip
 800074e:	4249      	negs	r1, r1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	1a5b      	subs	r3, r3, r1
 8000754:	4698      	mov	r8, r3
 8000756:	4654      	mov	r4, sl
 8000758:	e5d1      	b.n	80002fe <__aeabi_dadd+0xa6>
 800075a:	076c      	lsls	r4, r5, #29
 800075c:	08f9      	lsrs	r1, r7, #3
 800075e:	4321      	orrs	r1, r4
 8000760:	08eb      	lsrs	r3, r5, #3
 8000762:	0004      	movs	r4, r0
 8000764:	e69d      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000766:	464a      	mov	r2, r9
 8000768:	431a      	orrs	r2, r3
 800076a:	d175      	bne.n	8000858 <__aeabi_dadd+0x600>
 800076c:	4661      	mov	r1, ip
 800076e:	4339      	orrs	r1, r7
 8000770:	d114      	bne.n	800079c <__aeabi_dadd+0x544>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	2400      	movs	r4, #0
 8000776:	031b      	lsls	r3, r3, #12
 8000778:	e6bc      	b.n	80004f4 <__aeabi_dadd+0x29c>
 800077a:	464a      	mov	r2, r9
 800077c:	1bd5      	subs	r5, r2, r7
 800077e:	45a9      	cmp	r9, r5
 8000780:	4189      	sbcs	r1, r1
 8000782:	4662      	mov	r2, ip
 8000784:	4249      	negs	r1, r1
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	4698      	mov	r8, r3
 800078c:	2601      	movs	r6, #1
 800078e:	e5ae      	b.n	80002ee <__aeabi_dadd+0x96>
 8000790:	464a      	mov	r2, r9
 8000792:	08d1      	lsrs	r1, r2, #3
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	4311      	orrs	r1, r2
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	e6a7      	b.n	80004ec <__aeabi_dadd+0x294>
 800079c:	4663      	mov	r3, ip
 800079e:	08f9      	lsrs	r1, r7, #3
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	4654      	mov	r4, sl
 80007a4:	4311      	orrs	r1, r2
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	e6a0      	b.n	80004ec <__aeabi_dadd+0x294>
 80007aa:	464a      	mov	r2, r9
 80007ac:	4313      	orrs	r3, r2
 80007ae:	001d      	movs	r5, r3
 80007b0:	1e6b      	subs	r3, r5, #1
 80007b2:	419d      	sbcs	r5, r3
 80007b4:	e6c7      	b.n	8000546 <__aeabi_dadd+0x2ee>
 80007b6:	0014      	movs	r4, r2
 80007b8:	001e      	movs	r6, r3
 80007ba:	3c20      	subs	r4, #32
 80007bc:	40e6      	lsrs	r6, r4
 80007be:	2a20      	cmp	r2, #32
 80007c0:	d005      	beq.n	80007ce <__aeabi_dadd+0x576>
 80007c2:	2440      	movs	r4, #64	; 0x40
 80007c4:	1aa2      	subs	r2, r4, r2
 80007c6:	4093      	lsls	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4691      	mov	r9, r2
 80007ce:	464d      	mov	r5, r9
 80007d0:	1e6b      	subs	r3, r5, #1
 80007d2:	419d      	sbcs	r5, r3
 80007d4:	4335      	orrs	r5, r6
 80007d6:	e778      	b.n	80006ca <__aeabi_dadd+0x472>
 80007d8:	464a      	mov	r2, r9
 80007da:	431a      	orrs	r2, r3
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x588>
 80007de:	e66b      	b.n	80004b8 <__aeabi_dadd+0x260>
 80007e0:	076b      	lsls	r3, r5, #29
 80007e2:	08f9      	lsrs	r1, r7, #3
 80007e4:	4319      	orrs	r1, r3
 80007e6:	08eb      	lsrs	r3, r5, #3
 80007e8:	e680      	b.n	80004ec <__aeabi_dadd+0x294>
 80007ea:	4661      	mov	r1, ip
 80007ec:	4339      	orrs	r1, r7
 80007ee:	d054      	beq.n	800089a <__aeabi_dadd+0x642>
 80007f0:	4663      	mov	r3, ip
 80007f2:	08f9      	lsrs	r1, r7, #3
 80007f4:	075c      	lsls	r4, r3, #29
 80007f6:	4321      	orrs	r1, r4
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	0004      	movs	r4, r0
 80007fc:	e654      	b.n	80004a8 <__aeabi_dadd+0x250>
 80007fe:	464a      	mov	r2, r9
 8000800:	1abd      	subs	r5, r7, r2
 8000802:	42af      	cmp	r7, r5
 8000804:	4189      	sbcs	r1, r1
 8000806:	4662      	mov	r2, ip
 8000808:	4249      	negs	r1, r1
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	4698      	mov	r8, r3
 8000810:	0004      	movs	r4, r0
 8000812:	2601      	movs	r6, #1
 8000814:	e56b      	b.n	80002ee <__aeabi_dadd+0x96>
 8000816:	464a      	mov	r2, r9
 8000818:	1bd5      	subs	r5, r2, r7
 800081a:	45a9      	cmp	r9, r5
 800081c:	4189      	sbcs	r1, r1
 800081e:	4662      	mov	r2, ip
 8000820:	4249      	negs	r1, r1
 8000822:	1a9a      	subs	r2, r3, r2
 8000824:	1a52      	subs	r2, r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	0212      	lsls	r2, r2, #8
 800082a:	d532      	bpl.n	8000892 <__aeabi_dadd+0x63a>
 800082c:	464a      	mov	r2, r9
 800082e:	1abd      	subs	r5, r7, r2
 8000830:	42af      	cmp	r7, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4662      	mov	r2, ip
 8000836:	4249      	negs	r1, r1
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	1a5b      	subs	r3, r3, r1
 800083c:	4698      	mov	r8, r3
 800083e:	0004      	movs	r4, r0
 8000840:	e584      	b.n	800034c <__aeabi_dadd+0xf4>
 8000842:	4663      	mov	r3, ip
 8000844:	08f9      	lsrs	r1, r7, #3
 8000846:	075a      	lsls	r2, r3, #29
 8000848:	4311      	orrs	r1, r2
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e64e      	b.n	80004ec <__aeabi_dadd+0x294>
 800084e:	08f9      	lsrs	r1, r7, #3
 8000850:	0768      	lsls	r0, r5, #29
 8000852:	4301      	orrs	r1, r0
 8000854:	08eb      	lsrs	r3, r5, #3
 8000856:	e624      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000858:	4662      	mov	r2, ip
 800085a:	433a      	orrs	r2, r7
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x608>
 800085e:	e698      	b.n	8000592 <__aeabi_dadd+0x33a>
 8000860:	464a      	mov	r2, r9
 8000862:	08d1      	lsrs	r1, r2, #3
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	4311      	orrs	r1, r2
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	031b      	lsls	r3, r3, #12
 800086e:	421a      	tst	r2, r3
 8000870:	d008      	beq.n	8000884 <__aeabi_dadd+0x62c>
 8000872:	4660      	mov	r0, ip
 8000874:	08c5      	lsrs	r5, r0, #3
 8000876:	421d      	tst	r5, r3
 8000878:	d104      	bne.n	8000884 <__aeabi_dadd+0x62c>
 800087a:	4654      	mov	r4, sl
 800087c:	002a      	movs	r2, r5
 800087e:	08f9      	lsrs	r1, r7, #3
 8000880:	0743      	lsls	r3, r0, #29
 8000882:	4319      	orrs	r1, r3
 8000884:	0f4b      	lsrs	r3, r1, #29
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	4319      	orrs	r1, r3
 800088e:	0013      	movs	r3, r2
 8000890:	e62c      	b.n	80004ec <__aeabi_dadd+0x294>
 8000892:	4641      	mov	r1, r8
 8000894:	4329      	orrs	r1, r5
 8000896:	d000      	beq.n	800089a <__aeabi_dadd+0x642>
 8000898:	e5fa      	b.n	8000490 <__aeabi_dadd+0x238>
 800089a:	2300      	movs	r3, #0
 800089c:	000a      	movs	r2, r1
 800089e:	2400      	movs	r4, #0
 80008a0:	e602      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008a2:	076b      	lsls	r3, r5, #29
 80008a4:	08f9      	lsrs	r1, r7, #3
 80008a6:	4319      	orrs	r1, r3
 80008a8:	08eb      	lsrs	r3, r5, #3
 80008aa:	e5fd      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008ac:	4663      	mov	r3, ip
 80008ae:	08f9      	lsrs	r1, r7, #3
 80008b0:	075b      	lsls	r3, r3, #29
 80008b2:	4319      	orrs	r1, r3
 80008b4:	4663      	mov	r3, ip
 80008b6:	0004      	movs	r4, r0
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	e617      	b.n	80004ec <__aeabi_dadd+0x294>
 80008bc:	003d      	movs	r5, r7
 80008be:	444d      	add	r5, r9
 80008c0:	4463      	add	r3, ip
 80008c2:	454d      	cmp	r5, r9
 80008c4:	4189      	sbcs	r1, r1
 80008c6:	4698      	mov	r8, r3
 80008c8:	4249      	negs	r1, r1
 80008ca:	4488      	add	r8, r1
 80008cc:	4643      	mov	r3, r8
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x67c>
 80008d2:	e5dd      	b.n	8000490 <__aeabi_dadd+0x238>
 80008d4:	4642      	mov	r2, r8
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <__aeabi_dadd+0x6d0>)
 80008d8:	2601      	movs	r6, #1
 80008da:	401a      	ands	r2, r3
 80008dc:	4690      	mov	r8, r2
 80008de:	e5d7      	b.n	8000490 <__aeabi_dadd+0x238>
 80008e0:	0010      	movs	r0, r2
 80008e2:	001e      	movs	r6, r3
 80008e4:	3820      	subs	r0, #32
 80008e6:	40c6      	lsrs	r6, r0
 80008e8:	2a20      	cmp	r2, #32
 80008ea:	d005      	beq.n	80008f8 <__aeabi_dadd+0x6a0>
 80008ec:	2040      	movs	r0, #64	; 0x40
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4093      	lsls	r3, r2
 80008f2:	464a      	mov	r2, r9
 80008f4:	431a      	orrs	r2, r3
 80008f6:	4691      	mov	r9, r2
 80008f8:	464d      	mov	r5, r9
 80008fa:	1e6b      	subs	r3, r5, #1
 80008fc:	419d      	sbcs	r5, r3
 80008fe:	4335      	orrs	r5, r6
 8000900:	e621      	b.n	8000546 <__aeabi_dadd+0x2ee>
 8000902:	0002      	movs	r2, r0
 8000904:	2300      	movs	r3, #0
 8000906:	2100      	movs	r1, #0
 8000908:	e540      	b.n	800038c <__aeabi_dadd+0x134>
 800090a:	464a      	mov	r2, r9
 800090c:	19d5      	adds	r5, r2, r7
 800090e:	42bd      	cmp	r5, r7
 8000910:	4189      	sbcs	r1, r1
 8000912:	4463      	add	r3, ip
 8000914:	4698      	mov	r8, r3
 8000916:	4249      	negs	r1, r1
 8000918:	4488      	add	r8, r1
 800091a:	e5b3      	b.n	8000484 <__aeabi_dadd+0x22c>
 800091c:	2100      	movs	r1, #0
 800091e:	4a01      	ldr	r2, [pc, #4]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000920:	000b      	movs	r3, r1
 8000922:	e533      	b.n	800038c <__aeabi_dadd+0x134>
 8000924:	000007ff 	.word	0x000007ff
 8000928:	ff7fffff 	.word	0xff7fffff

0800092c <__aeabi_ddiv>:
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	4657      	mov	r7, sl
 8000930:	464e      	mov	r6, r9
 8000932:	4645      	mov	r5, r8
 8000934:	46de      	mov	lr, fp
 8000936:	b5e0      	push	{r5, r6, r7, lr}
 8000938:	4681      	mov	r9, r0
 800093a:	0005      	movs	r5, r0
 800093c:	030c      	lsls	r4, r1, #12
 800093e:	0048      	lsls	r0, r1, #1
 8000940:	4692      	mov	sl, r2
 8000942:	001f      	movs	r7, r3
 8000944:	b085      	sub	sp, #20
 8000946:	0b24      	lsrs	r4, r4, #12
 8000948:	0d40      	lsrs	r0, r0, #21
 800094a:	0fce      	lsrs	r6, r1, #31
 800094c:	2800      	cmp	r0, #0
 800094e:	d059      	beq.n	8000a04 <__aeabi_ddiv+0xd8>
 8000950:	4b87      	ldr	r3, [pc, #540]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000952:	4298      	cmp	r0, r3
 8000954:	d100      	bne.n	8000958 <__aeabi_ddiv+0x2c>
 8000956:	e098      	b.n	8000a8a <__aeabi_ddiv+0x15e>
 8000958:	0f6b      	lsrs	r3, r5, #29
 800095a:	00e4      	lsls	r4, r4, #3
 800095c:	431c      	orrs	r4, r3
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	4323      	orrs	r3, r4
 8000964:	4698      	mov	r8, r3
 8000966:	4b83      	ldr	r3, [pc, #524]	; (8000b74 <__aeabi_ddiv+0x248>)
 8000968:	00ed      	lsls	r5, r5, #3
 800096a:	469b      	mov	fp, r3
 800096c:	2300      	movs	r3, #0
 800096e:	4699      	mov	r9, r3
 8000970:	4483      	add	fp, r0
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	033c      	lsls	r4, r7, #12
 8000976:	007b      	lsls	r3, r7, #1
 8000978:	4650      	mov	r0, sl
 800097a:	0b24      	lsrs	r4, r4, #12
 800097c:	0d5b      	lsrs	r3, r3, #21
 800097e:	0fff      	lsrs	r7, r7, #31
 8000980:	2b00      	cmp	r3, #0
 8000982:	d067      	beq.n	8000a54 <__aeabi_ddiv+0x128>
 8000984:	4a7a      	ldr	r2, [pc, #488]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x90>
 800098a:	497a      	ldr	r1, [pc, #488]	; (8000b74 <__aeabi_ddiv+0x248>)
 800098c:	0f42      	lsrs	r2, r0, #29
 800098e:	468c      	mov	ip, r1
 8000990:	00e4      	lsls	r4, r4, #3
 8000992:	4659      	mov	r1, fp
 8000994:	4314      	orrs	r4, r2
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	4463      	add	r3, ip
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	1acb      	subs	r3, r1, r3
 800099e:	4314      	orrs	r4, r2
 80009a0:	469b      	mov	fp, r3
 80009a2:	00c2      	lsls	r2, r0, #3
 80009a4:	2000      	movs	r0, #0
 80009a6:	0033      	movs	r3, r6
 80009a8:	407b      	eors	r3, r7
 80009aa:	469a      	mov	sl, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d900      	bls.n	80009b4 <__aeabi_ddiv+0x88>
 80009b2:	e0ef      	b.n	8000b94 <__aeabi_ddiv+0x268>
 80009b4:	4970      	ldr	r1, [pc, #448]	; (8000b78 <__aeabi_ddiv+0x24c>)
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	58cb      	ldr	r3, [r1, r3]
 80009ba:	469f      	mov	pc, r3
 80009bc:	4b6f      	ldr	r3, [pc, #444]	; (8000b7c <__aeabi_ddiv+0x250>)
 80009be:	4652      	mov	r2, sl
 80009c0:	469c      	mov	ip, r3
 80009c2:	4322      	orrs	r2, r4
 80009c4:	44e3      	add	fp, ip
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_ddiv+0xa0>
 80009ca:	e095      	b.n	8000af8 <__aeabi_ddiv+0x1cc>
 80009cc:	4649      	mov	r1, r9
 80009ce:	2302      	movs	r3, #2
 80009d0:	4319      	orrs	r1, r3
 80009d2:	4689      	mov	r9, r1
 80009d4:	2400      	movs	r4, #0
 80009d6:	2002      	movs	r0, #2
 80009d8:	e7e5      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 80009da:	2300      	movs	r3, #0
 80009dc:	2400      	movs	r4, #0
 80009de:	2500      	movs	r5, #0
 80009e0:	4652      	mov	r2, sl
 80009e2:	051b      	lsls	r3, r3, #20
 80009e4:	4323      	orrs	r3, r4
 80009e6:	07d2      	lsls	r2, r2, #31
 80009e8:	4313      	orrs	r3, r2
 80009ea:	0028      	movs	r0, r5
 80009ec:	0019      	movs	r1, r3
 80009ee:	b005      	add	sp, #20
 80009f0:	bcf0      	pop	{r4, r5, r6, r7}
 80009f2:	46bb      	mov	fp, r7
 80009f4:	46b2      	mov	sl, r6
 80009f6:	46a9      	mov	r9, r5
 80009f8:	46a0      	mov	r8, r4
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fc:	2400      	movs	r4, #0
 80009fe:	2500      	movs	r5, #0
 8000a00:	4b5b      	ldr	r3, [pc, #364]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000a02:	e7ed      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000a04:	464b      	mov	r3, r9
 8000a06:	4323      	orrs	r3, r4
 8000a08:	4698      	mov	r8, r3
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_ddiv+0xe2>
 8000a0c:	e089      	b.n	8000b22 <__aeabi_ddiv+0x1f6>
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_ddiv+0xe8>
 8000a12:	e1e0      	b.n	8000dd6 <__aeabi_ddiv+0x4aa>
 8000a14:	0020      	movs	r0, r4
 8000a16:	f001 f939 	bl	8001c8c <__clzsi2>
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	390b      	subs	r1, #11
 8000a20:	231d      	movs	r3, #29
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	4649      	mov	r1, r9
 8000a26:	0010      	movs	r0, r2
 8000a28:	40d9      	lsrs	r1, r3
 8000a2a:	3808      	subs	r0, #8
 8000a2c:	4084      	lsls	r4, r0
 8000a2e:	000b      	movs	r3, r1
 8000a30:	464d      	mov	r5, r9
 8000a32:	4323      	orrs	r3, r4
 8000a34:	4698      	mov	r8, r3
 8000a36:	4085      	lsls	r5, r0
 8000a38:	4851      	ldr	r0, [pc, #324]	; (8000b80 <__aeabi_ddiv+0x254>)
 8000a3a:	033c      	lsls	r4, r7, #12
 8000a3c:	1a83      	subs	r3, r0, r2
 8000a3e:	469b      	mov	fp, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	4699      	mov	r9, r3
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	007b      	lsls	r3, r7, #1
 8000a48:	4650      	mov	r0, sl
 8000a4a:	0b24      	lsrs	r4, r4, #12
 8000a4c:	0d5b      	lsrs	r3, r3, #21
 8000a4e:	0fff      	lsrs	r7, r7, #31
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d197      	bne.n	8000984 <__aeabi_ddiv+0x58>
 8000a54:	4652      	mov	r2, sl
 8000a56:	4322      	orrs	r2, r4
 8000a58:	d055      	beq.n	8000b06 <__aeabi_ddiv+0x1da>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_ddiv+0x134>
 8000a5e:	e1ca      	b.n	8000df6 <__aeabi_ddiv+0x4ca>
 8000a60:	0020      	movs	r0, r4
 8000a62:	f001 f913 	bl	8001c8c <__clzsi2>
 8000a66:	0002      	movs	r2, r0
 8000a68:	3a0b      	subs	r2, #11
 8000a6a:	231d      	movs	r3, #29
 8000a6c:	0001      	movs	r1, r0
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	4652      	mov	r2, sl
 8000a72:	3908      	subs	r1, #8
 8000a74:	40da      	lsrs	r2, r3
 8000a76:	408c      	lsls	r4, r1
 8000a78:	4314      	orrs	r4, r2
 8000a7a:	4652      	mov	r2, sl
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <__aeabi_ddiv+0x258>)
 8000a80:	4458      	add	r0, fp
 8000a82:	469b      	mov	fp, r3
 8000a84:	4483      	add	fp, r0
 8000a86:	2000      	movs	r0, #0
 8000a88:	e78d      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	4698      	mov	r8, r3
 8000a90:	d140      	bne.n	8000b14 <__aeabi_ddiv+0x1e8>
 8000a92:	2308      	movs	r3, #8
 8000a94:	4699      	mov	r9, r3
 8000a96:	3b06      	subs	r3, #6
 8000a98:	2500      	movs	r5, #0
 8000a9a:	4683      	mov	fp, r0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	e769      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000aa0:	46b2      	mov	sl, r6
 8000aa2:	9b00      	ldr	r3, [sp, #0]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d0a9      	beq.n	80009fc <__aeabi_ddiv+0xd0>
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d100      	bne.n	8000aae <__aeabi_ddiv+0x182>
 8000aac:	e211      	b.n	8000ed2 <__aeabi_ddiv+0x5a6>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d093      	beq.n	80009da <__aeabi_ddiv+0xae>
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <__aeabi_ddiv+0x25c>)
 8000ab4:	445a      	add	r2, fp
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	dc00      	bgt.n	8000abc <__aeabi_ddiv+0x190>
 8000aba:	e13c      	b.n	8000d36 <__aeabi_ddiv+0x40a>
 8000abc:	076b      	lsls	r3, r5, #29
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_ddiv+0x196>
 8000ac0:	e1a7      	b.n	8000e12 <__aeabi_ddiv+0x4e6>
 8000ac2:	08ed      	lsrs	r5, r5, #3
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	d506      	bpl.n	8000ad8 <__aeabi_ddiv+0x1ac>
 8000aca:	4642      	mov	r2, r8
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <__aeabi_ddiv+0x260>)
 8000ace:	401a      	ands	r2, r3
 8000ad0:	4690      	mov	r8, r2
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	445a      	add	r2, fp
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <__aeabi_ddiv+0x264>)
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dc8e      	bgt.n	80009fc <__aeabi_ddiv+0xd0>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	0552      	lsls	r2, r2, #21
 8000ae2:	0758      	lsls	r0, r3, #29
 8000ae4:	025c      	lsls	r4, r3, #9
 8000ae6:	4305      	orrs	r5, r0
 8000ae8:	0b24      	lsrs	r4, r4, #12
 8000aea:	0d53      	lsrs	r3, r2, #21
 8000aec:	e778      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000aee:	46ba      	mov	sl, r7
 8000af0:	46a0      	mov	r8, r4
 8000af2:	0015      	movs	r5, r2
 8000af4:	9000      	str	r0, [sp, #0]
 8000af6:	e7d4      	b.n	8000aa2 <__aeabi_ddiv+0x176>
 8000af8:	464a      	mov	r2, r9
 8000afa:	2303      	movs	r3, #3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	4691      	mov	r9, r2
 8000b00:	2003      	movs	r0, #3
 8000b02:	4652      	mov	r2, sl
 8000b04:	e74f      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000b06:	4649      	mov	r1, r9
 8000b08:	2301      	movs	r3, #1
 8000b0a:	4319      	orrs	r1, r3
 8000b0c:	4689      	mov	r9, r1
 8000b0e:	2400      	movs	r4, #0
 8000b10:	2001      	movs	r0, #1
 8000b12:	e748      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000b14:	230c      	movs	r3, #12
 8000b16:	4699      	mov	r9, r3
 8000b18:	3b09      	subs	r3, #9
 8000b1a:	46a0      	mov	r8, r4
 8000b1c:	4683      	mov	fp, r0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	e728      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000b22:	2304      	movs	r3, #4
 8000b24:	4699      	mov	r9, r3
 8000b26:	2300      	movs	r3, #0
 8000b28:	469b      	mov	fp, r3
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	e720      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2480      	movs	r4, #128	; 0x80
 8000b36:	469a      	mov	sl, r3
 8000b38:	2500      	movs	r5, #0
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b3c:	0324      	lsls	r4, r4, #12
 8000b3e:	e74f      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	4641      	mov	r1, r8
 8000b44:	031b      	lsls	r3, r3, #12
 8000b46:	4219      	tst	r1, r3
 8000b48:	d008      	beq.n	8000b5c <__aeabi_ddiv+0x230>
 8000b4a:	421c      	tst	r4, r3
 8000b4c:	d106      	bne.n	8000b5c <__aeabi_ddiv+0x230>
 8000b4e:	431c      	orrs	r4, r3
 8000b50:	0324      	lsls	r4, r4, #12
 8000b52:	46ba      	mov	sl, r7
 8000b54:	0015      	movs	r5, r2
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b58:	0b24      	lsrs	r4, r4, #12
 8000b5a:	e741      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b5c:	2480      	movs	r4, #128	; 0x80
 8000b5e:	4643      	mov	r3, r8
 8000b60:	0324      	lsls	r4, r4, #12
 8000b62:	431c      	orrs	r4, r3
 8000b64:	0324      	lsls	r4, r4, #12
 8000b66:	46b2      	mov	sl, r6
 8000b68:	4b01      	ldr	r3, [pc, #4]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b6a:	0b24      	lsrs	r4, r4, #12
 8000b6c:	e738      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	fffffc01 	.word	0xfffffc01
 8000b78:	08005ac0 	.word	0x08005ac0
 8000b7c:	fffff801 	.word	0xfffff801
 8000b80:	fffffc0d 	.word	0xfffffc0d
 8000b84:	000003f3 	.word	0x000003f3
 8000b88:	000003ff 	.word	0x000003ff
 8000b8c:	feffffff 	.word	0xfeffffff
 8000b90:	000007fe 	.word	0x000007fe
 8000b94:	4544      	cmp	r4, r8
 8000b96:	d200      	bcs.n	8000b9a <__aeabi_ddiv+0x26e>
 8000b98:	e116      	b.n	8000dc8 <__aeabi_ddiv+0x49c>
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0x272>
 8000b9c:	e111      	b.n	8000dc2 <__aeabi_ddiv+0x496>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	469c      	mov	ip, r3
 8000ba4:	002e      	movs	r6, r5
 8000ba6:	4640      	mov	r0, r8
 8000ba8:	2500      	movs	r5, #0
 8000baa:	44e3      	add	fp, ip
 8000bac:	0223      	lsls	r3, r4, #8
 8000bae:	0e14      	lsrs	r4, r2, #24
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	0c1b      	lsrs	r3, r3, #16
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	0423      	lsls	r3, r4, #16
 8000bb8:	0c1f      	lsrs	r7, r3, #16
 8000bba:	0212      	lsls	r2, r2, #8
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	9701      	str	r7, [sp, #4]
 8000bc2:	f7ff fb25 	bl	8000210 <__aeabi_uidivmod>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	437a      	muls	r2, r7
 8000bca:	040b      	lsls	r3, r1, #16
 8000bcc:	0c31      	lsrs	r1, r6, #16
 8000bce:	4680      	mov	r8, r0
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	428a      	cmp	r2, r1
 8000bd4:	d90b      	bls.n	8000bee <__aeabi_ddiv+0x2c2>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	425b      	negs	r3, r3
 8000bda:	469c      	mov	ip, r3
 8000bdc:	1909      	adds	r1, r1, r4
 8000bde:	44e0      	add	r8, ip
 8000be0:	428c      	cmp	r4, r1
 8000be2:	d804      	bhi.n	8000bee <__aeabi_ddiv+0x2c2>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	d902      	bls.n	8000bee <__aeabi_ddiv+0x2c2>
 8000be8:	1e83      	subs	r3, r0, #2
 8000bea:	4698      	mov	r8, r3
 8000bec:	1909      	adds	r1, r1, r4
 8000bee:	1a88      	subs	r0, r1, r2
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	f7ff fb0d 	bl	8000210 <__aeabi_uidivmod>
 8000bf6:	0409      	lsls	r1, r1, #16
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	0431      	lsls	r1, r6, #16
 8000bfc:	4666      	mov	r6, ip
 8000bfe:	9a01      	ldr	r2, [sp, #4]
 8000c00:	0c09      	lsrs	r1, r1, #16
 8000c02:	4342      	muls	r2, r0
 8000c04:	0003      	movs	r3, r0
 8000c06:	4331      	orrs	r1, r6
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	d904      	bls.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000c0c:	1909      	adds	r1, r1, r4
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	428c      	cmp	r4, r1
 8000c12:	d800      	bhi.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000c14:	e111      	b.n	8000e3a <__aeabi_ddiv+0x50e>
 8000c16:	1a89      	subs	r1, r1, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	9e00      	ldr	r6, [sp, #0]
 8000c1c:	0412      	lsls	r2, r2, #16
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	0c33      	lsrs	r3, r6, #16
 8000c22:	001f      	movs	r7, r3
 8000c24:	0c10      	lsrs	r0, r2, #16
 8000c26:	4690      	mov	r8, r2
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	0413      	lsls	r3, r2, #16
 8000c2c:	0432      	lsls	r2, r6, #16
 8000c2e:	0c16      	lsrs	r6, r2, #16
 8000c30:	0032      	movs	r2, r6
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	435a      	muls	r2, r3
 8000c36:	9603      	str	r6, [sp, #12]
 8000c38:	437b      	muls	r3, r7
 8000c3a:	4346      	muls	r6, r0
 8000c3c:	4378      	muls	r0, r7
 8000c3e:	0c17      	lsrs	r7, r2, #16
 8000c40:	46bc      	mov	ip, r7
 8000c42:	199b      	adds	r3, r3, r6
 8000c44:	4463      	add	r3, ip
 8000c46:	429e      	cmp	r6, r3
 8000c48:	d903      	bls.n	8000c52 <__aeabi_ddiv+0x326>
 8000c4a:	2680      	movs	r6, #128	; 0x80
 8000c4c:	0276      	lsls	r6, r6, #9
 8000c4e:	46b4      	mov	ip, r6
 8000c50:	4460      	add	r0, ip
 8000c52:	0c1e      	lsrs	r6, r3, #16
 8000c54:	1830      	adds	r0, r6, r0
 8000c56:	0416      	lsls	r6, r2, #16
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	0c36      	lsrs	r6, r6, #16
 8000c5c:	199e      	adds	r6, r3, r6
 8000c5e:	4281      	cmp	r1, r0
 8000c60:	d200      	bcs.n	8000c64 <__aeabi_ddiv+0x338>
 8000c62:	e09c      	b.n	8000d9e <__aeabi_ddiv+0x472>
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0x33c>
 8000c66:	e097      	b.n	8000d98 <__aeabi_ddiv+0x46c>
 8000c68:	1bae      	subs	r6, r5, r6
 8000c6a:	1a09      	subs	r1, r1, r0
 8000c6c:	42b5      	cmp	r5, r6
 8000c6e:	4180      	sbcs	r0, r0
 8000c70:	4240      	negs	r0, r0
 8000c72:	1a08      	subs	r0, r1, r0
 8000c74:	4284      	cmp	r4, r0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_ddiv+0x34e>
 8000c78:	e111      	b.n	8000e9e <__aeabi_ddiv+0x572>
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	f7ff fac8 	bl	8000210 <__aeabi_uidivmod>
 8000c80:	9a01      	ldr	r2, [sp, #4]
 8000c82:	040b      	lsls	r3, r1, #16
 8000c84:	4342      	muls	r2, r0
 8000c86:	0c31      	lsrs	r1, r6, #16
 8000c88:	0005      	movs	r5, r0
 8000c8a:	4319      	orrs	r1, r3
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	d907      	bls.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c90:	1909      	adds	r1, r1, r4
 8000c92:	3d01      	subs	r5, #1
 8000c94:	428c      	cmp	r4, r1
 8000c96:	d803      	bhi.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d901      	bls.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c9c:	1e85      	subs	r5, r0, #2
 8000c9e:	1909      	adds	r1, r1, r4
 8000ca0:	1a88      	subs	r0, r1, r2
 8000ca2:	4649      	mov	r1, r9
 8000ca4:	f7ff fab4 	bl	8000210 <__aeabi_uidivmod>
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	468c      	mov	ip, r1
 8000cac:	0431      	lsls	r1, r6, #16
 8000cae:	4666      	mov	r6, ip
 8000cb0:	9a01      	ldr	r2, [sp, #4]
 8000cb2:	0c09      	lsrs	r1, r1, #16
 8000cb4:	4342      	muls	r2, r0
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	4331      	orrs	r1, r6
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	d907      	bls.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cbe:	1909      	adds	r1, r1, r4
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	428c      	cmp	r4, r1
 8000cc4:	d803      	bhi.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	d901      	bls.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cca:	1e83      	subs	r3, r0, #2
 8000ccc:	1909      	adds	r1, r1, r4
 8000cce:	9e03      	ldr	r6, [sp, #12]
 8000cd0:	1a89      	subs	r1, r1, r2
 8000cd2:	0032      	movs	r2, r6
 8000cd4:	042d      	lsls	r5, r5, #16
 8000cd6:	431d      	orrs	r5, r3
 8000cd8:	9f02      	ldr	r7, [sp, #8]
 8000cda:	042b      	lsls	r3, r5, #16
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	435a      	muls	r2, r3
 8000ce0:	437b      	muls	r3, r7
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	0c28      	lsrs	r0, r5, #16
 8000ce6:	4346      	muls	r6, r0
 8000ce8:	0c13      	lsrs	r3, r2, #16
 8000cea:	44b4      	add	ip, r6
 8000cec:	4463      	add	r3, ip
 8000cee:	4378      	muls	r0, r7
 8000cf0:	429e      	cmp	r6, r3
 8000cf2:	d903      	bls.n	8000cfc <__aeabi_ddiv+0x3d0>
 8000cf4:	2680      	movs	r6, #128	; 0x80
 8000cf6:	0276      	lsls	r6, r6, #9
 8000cf8:	46b4      	mov	ip, r6
 8000cfa:	4460      	add	r0, ip
 8000cfc:	0c1e      	lsrs	r6, r3, #16
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	0c12      	lsrs	r2, r2, #16
 8000d04:	1830      	adds	r0, r6, r0
 8000d06:	189b      	adds	r3, r3, r2
 8000d08:	4281      	cmp	r1, r0
 8000d0a:	d306      	bcc.n	8000d1a <__aeabi_ddiv+0x3ee>
 8000d0c:	d002      	beq.n	8000d14 <__aeabi_ddiv+0x3e8>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	431d      	orrs	r5, r3
 8000d12:	e6ce      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x3ee>
 8000d18:	e6cb      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	1e6e      	subs	r6, r5, #1
 8000d1e:	42a1      	cmp	r1, r4
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x3f8>
 8000d22:	e0a4      	b.n	8000e6e <__aeabi_ddiv+0x542>
 8000d24:	4281      	cmp	r1, r0
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0x3fe>
 8000d28:	e0c9      	b.n	8000ebe <__aeabi_ddiv+0x592>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0x402>
 8000d2c:	e0d9      	b.n	8000ee2 <__aeabi_ddiv+0x5b6>
 8000d2e:	0035      	movs	r5, r6
 8000d30:	e7ed      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000d32:	2501      	movs	r5, #1
 8000d34:	426d      	negs	r5, r5
 8000d36:	2101      	movs	r1, #1
 8000d38:	1a89      	subs	r1, r1, r2
 8000d3a:	2938      	cmp	r1, #56	; 0x38
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_ddiv+0x414>
 8000d3e:	e64c      	b.n	80009da <__aeabi_ddiv+0xae>
 8000d40:	291f      	cmp	r1, #31
 8000d42:	dc00      	bgt.n	8000d46 <__aeabi_ddiv+0x41a>
 8000d44:	e07f      	b.n	8000e46 <__aeabi_ddiv+0x51a>
 8000d46:	231f      	movs	r3, #31
 8000d48:	425b      	negs	r3, r3
 8000d4a:	1a9a      	subs	r2, r3, r2
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	40d3      	lsrs	r3, r2
 8000d50:	2920      	cmp	r1, #32
 8000d52:	d004      	beq.n	8000d5e <__aeabi_ddiv+0x432>
 8000d54:	4644      	mov	r4, r8
 8000d56:	4a65      	ldr	r2, [pc, #404]	; (8000eec <__aeabi_ddiv+0x5c0>)
 8000d58:	445a      	add	r2, fp
 8000d5a:	4094      	lsls	r4, r2
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	1e6a      	subs	r2, r5, #1
 8000d60:	4195      	sbcs	r5, r2
 8000d62:	2207      	movs	r2, #7
 8000d64:	432b      	orrs	r3, r5
 8000d66:	0015      	movs	r5, r2
 8000d68:	2400      	movs	r4, #0
 8000d6a:	401d      	ands	r5, r3
 8000d6c:	421a      	tst	r2, r3
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x446>
 8000d70:	e0a1      	b.n	8000eb6 <__aeabi_ddiv+0x58a>
 8000d72:	220f      	movs	r2, #15
 8000d74:	2400      	movs	r4, #0
 8000d76:	401a      	ands	r2, r3
 8000d78:	2a04      	cmp	r2, #4
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_ddiv+0x452>
 8000d7c:	e098      	b.n	8000eb0 <__aeabi_ddiv+0x584>
 8000d7e:	1d1a      	adds	r2, r3, #4
 8000d80:	429a      	cmp	r2, r3
 8000d82:	419b      	sbcs	r3, r3
 8000d84:	425b      	negs	r3, r3
 8000d86:	18e4      	adds	r4, r4, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	0222      	lsls	r2, r4, #8
 8000d8c:	d400      	bmi.n	8000d90 <__aeabi_ddiv+0x464>
 8000d8e:	e08f      	b.n	8000eb0 <__aeabi_ddiv+0x584>
 8000d90:	2301      	movs	r3, #1
 8000d92:	2400      	movs	r4, #0
 8000d94:	2500      	movs	r5, #0
 8000d96:	e623      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000d98:	42b5      	cmp	r5, r6
 8000d9a:	d300      	bcc.n	8000d9e <__aeabi_ddiv+0x472>
 8000d9c:	e764      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	9b00      	ldr	r3, [sp, #0]
 8000da4:	469c      	mov	ip, r3
 8000da6:	4465      	add	r5, ip
 8000da8:	001f      	movs	r7, r3
 8000daa:	429d      	cmp	r5, r3
 8000dac:	419b      	sbcs	r3, r3
 8000dae:	425b      	negs	r3, r3
 8000db0:	191b      	adds	r3, r3, r4
 8000db2:	18c9      	adds	r1, r1, r3
 8000db4:	428c      	cmp	r4, r1
 8000db6:	d23a      	bcs.n	8000e2e <__aeabi_ddiv+0x502>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	d863      	bhi.n	8000e84 <__aeabi_ddiv+0x558>
 8000dbc:	d060      	beq.n	8000e80 <__aeabi_ddiv+0x554>
 8000dbe:	4690      	mov	r8, r2
 8000dc0:	e752      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000dc2:	42aa      	cmp	r2, r5
 8000dc4:	d900      	bls.n	8000dc8 <__aeabi_ddiv+0x49c>
 8000dc6:	e6ea      	b.n	8000b9e <__aeabi_ddiv+0x272>
 8000dc8:	4643      	mov	r3, r8
 8000dca:	07de      	lsls	r6, r3, #31
 8000dcc:	0858      	lsrs	r0, r3, #1
 8000dce:	086b      	lsrs	r3, r5, #1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	07ed      	lsls	r5, r5, #31
 8000dd4:	e6ea      	b.n	8000bac <__aeabi_ddiv+0x280>
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	f000 ff58 	bl	8001c8c <__clzsi2>
 8000ddc:	0001      	movs	r1, r0
 8000dde:	0002      	movs	r2, r0
 8000de0:	3115      	adds	r1, #21
 8000de2:	3220      	adds	r2, #32
 8000de4:	291c      	cmp	r1, #28
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_ddiv+0x4be>
 8000de8:	e61a      	b.n	8000a20 <__aeabi_ddiv+0xf4>
 8000dea:	464b      	mov	r3, r9
 8000dec:	3808      	subs	r0, #8
 8000dee:	4083      	lsls	r3, r0
 8000df0:	2500      	movs	r5, #0
 8000df2:	4698      	mov	r8, r3
 8000df4:	e620      	b.n	8000a38 <__aeabi_ddiv+0x10c>
 8000df6:	f000 ff49 	bl	8001c8c <__clzsi2>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	3215      	adds	r2, #21
 8000e00:	3020      	adds	r0, #32
 8000e02:	2a1c      	cmp	r2, #28
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_ddiv+0x4dc>
 8000e06:	e630      	b.n	8000a6a <__aeabi_ddiv+0x13e>
 8000e08:	4654      	mov	r4, sl
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	409c      	lsls	r4, r3
 8000e10:	e635      	b.n	8000a7e <__aeabi_ddiv+0x152>
 8000e12:	230f      	movs	r3, #15
 8000e14:	402b      	ands	r3, r5
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x4f0>
 8000e1a:	e652      	b.n	8000ac2 <__aeabi_ddiv+0x196>
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	425b      	negs	r3, r3
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	419b      	sbcs	r3, r3
 8000e24:	3504      	adds	r5, #4
 8000e26:	425b      	negs	r3, r3
 8000e28:	08ed      	lsrs	r5, r5, #3
 8000e2a:	4498      	add	r8, r3
 8000e2c:	e64a      	b.n	8000ac4 <__aeabi_ddiv+0x198>
 8000e2e:	428c      	cmp	r4, r1
 8000e30:	d1c5      	bne.n	8000dbe <__aeabi_ddiv+0x492>
 8000e32:	42af      	cmp	r7, r5
 8000e34:	d9c0      	bls.n	8000db8 <__aeabi_ddiv+0x48c>
 8000e36:	4690      	mov	r8, r2
 8000e38:	e716      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000e3a:	428a      	cmp	r2, r1
 8000e3c:	d800      	bhi.n	8000e40 <__aeabi_ddiv+0x514>
 8000e3e:	e6ea      	b.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000e40:	1e83      	subs	r3, r0, #2
 8000e42:	1909      	adds	r1, r1, r4
 8000e44:	e6e7      	b.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <__aeabi_ddiv+0x5c4>)
 8000e48:	0028      	movs	r0, r5
 8000e4a:	445a      	add	r2, fp
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4095      	lsls	r5, r2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	40c8      	lsrs	r0, r1
 8000e54:	1e6a      	subs	r2, r5, #1
 8000e56:	4195      	sbcs	r5, r2
 8000e58:	4644      	mov	r4, r8
 8000e5a:	4303      	orrs	r3, r0
 8000e5c:	432b      	orrs	r3, r5
 8000e5e:	40cc      	lsrs	r4, r1
 8000e60:	075a      	lsls	r2, r3, #29
 8000e62:	d092      	beq.n	8000d8a <__aeabi_ddiv+0x45e>
 8000e64:	220f      	movs	r2, #15
 8000e66:	401a      	ands	r2, r3
 8000e68:	2a04      	cmp	r2, #4
 8000e6a:	d188      	bne.n	8000d7e <__aeabi_ddiv+0x452>
 8000e6c:	e78d      	b.n	8000d8a <__aeabi_ddiv+0x45e>
 8000e6e:	0035      	movs	r5, r6
 8000e70:	4281      	cmp	r1, r0
 8000e72:	d000      	beq.n	8000e76 <__aeabi_ddiv+0x54a>
 8000e74:	e74b      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000e76:	9a00      	ldr	r2, [sp, #0]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_ddiv+0x552>
 8000e7c:	e747      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000e7e:	e618      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000e80:	42ae      	cmp	r6, r5
 8000e82:	d99c      	bls.n	8000dbe <__aeabi_ddiv+0x492>
 8000e84:	2302      	movs	r3, #2
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	9b00      	ldr	r3, [sp, #0]
 8000e8c:	44e0      	add	r8, ip
 8000e8e:	469c      	mov	ip, r3
 8000e90:	4465      	add	r5, ip
 8000e92:	429d      	cmp	r5, r3
 8000e94:	419b      	sbcs	r3, r3
 8000e96:	425b      	negs	r3, r3
 8000e98:	191b      	adds	r3, r3, r4
 8000e9a:	18c9      	adds	r1, r1, r3
 8000e9c:	e6e4      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <__aeabi_ddiv+0x5c8>)
 8000ea0:	445a      	add	r2, fp
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_ddiv+0x57c>
 8000ea6:	e744      	b.n	8000d32 <__aeabi_ddiv+0x406>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4498      	add	r8, r3
 8000eae:	e609      	b.n	8000ac4 <__aeabi_ddiv+0x198>
 8000eb0:	0765      	lsls	r5, r4, #29
 8000eb2:	0264      	lsls	r4, r4, #9
 8000eb4:	0b24      	lsrs	r4, r4, #12
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	431d      	orrs	r5, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e590      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000ebe:	9e00      	ldr	r6, [sp, #0]
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	0072      	lsls	r2, r6, #1
 8000ec4:	42b2      	cmp	r2, r6
 8000ec6:	41bf      	sbcs	r7, r7
 8000ec8:	427f      	negs	r7, r7
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	1909      	adds	r1, r1, r4
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	e7ce      	b.n	8000e70 <__aeabi_ddiv+0x544>
 8000ed2:	2480      	movs	r4, #128	; 0x80
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	0324      	lsls	r4, r4, #12
 8000ed8:	431c      	orrs	r4, r3
 8000eda:	0324      	lsls	r4, r4, #12
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <__aeabi_ddiv+0x5cc>)
 8000ede:	0b24      	lsrs	r4, r4, #12
 8000ee0:	e57e      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000ee2:	9a00      	ldr	r2, [sp, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3ea      	bcc.n	8000ebe <__aeabi_ddiv+0x592>
 8000ee8:	0035      	movs	r5, r6
 8000eea:	e7c4      	b.n	8000e76 <__aeabi_ddiv+0x54a>
 8000eec:	0000043e 	.word	0x0000043e
 8000ef0:	0000041e 	.word	0x0000041e
 8000ef4:	000003ff 	.word	0x000003ff
 8000ef8:	000007ff 	.word	0x000007ff

08000efc <__aeabi_dmul>:
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	4657      	mov	r7, sl
 8000f00:	464e      	mov	r6, r9
 8000f02:	4645      	mov	r5, r8
 8000f04:	46de      	mov	lr, fp
 8000f06:	b5e0      	push	{r5, r6, r7, lr}
 8000f08:	4698      	mov	r8, r3
 8000f0a:	030c      	lsls	r4, r1, #12
 8000f0c:	004b      	lsls	r3, r1, #1
 8000f0e:	0006      	movs	r6, r0
 8000f10:	4692      	mov	sl, r2
 8000f12:	b087      	sub	sp, #28
 8000f14:	0b24      	lsrs	r4, r4, #12
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	0fcf      	lsrs	r7, r1, #31
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d06c      	beq.n	8000ff8 <__aeabi_dmul+0xfc>
 8000f1e:	4add      	ldr	r2, [pc, #884]	; (8001294 <__aeabi_dmul+0x398>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dmul+0x2a>
 8000f24:	e086      	b.n	8001034 <__aeabi_dmul+0x138>
 8000f26:	0f42      	lsrs	r2, r0, #29
 8000f28:	00e4      	lsls	r4, r4, #3
 8000f2a:	4314      	orrs	r4, r2
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	4314      	orrs	r4, r2
 8000f32:	4ad9      	ldr	r2, [pc, #868]	; (8001298 <__aeabi_dmul+0x39c>)
 8000f34:	00c5      	lsls	r5, r0, #3
 8000f36:	4694      	mov	ip, r2
 8000f38:	4463      	add	r3, ip
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4699      	mov	r9, r3
 8000f40:	469b      	mov	fp, r3
 8000f42:	4643      	mov	r3, r8
 8000f44:	4642      	mov	r2, r8
 8000f46:	031e      	lsls	r6, r3, #12
 8000f48:	0fd2      	lsrs	r2, r2, #31
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	4690      	mov	r8, r2
 8000f50:	0b36      	lsrs	r6, r6, #12
 8000f52:	0d5b      	lsrs	r3, r3, #21
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dmul+0x5c>
 8000f56:	e078      	b.n	800104a <__aeabi_dmul+0x14e>
 8000f58:	4ace      	ldr	r2, [pc, #824]	; (8001294 <__aeabi_dmul+0x398>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01d      	beq.n	8000f9a <__aeabi_dmul+0x9e>
 8000f5e:	49ce      	ldr	r1, [pc, #824]	; (8001298 <__aeabi_dmul+0x39c>)
 8000f60:	0f42      	lsrs	r2, r0, #29
 8000f62:	468c      	mov	ip, r1
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	4463      	add	r3, ip
 8000f68:	00f6      	lsls	r6, r6, #3
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	4316      	orrs	r6, r2
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	449c      	add	ip, r3
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	4663      	mov	r3, ip
 8000f76:	4316      	orrs	r6, r2
 8000f78:	00c2      	lsls	r2, r0, #3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	9900      	ldr	r1, [sp, #0]
 8000f80:	4643      	mov	r3, r8
 8000f82:	3101      	adds	r1, #1
 8000f84:	468c      	mov	ip, r1
 8000f86:	4649      	mov	r1, r9
 8000f88:	407b      	eors	r3, r7
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	290f      	cmp	r1, #15
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_dmul+0x96>
 8000f90:	e07e      	b.n	8001090 <__aeabi_dmul+0x194>
 8000f92:	4bc2      	ldr	r3, [pc, #776]	; (800129c <__aeabi_dmul+0x3a0>)
 8000f94:	0089      	lsls	r1, r1, #2
 8000f96:	5859      	ldr	r1, [r3, r1]
 8000f98:	468f      	mov	pc, r1
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	9b00      	ldr	r3, [sp, #0]
 8000f9e:	4332      	orrs	r2, r6
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_dmul+0xa8>
 8000fa2:	e156      	b.n	8001252 <__aeabi_dmul+0x356>
 8000fa4:	49bb      	ldr	r1, [pc, #748]	; (8001294 <__aeabi_dmul+0x398>)
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	468c      	mov	ip, r1
 8000faa:	4463      	add	r3, ip
 8000fac:	4649      	mov	r1, r9
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	4319      	orrs	r1, r3
 8000fb4:	4689      	mov	r9, r1
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	e7e1      	b.n	8000f7e <__aeabi_dmul+0x82>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	0034      	movs	r4, r6
 8000fc0:	0015      	movs	r5, r2
 8000fc2:	4683      	mov	fp, r0
 8000fc4:	465b      	mov	r3, fp
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d05e      	beq.n	8001088 <__aeabi_dmul+0x18c>
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dmul+0xd4>
 8000fce:	e1f3      	b.n	80013b8 <__aeabi_dmul+0x4bc>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_dmul+0xda>
 8000fd4:	e118      	b.n	8001208 <__aeabi_dmul+0x30c>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2400      	movs	r4, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	0512      	lsls	r2, r2, #20
 8000fe0:	4322      	orrs	r2, r4
 8000fe2:	07db      	lsls	r3, r3, #31
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	0028      	movs	r0, r5
 8000fe8:	0011      	movs	r1, r2
 8000fea:	b007      	add	sp, #28
 8000fec:	bcf0      	pop	{r4, r5, r6, r7}
 8000fee:	46bb      	mov	fp, r7
 8000ff0:	46b2      	mov	sl, r6
 8000ff2:	46a9      	mov	r9, r5
 8000ff4:	46a0      	mov	r8, r4
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff8:	0025      	movs	r5, r4
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dmul+0x104>
 8000ffe:	e141      	b.n	8001284 <__aeabi_dmul+0x388>
 8001000:	2c00      	cmp	r4, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_dmul+0x10a>
 8001004:	e1ad      	b.n	8001362 <__aeabi_dmul+0x466>
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fe40 	bl	8001c8c <__clzsi2>
 800100c:	0001      	movs	r1, r0
 800100e:	0002      	movs	r2, r0
 8001010:	390b      	subs	r1, #11
 8001012:	231d      	movs	r3, #29
 8001014:	0010      	movs	r0, r2
 8001016:	1a5b      	subs	r3, r3, r1
 8001018:	0031      	movs	r1, r6
 800101a:	0035      	movs	r5, r6
 800101c:	3808      	subs	r0, #8
 800101e:	4084      	lsls	r4, r0
 8001020:	40d9      	lsrs	r1, r3
 8001022:	4085      	lsls	r5, r0
 8001024:	430c      	orrs	r4, r1
 8001026:	489e      	ldr	r0, [pc, #632]	; (80012a0 <__aeabi_dmul+0x3a4>)
 8001028:	1a83      	subs	r3, r0, r2
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	4699      	mov	r9, r3
 8001030:	469b      	mov	fp, r3
 8001032:	e786      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001034:	0005      	movs	r5, r0
 8001036:	4325      	orrs	r5, r4
 8001038:	d000      	beq.n	800103c <__aeabi_dmul+0x140>
 800103a:	e11c      	b.n	8001276 <__aeabi_dmul+0x37a>
 800103c:	2208      	movs	r2, #8
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2302      	movs	r3, #2
 8001042:	2400      	movs	r4, #0
 8001044:	4691      	mov	r9, r2
 8001046:	469b      	mov	fp, r3
 8001048:	e77b      	b.n	8000f42 <__aeabi_dmul+0x46>
 800104a:	4652      	mov	r2, sl
 800104c:	4332      	orrs	r2, r6
 800104e:	d100      	bne.n	8001052 <__aeabi_dmul+0x156>
 8001050:	e10a      	b.n	8001268 <__aeabi_dmul+0x36c>
 8001052:	2e00      	cmp	r6, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dmul+0x15c>
 8001056:	e176      	b.n	8001346 <__aeabi_dmul+0x44a>
 8001058:	0030      	movs	r0, r6
 800105a:	f000 fe17 	bl	8001c8c <__clzsi2>
 800105e:	0002      	movs	r2, r0
 8001060:	3a0b      	subs	r2, #11
 8001062:	231d      	movs	r3, #29
 8001064:	0001      	movs	r1, r0
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	4652      	mov	r2, sl
 800106a:	3908      	subs	r1, #8
 800106c:	40da      	lsrs	r2, r3
 800106e:	408e      	lsls	r6, r1
 8001070:	4316      	orrs	r6, r2
 8001072:	4652      	mov	r2, sl
 8001074:	408a      	lsls	r2, r1
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	4989      	ldr	r1, [pc, #548]	; (80012a0 <__aeabi_dmul+0x3a4>)
 800107a:	1a18      	subs	r0, r3, r0
 800107c:	0003      	movs	r3, r0
 800107e:	468c      	mov	ip, r1
 8001080:	4463      	add	r3, ip
 8001082:	2000      	movs	r0, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	e77a      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001088:	2400      	movs	r4, #0
 800108a:	2500      	movs	r5, #0
 800108c:	4a81      	ldr	r2, [pc, #516]	; (8001294 <__aeabi_dmul+0x398>)
 800108e:	e7a5      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001090:	0c2f      	lsrs	r7, r5, #16
 8001092:	042d      	lsls	r5, r5, #16
 8001094:	0c2d      	lsrs	r5, r5, #16
 8001096:	002b      	movs	r3, r5
 8001098:	0c11      	lsrs	r1, r2, #16
 800109a:	0412      	lsls	r2, r2, #16
 800109c:	0c12      	lsrs	r2, r2, #16
 800109e:	4353      	muls	r3, r2
 80010a0:	4698      	mov	r8, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	0028      	movs	r0, r5
 80010a6:	437b      	muls	r3, r7
 80010a8:	4699      	mov	r9, r3
 80010aa:	4348      	muls	r0, r1
 80010ac:	4448      	add	r0, r9
 80010ae:	4683      	mov	fp, r0
 80010b0:	4640      	mov	r0, r8
 80010b2:	000b      	movs	r3, r1
 80010b4:	0c00      	lsrs	r0, r0, #16
 80010b6:	4682      	mov	sl, r0
 80010b8:	4658      	mov	r0, fp
 80010ba:	437b      	muls	r3, r7
 80010bc:	4450      	add	r0, sl
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	4581      	cmp	r9, r0
 80010c2:	d906      	bls.n	80010d2 <__aeabi_dmul+0x1d6>
 80010c4:	469a      	mov	sl, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	4699      	mov	r9, r3
 80010cc:	44ca      	add	sl, r9
 80010ce:	4653      	mov	r3, sl
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	0c03      	lsrs	r3, r0, #16
 80010d4:	469b      	mov	fp, r3
 80010d6:	4643      	mov	r3, r8
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	0400      	lsls	r0, r0, #16
 80010dc:	0c1b      	lsrs	r3, r3, #16
 80010de:	4698      	mov	r8, r3
 80010e0:	0003      	movs	r3, r0
 80010e2:	4443      	add	r3, r8
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	0c33      	lsrs	r3, r6, #16
 80010e8:	4699      	mov	r9, r3
 80010ea:	002b      	movs	r3, r5
 80010ec:	0436      	lsls	r6, r6, #16
 80010ee:	0c36      	lsrs	r6, r6, #16
 80010f0:	4373      	muls	r3, r6
 80010f2:	4698      	mov	r8, r3
 80010f4:	0033      	movs	r3, r6
 80010f6:	437b      	muls	r3, r7
 80010f8:	469a      	mov	sl, r3
 80010fa:	464b      	mov	r3, r9
 80010fc:	435d      	muls	r5, r3
 80010fe:	435f      	muls	r7, r3
 8001100:	4643      	mov	r3, r8
 8001102:	4455      	add	r5, sl
 8001104:	0c18      	lsrs	r0, r3, #16
 8001106:	1940      	adds	r0, r0, r5
 8001108:	4582      	cmp	sl, r0
 800110a:	d903      	bls.n	8001114 <__aeabi_dmul+0x218>
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	469a      	mov	sl, r3
 8001112:	4457      	add	r7, sl
 8001114:	0c05      	lsrs	r5, r0, #16
 8001116:	19eb      	adds	r3, r5, r7
 8001118:	9305      	str	r3, [sp, #20]
 800111a:	4643      	mov	r3, r8
 800111c:	041d      	lsls	r5, r3, #16
 800111e:	0c2d      	lsrs	r5, r5, #16
 8001120:	0400      	lsls	r0, r0, #16
 8001122:	1940      	adds	r0, r0, r5
 8001124:	0c25      	lsrs	r5, r4, #16
 8001126:	0424      	lsls	r4, r4, #16
 8001128:	0c24      	lsrs	r4, r4, #16
 800112a:	0027      	movs	r7, r4
 800112c:	4357      	muls	r7, r2
 800112e:	436a      	muls	r2, r5
 8001130:	4690      	mov	r8, r2
 8001132:	002a      	movs	r2, r5
 8001134:	0c3b      	lsrs	r3, r7, #16
 8001136:	469a      	mov	sl, r3
 8001138:	434a      	muls	r2, r1
 800113a:	4361      	muls	r1, r4
 800113c:	4441      	add	r1, r8
 800113e:	4451      	add	r1, sl
 8001140:	4483      	add	fp, r0
 8001142:	4588      	cmp	r8, r1
 8001144:	d903      	bls.n	800114e <__aeabi_dmul+0x252>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	4698      	mov	r8, r3
 800114c:	4442      	add	r2, r8
 800114e:	043f      	lsls	r7, r7, #16
 8001150:	0c0b      	lsrs	r3, r1, #16
 8001152:	0c3f      	lsrs	r7, r7, #16
 8001154:	0409      	lsls	r1, r1, #16
 8001156:	19c9      	adds	r1, r1, r7
 8001158:	0027      	movs	r7, r4
 800115a:	4698      	mov	r8, r3
 800115c:	464b      	mov	r3, r9
 800115e:	4377      	muls	r7, r6
 8001160:	435c      	muls	r4, r3
 8001162:	436e      	muls	r6, r5
 8001164:	435d      	muls	r5, r3
 8001166:	0c3b      	lsrs	r3, r7, #16
 8001168:	4699      	mov	r9, r3
 800116a:	19a4      	adds	r4, r4, r6
 800116c:	444c      	add	r4, r9
 800116e:	4442      	add	r2, r8
 8001170:	9503      	str	r5, [sp, #12]
 8001172:	42a6      	cmp	r6, r4
 8001174:	d904      	bls.n	8001180 <__aeabi_dmul+0x284>
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	4698      	mov	r8, r3
 800117c:	4445      	add	r5, r8
 800117e:	9503      	str	r5, [sp, #12]
 8001180:	9b02      	ldr	r3, [sp, #8]
 8001182:	043f      	lsls	r7, r7, #16
 8001184:	445b      	add	r3, fp
 8001186:	001e      	movs	r6, r3
 8001188:	4283      	cmp	r3, r0
 800118a:	4180      	sbcs	r0, r0
 800118c:	0423      	lsls	r3, r4, #16
 800118e:	4698      	mov	r8, r3
 8001190:	9b05      	ldr	r3, [sp, #20]
 8001192:	0c3f      	lsrs	r7, r7, #16
 8001194:	4447      	add	r7, r8
 8001196:	4698      	mov	r8, r3
 8001198:	1876      	adds	r6, r6, r1
 800119a:	428e      	cmp	r6, r1
 800119c:	4189      	sbcs	r1, r1
 800119e:	4447      	add	r7, r8
 80011a0:	4240      	negs	r0, r0
 80011a2:	183d      	adds	r5, r7, r0
 80011a4:	46a8      	mov	r8, r5
 80011a6:	4693      	mov	fp, r2
 80011a8:	4249      	negs	r1, r1
 80011aa:	468a      	mov	sl, r1
 80011ac:	44c3      	add	fp, r8
 80011ae:	429f      	cmp	r7, r3
 80011b0:	41bf      	sbcs	r7, r7
 80011b2:	4580      	cmp	r8, r0
 80011b4:	4180      	sbcs	r0, r0
 80011b6:	9b03      	ldr	r3, [sp, #12]
 80011b8:	44da      	add	sl, fp
 80011ba:	4698      	mov	r8, r3
 80011bc:	4653      	mov	r3, sl
 80011be:	4240      	negs	r0, r0
 80011c0:	427f      	negs	r7, r7
 80011c2:	4307      	orrs	r7, r0
 80011c4:	0c24      	lsrs	r4, r4, #16
 80011c6:	4593      	cmp	fp, r2
 80011c8:	4192      	sbcs	r2, r2
 80011ca:	458a      	cmp	sl, r1
 80011cc:	4189      	sbcs	r1, r1
 80011ce:	193f      	adds	r7, r7, r4
 80011d0:	0ddc      	lsrs	r4, r3, #23
 80011d2:	9b04      	ldr	r3, [sp, #16]
 80011d4:	0275      	lsls	r5, r6, #9
 80011d6:	431d      	orrs	r5, r3
 80011d8:	1e68      	subs	r0, r5, #1
 80011da:	4185      	sbcs	r5, r0
 80011dc:	4653      	mov	r3, sl
 80011de:	4252      	negs	r2, r2
 80011e0:	4249      	negs	r1, r1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	18bf      	adds	r7, r7, r2
 80011e6:	4447      	add	r7, r8
 80011e8:	0df6      	lsrs	r6, r6, #23
 80011ea:	027f      	lsls	r7, r7, #9
 80011ec:	4335      	orrs	r5, r6
 80011ee:	025a      	lsls	r2, r3, #9
 80011f0:	433c      	orrs	r4, r7
 80011f2:	4315      	orrs	r5, r2
 80011f4:	01fb      	lsls	r3, r7, #7
 80011f6:	d400      	bmi.n	80011fa <__aeabi_dmul+0x2fe>
 80011f8:	e0c1      	b.n	800137e <__aeabi_dmul+0x482>
 80011fa:	2101      	movs	r1, #1
 80011fc:	086a      	lsrs	r2, r5, #1
 80011fe:	400d      	ands	r5, r1
 8001200:	4315      	orrs	r5, r2
 8001202:	07e2      	lsls	r2, r4, #31
 8001204:	4315      	orrs	r5, r2
 8001206:	0864      	lsrs	r4, r4, #1
 8001208:	4926      	ldr	r1, [pc, #152]	; (80012a4 <__aeabi_dmul+0x3a8>)
 800120a:	4461      	add	r1, ip
 800120c:	2900      	cmp	r1, #0
 800120e:	dd56      	ble.n	80012be <__aeabi_dmul+0x3c2>
 8001210:	076b      	lsls	r3, r5, #29
 8001212:	d009      	beq.n	8001228 <__aeabi_dmul+0x32c>
 8001214:	220f      	movs	r2, #15
 8001216:	402a      	ands	r2, r5
 8001218:	2a04      	cmp	r2, #4
 800121a:	d005      	beq.n	8001228 <__aeabi_dmul+0x32c>
 800121c:	1d2a      	adds	r2, r5, #4
 800121e:	42aa      	cmp	r2, r5
 8001220:	41ad      	sbcs	r5, r5
 8001222:	426d      	negs	r5, r5
 8001224:	1964      	adds	r4, r4, r5
 8001226:	0015      	movs	r5, r2
 8001228:	01e3      	lsls	r3, r4, #7
 800122a:	d504      	bpl.n	8001236 <__aeabi_dmul+0x33a>
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <__aeabi_dmul+0x3ac>)
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4014      	ands	r4, r2
 8001234:	4461      	add	r1, ip
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <__aeabi_dmul+0x3b0>)
 8001238:	4291      	cmp	r1, r2
 800123a:	dd00      	ble.n	800123e <__aeabi_dmul+0x342>
 800123c:	e724      	b.n	8001088 <__aeabi_dmul+0x18c>
 800123e:	0762      	lsls	r2, r4, #29
 8001240:	08ed      	lsrs	r5, r5, #3
 8001242:	0264      	lsls	r4, r4, #9
 8001244:	0549      	lsls	r1, r1, #21
 8001246:	4315      	orrs	r5, r2
 8001248:	0b24      	lsrs	r4, r4, #12
 800124a:	0d4a      	lsrs	r2, r1, #21
 800124c:	e6c6      	b.n	8000fdc <__aeabi_dmul+0xe0>
 800124e:	9701      	str	r7, [sp, #4]
 8001250:	e6b8      	b.n	8000fc4 <__aeabi_dmul+0xc8>
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <__aeabi_dmul+0x398>)
 8001254:	2003      	movs	r0, #3
 8001256:	4694      	mov	ip, r2
 8001258:	4463      	add	r3, ip
 800125a:	464a      	mov	r2, r9
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	431a      	orrs	r2, r3
 8001262:	4691      	mov	r9, r2
 8001264:	4652      	mov	r2, sl
 8001266:	e68a      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001268:	4649      	mov	r1, r9
 800126a:	2301      	movs	r3, #1
 800126c:	4319      	orrs	r1, r3
 800126e:	4689      	mov	r9, r1
 8001270:	2600      	movs	r6, #0
 8001272:	2001      	movs	r0, #1
 8001274:	e683      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001276:	220c      	movs	r2, #12
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2303      	movs	r3, #3
 800127c:	0005      	movs	r5, r0
 800127e:	4691      	mov	r9, r2
 8001280:	469b      	mov	fp, r3
 8001282:	e65e      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001284:	2304      	movs	r3, #4
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	2400      	movs	r4, #0
 8001290:	469b      	mov	fp, r3
 8001292:	e656      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001294:	000007ff 	.word	0x000007ff
 8001298:	fffffc01 	.word	0xfffffc01
 800129c:	08005b00 	.word	0x08005b00
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	000003ff 	.word	0x000003ff
 80012a8:	feffffff 	.word	0xfeffffff
 80012ac:	000007fe 	.word	0x000007fe
 80012b0:	2300      	movs	r3, #0
 80012b2:	2480      	movs	r4, #128	; 0x80
 80012b4:	2500      	movs	r5, #0
 80012b6:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <__aeabi_dmul+0x4cc>)
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	0324      	lsls	r4, r4, #12
 80012bc:	e68e      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80012be:	2001      	movs	r0, #1
 80012c0:	1a40      	subs	r0, r0, r1
 80012c2:	2838      	cmp	r0, #56	; 0x38
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dmul+0x3cc>
 80012c6:	e686      	b.n	8000fd6 <__aeabi_dmul+0xda>
 80012c8:	281f      	cmp	r0, #31
 80012ca:	dd5b      	ble.n	8001384 <__aeabi_dmul+0x488>
 80012cc:	221f      	movs	r2, #31
 80012ce:	0023      	movs	r3, r4
 80012d0:	4252      	negs	r2, r2
 80012d2:	1a51      	subs	r1, r2, r1
 80012d4:	40cb      	lsrs	r3, r1
 80012d6:	0019      	movs	r1, r3
 80012d8:	2820      	cmp	r0, #32
 80012da:	d003      	beq.n	80012e4 <__aeabi_dmul+0x3e8>
 80012dc:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <__aeabi_dmul+0x4d0>)
 80012de:	4462      	add	r2, ip
 80012e0:	4094      	lsls	r4, r2
 80012e2:	4325      	orrs	r5, r4
 80012e4:	1e6a      	subs	r2, r5, #1
 80012e6:	4195      	sbcs	r5, r2
 80012e8:	002a      	movs	r2, r5
 80012ea:	430a      	orrs	r2, r1
 80012ec:	2107      	movs	r1, #7
 80012ee:	000d      	movs	r5, r1
 80012f0:	2400      	movs	r4, #0
 80012f2:	4015      	ands	r5, r2
 80012f4:	4211      	tst	r1, r2
 80012f6:	d05b      	beq.n	80013b0 <__aeabi_dmul+0x4b4>
 80012f8:	210f      	movs	r1, #15
 80012fa:	2400      	movs	r4, #0
 80012fc:	4011      	ands	r1, r2
 80012fe:	2904      	cmp	r1, #4
 8001300:	d053      	beq.n	80013aa <__aeabi_dmul+0x4ae>
 8001302:	1d11      	adds	r1, r2, #4
 8001304:	4291      	cmp	r1, r2
 8001306:	4192      	sbcs	r2, r2
 8001308:	4252      	negs	r2, r2
 800130a:	18a4      	adds	r4, r4, r2
 800130c:	000a      	movs	r2, r1
 800130e:	0223      	lsls	r3, r4, #8
 8001310:	d54b      	bpl.n	80013aa <__aeabi_dmul+0x4ae>
 8001312:	2201      	movs	r2, #1
 8001314:	2400      	movs	r4, #0
 8001316:	2500      	movs	r5, #0
 8001318:	e660      	b.n	8000fdc <__aeabi_dmul+0xe0>
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	031b      	lsls	r3, r3, #12
 800131e:	421c      	tst	r4, r3
 8001320:	d009      	beq.n	8001336 <__aeabi_dmul+0x43a>
 8001322:	421e      	tst	r6, r3
 8001324:	d107      	bne.n	8001336 <__aeabi_dmul+0x43a>
 8001326:	4333      	orrs	r3, r6
 8001328:	031c      	lsls	r4, r3, #12
 800132a:	4643      	mov	r3, r8
 800132c:	0015      	movs	r5, r2
 800132e:	0b24      	lsrs	r4, r4, #12
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <__aeabi_dmul+0x4cc>)
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	e652      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	0312      	lsls	r2, r2, #12
 800133a:	4314      	orrs	r4, r2
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <__aeabi_dmul+0x4cc>)
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	9701      	str	r7, [sp, #4]
 8001344:	e64a      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001346:	f000 fca1 	bl	8001c8c <__clzsi2>
 800134a:	0003      	movs	r3, r0
 800134c:	001a      	movs	r2, r3
 800134e:	3215      	adds	r2, #21
 8001350:	3020      	adds	r0, #32
 8001352:	2a1c      	cmp	r2, #28
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dmul+0x45c>
 8001356:	e684      	b.n	8001062 <__aeabi_dmul+0x166>
 8001358:	4656      	mov	r6, sl
 800135a:	3b08      	subs	r3, #8
 800135c:	2200      	movs	r2, #0
 800135e:	409e      	lsls	r6, r3
 8001360:	e689      	b.n	8001076 <__aeabi_dmul+0x17a>
 8001362:	f000 fc93 	bl	8001c8c <__clzsi2>
 8001366:	0001      	movs	r1, r0
 8001368:	0002      	movs	r2, r0
 800136a:	3115      	adds	r1, #21
 800136c:	3220      	adds	r2, #32
 800136e:	291c      	cmp	r1, #28
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dmul+0x478>
 8001372:	e64e      	b.n	8001012 <__aeabi_dmul+0x116>
 8001374:	0034      	movs	r4, r6
 8001376:	3808      	subs	r0, #8
 8001378:	2500      	movs	r5, #0
 800137a:	4084      	lsls	r4, r0
 800137c:	e653      	b.n	8001026 <__aeabi_dmul+0x12a>
 800137e:	9b00      	ldr	r3, [sp, #0]
 8001380:	469c      	mov	ip, r3
 8001382:	e741      	b.n	8001208 <__aeabi_dmul+0x30c>
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <__aeabi_dmul+0x4d4>)
 8001386:	0022      	movs	r2, r4
 8001388:	4461      	add	r1, ip
 800138a:	002e      	movs	r6, r5
 800138c:	408d      	lsls	r5, r1
 800138e:	408a      	lsls	r2, r1
 8001390:	40c6      	lsrs	r6, r0
 8001392:	1e69      	subs	r1, r5, #1
 8001394:	418d      	sbcs	r5, r1
 8001396:	4332      	orrs	r2, r6
 8001398:	432a      	orrs	r2, r5
 800139a:	40c4      	lsrs	r4, r0
 800139c:	0753      	lsls	r3, r2, #29
 800139e:	d0b6      	beq.n	800130e <__aeabi_dmul+0x412>
 80013a0:	210f      	movs	r1, #15
 80013a2:	4011      	ands	r1, r2
 80013a4:	2904      	cmp	r1, #4
 80013a6:	d1ac      	bne.n	8001302 <__aeabi_dmul+0x406>
 80013a8:	e7b1      	b.n	800130e <__aeabi_dmul+0x412>
 80013aa:	0765      	lsls	r5, r4, #29
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0b24      	lsrs	r4, r4, #12
 80013b0:	08d2      	lsrs	r2, r2, #3
 80013b2:	4315      	orrs	r5, r2
 80013b4:	2200      	movs	r2, #0
 80013b6:	e611      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0312      	lsls	r2, r2, #12
 80013bc:	4314      	orrs	r4, r2
 80013be:	0324      	lsls	r4, r4, #12
 80013c0:	4a01      	ldr	r2, [pc, #4]	; (80013c8 <__aeabi_dmul+0x4cc>)
 80013c2:	0b24      	lsrs	r4, r4, #12
 80013c4:	e60a      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	0000043e 	.word	0x0000043e
 80013d0:	0000041e 	.word	0x0000041e

080013d4 <__aeabi_dsub>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	4657      	mov	r7, sl
 80013d8:	464e      	mov	r6, r9
 80013da:	4645      	mov	r5, r8
 80013dc:	46de      	mov	lr, fp
 80013de:	0004      	movs	r4, r0
 80013e0:	b5e0      	push	{r5, r6, r7, lr}
 80013e2:	001f      	movs	r7, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	030b      	lsls	r3, r1, #12
 80013e8:	0f62      	lsrs	r2, r4, #29
 80013ea:	004e      	lsls	r6, r1, #1
 80013ec:	0fcd      	lsrs	r5, r1, #31
 80013ee:	0a5b      	lsrs	r3, r3, #9
 80013f0:	0339      	lsls	r1, r7, #12
 80013f2:	4313      	orrs	r3, r2
 80013f4:	0a49      	lsrs	r1, r1, #9
 80013f6:	00e2      	lsls	r2, r4, #3
 80013f8:	0f44      	lsrs	r4, r0, #29
 80013fa:	4321      	orrs	r1, r4
 80013fc:	4cc2      	ldr	r4, [pc, #776]	; (8001708 <__aeabi_dsub+0x334>)
 80013fe:	4691      	mov	r9, r2
 8001400:	4692      	mov	sl, r2
 8001402:	00c0      	lsls	r0, r0, #3
 8001404:	007a      	lsls	r2, r7, #1
 8001406:	4680      	mov	r8, r0
 8001408:	0d76      	lsrs	r6, r6, #21
 800140a:	0d52      	lsrs	r2, r2, #21
 800140c:	0fff      	lsrs	r7, r7, #31
 800140e:	42a2      	cmp	r2, r4
 8001410:	d100      	bne.n	8001414 <__aeabi_dsub+0x40>
 8001412:	e0b4      	b.n	800157e <__aeabi_dsub+0x1aa>
 8001414:	2401      	movs	r4, #1
 8001416:	4067      	eors	r7, r4
 8001418:	46bb      	mov	fp, r7
 800141a:	42bd      	cmp	r5, r7
 800141c:	d100      	bne.n	8001420 <__aeabi_dsub+0x4c>
 800141e:	e088      	b.n	8001532 <__aeabi_dsub+0x15e>
 8001420:	1ab4      	subs	r4, r6, r2
 8001422:	46a4      	mov	ip, r4
 8001424:	2c00      	cmp	r4, #0
 8001426:	dc00      	bgt.n	800142a <__aeabi_dsub+0x56>
 8001428:	e0b2      	b.n	8001590 <__aeabi_dsub+0x1bc>
 800142a:	2a00      	cmp	r2, #0
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x5c>
 800142e:	e0c5      	b.n	80015bc <__aeabi_dsub+0x1e8>
 8001430:	4ab5      	ldr	r2, [pc, #724]	; (8001708 <__aeabi_dsub+0x334>)
 8001432:	4296      	cmp	r6, r2
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x64>
 8001436:	e28b      	b.n	8001950 <__aeabi_dsub+0x57c>
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0412      	lsls	r2, r2, #16
 800143c:	4311      	orrs	r1, r2
 800143e:	4662      	mov	r2, ip
 8001440:	2a38      	cmp	r2, #56	; 0x38
 8001442:	dd00      	ble.n	8001446 <__aeabi_dsub+0x72>
 8001444:	e1a1      	b.n	800178a <__aeabi_dsub+0x3b6>
 8001446:	2a1f      	cmp	r2, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dsub+0x78>
 800144a:	e216      	b.n	800187a <__aeabi_dsub+0x4a6>
 800144c:	2720      	movs	r7, #32
 800144e:	000c      	movs	r4, r1
 8001450:	1abf      	subs	r7, r7, r2
 8001452:	40bc      	lsls	r4, r7
 8001454:	0002      	movs	r2, r0
 8001456:	46a0      	mov	r8, r4
 8001458:	4664      	mov	r4, ip
 800145a:	40b8      	lsls	r0, r7
 800145c:	40e2      	lsrs	r2, r4
 800145e:	4644      	mov	r4, r8
 8001460:	4314      	orrs	r4, r2
 8001462:	0002      	movs	r2, r0
 8001464:	1e50      	subs	r0, r2, #1
 8001466:	4182      	sbcs	r2, r0
 8001468:	4660      	mov	r0, ip
 800146a:	40c1      	lsrs	r1, r0
 800146c:	4322      	orrs	r2, r4
 800146e:	1a5b      	subs	r3, r3, r1
 8001470:	4649      	mov	r1, r9
 8001472:	1a8c      	subs	r4, r1, r2
 8001474:	45a1      	cmp	r9, r4
 8001476:	4192      	sbcs	r2, r2
 8001478:	4252      	negs	r2, r2
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	4698      	mov	r8, r3
 800147e:	4643      	mov	r3, r8
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	d400      	bmi.n	8001486 <__aeabi_dsub+0xb2>
 8001484:	e117      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001486:	4643      	mov	r3, r8
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	0a5b      	lsrs	r3, r3, #9
 800148c:	4698      	mov	r8, r3
 800148e:	4643      	mov	r3, r8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_dsub+0xc2>
 8001494:	e16c      	b.n	8001770 <__aeabi_dsub+0x39c>
 8001496:	4640      	mov	r0, r8
 8001498:	f000 fbf8 	bl	8001c8c <__clzsi2>
 800149c:	0002      	movs	r2, r0
 800149e:	3a08      	subs	r2, #8
 80014a0:	2120      	movs	r1, #32
 80014a2:	0020      	movs	r0, r4
 80014a4:	4643      	mov	r3, r8
 80014a6:	1a89      	subs	r1, r1, r2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	40c8      	lsrs	r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	4303      	orrs	r3, r0
 80014b0:	4296      	cmp	r6, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dsub+0xe2>
 80014b4:	e157      	b.n	8001766 <__aeabi_dsub+0x392>
 80014b6:	1b96      	subs	r6, r2, r6
 80014b8:	1c71      	adds	r1, r6, #1
 80014ba:	291f      	cmp	r1, #31
 80014bc:	dd00      	ble.n	80014c0 <__aeabi_dsub+0xec>
 80014be:	e1cb      	b.n	8001858 <__aeabi_dsub+0x484>
 80014c0:	2220      	movs	r2, #32
 80014c2:	0018      	movs	r0, r3
 80014c4:	0026      	movs	r6, r4
 80014c6:	1a52      	subs	r2, r2, r1
 80014c8:	4094      	lsls	r4, r2
 80014ca:	4090      	lsls	r0, r2
 80014cc:	40ce      	lsrs	r6, r1
 80014ce:	40cb      	lsrs	r3, r1
 80014d0:	1e62      	subs	r2, r4, #1
 80014d2:	4194      	sbcs	r4, r2
 80014d4:	4330      	orrs	r0, r6
 80014d6:	4698      	mov	r8, r3
 80014d8:	2600      	movs	r6, #0
 80014da:	4304      	orrs	r4, r0
 80014dc:	0763      	lsls	r3, r4, #29
 80014de:	d009      	beq.n	80014f4 <__aeabi_dsub+0x120>
 80014e0:	230f      	movs	r3, #15
 80014e2:	4023      	ands	r3, r4
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d005      	beq.n	80014f4 <__aeabi_dsub+0x120>
 80014e8:	1d23      	adds	r3, r4, #4
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	41a4      	sbcs	r4, r4
 80014ee:	4264      	negs	r4, r4
 80014f0:	44a0      	add	r8, r4
 80014f2:	001c      	movs	r4, r3
 80014f4:	4643      	mov	r3, r8
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	d400      	bmi.n	80014fc <__aeabi_dsub+0x128>
 80014fa:	e0df      	b.n	80016bc <__aeabi_dsub+0x2e8>
 80014fc:	4b82      	ldr	r3, [pc, #520]	; (8001708 <__aeabi_dsub+0x334>)
 80014fe:	3601      	adds	r6, #1
 8001500:	429e      	cmp	r6, r3
 8001502:	d100      	bne.n	8001506 <__aeabi_dsub+0x132>
 8001504:	e0fb      	b.n	80016fe <__aeabi_dsub+0x32a>
 8001506:	4642      	mov	r2, r8
 8001508:	4b80      	ldr	r3, [pc, #512]	; (800170c <__aeabi_dsub+0x338>)
 800150a:	08e4      	lsrs	r4, r4, #3
 800150c:	401a      	ands	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	0571      	lsls	r1, r6, #21
 8001512:	0752      	lsls	r2, r2, #29
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4322      	orrs	r2, r4
 8001518:	0b1b      	lsrs	r3, r3, #12
 800151a:	0d49      	lsrs	r1, r1, #21
 800151c:	0509      	lsls	r1, r1, #20
 800151e:	07ed      	lsls	r5, r5, #31
 8001520:	4319      	orrs	r1, r3
 8001522:	4329      	orrs	r1, r5
 8001524:	0010      	movs	r0, r2
 8001526:	bcf0      	pop	{r4, r5, r6, r7}
 8001528:	46bb      	mov	fp, r7
 800152a:	46b2      	mov	sl, r6
 800152c:	46a9      	mov	r9, r5
 800152e:	46a0      	mov	r8, r4
 8001530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001532:	1ab4      	subs	r4, r6, r2
 8001534:	46a4      	mov	ip, r4
 8001536:	2c00      	cmp	r4, #0
 8001538:	dd58      	ble.n	80015ec <__aeabi_dsub+0x218>
 800153a:	2a00      	cmp	r2, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x16c>
 800153e:	e09e      	b.n	800167e <__aeabi_dsub+0x2aa>
 8001540:	4a71      	ldr	r2, [pc, #452]	; (8001708 <__aeabi_dsub+0x334>)
 8001542:	4296      	cmp	r6, r2
 8001544:	d100      	bne.n	8001548 <__aeabi_dsub+0x174>
 8001546:	e13b      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	0412      	lsls	r2, r2, #16
 800154c:	4311      	orrs	r1, r2
 800154e:	4662      	mov	r2, ip
 8001550:	2a38      	cmp	r2, #56	; 0x38
 8001552:	dd00      	ble.n	8001556 <__aeabi_dsub+0x182>
 8001554:	e0c1      	b.n	80016da <__aeabi_dsub+0x306>
 8001556:	2a1f      	cmp	r2, #31
 8001558:	dc00      	bgt.n	800155c <__aeabi_dsub+0x188>
 800155a:	e1bb      	b.n	80018d4 <__aeabi_dsub+0x500>
 800155c:	000c      	movs	r4, r1
 800155e:	3a20      	subs	r2, #32
 8001560:	40d4      	lsrs	r4, r2
 8001562:	0022      	movs	r2, r4
 8001564:	4664      	mov	r4, ip
 8001566:	2c20      	cmp	r4, #32
 8001568:	d004      	beq.n	8001574 <__aeabi_dsub+0x1a0>
 800156a:	2740      	movs	r7, #64	; 0x40
 800156c:	1b3f      	subs	r7, r7, r4
 800156e:	40b9      	lsls	r1, r7
 8001570:	4308      	orrs	r0, r1
 8001572:	4680      	mov	r8, r0
 8001574:	4644      	mov	r4, r8
 8001576:	1e61      	subs	r1, r4, #1
 8001578:	418c      	sbcs	r4, r1
 800157a:	4314      	orrs	r4, r2
 800157c:	e0b1      	b.n	80016e2 <__aeabi_dsub+0x30e>
 800157e:	000c      	movs	r4, r1
 8001580:	4304      	orrs	r4, r0
 8001582:	d02a      	beq.n	80015da <__aeabi_dsub+0x206>
 8001584:	46bb      	mov	fp, r7
 8001586:	42bd      	cmp	r5, r7
 8001588:	d02d      	beq.n	80015e6 <__aeabi_dsub+0x212>
 800158a:	4c61      	ldr	r4, [pc, #388]	; (8001710 <__aeabi_dsub+0x33c>)
 800158c:	46a4      	mov	ip, r4
 800158e:	44b4      	add	ip, r6
 8001590:	4664      	mov	r4, ip
 8001592:	2c00      	cmp	r4, #0
 8001594:	d05c      	beq.n	8001650 <__aeabi_dsub+0x27c>
 8001596:	1b94      	subs	r4, r2, r6
 8001598:	46a4      	mov	ip, r4
 800159a:	2e00      	cmp	r6, #0
 800159c:	d000      	beq.n	80015a0 <__aeabi_dsub+0x1cc>
 800159e:	e115      	b.n	80017cc <__aeabi_dsub+0x3f8>
 80015a0:	464d      	mov	r5, r9
 80015a2:	431d      	orrs	r5, r3
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dsub+0x1d4>
 80015a6:	e1c3      	b.n	8001930 <__aeabi_dsub+0x55c>
 80015a8:	1e65      	subs	r5, r4, #1
 80015aa:	2c01      	cmp	r4, #1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dsub+0x1dc>
 80015ae:	e20c      	b.n	80019ca <__aeabi_dsub+0x5f6>
 80015b0:	4e55      	ldr	r6, [pc, #340]	; (8001708 <__aeabi_dsub+0x334>)
 80015b2:	42b4      	cmp	r4, r6
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x1e4>
 80015b6:	e1f8      	b.n	80019aa <__aeabi_dsub+0x5d6>
 80015b8:	46ac      	mov	ip, r5
 80015ba:	e10e      	b.n	80017da <__aeabi_dsub+0x406>
 80015bc:	000a      	movs	r2, r1
 80015be:	4302      	orrs	r2, r0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x1f0>
 80015c2:	e136      	b.n	8001832 <__aeabi_dsub+0x45e>
 80015c4:	0022      	movs	r2, r4
 80015c6:	3a01      	subs	r2, #1
 80015c8:	2c01      	cmp	r4, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dsub+0x1fa>
 80015cc:	e1c6      	b.n	800195c <__aeabi_dsub+0x588>
 80015ce:	4c4e      	ldr	r4, [pc, #312]	; (8001708 <__aeabi_dsub+0x334>)
 80015d0:	45a4      	cmp	ip, r4
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dsub+0x202>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 80015d6:	4694      	mov	ip, r2
 80015d8:	e731      	b.n	800143e <__aeabi_dsub+0x6a>
 80015da:	2401      	movs	r4, #1
 80015dc:	4067      	eors	r7, r4
 80015de:	46bb      	mov	fp, r7
 80015e0:	42bd      	cmp	r5, r7
 80015e2:	d000      	beq.n	80015e6 <__aeabi_dsub+0x212>
 80015e4:	e71c      	b.n	8001420 <__aeabi_dsub+0x4c>
 80015e6:	4c4a      	ldr	r4, [pc, #296]	; (8001710 <__aeabi_dsub+0x33c>)
 80015e8:	46a4      	mov	ip, r4
 80015ea:	44b4      	add	ip, r6
 80015ec:	4664      	mov	r4, ip
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dsub+0x220>
 80015f2:	e0cf      	b.n	8001794 <__aeabi_dsub+0x3c0>
 80015f4:	1b94      	subs	r4, r2, r6
 80015f6:	46a4      	mov	ip, r4
 80015f8:	2e00      	cmp	r6, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dsub+0x22a>
 80015fc:	e15c      	b.n	80018b8 <__aeabi_dsub+0x4e4>
 80015fe:	4e42      	ldr	r6, [pc, #264]	; (8001708 <__aeabi_dsub+0x334>)
 8001600:	42b2      	cmp	r2, r6
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x232>
 8001604:	e1ec      	b.n	80019e0 <__aeabi_dsub+0x60c>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0436      	lsls	r6, r6, #16
 800160a:	4333      	orrs	r3, r6
 800160c:	4664      	mov	r4, ip
 800160e:	2c38      	cmp	r4, #56	; 0x38
 8001610:	dd00      	ble.n	8001614 <__aeabi_dsub+0x240>
 8001612:	e1b3      	b.n	800197c <__aeabi_dsub+0x5a8>
 8001614:	2c1f      	cmp	r4, #31
 8001616:	dd00      	ble.n	800161a <__aeabi_dsub+0x246>
 8001618:	e238      	b.n	8001a8c <__aeabi_dsub+0x6b8>
 800161a:	2620      	movs	r6, #32
 800161c:	1b36      	subs	r6, r6, r4
 800161e:	001c      	movs	r4, r3
 8001620:	40b4      	lsls	r4, r6
 8001622:	464f      	mov	r7, r9
 8001624:	46a0      	mov	r8, r4
 8001626:	4664      	mov	r4, ip
 8001628:	40e7      	lsrs	r7, r4
 800162a:	4644      	mov	r4, r8
 800162c:	433c      	orrs	r4, r7
 800162e:	464f      	mov	r7, r9
 8001630:	40b7      	lsls	r7, r6
 8001632:	003e      	movs	r6, r7
 8001634:	1e77      	subs	r7, r6, #1
 8001636:	41be      	sbcs	r6, r7
 8001638:	4334      	orrs	r4, r6
 800163a:	4666      	mov	r6, ip
 800163c:	40f3      	lsrs	r3, r6
 800163e:	18c9      	adds	r1, r1, r3
 8001640:	1824      	adds	r4, r4, r0
 8001642:	4284      	cmp	r4, r0
 8001644:	419b      	sbcs	r3, r3
 8001646:	425b      	negs	r3, r3
 8001648:	4698      	mov	r8, r3
 800164a:	0016      	movs	r6, r2
 800164c:	4488      	add	r8, r1
 800164e:	e04e      	b.n	80016ee <__aeabi_dsub+0x31a>
 8001650:	4a30      	ldr	r2, [pc, #192]	; (8001714 <__aeabi_dsub+0x340>)
 8001652:	1c74      	adds	r4, r6, #1
 8001654:	4214      	tst	r4, r2
 8001656:	d000      	beq.n	800165a <__aeabi_dsub+0x286>
 8001658:	e0d6      	b.n	8001808 <__aeabi_dsub+0x434>
 800165a:	464a      	mov	r2, r9
 800165c:	431a      	orrs	r2, r3
 800165e:	2e00      	cmp	r6, #0
 8001660:	d000      	beq.n	8001664 <__aeabi_dsub+0x290>
 8001662:	e15b      	b.n	800191c <__aeabi_dsub+0x548>
 8001664:	2a00      	cmp	r2, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dsub+0x296>
 8001668:	e1a5      	b.n	80019b6 <__aeabi_dsub+0x5e2>
 800166a:	000a      	movs	r2, r1
 800166c:	4302      	orrs	r2, r0
 800166e:	d000      	beq.n	8001672 <__aeabi_dsub+0x29e>
 8001670:	e1bb      	b.n	80019ea <__aeabi_dsub+0x616>
 8001672:	464a      	mov	r2, r9
 8001674:	0759      	lsls	r1, r3, #29
 8001676:	08d2      	lsrs	r2, r2, #3
 8001678:	430a      	orrs	r2, r1
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	e027      	b.n	80016ce <__aeabi_dsub+0x2fa>
 800167e:	000a      	movs	r2, r1
 8001680:	4302      	orrs	r2, r0
 8001682:	d100      	bne.n	8001686 <__aeabi_dsub+0x2b2>
 8001684:	e174      	b.n	8001970 <__aeabi_dsub+0x59c>
 8001686:	0022      	movs	r2, r4
 8001688:	3a01      	subs	r2, #1
 800168a:	2c01      	cmp	r4, #1
 800168c:	d005      	beq.n	800169a <__aeabi_dsub+0x2c6>
 800168e:	4c1e      	ldr	r4, [pc, #120]	; (8001708 <__aeabi_dsub+0x334>)
 8001690:	45a4      	cmp	ip, r4
 8001692:	d100      	bne.n	8001696 <__aeabi_dsub+0x2c2>
 8001694:	e094      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 8001696:	4694      	mov	ip, r2
 8001698:	e759      	b.n	800154e <__aeabi_dsub+0x17a>
 800169a:	4448      	add	r0, r9
 800169c:	4548      	cmp	r0, r9
 800169e:	4192      	sbcs	r2, r2
 80016a0:	185b      	adds	r3, r3, r1
 80016a2:	4698      	mov	r8, r3
 80016a4:	0004      	movs	r4, r0
 80016a6:	4252      	negs	r2, r2
 80016a8:	4490      	add	r8, r2
 80016aa:	4643      	mov	r3, r8
 80016ac:	2602      	movs	r6, #2
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	d500      	bpl.n	80016b4 <__aeabi_dsub+0x2e0>
 80016b2:	e0c4      	b.n	800183e <__aeabi_dsub+0x46a>
 80016b4:	3e01      	subs	r6, #1
 80016b6:	0763      	lsls	r3, r4, #29
 80016b8:	d000      	beq.n	80016bc <__aeabi_dsub+0x2e8>
 80016ba:	e711      	b.n	80014e0 <__aeabi_dsub+0x10c>
 80016bc:	4643      	mov	r3, r8
 80016be:	46b4      	mov	ip, r6
 80016c0:	0759      	lsls	r1, r3, #29
 80016c2:	08e2      	lsrs	r2, r4, #3
 80016c4:	430a      	orrs	r2, r1
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	490f      	ldr	r1, [pc, #60]	; (8001708 <__aeabi_dsub+0x334>)
 80016ca:	458c      	cmp	ip, r1
 80016cc:	d040      	beq.n	8001750 <__aeabi_dsub+0x37c>
 80016ce:	4661      	mov	r1, ip
 80016d0:	031b      	lsls	r3, r3, #12
 80016d2:	0549      	lsls	r1, r1, #21
 80016d4:	0b1b      	lsrs	r3, r3, #12
 80016d6:	0d49      	lsrs	r1, r1, #21
 80016d8:	e720      	b.n	800151c <__aeabi_dsub+0x148>
 80016da:	4301      	orrs	r1, r0
 80016dc:	000c      	movs	r4, r1
 80016de:	1e61      	subs	r1, r4, #1
 80016e0:	418c      	sbcs	r4, r1
 80016e2:	444c      	add	r4, r9
 80016e4:	454c      	cmp	r4, r9
 80016e6:	4192      	sbcs	r2, r2
 80016e8:	4252      	negs	r2, r2
 80016ea:	4690      	mov	r8, r2
 80016ec:	4498      	add	r8, r3
 80016ee:	4643      	mov	r3, r8
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	d5e0      	bpl.n	80016b6 <__aeabi_dsub+0x2e2>
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__aeabi_dsub+0x334>)
 80016f6:	3601      	adds	r6, #1
 80016f8:	429e      	cmp	r6, r3
 80016fa:	d000      	beq.n	80016fe <__aeabi_dsub+0x32a>
 80016fc:	e09f      	b.n	800183e <__aeabi_dsub+0x46a>
 80016fe:	0031      	movs	r1, r6
 8001700:	2300      	movs	r3, #0
 8001702:	2200      	movs	r2, #0
 8001704:	e70a      	b.n	800151c <__aeabi_dsub+0x148>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	ff7fffff 	.word	0xff7fffff
 8001710:	fffff801 	.word	0xfffff801
 8001714:	000007fe 	.word	0x000007fe
 8001718:	2a00      	cmp	r2, #0
 800171a:	d100      	bne.n	800171e <__aeabi_dsub+0x34a>
 800171c:	e160      	b.n	80019e0 <__aeabi_dsub+0x60c>
 800171e:	000a      	movs	r2, r1
 8001720:	4302      	orrs	r2, r0
 8001722:	d04d      	beq.n	80017c0 <__aeabi_dsub+0x3ec>
 8001724:	464a      	mov	r2, r9
 8001726:	075c      	lsls	r4, r3, #29
 8001728:	08d2      	lsrs	r2, r2, #3
 800172a:	4322      	orrs	r2, r4
 800172c:	2480      	movs	r4, #128	; 0x80
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	4223      	tst	r3, r4
 8001734:	d007      	beq.n	8001746 <__aeabi_dsub+0x372>
 8001736:	08ce      	lsrs	r6, r1, #3
 8001738:	4226      	tst	r6, r4
 800173a:	d104      	bne.n	8001746 <__aeabi_dsub+0x372>
 800173c:	465d      	mov	r5, fp
 800173e:	0033      	movs	r3, r6
 8001740:	08c2      	lsrs	r2, r0, #3
 8001742:	0749      	lsls	r1, r1, #29
 8001744:	430a      	orrs	r2, r1
 8001746:	0f51      	lsrs	r1, r2, #29
 8001748:	00d2      	lsls	r2, r2, #3
 800174a:	08d2      	lsrs	r2, r2, #3
 800174c:	0749      	lsls	r1, r1, #29
 800174e:	430a      	orrs	r2, r1
 8001750:	0011      	movs	r1, r2
 8001752:	4319      	orrs	r1, r3
 8001754:	d100      	bne.n	8001758 <__aeabi_dsub+0x384>
 8001756:	e1c8      	b.n	8001aea <__aeabi_dsub+0x716>
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0309      	lsls	r1, r1, #12
 800175c:	430b      	orrs	r3, r1
 800175e:	031b      	lsls	r3, r3, #12
 8001760:	49d5      	ldr	r1, [pc, #852]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	e6da      	b.n	800151c <__aeabi_dsub+0x148>
 8001766:	49d5      	ldr	r1, [pc, #852]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001768:	1ab6      	subs	r6, r6, r2
 800176a:	400b      	ands	r3, r1
 800176c:	4698      	mov	r8, r3
 800176e:	e6b5      	b.n	80014dc <__aeabi_dsub+0x108>
 8001770:	0020      	movs	r0, r4
 8001772:	f000 fa8b 	bl	8001c8c <__clzsi2>
 8001776:	0002      	movs	r2, r0
 8001778:	3218      	adds	r2, #24
 800177a:	2a1f      	cmp	r2, #31
 800177c:	dc00      	bgt.n	8001780 <__aeabi_dsub+0x3ac>
 800177e:	e68f      	b.n	80014a0 <__aeabi_dsub+0xcc>
 8001780:	0023      	movs	r3, r4
 8001782:	3808      	subs	r0, #8
 8001784:	4083      	lsls	r3, r0
 8001786:	2400      	movs	r4, #0
 8001788:	e692      	b.n	80014b0 <__aeabi_dsub+0xdc>
 800178a:	4308      	orrs	r0, r1
 800178c:	0002      	movs	r2, r0
 800178e:	1e50      	subs	r0, r2, #1
 8001790:	4182      	sbcs	r2, r0
 8001792:	e66d      	b.n	8001470 <__aeabi_dsub+0x9c>
 8001794:	4cca      	ldr	r4, [pc, #808]	; (8001ac0 <__aeabi_dsub+0x6ec>)
 8001796:	1c72      	adds	r2, r6, #1
 8001798:	4222      	tst	r2, r4
 800179a:	d000      	beq.n	800179e <__aeabi_dsub+0x3ca>
 800179c:	e0ad      	b.n	80018fa <__aeabi_dsub+0x526>
 800179e:	464a      	mov	r2, r9
 80017a0:	431a      	orrs	r2, r3
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d1b8      	bne.n	8001718 <__aeabi_dsub+0x344>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x3d8>
 80017aa:	e158      	b.n	8001a5e <__aeabi_dsub+0x68a>
 80017ac:	000a      	movs	r2, r1
 80017ae:	4302      	orrs	r2, r0
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dsub+0x3e0>
 80017b2:	e159      	b.n	8001a68 <__aeabi_dsub+0x694>
 80017b4:	464a      	mov	r2, r9
 80017b6:	0759      	lsls	r1, r3, #29
 80017b8:	08d2      	lsrs	r2, r2, #3
 80017ba:	430a      	orrs	r2, r1
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	e786      	b.n	80016ce <__aeabi_dsub+0x2fa>
 80017c0:	464a      	mov	r2, r9
 80017c2:	0759      	lsls	r1, r3, #29
 80017c4:	08d2      	lsrs	r2, r2, #3
 80017c6:	430a      	orrs	r2, r1
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	e7c1      	b.n	8001750 <__aeabi_dsub+0x37c>
 80017cc:	4dba      	ldr	r5, [pc, #744]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80017ce:	42aa      	cmp	r2, r5
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x400>
 80017d2:	e11e      	b.n	8001a12 <__aeabi_dsub+0x63e>
 80017d4:	2580      	movs	r5, #128	; 0x80
 80017d6:	042d      	lsls	r5, r5, #16
 80017d8:	432b      	orrs	r3, r5
 80017da:	4664      	mov	r4, ip
 80017dc:	2c38      	cmp	r4, #56	; 0x38
 80017de:	dc5d      	bgt.n	800189c <__aeabi_dsub+0x4c8>
 80017e0:	2c1f      	cmp	r4, #31
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dsub+0x412>
 80017e4:	e0d0      	b.n	8001988 <__aeabi_dsub+0x5b4>
 80017e6:	2520      	movs	r5, #32
 80017e8:	4667      	mov	r7, ip
 80017ea:	1b2d      	subs	r5, r5, r4
 80017ec:	464e      	mov	r6, r9
 80017ee:	001c      	movs	r4, r3
 80017f0:	40fe      	lsrs	r6, r7
 80017f2:	40ac      	lsls	r4, r5
 80017f4:	4334      	orrs	r4, r6
 80017f6:	464e      	mov	r6, r9
 80017f8:	40ae      	lsls	r6, r5
 80017fa:	0035      	movs	r5, r6
 80017fc:	40fb      	lsrs	r3, r7
 80017fe:	1e6e      	subs	r6, r5, #1
 8001800:	41b5      	sbcs	r5, r6
 8001802:	1ac9      	subs	r1, r1, r3
 8001804:	432c      	orrs	r4, r5
 8001806:	e04e      	b.n	80018a6 <__aeabi_dsub+0x4d2>
 8001808:	464a      	mov	r2, r9
 800180a:	1a14      	subs	r4, r2, r0
 800180c:	45a1      	cmp	r9, r4
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	4690      	mov	r8, r2
 8001814:	1a5f      	subs	r7, r3, r1
 8001816:	003a      	movs	r2, r7
 8001818:	4647      	mov	r7, r8
 800181a:	1bd2      	subs	r2, r2, r7
 800181c:	4690      	mov	r8, r2
 800181e:	0212      	lsls	r2, r2, #8
 8001820:	d500      	bpl.n	8001824 <__aeabi_dsub+0x450>
 8001822:	e08b      	b.n	800193c <__aeabi_dsub+0x568>
 8001824:	4642      	mov	r2, r8
 8001826:	4322      	orrs	r2, r4
 8001828:	d000      	beq.n	800182c <__aeabi_dsub+0x458>
 800182a:	e630      	b.n	800148e <__aeabi_dsub+0xba>
 800182c:	2300      	movs	r3, #0
 800182e:	2500      	movs	r5, #0
 8001830:	e74d      	b.n	80016ce <__aeabi_dsub+0x2fa>
 8001832:	464a      	mov	r2, r9
 8001834:	0759      	lsls	r1, r3, #29
 8001836:	08d2      	lsrs	r2, r2, #3
 8001838:	430a      	orrs	r2, r1
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	e744      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800183e:	4642      	mov	r2, r8
 8001840:	4b9e      	ldr	r3, [pc, #632]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001842:	0861      	lsrs	r1, r4, #1
 8001844:	401a      	ands	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	2201      	movs	r2, #1
 800184a:	4014      	ands	r4, r2
 800184c:	430c      	orrs	r4, r1
 800184e:	07da      	lsls	r2, r3, #31
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	4698      	mov	r8, r3
 8001854:	4314      	orrs	r4, r2
 8001856:	e641      	b.n	80014dc <__aeabi_dsub+0x108>
 8001858:	001a      	movs	r2, r3
 800185a:	3e1f      	subs	r6, #31
 800185c:	40f2      	lsrs	r2, r6
 800185e:	0016      	movs	r6, r2
 8001860:	2920      	cmp	r1, #32
 8001862:	d003      	beq.n	800186c <__aeabi_dsub+0x498>
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	1a51      	subs	r1, r2, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	431c      	orrs	r4, r3
 800186c:	1e62      	subs	r2, r4, #1
 800186e:	4194      	sbcs	r4, r2
 8001870:	2300      	movs	r3, #0
 8001872:	4334      	orrs	r4, r6
 8001874:	4698      	mov	r8, r3
 8001876:	2600      	movs	r6, #0
 8001878:	e71d      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 800187a:	000c      	movs	r4, r1
 800187c:	3a20      	subs	r2, #32
 800187e:	40d4      	lsrs	r4, r2
 8001880:	0022      	movs	r2, r4
 8001882:	4664      	mov	r4, ip
 8001884:	2c20      	cmp	r4, #32
 8001886:	d004      	beq.n	8001892 <__aeabi_dsub+0x4be>
 8001888:	2740      	movs	r7, #64	; 0x40
 800188a:	1b3f      	subs	r7, r7, r4
 800188c:	40b9      	lsls	r1, r7
 800188e:	4308      	orrs	r0, r1
 8001890:	4680      	mov	r8, r0
 8001892:	4644      	mov	r4, r8
 8001894:	1e61      	subs	r1, r4, #1
 8001896:	418c      	sbcs	r4, r1
 8001898:	4322      	orrs	r2, r4
 800189a:	e5e9      	b.n	8001470 <__aeabi_dsub+0x9c>
 800189c:	464c      	mov	r4, r9
 800189e:	4323      	orrs	r3, r4
 80018a0:	001c      	movs	r4, r3
 80018a2:	1e63      	subs	r3, r4, #1
 80018a4:	419c      	sbcs	r4, r3
 80018a6:	1b04      	subs	r4, r0, r4
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	419b      	sbcs	r3, r3
 80018ac:	425b      	negs	r3, r3
 80018ae:	1acb      	subs	r3, r1, r3
 80018b0:	4698      	mov	r8, r3
 80018b2:	465d      	mov	r5, fp
 80018b4:	0016      	movs	r6, r2
 80018b6:	e5e2      	b.n	800147e <__aeabi_dsub+0xaa>
 80018b8:	464e      	mov	r6, r9
 80018ba:	431e      	orrs	r6, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x4ec>
 80018be:	e0ae      	b.n	8001a1e <__aeabi_dsub+0x64a>
 80018c0:	1e66      	subs	r6, r4, #1
 80018c2:	2c01      	cmp	r4, #1
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x4f4>
 80018c6:	e0fd      	b.n	8001ac4 <__aeabi_dsub+0x6f0>
 80018c8:	4f7b      	ldr	r7, [pc, #492]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80018ca:	42bc      	cmp	r4, r7
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x4fc>
 80018ce:	e107      	b.n	8001ae0 <__aeabi_dsub+0x70c>
 80018d0:	46b4      	mov	ip, r6
 80018d2:	e69b      	b.n	800160c <__aeabi_dsub+0x238>
 80018d4:	4664      	mov	r4, ip
 80018d6:	2220      	movs	r2, #32
 80018d8:	1b12      	subs	r2, r2, r4
 80018da:	000c      	movs	r4, r1
 80018dc:	4094      	lsls	r4, r2
 80018de:	0007      	movs	r7, r0
 80018e0:	4090      	lsls	r0, r2
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	1e42      	subs	r2, r0, #1
 80018e8:	4190      	sbcs	r0, r2
 80018ea:	4662      	mov	r2, ip
 80018ec:	40e7      	lsrs	r7, r4
 80018ee:	4644      	mov	r4, r8
 80018f0:	40d1      	lsrs	r1, r2
 80018f2:	433c      	orrs	r4, r7
 80018f4:	4304      	orrs	r4, r0
 80018f6:	185b      	adds	r3, r3, r1
 80018f8:	e6f3      	b.n	80016e2 <__aeabi_dsub+0x30e>
 80018fa:	4c6f      	ldr	r4, [pc, #444]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80018fc:	42a2      	cmp	r2, r4
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x52e>
 8001900:	e0d5      	b.n	8001aae <__aeabi_dsub+0x6da>
 8001902:	4448      	add	r0, r9
 8001904:	185b      	adds	r3, r3, r1
 8001906:	4548      	cmp	r0, r9
 8001908:	4189      	sbcs	r1, r1
 800190a:	4249      	negs	r1, r1
 800190c:	185b      	adds	r3, r3, r1
 800190e:	07dc      	lsls	r4, r3, #31
 8001910:	0840      	lsrs	r0, r0, #1
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	4698      	mov	r8, r3
 8001916:	0016      	movs	r6, r2
 8001918:	4304      	orrs	r4, r0
 800191a:	e6cc      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 800191c:	2a00      	cmp	r2, #0
 800191e:	d000      	beq.n	8001922 <__aeabi_dsub+0x54e>
 8001920:	e082      	b.n	8001a28 <__aeabi_dsub+0x654>
 8001922:	000a      	movs	r2, r1
 8001924:	4302      	orrs	r2, r0
 8001926:	d140      	bne.n	80019aa <__aeabi_dsub+0x5d6>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	2500      	movs	r5, #0
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	e713      	b.n	8001758 <__aeabi_dsub+0x384>
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	08c2      	lsrs	r2, r0, #3
 8001934:	431a      	orrs	r2, r3
 8001936:	465d      	mov	r5, fp
 8001938:	08cb      	lsrs	r3, r1, #3
 800193a:	e6c5      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800193c:	464a      	mov	r2, r9
 800193e:	1a84      	subs	r4, r0, r2
 8001940:	42a0      	cmp	r0, r4
 8001942:	4192      	sbcs	r2, r2
 8001944:	1acb      	subs	r3, r1, r3
 8001946:	4252      	negs	r2, r2
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	4698      	mov	r8, r3
 800194c:	465d      	mov	r5, fp
 800194e:	e59e      	b.n	800148e <__aeabi_dsub+0xba>
 8001950:	464a      	mov	r2, r9
 8001952:	0759      	lsls	r1, r3, #29
 8001954:	08d2      	lsrs	r2, r2, #3
 8001956:	430a      	orrs	r2, r1
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	e6f9      	b.n	8001750 <__aeabi_dsub+0x37c>
 800195c:	464a      	mov	r2, r9
 800195e:	1a14      	subs	r4, r2, r0
 8001960:	45a1      	cmp	r9, r4
 8001962:	4192      	sbcs	r2, r2
 8001964:	1a5b      	subs	r3, r3, r1
 8001966:	4252      	negs	r2, r2
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	4698      	mov	r8, r3
 800196c:	2601      	movs	r6, #1
 800196e:	e586      	b.n	800147e <__aeabi_dsub+0xaa>
 8001970:	464a      	mov	r2, r9
 8001972:	0759      	lsls	r1, r3, #29
 8001974:	08d2      	lsrs	r2, r2, #3
 8001976:	430a      	orrs	r2, r1
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	e6a5      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800197c:	464c      	mov	r4, r9
 800197e:	4323      	orrs	r3, r4
 8001980:	001c      	movs	r4, r3
 8001982:	1e63      	subs	r3, r4, #1
 8001984:	419c      	sbcs	r4, r3
 8001986:	e65b      	b.n	8001640 <__aeabi_dsub+0x26c>
 8001988:	4665      	mov	r5, ip
 800198a:	001e      	movs	r6, r3
 800198c:	3d20      	subs	r5, #32
 800198e:	40ee      	lsrs	r6, r5
 8001990:	2c20      	cmp	r4, #32
 8001992:	d005      	beq.n	80019a0 <__aeabi_dsub+0x5cc>
 8001994:	2540      	movs	r5, #64	; 0x40
 8001996:	1b2d      	subs	r5, r5, r4
 8001998:	40ab      	lsls	r3, r5
 800199a:	464c      	mov	r4, r9
 800199c:	431c      	orrs	r4, r3
 800199e:	46a2      	mov	sl, r4
 80019a0:	4654      	mov	r4, sl
 80019a2:	1e63      	subs	r3, r4, #1
 80019a4:	419c      	sbcs	r4, r3
 80019a6:	4334      	orrs	r4, r6
 80019a8:	e77d      	b.n	80018a6 <__aeabi_dsub+0x4d2>
 80019aa:	074b      	lsls	r3, r1, #29
 80019ac:	08c2      	lsrs	r2, r0, #3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	465d      	mov	r5, fp
 80019b2:	08cb      	lsrs	r3, r1, #3
 80019b4:	e6cc      	b.n	8001750 <__aeabi_dsub+0x37c>
 80019b6:	000a      	movs	r2, r1
 80019b8:	4302      	orrs	r2, r0
 80019ba:	d100      	bne.n	80019be <__aeabi_dsub+0x5ea>
 80019bc:	e736      	b.n	800182c <__aeabi_dsub+0x458>
 80019be:	074b      	lsls	r3, r1, #29
 80019c0:	08c2      	lsrs	r2, r0, #3
 80019c2:	431a      	orrs	r2, r3
 80019c4:	465d      	mov	r5, fp
 80019c6:	08cb      	lsrs	r3, r1, #3
 80019c8:	e681      	b.n	80016ce <__aeabi_dsub+0x2fa>
 80019ca:	464a      	mov	r2, r9
 80019cc:	1a84      	subs	r4, r0, r2
 80019ce:	42a0      	cmp	r0, r4
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	4698      	mov	r8, r3
 80019da:	465d      	mov	r5, fp
 80019dc:	2601      	movs	r6, #1
 80019de:	e54e      	b.n	800147e <__aeabi_dsub+0xaa>
 80019e0:	074b      	lsls	r3, r1, #29
 80019e2:	08c2      	lsrs	r2, r0, #3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	08cb      	lsrs	r3, r1, #3
 80019e8:	e6b2      	b.n	8001750 <__aeabi_dsub+0x37c>
 80019ea:	464a      	mov	r2, r9
 80019ec:	1a14      	subs	r4, r2, r0
 80019ee:	45a1      	cmp	r9, r4
 80019f0:	4192      	sbcs	r2, r2
 80019f2:	1a5f      	subs	r7, r3, r1
 80019f4:	4252      	negs	r2, r2
 80019f6:	1aba      	subs	r2, r7, r2
 80019f8:	4690      	mov	r8, r2
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	d56b      	bpl.n	8001ad6 <__aeabi_dsub+0x702>
 80019fe:	464a      	mov	r2, r9
 8001a00:	1a84      	subs	r4, r0, r2
 8001a02:	42a0      	cmp	r0, r4
 8001a04:	4192      	sbcs	r2, r2
 8001a06:	1acb      	subs	r3, r1, r3
 8001a08:	4252      	negs	r2, r2
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	465d      	mov	r5, fp
 8001a10:	e564      	b.n	80014dc <__aeabi_dsub+0x108>
 8001a12:	074b      	lsls	r3, r1, #29
 8001a14:	08c2      	lsrs	r2, r0, #3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	465d      	mov	r5, fp
 8001a1a:	08cb      	lsrs	r3, r1, #3
 8001a1c:	e698      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001a1e:	074b      	lsls	r3, r1, #29
 8001a20:	08c2      	lsrs	r2, r0, #3
 8001a22:	431a      	orrs	r2, r3
 8001a24:	08cb      	lsrs	r3, r1, #3
 8001a26:	e64f      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 8001a28:	000a      	movs	r2, r1
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d090      	beq.n	8001950 <__aeabi_dsub+0x57c>
 8001a2e:	464a      	mov	r2, r9
 8001a30:	075c      	lsls	r4, r3, #29
 8001a32:	08d2      	lsrs	r2, r2, #3
 8001a34:	4314      	orrs	r4, r2
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4213      	tst	r3, r2
 8001a3e:	d008      	beq.n	8001a52 <__aeabi_dsub+0x67e>
 8001a40:	08ce      	lsrs	r6, r1, #3
 8001a42:	4216      	tst	r6, r2
 8001a44:	d105      	bne.n	8001a52 <__aeabi_dsub+0x67e>
 8001a46:	08c0      	lsrs	r0, r0, #3
 8001a48:	0749      	lsls	r1, r1, #29
 8001a4a:	4308      	orrs	r0, r1
 8001a4c:	0004      	movs	r4, r0
 8001a4e:	465d      	mov	r5, fp
 8001a50:	0033      	movs	r3, r6
 8001a52:	0f61      	lsrs	r1, r4, #29
 8001a54:	00e2      	lsls	r2, r4, #3
 8001a56:	0749      	lsls	r1, r1, #29
 8001a58:	08d2      	lsrs	r2, r2, #3
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	e678      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001a5e:	074b      	lsls	r3, r1, #29
 8001a60:	08c2      	lsrs	r2, r0, #3
 8001a62:	431a      	orrs	r2, r3
 8001a64:	08cb      	lsrs	r3, r1, #3
 8001a66:	e632      	b.n	80016ce <__aeabi_dsub+0x2fa>
 8001a68:	4448      	add	r0, r9
 8001a6a:	185b      	adds	r3, r3, r1
 8001a6c:	4548      	cmp	r0, r9
 8001a6e:	4192      	sbcs	r2, r2
 8001a70:	4698      	mov	r8, r3
 8001a72:	4252      	negs	r2, r2
 8001a74:	4490      	add	r8, r2
 8001a76:	4643      	mov	r3, r8
 8001a78:	0004      	movs	r4, r0
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dsub+0x6ac>
 8001a7e:	e61a      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e614      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001a8c:	4666      	mov	r6, ip
 8001a8e:	001f      	movs	r7, r3
 8001a90:	3e20      	subs	r6, #32
 8001a92:	40f7      	lsrs	r7, r6
 8001a94:	2c20      	cmp	r4, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dsub+0x6d0>
 8001a98:	2640      	movs	r6, #64	; 0x40
 8001a9a:	1b36      	subs	r6, r6, r4
 8001a9c:	40b3      	lsls	r3, r6
 8001a9e:	464c      	mov	r4, r9
 8001aa0:	431c      	orrs	r4, r3
 8001aa2:	46a2      	mov	sl, r4
 8001aa4:	4654      	mov	r4, sl
 8001aa6:	1e63      	subs	r3, r4, #1
 8001aa8:	419c      	sbcs	r4, r3
 8001aaa:	433c      	orrs	r4, r7
 8001aac:	e5c8      	b.n	8001640 <__aeabi_dsub+0x26c>
 8001aae:	0011      	movs	r1, r2
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	e532      	b.n	800151c <__aeabi_dsub+0x148>
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	000007ff 	.word	0x000007ff
 8001abc:	ff7fffff 	.word	0xff7fffff
 8001ac0:	000007fe 	.word	0x000007fe
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	1814      	adds	r4, r2, r0
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	185b      	adds	r3, r3, r1
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	4490      	add	r8, r2
 8001ad4:	e5e9      	b.n	80016aa <__aeabi_dsub+0x2d6>
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	4322      	orrs	r2, r4
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x70a>
 8001adc:	e6a6      	b.n	800182c <__aeabi_dsub+0x458>
 8001ade:	e5ea      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001ae0:	074b      	lsls	r3, r1, #29
 8001ae2:	08c2      	lsrs	r2, r0, #3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	08cb      	lsrs	r3, r1, #3
 8001ae8:	e632      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001aea:	2200      	movs	r2, #0
 8001aec:	4901      	ldr	r1, [pc, #4]	; (8001af4 <__aeabi_dsub+0x720>)
 8001aee:	0013      	movs	r3, r2
 8001af0:	e514      	b.n	800151c <__aeabi_dsub+0x148>
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	000007ff 	.word	0x000007ff

08001af8 <__aeabi_d2iz>:
 8001af8:	000a      	movs	r2, r1
 8001afa:	b530      	push	{r4, r5, lr}
 8001afc:	4c13      	ldr	r4, [pc, #76]	; (8001b4c <__aeabi_d2iz+0x54>)
 8001afe:	0053      	lsls	r3, r2, #1
 8001b00:	0309      	lsls	r1, r1, #12
 8001b02:	0005      	movs	r5, r0
 8001b04:	0b09      	lsrs	r1, r1, #12
 8001b06:	2000      	movs	r0, #0
 8001b08:	0d5b      	lsrs	r3, r3, #21
 8001b0a:	0fd2      	lsrs	r2, r2, #31
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	dd04      	ble.n	8001b1a <__aeabi_d2iz+0x22>
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <__aeabi_d2iz+0x58>)
 8001b12:	4283      	cmp	r3, r0
 8001b14:	dd02      	ble.n	8001b1c <__aeabi_d2iz+0x24>
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <__aeabi_d2iz+0x5c>)
 8001b18:	18d0      	adds	r0, r2, r3
 8001b1a:	bd30      	pop	{r4, r5, pc}
 8001b1c:	2080      	movs	r0, #128	; 0x80
 8001b1e:	0340      	lsls	r0, r0, #13
 8001b20:	4301      	orrs	r1, r0
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <__aeabi_d2iz+0x60>)
 8001b24:	1ac0      	subs	r0, r0, r3
 8001b26:	281f      	cmp	r0, #31
 8001b28:	dd08      	ble.n	8001b3c <__aeabi_d2iz+0x44>
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <__aeabi_d2iz+0x64>)
 8001b2c:	1ac3      	subs	r3, r0, r3
 8001b2e:	40d9      	lsrs	r1, r3
 8001b30:	000b      	movs	r3, r1
 8001b32:	4258      	negs	r0, r3
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d1f0      	bne.n	8001b1a <__aeabi_d2iz+0x22>
 8001b38:	0018      	movs	r0, r3
 8001b3a:	e7ee      	b.n	8001b1a <__aeabi_d2iz+0x22>
 8001b3c:	4c08      	ldr	r4, [pc, #32]	; (8001b60 <__aeabi_d2iz+0x68>)
 8001b3e:	40c5      	lsrs	r5, r0
 8001b40:	46a4      	mov	ip, r4
 8001b42:	4463      	add	r3, ip
 8001b44:	4099      	lsls	r1, r3
 8001b46:	000b      	movs	r3, r1
 8001b48:	432b      	orrs	r3, r5
 8001b4a:	e7f2      	b.n	8001b32 <__aeabi_d2iz+0x3a>
 8001b4c:	000003fe 	.word	0x000003fe
 8001b50:	0000041d 	.word	0x0000041d
 8001b54:	7fffffff 	.word	0x7fffffff
 8001b58:	00000433 	.word	0x00000433
 8001b5c:	00000413 	.word	0x00000413
 8001b60:	fffffbed 	.word	0xfffffbed

08001b64 <__aeabi_i2d>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d016      	beq.n	8001b98 <__aeabi_i2d+0x34>
 8001b6a:	17c3      	asrs	r3, r0, #31
 8001b6c:	18c5      	adds	r5, r0, r3
 8001b6e:	405d      	eors	r5, r3
 8001b70:	0fc4      	lsrs	r4, r0, #31
 8001b72:	0028      	movs	r0, r5
 8001b74:	f000 f88a 	bl	8001c8c <__clzsi2>
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <__aeabi_i2d+0x5c>)
 8001b7a:	1a12      	subs	r2, r2, r0
 8001b7c:	280a      	cmp	r0, #10
 8001b7e:	dc16      	bgt.n	8001bae <__aeabi_i2d+0x4a>
 8001b80:	0003      	movs	r3, r0
 8001b82:	002e      	movs	r6, r5
 8001b84:	3315      	adds	r3, #21
 8001b86:	409e      	lsls	r6, r3
 8001b88:	230b      	movs	r3, #11
 8001b8a:	1a18      	subs	r0, r3, r0
 8001b8c:	40c5      	lsrs	r5, r0
 8001b8e:	0553      	lsls	r3, r2, #21
 8001b90:	032d      	lsls	r5, r5, #12
 8001b92:	0b2d      	lsrs	r5, r5, #12
 8001b94:	0d5b      	lsrs	r3, r3, #21
 8001b96:	e003      	b.n	8001ba0 <__aeabi_i2d+0x3c>
 8001b98:	2400      	movs	r4, #0
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	051b      	lsls	r3, r3, #20
 8001ba2:	432b      	orrs	r3, r5
 8001ba4:	07e4      	lsls	r4, r4, #31
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	0030      	movs	r0, r6
 8001baa:	0019      	movs	r1, r3
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	380b      	subs	r0, #11
 8001bb0:	4085      	lsls	r5, r0
 8001bb2:	0553      	lsls	r3, r2, #21
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	0b2d      	lsrs	r5, r5, #12
 8001bba:	0d5b      	lsrs	r3, r3, #21
 8001bbc:	e7f0      	b.n	8001ba0 <__aeabi_i2d+0x3c>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	0000041e 	.word	0x0000041e

08001bc4 <__aeabi_ui2d>:
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	1e04      	subs	r4, r0, #0
 8001bc8:	d010      	beq.n	8001bec <__aeabi_ui2d+0x28>
 8001bca:	f000 f85f 	bl	8001c8c <__clzsi2>
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <__aeabi_ui2d+0x48>)
 8001bd0:	1a1b      	subs	r3, r3, r0
 8001bd2:	280a      	cmp	r0, #10
 8001bd4:	dc11      	bgt.n	8001bfa <__aeabi_ui2d+0x36>
 8001bd6:	220b      	movs	r2, #11
 8001bd8:	0021      	movs	r1, r4
 8001bda:	1a12      	subs	r2, r2, r0
 8001bdc:	40d1      	lsrs	r1, r2
 8001bde:	3015      	adds	r0, #21
 8001be0:	030a      	lsls	r2, r1, #12
 8001be2:	055b      	lsls	r3, r3, #21
 8001be4:	4084      	lsls	r4, r0
 8001be6:	0b12      	lsrs	r2, r2, #12
 8001be8:	0d5b      	lsrs	r3, r3, #21
 8001bea:	e001      	b.n	8001bf0 <__aeabi_ui2d+0x2c>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	051b      	lsls	r3, r3, #20
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	0020      	movs	r0, r4
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	0022      	movs	r2, r4
 8001bfc:	380b      	subs	r0, #11
 8001bfe:	4082      	lsls	r2, r0
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	0312      	lsls	r2, r2, #12
 8001c04:	2400      	movs	r4, #0
 8001c06:	0b12      	lsrs	r2, r2, #12
 8001c08:	0d5b      	lsrs	r3, r3, #21
 8001c0a:	e7f1      	b.n	8001bf0 <__aeabi_ui2d+0x2c>
 8001c0c:	0000041e 	.word	0x0000041e

08001c10 <__aeabi_cdrcmple>:
 8001c10:	4684      	mov	ip, r0
 8001c12:	1c10      	adds	r0, r2, #0
 8001c14:	4662      	mov	r2, ip
 8001c16:	468c      	mov	ip, r1
 8001c18:	1c19      	adds	r1, r3, #0
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	e000      	b.n	8001c20 <__aeabi_cdcmpeq>
 8001c1e:	46c0      	nop			; (mov r8, r8)

08001c20 <__aeabi_cdcmpeq>:
 8001c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c22:	f000 f8ff 	bl	8001e24 <__ledf2>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d401      	bmi.n	8001c2e <__aeabi_cdcmpeq+0xe>
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	42c8      	cmn	r0, r1
 8001c2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c30 <__aeabi_dcmpeq>:
 8001c30:	b510      	push	{r4, lr}
 8001c32:	f000 f849 	bl	8001cc8 <__eqdf2>
 8001c36:	4240      	negs	r0, r0
 8001c38:	3001      	adds	r0, #1
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <__aeabi_dcmplt>:
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	f000 f8f1 	bl	8001e24 <__ledf2>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	db01      	blt.n	8001c4a <__aeabi_dcmplt+0xe>
 8001c46:	2000      	movs	r0, #0
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	bd10      	pop	{r4, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)

08001c50 <__aeabi_dcmple>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	f000 f8e7 	bl	8001e24 <__ledf2>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	dd01      	ble.n	8001c5e <__aeabi_dcmple+0xe>
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	2001      	movs	r0, #1
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)

08001c64 <__aeabi_dcmpgt>:
 8001c64:	b510      	push	{r4, lr}
 8001c66:	f000 f86b 	bl	8001d40 <__gedf2>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	dc01      	bgt.n	8001c72 <__aeabi_dcmpgt+0xe>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	2001      	movs	r0, #1
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)

08001c78 <__aeabi_dcmpge>:
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	f000 f861 	bl	8001d40 <__gedf2>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	da01      	bge.n	8001c86 <__aeabi_dcmpge+0xe>
 8001c82:	2000      	movs	r0, #0
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	2001      	movs	r0, #1
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)

08001c8c <__clzsi2>:
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	2301      	movs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	4298      	cmp	r0, r3
 8001c94:	d301      	bcc.n	8001c9a <__clzsi2+0xe>
 8001c96:	0c00      	lsrs	r0, r0, #16
 8001c98:	3910      	subs	r1, #16
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	4298      	cmp	r0, r3
 8001c9e:	d301      	bcc.n	8001ca4 <__clzsi2+0x18>
 8001ca0:	0a00      	lsrs	r0, r0, #8
 8001ca2:	3908      	subs	r1, #8
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d301      	bcc.n	8001cae <__clzsi2+0x22>
 8001caa:	0900      	lsrs	r0, r0, #4
 8001cac:	3904      	subs	r1, #4
 8001cae:	a202      	add	r2, pc, #8	; (adr r2, 8001cb8 <__clzsi2+0x2c>)
 8001cb0:	5c10      	ldrb	r0, [r2, r0]
 8001cb2:	1840      	adds	r0, r0, r1
 8001cb4:	4770      	bx	lr
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	02020304 	.word	0x02020304
 8001cbc:	01010101 	.word	0x01010101
	...

08001cc8 <__eqdf2>:
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	464f      	mov	r7, r9
 8001ccc:	4646      	mov	r6, r8
 8001cce:	46d6      	mov	lr, sl
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	031a      	lsls	r2, r3, #12
 8001cd6:	0b12      	lsrs	r2, r2, #12
 8001cd8:	4d18      	ldr	r5, [pc, #96]	; (8001d3c <__eqdf2+0x74>)
 8001cda:	b5c0      	push	{r6, r7, lr}
 8001cdc:	004c      	lsls	r4, r1, #1
 8001cde:	030f      	lsls	r7, r1, #12
 8001ce0:	4692      	mov	sl, r2
 8001ce2:	005a      	lsls	r2, r3, #1
 8001ce4:	0006      	movs	r6, r0
 8001ce6:	4680      	mov	r8, r0
 8001ce8:	0b3f      	lsrs	r7, r7, #12
 8001cea:	2001      	movs	r0, #1
 8001cec:	0d64      	lsrs	r4, r4, #21
 8001cee:	0fc9      	lsrs	r1, r1, #31
 8001cf0:	0d52      	lsrs	r2, r2, #21
 8001cf2:	0fdb      	lsrs	r3, r3, #31
 8001cf4:	42ac      	cmp	r4, r5
 8001cf6:	d00a      	beq.n	8001d0e <__eqdf2+0x46>
 8001cf8:	42aa      	cmp	r2, r5
 8001cfa:	d003      	beq.n	8001d04 <__eqdf2+0x3c>
 8001cfc:	4294      	cmp	r4, r2
 8001cfe:	d101      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d00:	4557      	cmp	r7, sl
 8001d02:	d00d      	beq.n	8001d20 <__eqdf2+0x58>
 8001d04:	bce0      	pop	{r5, r6, r7}
 8001d06:	46ba      	mov	sl, r7
 8001d08:	46b1      	mov	r9, r6
 8001d0a:	46a8      	mov	r8, r5
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	003d      	movs	r5, r7
 8001d10:	4335      	orrs	r5, r6
 8001d12:	d1f7      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d14:	42a2      	cmp	r2, r4
 8001d16:	d1f5      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d18:	4652      	mov	r2, sl
 8001d1a:	4665      	mov	r5, ip
 8001d1c:	432a      	orrs	r2, r5
 8001d1e:	d1f1      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d20:	2001      	movs	r0, #1
 8001d22:	45c8      	cmp	r8, r9
 8001d24:	d1ee      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d26:	4299      	cmp	r1, r3
 8001d28:	d006      	beq.n	8001d38 <__eqdf2+0x70>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d1ea      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d2e:	433e      	orrs	r6, r7
 8001d30:	0030      	movs	r0, r6
 8001d32:	1e46      	subs	r6, r0, #1
 8001d34:	41b0      	sbcs	r0, r6
 8001d36:	e7e5      	b.n	8001d04 <__eqdf2+0x3c>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e7e3      	b.n	8001d04 <__eqdf2+0x3c>
 8001d3c:	000007ff 	.word	0x000007ff

08001d40 <__gedf2>:
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	464e      	mov	r6, r9
 8001d44:	4645      	mov	r5, r8
 8001d46:	4657      	mov	r7, sl
 8001d48:	46de      	mov	lr, fp
 8001d4a:	0004      	movs	r4, r0
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	b5e0      	push	{r5, r6, r7, lr}
 8001d50:	0016      	movs	r6, r2
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	0b1b      	lsrs	r3, r3, #12
 8001d56:	4d32      	ldr	r5, [pc, #200]	; (8001e20 <__gedf2+0xe0>)
 8001d58:	030f      	lsls	r7, r1, #12
 8001d5a:	004a      	lsls	r2, r1, #1
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	0043      	lsls	r3, r0, #1
 8001d60:	46a4      	mov	ip, r4
 8001d62:	46b0      	mov	r8, r6
 8001d64:	0b3f      	lsrs	r7, r7, #12
 8001d66:	0d52      	lsrs	r2, r2, #21
 8001d68:	0fc9      	lsrs	r1, r1, #31
 8001d6a:	0d5b      	lsrs	r3, r3, #21
 8001d6c:	0fc0      	lsrs	r0, r0, #31
 8001d6e:	42aa      	cmp	r2, r5
 8001d70:	d029      	beq.n	8001dc6 <__gedf2+0x86>
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	d018      	beq.n	8001da8 <__gedf2+0x68>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d12a      	bne.n	8001dd0 <__gedf2+0x90>
 8001d7a:	433c      	orrs	r4, r7
 8001d7c:	46a3      	mov	fp, r4
 8001d7e:	4265      	negs	r5, r4
 8001d80:	4165      	adcs	r5, r4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <__gedf2+0x4c>
 8001d86:	464c      	mov	r4, r9
 8001d88:	4326      	orrs	r6, r4
 8001d8a:	d027      	beq.n	8001ddc <__gedf2+0x9c>
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d115      	bne.n	8001dbc <__gedf2+0x7c>
 8001d90:	4281      	cmp	r1, r0
 8001d92:	d028      	beq.n	8001de6 <__gedf2+0xa6>
 8001d94:	2002      	movs	r0, #2
 8001d96:	3901      	subs	r1, #1
 8001d98:	4008      	ands	r0, r1
 8001d9a:	3801      	subs	r0, #1
 8001d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d9e:	46bb      	mov	fp, r7
 8001da0:	46b2      	mov	sl, r6
 8001da2:	46a9      	mov	r9, r5
 8001da4:	46a0      	mov	r8, r4
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	464d      	mov	r5, r9
 8001daa:	432e      	orrs	r6, r5
 8001dac:	d12f      	bne.n	8001e0e <__gedf2+0xce>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d1ee      	bne.n	8001d90 <__gedf2+0x50>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	4265      	negs	r5, r4
 8001db6:	4165      	adcs	r5, r4
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	d0e9      	beq.n	8001d90 <__gedf2+0x50>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d1ed      	bne.n	8001d9c <__gedf2+0x5c>
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4240      	negs	r0, r0
 8001dc4:	e7ea      	b.n	8001d9c <__gedf2+0x5c>
 8001dc6:	003d      	movs	r5, r7
 8001dc8:	4325      	orrs	r5, r4
 8001dca:	d120      	bne.n	8001e0e <__gedf2+0xce>
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d0eb      	beq.n	8001da8 <__gedf2+0x68>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1dd      	bne.n	8001d90 <__gedf2+0x50>
 8001dd4:	464c      	mov	r4, r9
 8001dd6:	4326      	orrs	r6, r4
 8001dd8:	d1da      	bne.n	8001d90 <__gedf2+0x50>
 8001dda:	e7db      	b.n	8001d94 <__gedf2+0x54>
 8001ddc:	465b      	mov	r3, fp
 8001dde:	2000      	movs	r0, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0db      	beq.n	8001d9c <__gedf2+0x5c>
 8001de4:	e7d6      	b.n	8001d94 <__gedf2+0x54>
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dc0a      	bgt.n	8001e00 <__gedf2+0xc0>
 8001dea:	dbe7      	blt.n	8001dbc <__gedf2+0x7c>
 8001dec:	454f      	cmp	r7, r9
 8001dee:	d8d1      	bhi.n	8001d94 <__gedf2+0x54>
 8001df0:	d010      	beq.n	8001e14 <__gedf2+0xd4>
 8001df2:	2000      	movs	r0, #0
 8001df4:	454f      	cmp	r7, r9
 8001df6:	d2d1      	bcs.n	8001d9c <__gedf2+0x5c>
 8001df8:	2900      	cmp	r1, #0
 8001dfa:	d0e1      	beq.n	8001dc0 <__gedf2+0x80>
 8001dfc:	0008      	movs	r0, r1
 8001dfe:	e7cd      	b.n	8001d9c <__gedf2+0x5c>
 8001e00:	4243      	negs	r3, r0
 8001e02:	4158      	adcs	r0, r3
 8001e04:	2302      	movs	r3, #2
 8001e06:	4240      	negs	r0, r0
 8001e08:	4018      	ands	r0, r3
 8001e0a:	3801      	subs	r0, #1
 8001e0c:	e7c6      	b.n	8001d9c <__gedf2+0x5c>
 8001e0e:	2002      	movs	r0, #2
 8001e10:	4240      	negs	r0, r0
 8001e12:	e7c3      	b.n	8001d9c <__gedf2+0x5c>
 8001e14:	45c4      	cmp	ip, r8
 8001e16:	d8bd      	bhi.n	8001d94 <__gedf2+0x54>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	45c4      	cmp	ip, r8
 8001e1c:	d2be      	bcs.n	8001d9c <__gedf2+0x5c>
 8001e1e:	e7eb      	b.n	8001df8 <__gedf2+0xb8>
 8001e20:	000007ff 	.word	0x000007ff

08001e24 <__ledf2>:
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	464e      	mov	r6, r9
 8001e28:	4645      	mov	r5, r8
 8001e2a:	4657      	mov	r7, sl
 8001e2c:	46de      	mov	lr, fp
 8001e2e:	0004      	movs	r4, r0
 8001e30:	0018      	movs	r0, r3
 8001e32:	b5e0      	push	{r5, r6, r7, lr}
 8001e34:	0016      	movs	r6, r2
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	0b1b      	lsrs	r3, r3, #12
 8001e3a:	4d31      	ldr	r5, [pc, #196]	; (8001f00 <__ledf2+0xdc>)
 8001e3c:	030f      	lsls	r7, r1, #12
 8001e3e:	004a      	lsls	r2, r1, #1
 8001e40:	4699      	mov	r9, r3
 8001e42:	0043      	lsls	r3, r0, #1
 8001e44:	46a4      	mov	ip, r4
 8001e46:	46b0      	mov	r8, r6
 8001e48:	0b3f      	lsrs	r7, r7, #12
 8001e4a:	0d52      	lsrs	r2, r2, #21
 8001e4c:	0fc9      	lsrs	r1, r1, #31
 8001e4e:	0d5b      	lsrs	r3, r3, #21
 8001e50:	0fc0      	lsrs	r0, r0, #31
 8001e52:	42aa      	cmp	r2, r5
 8001e54:	d011      	beq.n	8001e7a <__ledf2+0x56>
 8001e56:	42ab      	cmp	r3, r5
 8001e58:	d014      	beq.n	8001e84 <__ledf2+0x60>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d12f      	bne.n	8001ebe <__ledf2+0x9a>
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	46a3      	mov	fp, r4
 8001e62:	4265      	negs	r5, r4
 8001e64:	4165      	adcs	r5, r4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d114      	bne.n	8001e94 <__ledf2+0x70>
 8001e6a:	464c      	mov	r4, r9
 8001e6c:	4326      	orrs	r6, r4
 8001e6e:	d111      	bne.n	8001e94 <__ledf2+0x70>
 8001e70:	465b      	mov	r3, fp
 8001e72:	2000      	movs	r0, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <__ledf2+0x84>
 8001e78:	e010      	b.n	8001e9c <__ledf2+0x78>
 8001e7a:	003d      	movs	r5, r7
 8001e7c:	4325      	orrs	r5, r4
 8001e7e:	d112      	bne.n	8001ea6 <__ledf2+0x82>
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d11c      	bne.n	8001ebe <__ledf2+0x9a>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10d      	bne.n	8001ea6 <__ledf2+0x82>
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d104      	bne.n	8001e98 <__ledf2+0x74>
 8001e8e:	433c      	orrs	r4, r7
 8001e90:	4265      	negs	r5, r4
 8001e92:	4165      	adcs	r5, r4
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d10d      	bne.n	8001eb4 <__ledf2+0x90>
 8001e98:	4281      	cmp	r1, r0
 8001e9a:	d016      	beq.n	8001eca <__ledf2+0xa6>
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	3901      	subs	r1, #1
 8001ea0:	4008      	ands	r0, r1
 8001ea2:	3801      	subs	r0, #1
 8001ea4:	e000      	b.n	8001ea8 <__ledf2+0x84>
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eaa:	46bb      	mov	fp, r7
 8001eac:	46b2      	mov	sl, r6
 8001eae:	46a9      	mov	r9, r5
 8001eb0:	46a0      	mov	r8, r4
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1f7      	bne.n	8001ea8 <__ledf2+0x84>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	4240      	negs	r0, r0
 8001ebc:	e7f4      	b.n	8001ea8 <__ledf2+0x84>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ea      	bne.n	8001e98 <__ledf2+0x74>
 8001ec2:	464c      	mov	r4, r9
 8001ec4:	4326      	orrs	r6, r4
 8001ec6:	d1e7      	bne.n	8001e98 <__ledf2+0x74>
 8001ec8:	e7e8      	b.n	8001e9c <__ledf2+0x78>
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dd06      	ble.n	8001edc <__ledf2+0xb8>
 8001ece:	4243      	negs	r3, r0
 8001ed0:	4158      	adcs	r0, r3
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4018      	ands	r0, r3
 8001ed8:	3801      	subs	r0, #1
 8001eda:	e7e5      	b.n	8001ea8 <__ledf2+0x84>
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbe9      	blt.n	8001eb4 <__ledf2+0x90>
 8001ee0:	454f      	cmp	r7, r9
 8001ee2:	d8db      	bhi.n	8001e9c <__ledf2+0x78>
 8001ee4:	d006      	beq.n	8001ef4 <__ledf2+0xd0>
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	d2dd      	bcs.n	8001ea8 <__ledf2+0x84>
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d0e3      	beq.n	8001eb8 <__ledf2+0x94>
 8001ef0:	0008      	movs	r0, r1
 8001ef2:	e7d9      	b.n	8001ea8 <__ledf2+0x84>
 8001ef4:	45c4      	cmp	ip, r8
 8001ef6:	d8d1      	bhi.n	8001e9c <__ledf2+0x78>
 8001ef8:	2000      	movs	r0, #0
 8001efa:	45c4      	cmp	ip, r8
 8001efc:	d2d4      	bcs.n	8001ea8 <__ledf2+0x84>
 8001efe:	e7f5      	b.n	8001eec <__ledf2+0xc8>
 8001f00:	000007ff 	.word	0x000007ff

08001f04 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc.Instance = ADC1;
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <MX_ADC_Init+0xb0>)
 8001f0e:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f48:	22c2      	movs	r2, #194	; 0xc2
 8001f4a:	32ff      	adds	r2, #255	; 0xff
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 fd6c 	bl	8002a40 <HAL_ADC_Init>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d004      	beq.n	8001f76 <MX_ADC_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_ADC_Init+0xb4>)
 8001f6e:	214a      	movs	r1, #74	; 0x4a
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fa03 	bl	800237c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted.
    */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2209      	movs	r2, #9
 8001f7a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	0152      	lsls	r2, r2, #5
 8001f82:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	0552      	lsls	r2, r2, #21
 8001f8a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f8c:	1d3a      	adds	r2, r7, #4
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_ADC_Init+0xac>)
 8001f90:	0011      	movs	r1, r2
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 ff60 	bl	8002e58 <HAL_ADC_ConfigChannel>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d004      	beq.n	8001fa6 <MX_ADC_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_ADC_Init+0xb4>)
 8001f9e:	2154      	movs	r1, #84	; 0x54
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f9eb 	bl	800237c <_Error_Handler>
  }

}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000020 	.word	0x20000020
 8001fb4:	40012400 	.word	0x40012400
 8001fb8:	08005a3c 	.word	0x08005a3c

08001fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_ADC_MspInit+0x68>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d125      	bne.n	800201a <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_ADC_MspInit+0x6c>)
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_ADC_MspInit+0x6c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0089      	lsls	r1, r1, #2
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_ADC_MspInit+0x6c>)
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]

    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = ADC_INPUT_Pin;
 8001fea:	210c      	movs	r1, #12
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_ADC_MspInit+0x70>)
 8002002:	0019      	movs	r1, r3
 8002004:	0010      	movs	r0, r2
 8002006:	f001 f91d 	bl	8003244 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	200c      	movs	r0, #12
 8002010:	f001 f8c0 	bl	8003194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002014:	200c      	movs	r0, #12
 8002016:	f001 f8d2 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b008      	add	sp, #32
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40012400 	.word	0x40012400
 8002028:	40021000 	.word	0x40021000
 800202c:	48000400 	.word	0x48000400

08002030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <MX_GPIO_Init+0xec>)
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <MX_GPIO_Init+0xec>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0309      	lsls	r1, r1, #12
 8002040:	430a      	orrs	r2, r1
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <MX_GPIO_Init+0xec>)
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	031b      	lsls	r3, r3, #12
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <MX_GPIO_Init+0xec>)
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <MX_GPIO_Init+0xec>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	03c9      	lsls	r1, r1, #15
 800205c:	430a      	orrs	r2, r1
 800205e:	615a      	str	r2, [r3, #20]
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <MX_GPIO_Init+0xec>)
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	03db      	lsls	r3, r3, #15
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <MX_GPIO_Init+0xec>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_GPIO_Init+0xec>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0289      	lsls	r1, r1, #10
 8002078:	430a      	orrs	r2, r1
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_GPIO_Init+0xec>)
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_GPIO_Init+0xec>)
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_GPIO_Init+0xec>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	02c9      	lsls	r1, r1, #11
 8002094:	430a      	orrs	r2, r1
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <MX_GPIO_Init+0xec>)
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	02db      	lsls	r3, r3, #11
 80020a0:	4013      	ands	r3, r2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 80020a6:	23e0      	movs	r3, #224	; 0xe0
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	481d      	ldr	r0, [pc, #116]	; (8002120 <MX_GPIO_Init+0xf0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	0019      	movs	r1, r3
 80020b0:	f001 fa3c 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	481a      	ldr	r0, [pc, #104]	; (8002124 <MX_GPIO_Init+0xf4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	0019      	movs	r1, r3
 80020be:	f001 fa35 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED3_Pin;
 80020c2:	2114      	movs	r1, #20
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	22e0      	movs	r2, #224	; 0xe0
 80020c8:	0152      	lsls	r2, r2, #5
 80020ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	000c      	movs	r4, r1
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	2201      	movs	r2, #1
 80020d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	193b      	adds	r3, r7, r4
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <MX_GPIO_Init+0xf0>)
 80020e4:	0019      	movs	r1, r3
 80020e6:	0010      	movs	r0, r2
 80020e8:	f001 f8ac 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ec:	0021      	movs	r1, r4
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2201      	movs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	187b      	adds	r3, r7, r1
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	187b      	adds	r3, r7, r1
 800210a:	4a06      	ldr	r2, [pc, #24]	; (8002124 <MX_GPIO_Init+0xf4>)
 800210c:	0019      	movs	r1, r3
 800210e:	0010      	movs	r0, r2
 8002110:	f001 f898 	bl	8003244 <HAL_GPIO_Init>

}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b00b      	add	sp, #44	; 0x2c
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	48000800 	.word	0x48000800
 8002124:	48000400 	.word	0x48000400

08002128 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b08d      	sub	sp, #52	; 0x34
 800212c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212e:	f000 fc23 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002132:	f000 f8b3 	bl	800229c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002136:	f7ff ff7b 	bl	8002030 <MX_GPIO_Init>
  MX_ADC_Init();
 800213a:	f7ff fee3 	bl	8001f04 <MX_ADC_Init>
  MX_TIM16_Init();
 800213e:	f000 faf5 	bl	800272c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8002142:	f000 fb7d 	bl	8002840 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002146:	f000 f91f 	bl	8002388 <MX_SPI1_Init>
  MX_TIM1_Init();
 800214a:	f000 fa45 	bl	80025d8 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */

  //start pwm
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800214e:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <main+0x160>)
 8002150:	2100      	movs	r1, #0
 8002152:	0018      	movs	r0, r3
 8002154:	f002 fb78 	bl	8004848 <HAL_TIM_PWM_Start>

  //define buffers and variables
  uint8_t spi_recieve_buf[10];
  uint8_t spi_transmit_buf[10];
  uint16_t TRANSMIT_RECIEVE_SIZE = 3;
 8002158:	2326      	movs	r3, #38	; 0x26
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2203      	movs	r2, #3
 800215e:	801a      	strh	r2, [r3, #0]
  uint16_t adc_val = 0x0000;
 8002160:	2324      	movs	r3, #36	; 0x24
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]

  uint16_t MAX_ADC_VAL = 4095;
 8002168:	2322      	movs	r3, #34	; 0x22
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	4a47      	ldr	r2, [pc, #284]	; (800228c <main+0x164>)
 800216e:	801a      	strh	r2, [r3, #0]
  uint16_t MIN_COMPARE_VAL = 3000; // 60000 * 0.05 = 3000... NOTE: 60000 is the period AND 3000 is also the difference between the max and min compare val: 6000 - 3000 = 3000
 8002170:	2320      	movs	r3, #32
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	4a46      	ldr	r2, [pc, #280]	; (8002290 <main+0x168>)
 8002176:	801a      	strh	r2, [r3, #0]

  double compare_val = 0.0;
 8002178:	2200      	movs	r2, #0
 800217a:	2300      	movs	r3, #0
 800217c:	61ba      	str	r2, [r7, #24]
 800217e:	61fb      	str	r3, [r7, #28]

  //populate transmit buffer with start and config bits
  spi_transmit_buf[0] = 0x01; //start bit
 8002180:	003b      	movs	r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
  spi_transmit_buf[1] = 0x80; //config bit for single mode, CH0
 8002186:	003b      	movs	r3, r7
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	705a      	strb	r2, [r3, #1]
  spi_transmit_buf[2] = 0x00; //these are don't care bits, just filling them in bec we are sending and recieving a total of 3 bytes
 800218c:	003b      	movs	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	709a      	strb	r2, [r3, #2]

  //ensure the CS line starts high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	483f      	ldr	r0, [pc, #252]	; (8002294 <main+0x16c>)
 8002198:	2201      	movs	r2, #1
 800219a:	0019      	movs	r1, r3
 800219c:	f001 f9c6 	bl	800352c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //CS low
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	483b      	ldr	r0, [pc, #236]	; (8002294 <main+0x16c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	0019      	movs	r1, r3
 80021aa:	f001 f9bf 	bl	800352c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &spi_transmit_buf, &spi_recieve_buf, TRANSMIT_RECIEVE_SIZE, 1000); //sending the start and config bits as well as receiving the conversion
 80021ae:	2326      	movs	r3, #38	; 0x26
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	881c      	ldrh	r4, [r3, #0]
 80021b4:	250c      	movs	r5, #12
 80021b6:	197a      	adds	r2, r7, r5
 80021b8:	0039      	movs	r1, r7
 80021ba:	4837      	ldr	r0, [pc, #220]	; (8002298 <main+0x170>)
 80021bc:	23fa      	movs	r3, #250	; 0xfa
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	0023      	movs	r3, r4
 80021c4:	f001 ff9c 	bl	8004100 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //CS back to high
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4831      	ldr	r0, [pc, #196]	; (8002294 <main+0x16c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	0019      	movs	r1, r3
 80021d2:	f001 f9ab 	bl	800352c <HAL_GPIO_WritePin>
	  	the data in the buffer should look like this:
	   	x x x x x x x x, x x x x x 0 B9 B8, B7 B6 B5 B4 B3 B2 B1 B0
	  	Index 0				 Index 1				Index 2
	  */

	  adc_val = ((uint16_t) (spi_recieve_buf[1] << 8)) | (uint16_t) spi_recieve_buf[2]; //extracting the 10 bit adc value
 80021d6:	0028      	movs	r0, r5
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b299      	uxth	r1, r3
 80021e2:	183b      	adds	r3, r7, r0
 80021e4:	789b      	ldrb	r3, [r3, #2]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	2424      	movs	r4, #36	; 0x24
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	430a      	orrs	r2, r1
 80021ee:	801a      	strh	r2, [r3, #0]

	  // clear the receive buffer, not sure if this is necessary
	  spi_recieve_buf[0] = 0x00;
 80021f0:	183b      	adds	r3, r7, r0
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
	  spi_recieve_buf[1] = 0x00;
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	2200      	movs	r2, #0
 80021fa:	705a      	strb	r2, [r3, #1]
	  spi_recieve_buf[2] = 0x00;
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	2200      	movs	r2, #0
 8002200:	709a      	strb	r2, [r3, #2]

	  compare_val = ((double)adc_val / MAX_ADC_VAL) * MIN_COMPARE_VAL + MIN_COMPARE_VAL; //should be some value between 3000 and 6000
 8002202:	193b      	adds	r3, r7, r4
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff fcdc 	bl	8001bc4 <__aeabi_ui2d>
 800220c:	0004      	movs	r4, r0
 800220e:	000d      	movs	r5, r1
 8002210:	2322      	movs	r3, #34	; 0x22
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff fca4 	bl	8001b64 <__aeabi_i2d>
 800221c:	0002      	movs	r2, r0
 800221e:	000b      	movs	r3, r1
 8002220:	0020      	movs	r0, r4
 8002222:	0029      	movs	r1, r5
 8002224:	f7fe fb82 	bl	800092c <__aeabi_ddiv>
 8002228:	0002      	movs	r2, r0
 800222a:	000b      	movs	r3, r1
 800222c:	0014      	movs	r4, r2
 800222e:	001d      	movs	r5, r3
 8002230:	2620      	movs	r6, #32
 8002232:	19bb      	adds	r3, r7, r6
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff fc94 	bl	8001b64 <__aeabi_i2d>
 800223c:	0002      	movs	r2, r0
 800223e:	000b      	movs	r3, r1
 8002240:	0020      	movs	r0, r4
 8002242:	0029      	movs	r1, r5
 8002244:	f7fe fe5a 	bl	8000efc <__aeabi_dmul>
 8002248:	0002      	movs	r2, r0
 800224a:	000b      	movs	r3, r1
 800224c:	0014      	movs	r4, r2
 800224e:	001d      	movs	r5, r3
 8002250:	19bb      	adds	r3, r7, r6
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fc85 	bl	8001b64 <__aeabi_i2d>
 800225a:	0002      	movs	r2, r0
 800225c:	000b      	movs	r3, r1
 800225e:	0020      	movs	r0, r4
 8002260:	0029      	movs	r1, r5
 8002262:	f7fd fff9 	bl	8000258 <__aeabi_dadd>
 8002266:	0002      	movs	r2, r0
 8002268:	000b      	movs	r3, r1
 800226a:	61ba      	str	r2, [r7, #24]
 800226c:	61fb      	str	r3, [r7, #28]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_val); //set the compare register
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <main+0x160>)
 8002270:	681c      	ldr	r4, [r3, #0]
 8002272:	69b8      	ldr	r0, [r7, #24]
 8002274:	69f9      	ldr	r1, [r7, #28]
 8002276:	f7fd ffd1 	bl	800021c <__aeabi_d2uiz>
 800227a:	0003      	movs	r3, r0
 800227c:	6363      	str	r3, [r4, #52]	; 0x34

	  HAL_Delay(10);
 800227e:	200a      	movs	r0, #10
 8002280:	f000 fbc0 	bl	8002a04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //CS low
 8002284:	e78c      	b.n	80021a0 <main+0x78>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	200000d0 	.word	0x200000d0
 800228c:	00000fff 	.word	0x00000fff
 8002290:	00000bb8 	.word	0x00000bb8
 8002294:	48000400 	.word	0x48000400
 8002298:	2000006c 	.word	0x2000006c

0800229c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	; 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80022a2:	2120      	movs	r1, #32
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2211      	movs	r2, #17
 80022a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	2201      	movs	r2, #1
 80022ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	2201      	movs	r2, #1
 80022b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	2210      	movs	r2, #16
 80022ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2202      	movs	r2, #2
 80022c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0252      	lsls	r2, r2, #9
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0352      	lsls	r2, r2, #13
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2200      	movs	r2, #0
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	0018      	movs	r0, r3
 80022dc:	f001 f944 	bl	8003568 <HAL_RCC_OscConfig>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d004      	beq.n	80022ee <SystemClock_Config+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <SystemClock_Config+0xdc>)
 80022e6:	21b8      	movs	r1, #184	; 0xb8
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f847 	bl	800237c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ee:	2110      	movs	r1, #16
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2207      	movs	r2, #7
 80022f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2202      	movs	r2, #2
 80022fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002302:	187b      	adds	r3, r7, r1
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002308:	187b      	adds	r3, r7, r1
 800230a:	2101      	movs	r1, #1
 800230c:	0018      	movs	r0, r3
 800230e:	f001 fc21 	bl	8003b54 <HAL_RCC_ClockConfig>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d004      	beq.n	8002320 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <SystemClock_Config+0xdc>)
 8002318:	21c5      	movs	r1, #197	; 0xc5
 800231a:	0018      	movs	r0, r3
 800231c:	f000 f82e 	bl	800237c <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002320:	003b      	movs	r3, r7
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002326:	003b      	movs	r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232c:	003b      	movs	r3, r7
 800232e:	0018      	movs	r0, r3
 8002330:	f001 fd7e 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d004      	beq.n	8002342 <SystemClock_Config+0xa6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <SystemClock_Config+0xdc>)
 800233a:	21cc      	movs	r1, #204	; 0xcc
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f81d 	bl	800237c <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002342:	f001 fd55 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8002346:	0002      	movs	r2, r0
 8002348:	23fa      	movs	r3, #250	; 0xfa
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	0010      	movs	r0, r2
 800234e:	f7fd fed9 	bl	8000104 <__udivsi3>
 8002352:	0003      	movs	r3, r0
 8002354:	0018      	movs	r0, r3
 8002356:	f000 ff42 	bl	80031de <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800235a:	2004      	movs	r0, #4
 800235c:	f000 ff4c 	bl	80031f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002360:	2301      	movs	r3, #1
 8002362:	425b      	negs	r3, r3
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	0018      	movs	r0, r3
 800236a:	f000 ff13 	bl	8003194 <HAL_NVIC_SetPriority>
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b014      	add	sp, #80	; 0x50
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	08005a50 	.word	0x08005a50

0800237c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002386:	e7fe      	b.n	8002386 <_Error_Handler+0xa>

08002388 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_SPI1_Init+0x7c>)
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <MX_SPI1_Init+0x80>)
 8002390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_SPI1_Init+0x7c>)
 8002394:	2282      	movs	r2, #130	; 0x82
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_SPI1_Init+0x7c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023a2:	22e0      	movs	r2, #224	; 0xe0
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023be:	2218      	movs	r2, #24
 80023c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023d6:	2207      	movs	r2, #7
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023e2:	2208      	movs	r2, #8
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <MX_SPI1_Init+0x7c>)
 80023e8:	0018      	movs	r0, r3
 80023ea:	f001 fdef 	bl	8003fcc <HAL_SPI_Init>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d004      	beq.n	80023fc <MX_SPI1_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_SPI1_Init+0x84>)
 80023f4:	2147      	movs	r1, #71	; 0x47
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff ffc0 	bl	800237c <_Error_Handler>
  }

}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	2000006c 	.word	0x2000006c
 8002408:	40013000 	.word	0x40013000
 800240c:	08005a64 	.word	0x08005a64

08002410 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d13a      	bne.n	8002498 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_SPI_MspInit+0x94>)
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_SPI_MspInit+0x94>)
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0149      	lsls	r1, r1, #5
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_SPI_MspInit+0x94>)
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	015b      	lsls	r3, r3, #5
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243e:	240c      	movs	r4, #12
 8002440:	193b      	adds	r3, r7, r4
 8002442:	22c0      	movs	r2, #192	; 0xc0
 8002444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	193b      	adds	r3, r7, r4
 8002448:	2202      	movs	r2, #2
 800244a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2203      	movs	r2, #3
 8002456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	193a      	adds	r2, r7, r4
 8002460:	2390      	movs	r3, #144	; 0x90
 8002462:	05db      	lsls	r3, r3, #23
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 feec 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800246c:	0021      	movs	r1, r4
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2208      	movs	r2, #8
 8002472:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2202      	movs	r2, #2
 8002478:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2203      	movs	r2, #3
 8002484:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	187b      	adds	r3, r7, r1
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_SPI_MspInit+0x98>)
 8002490:	0019      	movs	r1, r3
 8002492:	0010      	movs	r0, r2
 8002494:	f000 fed6 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b009      	add	sp, #36	; 0x24
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	40013000 	.word	0x40013000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	48000400 	.word	0x48000400

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_MspInit+0x50>)
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_MspInit+0x50>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_MspInit+0x50>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80024ca:	2305      	movs	r3, #5
 80024cc:	425b      	negs	r3, r3
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fe5e 	bl	8003194 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024d8:	2302      	movs	r3, #2
 80024da:	425b      	negs	r3, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fe57 	bl	8003194 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024e6:	2301      	movs	r3, #1
 80024e8:	425b      	negs	r3, r3
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fe50 	bl	8003194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 fa56 	bl	80029d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800252c:	f000 fe7e 	bl	800322c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC interrupt.
*/
void ADC1_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <ADC1_IRQHandler+0x14>)
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fbbc 	bl	8002cbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	20000020 	.word	0x20000020

08002550 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <SystemInit+0x70>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <SystemInit+0x70>)
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <SystemInit+0x70>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <SystemInit+0x70>)
 8002566:	4917      	ldr	r1, [pc, #92]	; (80025c4 <SystemInit+0x74>)
 8002568:	400a      	ands	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <SystemInit+0x70>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <SystemInit+0x70>)
 8002572:	4915      	ldr	r1, [pc, #84]	; (80025c8 <SystemInit+0x78>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <SystemInit+0x70>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <SystemInit+0x70>)
 800257e:	4913      	ldr	r1, [pc, #76]	; (80025cc <SystemInit+0x7c>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <SystemInit+0x70>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <SystemInit+0x70>)
 800258a:	4911      	ldr	r1, [pc, #68]	; (80025d0 <SystemInit+0x80>)
 800258c:	400a      	ands	r2, r1
 800258e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <SystemInit+0x70>)
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <SystemInit+0x70>)
 8002596:	210f      	movs	r1, #15
 8002598:	438a      	bics	r2, r1
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <SystemInit+0x70>)
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <SystemInit+0x70>)
 80025a2:	490c      	ldr	r1, [pc, #48]	; (80025d4 <SystemInit+0x84>)
 80025a4:	400a      	ands	r2, r1
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SystemInit+0x70>)
 80025aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SystemInit+0x70>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	438a      	bics	r2, r1
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <SystemInit+0x70>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]

}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08ffb80c 	.word	0x08ffb80c
 80025c8:	fef6ffff 	.word	0xfef6ffff
 80025cc:	fffbffff 	.word	0xfffbffff
 80025d0:	ffc0ffff 	.word	0xffc0ffff
 80025d4:	fffffeec 	.word	0xfffffeec

080025d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b094      	sub	sp, #80	; 0x50
 80025dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <MX_TIM1_Init+0x144>)
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <MX_TIM1_Init+0x148>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <MX_TIM1_Init+0x144>)
 80025e6:	220f      	movs	r2, #15
 80025e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b4c      	ldr	r3, [pc, #304]	; (800271c <MX_TIM1_Init+0x144>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80025f0:	4b4a      	ldr	r3, [pc, #296]	; (800271c <MX_TIM1_Init+0x144>)
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <MX_TIM1_Init+0x14c>)
 80025f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <MX_TIM1_Init+0x144>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <MX_TIM1_Init+0x144>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002602:	4b46      	ldr	r3, [pc, #280]	; (800271c <MX_TIM1_Init+0x144>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <MX_TIM1_Init+0x144>)
 800260a:	0018      	movs	r0, r3
 800260c:	f002 f8bc 	bl	8004788 <HAL_TIM_Base_Init>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d004      	beq.n	800261e <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <MX_TIM1_Init+0x150>)
 8002616:	2143      	movs	r1, #67	; 0x43
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff feaf 	bl	800237c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0152      	lsls	r2, r2, #5
 8002626:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002628:	187a      	adds	r2, r7, r1
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <MX_TIM1_Init+0x144>)
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f002 fa12 	bl	8004a58 <HAL_TIM_ConfigClockSource>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d004      	beq.n	8002642 <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <MX_TIM1_Init+0x150>)
 800263a:	2149      	movs	r1, #73	; 0x49
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fe9d 	bl	800237c <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <MX_TIM1_Init+0x144>)
 8002644:	0018      	movs	r0, r3
 8002646:	f002 f8cb 	bl	80047e0 <HAL_TIM_PWM_Init>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d004      	beq.n	8002658 <MX_TIM1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <MX_TIM1_Init+0x150>)
 8002650:	214e      	movs	r1, #78	; 0x4e
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff fe92 	bl	800237c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002658:	2138      	movs	r1, #56	; 0x38
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002666:	187a      	adds	r2, r7, r1
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <MX_TIM1_Init+0x144>)
 800266a:	0011      	movs	r1, r2
 800266c:	0018      	movs	r0, r3
 800266e:	f002 fe38 	bl	80052e2 <HAL_TIMEx_MasterConfigSynchronization>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d004      	beq.n	8002680 <MX_TIM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <MX_TIM1_Init+0x150>)
 8002678:	2155      	movs	r1, #85	; 0x55
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff fe7e 	bl	800237c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002680:	211c      	movs	r1, #28
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2260      	movs	r2, #96	; 0x60
 8002686:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ac:	1879      	adds	r1, r7, r1
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <MX_TIM1_Init+0x144>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	0018      	movs	r0, r3
 80026b4:	f002 f90c 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d004      	beq.n	80026c6 <MX_TIM1_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_TIM1_Init+0x150>)
 80026be:	2161      	movs	r1, #97	; 0x61
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff fe5b 	bl	800237c <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026c6:	003b      	movs	r3, r7
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026cc:	003b      	movs	r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026d2:	003b      	movs	r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026d8:	003b      	movs	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026de:	003b      	movs	r3, r7
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026e4:	003b      	movs	r3, r7
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0192      	lsls	r2, r2, #6
 80026ea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ec:	003b      	movs	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026f2:	003a      	movs	r2, r7
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_TIM1_Init+0x144>)
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f002 fe35 	bl	8005368 <HAL_TIMEx_ConfigBreakDeadTime>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d004      	beq.n	800270c <MX_TIM1_Init+0x134>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_TIM1_Init+0x150>)
 8002704:	216d      	movs	r1, #109	; 0x6d
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff fe38 	bl	800237c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <MX_TIM1_Init+0x144>)
 800270e:	0018      	movs	r0, r3
 8002710:	f000 f86e 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b014      	add	sp, #80	; 0x50
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200000d0 	.word	0x200000d0
 8002720:	40012c00 	.word	0x40012c00
 8002724:	0000ea60 	.word	0x0000ea60
 8002728:	08005a78 	.word	0x08005a78

0800272c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_TIM16_Init+0x4c>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <MX_TIM16_Init+0x50>)
 8002734:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_TIM16_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_TIM16_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_TIM16_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_TIM16_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_TIM16_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_TIM16_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_TIM16_Init+0x4c>)
 800275c:	0018      	movs	r0, r3
 800275e:	f002 f813 	bl	8004788 <HAL_TIM_Base_Init>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d004      	beq.n	8002770 <MX_TIM16_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_TIM16_Init+0x54>)
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fe06 	bl	800237c <_Error_Handler>
  }

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000110 	.word	0x20000110
 800277c:	40014400 	.word	0x40014400
 8002780:	08005a78 	.word	0x08005a78

08002784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <HAL_TIM_Base_MspInit+0x60>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0109      	lsls	r1, r1, #4
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80027b2:	e012      	b.n	80027da <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM16)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10d      	bne.n	80027da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0289      	lsls	r1, r1, #10
 80027c8:	430a      	orrs	r2, r1
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40014400 	.word	0x40014400

080027f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_TIM_MspPostInit+0x4c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d117      	bne.n	8002832 <HAL_TIM_MspPostInit+0x42>
  /* USER CODE END TIM1_MspPostInit 0 */

    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002802:	210c      	movs	r1, #12
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2202      	movs	r2, #2
 8002810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2202      	movs	r2, #2
 8002822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	187a      	adds	r2, r7, r1
 8002826:	2390      	movs	r3, #144	; 0x90
 8002828:	05db      	lsls	r3, r3, #23
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fd09 	bl	8003244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b008      	add	sp, #32
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	40012c00 	.word	0x40012c00

08002840 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <MX_USART1_UART_Init+0x6c>)
 8002848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 800284c:	22e1      	movs	r2, #225	; 0xe1
 800284e:	0252      	lsls	r2, r2, #9
 8002850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 800287e:	2208      	movs	r2, #8
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0212      	lsls	r2, r2, #8
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MX_USART1_UART_Init+0x68>)
 800288c:	0018      	movs	r0, r3
 800288e:	f002 fdd9 	bl	8005444 <HAL_UART_Init>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d004      	beq.n	80028a0 <MX_USART1_UART_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_USART1_UART_Init+0x70>)
 8002898:	2145      	movs	r1, #69	; 0x45
 800289a:	0018      	movs	r0, r3
 800289c:	f7ff fd6e 	bl	800237c <_Error_Handler>
  }

}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000150 	.word	0x20000150
 80028ac:	40013800 	.word	0x40013800
 80028b0:	08005a8c 	.word	0x08005a8c

080028b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <HAL_UART_MspInit+0x64>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d123      	bne.n	800290e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0x68>)
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_UART_MspInit+0x68>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	01c9      	lsls	r1, r1, #7
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_UART_MspInit+0x68>)
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	01db      	lsls	r3, r3, #7
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e2:	210c      	movs	r1, #12
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	22c0      	movs	r2, #192	; 0xc0
 80028e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2202      	movs	r2, #2
 80028ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2201      	movs	r2, #1
 80028f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	2203      	movs	r2, #3
 80028fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	187b      	adds	r3, r7, r1
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <HAL_UART_MspInit+0x6c>)
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f000 fc9b 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b008      	add	sp, #32
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40013800 	.word	0x40013800
 800291c:	40021000 	.word	0x40021000
 8002920:	48000400 	.word	0x48000400

08002924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002926:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <LoopForever+0x6>)
  ldr r1, =_edata
 800292a:	490e      	ldr	r1, [pc, #56]	; (8002964 <LoopForever+0xa>)
  ldr r2, =_sidata
 800292c:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <LoopForever+0xe>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002940:	4c0b      	ldr	r4, [pc, #44]	; (8002970 <LoopForever+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800294e:	f7ff fdff 	bl	8002550 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002952:	f003 f843 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002956:	f7ff fbe7 	bl	8002128 <main>

0800295a <LoopForever>:

LoopForever:
    b LoopForever
 800295a:	e7fe      	b.n	800295a <LoopForever>
  ldr   r0, =_estack
 800295c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002968:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 800296c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002970:	200001c4 	.word	0x200001c4

08002974 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <DMA1_Channel1_IRQHandler>
	...

08002978 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_Init+0x24>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_Init+0x24>)
 8002982:	2110      	movs	r1, #16
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002988:	2000      	movs	r0, #0
 800298a:	f000 f809 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298e:	f7ff fd8d 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40022000 	.word	0x40022000

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80029a8:	f001 fa22 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 80029ac:	0002      	movs	r2, r0
 80029ae:	23fa      	movs	r3, #250	; 0xfa
 80029b0:	0099      	lsls	r1, r3, #2
 80029b2:	0010      	movs	r0, r2
 80029b4:	f7fd fba6 	bl	8000104 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fc0f 	bl	80031de <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	2301      	movs	r3, #1
 80029c4:	425b      	negs	r3, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fbe3 	bl	8003194 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  uwTick++;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_IncTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_IncTick+0x14>)
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200001c0 	.word	0x200001c0

080029f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <HAL_GetTick+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	200001c0 	.word	0x200001c0

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <HAL_Delay+0x20>
  {
     wait++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	f7ff ffe3 	bl	80029f0 <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d8f7      	bhi.n	8002a26 <HAL_Delay+0x22>
  {
  }
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e124      	b.n	8002ca8 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff faa0 	bl	8001fbc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	2210      	movs	r2, #16
 8002a82:	4013      	ands	r3, r2
 8002a84:	d000      	beq.n	8002a88 <HAL_ADC_Init+0x48>
 8002a86:	e102      	b.n	8002c8e <HAL_ADC_Init+0x24e>
 8002a88:	230f      	movs	r3, #15
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d000      	beq.n	8002a94 <HAL_ADC_Init+0x54>
 8002a92:	e0fc      	b.n	8002c8e <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002a9e:	d000      	beq.n	8002aa2 <HAL_ADC_Init+0x62>
 8002aa0:	e0f5      	b.n	8002c8e <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4a82      	ldr	r2, [pc, #520]	; (8002cb0 <HAL_ADC_Init+0x270>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2202      	movs	r2, #2
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d112      	bne.n	8002ae6 <HAL_ADC_Init+0xa6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d009      	beq.n	8002ae2 <HAL_ADC_Init+0xa2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	401a      	ands	r2, r3
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Init+0xa6>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_Init+0xa8>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2218      	movs	r2, #24
 8002af4:	4393      	bics	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	0899      	lsrs	r1, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4963      	ldr	r1, [pc, #396]	; (8002cb4 <HAL_ADC_Init+0x274>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002b36:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002b3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <HAL_ADC_Init+0x10e>
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	e000      	b.n	8002b50 <HAL_ADC_Init+0x110>
 8002b4e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002b50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002b56:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_Init+0x124>
 8002b60:	2304      	movs	r3, #4
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_Init+0x126>
 8002b64:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8002b66:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002b6e:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d115      	bne.n	8002baa <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	0252      	lsls	r2, r2, #9
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	e00b      	b.n	8002baa <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	2220      	movs	r2, #32
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	23c2      	movs	r3, #194	; 0xc2
 8002bb0:	33ff      	adds	r3, #255	; 0xff
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68d9      	ldr	r1, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	055b      	lsls	r3, r3, #21
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d01b      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d017      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d013      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d00f      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00b      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d007      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d003      	beq.n	8002c1a <HAL_ADC_Init+0x1da>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d112      	bne.n	8002c40 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2107      	movs	r1, #7
 8002c26:	438a      	bics	r2, r1
 8002c28:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6959      	ldr	r1, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	2207      	movs	r2, #7
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_ADC_Init+0x278>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10b      	bne.n	8002c68 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	2201      	movs	r2, #1
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c66:	e01c      	b.n	8002ca2 <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	2212      	movs	r2, #18
 8002c6e:	4393      	bics	r3, r2
 8002c70:	2210      	movs	r2, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8002c84:	230f      	movs	r3, #15
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c8c:	e009      	b.n	8002ca2 <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	2210      	movs	r2, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	fffffefd 	.word	0xfffffefd
 8002cb4:	fffe0219 	.word	0xfffe0219
 8002cb8:	833fffe7 	.word	0x833fffe7

08002cbc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d106      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0x24>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d00d      	beq.n	8002cfc <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d14f      	bne.n	8002d8e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d148      	bne.n	8002d8e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	2210      	movs	r2, #16
 8002d02:	4013      	ands	r3, r2
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	23c0      	movs	r3, #192	; 0xc0
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d12d      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d129      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2208      	movs	r2, #8
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d122      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	d110      	bne.n	8002d66 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	210c      	movs	r1, #12
 8002d50:	438a      	bics	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <HAL_ADC_IRQHandler+0x168>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
 8002d64:	e00b      	b.n	8002d7e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d76:	2201      	movs	r2, #1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
      HAL_ADC_ConvCpltCallback(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f851 	bl	8002e28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d115      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x10c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d10e      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	0252      	lsls	r2, r2, #9
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Level out of window callback */ 
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f83c 	bl	8002e38 <HAL_ADC_LevelOutOfWindowCallback>
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d122      	bne.n	8002e1c <HAL_ADC_IRQHandler+0x160>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d11b      	bne.n	8002e1c <HAL_ADC_IRQHandler+0x160>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d005      	beq.n	8002df8 <HAL_ADC_IRQHandler+0x13c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002df6:	d00d      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x158>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_ADC_ErrorCallback(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 f81a 	bl	8002e48 <HAL_ADC_ErrorCallback>
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	601a      	str	r2, [r3, #0]
  }

}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	fffffefe 	.word	0xfffffefe

08002e28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e62:	230f      	movs	r3, #15
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	055b      	lsls	r3, r3, #21
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d011      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x46>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d00d      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x46>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d009      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x46>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d005      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x46>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d001      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x46>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2240      	movs	r2, #64	; 0x40
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x54>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0bb      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1cc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d000      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x6a>
 8002ec0:	e09f      	b.n	8003002 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a59      	ldr	r2, [pc, #356]	; (800302c <HAL_ADC_ConfigChannel+0x1d4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x76>
 8002ecc:	e077      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	055b      	lsls	r3, r3, #21
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d037      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d033      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d02f      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d02b      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d027      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d023      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d01f      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	2b07      	cmp	r3, #7
 8002f26:	d01b      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2107      	movs	r1, #7
 8002f34:	400b      	ands	r3, r1
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d012      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2107      	movs	r1, #7
 8002f46:	438a      	bics	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2207      	movs	r2, #7
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d003      	beq.n	8002f70 <HAL_ADC_ConfigChannel+0x118>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b11      	cmp	r3, #17
 8002f6e:	d152      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_ADC_ConfigChannel+0x1d8>)
 8002f72:	6819      	ldr	r1, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x12a>
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	e001      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x12e>
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	03db      	lsls	r3, r3, #15
 8002f86:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <HAL_ADC_ConfigChannel+0x1d8>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d140      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_ADC_ConfigChannel+0x1dc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4927      	ldr	r1, [pc, #156]	; (8003038 <HAL_ADC_ConfigChannel+0x1e0>)
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8b2 	bl	8000104 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x158>
 8002fbc:	e02b      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4099      	lsls	r1, r3
 8002fcc:	000b      	movs	r3, r1
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d003      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x190>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b11      	cmp	r3, #17
 8002fe6:	d116      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_ADC_ConfigChannel+0x1d8>)
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1a0>
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x1a2>
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_ADC_ConfigChannel+0x1d8>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e009      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	2220      	movs	r2, #32
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800300e:	230f      	movs	r3, #15
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800301e:	230f      	movs	r3, #15
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00001001 	.word	0x00001001
 8003030:	40012708 	.word	0x40012708
 8003034:	20000000 	.word	0x20000000
 8003038:	000f4240 	.word	0x000f4240
 800303c:	ff7fffff 	.word	0xff7fffff
 8003040:	ffbfffff 	.word	0xffbfffff

08003044 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	0002      	movs	r2, r0
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	001a      	movs	r2, r3
 8003056:	231f      	movs	r3, #31
 8003058:	401a      	ands	r2, r3
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <NVIC_EnableIRQ+0x28>)
 800305c:	2101      	movs	r1, #1
 800305e:	4091      	lsls	r1, r2
 8003060:	000a      	movs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	e000e100 	.word	0xe000e100

08003070 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	0002      	movs	r2, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b7f      	cmp	r3, #127	; 0x7f
 8003084:	d932      	bls.n	80030ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003086:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <NVIC_SetPriority+0xd4>)
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	0019      	movs	r1, r3
 800308e:	230f      	movs	r3, #15
 8003090:	400b      	ands	r3, r1
 8003092:	3b08      	subs	r3, #8
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3306      	adds	r3, #6
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	3304      	adds	r3, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1dfa      	adds	r2, r7, #7
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	0011      	movs	r1, r2
 80030a6:	2203      	movs	r2, #3
 80030a8:	400a      	ands	r2, r1
 80030aa:	00d2      	lsls	r2, r2, #3
 80030ac:	21ff      	movs	r1, #255	; 0xff
 80030ae:	4091      	lsls	r1, r2
 80030b0:	000a      	movs	r2, r1
 80030b2:	43d2      	mvns	r2, r2
 80030b4:	401a      	ands	r2, r3
 80030b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	019b      	lsls	r3, r3, #6
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	401a      	ands	r2, r3
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	0018      	movs	r0, r3
 80030c6:	2303      	movs	r3, #3
 80030c8:	4003      	ands	r3, r0
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ce:	481d      	ldr	r0, [pc, #116]	; (8003144 <NVIC_SetPriority+0xd4>)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	001c      	movs	r4, r3
 80030d6:	230f      	movs	r3, #15
 80030d8:	4023      	ands	r3, r4
 80030da:	3b08      	subs	r3, #8
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	430a      	orrs	r2, r1
 80030e0:	3306      	adds	r3, #6
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	18c3      	adds	r3, r0, r3
 80030e6:	3304      	adds	r3, #4
 80030e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030ea:	e027      	b.n	800313c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <NVIC_SetPriority+0xd8>)
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	33c0      	adds	r3, #192	; 0xc0
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	589b      	ldr	r3, [r3, r2]
 80030fc:	1dfa      	adds	r2, r7, #7
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	0011      	movs	r1, r2
 8003102:	2203      	movs	r2, #3
 8003104:	400a      	ands	r2, r1
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	21ff      	movs	r1, #255	; 0xff
 800310a:	4091      	lsls	r1, r2
 800310c:	000a      	movs	r2, r1
 800310e:	43d2      	mvns	r2, r2
 8003110:	401a      	ands	r2, r3
 8003112:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	019b      	lsls	r3, r3, #6
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	401a      	ands	r2, r3
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	0018      	movs	r0, r3
 8003122:	2303      	movs	r3, #3
 8003124:	4003      	ands	r3, r0
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800312a:	4807      	ldr	r0, [pc, #28]	; (8003148 <NVIC_SetPriority+0xd8>)
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b25b      	sxtb	r3, r3
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	430a      	orrs	r2, r1
 8003136:	33c0      	adds	r3, #192	; 0xc0
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	501a      	str	r2, [r3, r0]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b003      	add	sp, #12
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	e000ed00 	.word	0xe000ed00
 8003148:	e000e100 	.word	0xe000e100

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	045b      	lsls	r3, r3, #17
 800315c:	429a      	cmp	r2, r3
 800315e:	d301      	bcc.n	8003164 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003160:	2301      	movs	r3, #1
 8003162:	e010      	b.n	8003186 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <SysTick_Config+0x44>)
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	3a01      	subs	r2, #1
 800316a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316c:	2301      	movs	r3, #1
 800316e:	425b      	negs	r3, r3
 8003170:	2103      	movs	r1, #3
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff ff7c 	bl	8003070 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x44>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x44>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	210f      	movs	r1, #15
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	1c02      	adds	r2, r0, #0
 80031a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <NVIC_SetPriority>
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b004      	add	sp, #16
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	0002      	movs	r2, r0
 80031c6:	1dfb      	adds	r3, r7, #7
 80031c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff ff37 	bl	8003044 <NVIC_EnableIRQ>
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff ffaf 	bl	800314c <SysTick_Config>
 80031ee:	0003      	movs	r3, r0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b002      	add	sp, #8
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d106      	bne.n	8003214 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800320c:	2104      	movs	r1, #4
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003212:	e005      	b.n	8003220 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800321a:	2104      	movs	r1, #4
 800321c:	438a      	bics	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003230:	f000 f803 	bl	800323a <HAL_SYSTICK_Callback>
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800325a:	e14f      	b.n	80034fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4091      	lsls	r1, r2
 8003266:	000a      	movs	r2, r1
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d100      	bne.n	8003274 <HAL_GPIO_Init+0x30>
 8003272:	e140      	b.n	80034f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x40>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b12      	cmp	r3, #18
 8003282:	d123      	bne.n	80032cc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	58d3      	ldr	r3, [r2, r3]
 8003290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2207      	movs	r2, #7
 8003296:	4013      	ands	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	220f      	movs	r2, #15
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2107      	movs	r1, #7
 80032b0:	400b      	ands	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	409a      	lsls	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	08da      	lsrs	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3208      	adds	r2, #8
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	409a      	lsls	r2, r3
 80032da:	0013      	movs	r3, r2
 80032dc:	43da      	mvns	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	409a      	lsls	r2, r3
 80032f2:	0013      	movs	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d00b      	beq.n	8003320 <HAL_GPIO_Init+0xdc>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d007      	beq.n	8003320 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003314:	2b11      	cmp	r3, #17
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b12      	cmp	r3, #18
 800331e:	d130      	bne.n	8003382 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	409a      	lsls	r2, r3
 800332e:	0013      	movs	r3, r2
 8003330:	43da      	mvns	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	0013      	movs	r3, r2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003356:	2201      	movs	r2, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
 800335c:	0013      	movs	r3, r2
 800335e:	43da      	mvns	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	2201      	movs	r2, #1
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
 8003374:	0013      	movs	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	43da      	mvns	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	0013      	movs	r3, r2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	055b      	lsls	r3, r3, #21
 80033ba:	4013      	ands	r3, r2
 80033bc:	d100      	bne.n	80033c0 <HAL_GPIO_Init+0x17c>
 80033be:	e09a      	b.n	80034f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c0:	4b54      	ldr	r3, [pc, #336]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	4b53      	ldr	r3, [pc, #332]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033c6:	2101      	movs	r1, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
 80033cc:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2201      	movs	r2, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x2d4>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	589b      	ldr	r3, [r3, r2]
 80033e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2203      	movs	r2, #3
 80033ea:	4013      	ands	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	220f      	movs	r2, #15
 80033f0:	409a      	lsls	r2, r3
 80033f2:	0013      	movs	r3, r2
 80033f4:	43da      	mvns	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	2390      	movs	r3, #144	; 0x90
 8003400:	05db      	lsls	r3, r3, #23
 8003402:	429a      	cmp	r2, r3
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x1ea>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a44      	ldr	r2, [pc, #272]	; (800351c <HAL_GPIO_Init+0x2d8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x1e6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x1e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_GPIO_Init+0x2e0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x1de>
 800341e:	2303      	movs	r3, #3
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 8003422:	2305      	movs	r3, #5
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 800342e:	2300      	movs	r3, #0
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	2103      	movs	r1, #3
 8003434:	400a      	ands	r2, r1
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003440:	4935      	ldr	r1, [pc, #212]	; (8003518 <HAL_GPIO_Init+0x2d4>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	43da      	mvns	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	025b      	lsls	r3, r3, #9
 8003466:	4013      	ands	r3, r2
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	43da      	mvns	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	029b      	lsls	r3, r3, #10
 8003490:	4013      	ands	r3, r2
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43da      	mvns	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	035b      	lsls	r3, r3, #13
 80034ba:	4013      	ands	r3, r2
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	039b      	lsls	r3, r3, #14
 80034e4:	4013      	ands	r3, r2
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	40da      	lsrs	r2, r3
 8003504:	1e13      	subs	r3, r2, #0
 8003506:	d000      	beq.n	800350a <HAL_GPIO_Init+0x2c6>
 8003508:	e6a8      	b.n	800325c <HAL_GPIO_Init+0x18>
  } 
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b006      	add	sp, #24
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000
 8003518:	40010000 	.word	0x40010000
 800351c:	48000400 	.word	0x48000400
 8003520:	48000800 	.word	0x48000800
 8003524:	48000c00 	.word	0x48000c00
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	0008      	movs	r0, r1
 8003536:	0011      	movs	r1, r2
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	1c02      	adds	r2, r0, #0
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	1c7b      	adds	r3, r7, #1
 8003540:	1c0a      	adds	r2, r1, #0
 8003542:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003544:	1c7b      	adds	r3, r7, #1
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800354c:	1cbb      	adds	r3, r7, #2
 800354e:	881a      	ldrh	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003554:	e003      	b.n	800355e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003556:	1cbb      	adds	r3, r7, #2
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d100      	bne.n	8003580 <HAL_RCC_OscConfig+0x18>
 800357e:	e08d      	b.n	800369c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003580:	4bc4      	ldr	r3, [pc, #784]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	220c      	movs	r2, #12
 8003586:	4013      	ands	r3, r2
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00e      	beq.n	80035aa <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4bc1      	ldr	r3, [pc, #772]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	220c      	movs	r2, #12
 8003592:	4013      	ands	r3, r2
 8003594:	2b08      	cmp	r3, #8
 8003596:	d116      	bne.n	80035c6 <HAL_RCC_OscConfig+0x5e>
 8003598:	4bbe      	ldr	r3, [pc, #760]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	23c0      	movs	r3, #192	; 0xc0
 800359e:	025b      	lsls	r3, r3, #9
 80035a0:	401a      	ands	r2, r3
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	025b      	lsls	r3, r3, #9
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035aa:	4bba      	ldr	r3, [pc, #744]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	029b      	lsls	r3, r3, #10
 80035b2:	4013      	ands	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_RCC_OscConfig+0x50>
 80035b6:	e070      	b.n	800369a <HAL_RCC_OscConfig+0x132>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d000      	beq.n	80035c2 <HAL_RCC_OscConfig+0x5a>
 80035c0:	e06b      	b.n	800369a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e2b8      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_OscConfig+0x76>
 80035ce:	4bb1      	ldr	r3, [pc, #708]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4bb0      	ldr	r3, [pc, #704]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0249      	lsls	r1, r1, #9
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e02f      	b.n	800363e <HAL_RCC_OscConfig+0xd6>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x98>
 80035e6:	4bab      	ldr	r3, [pc, #684]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4baa      	ldr	r3, [pc, #680]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	49aa      	ldr	r1, [pc, #680]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80035ee:	400a      	ands	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	4ba8      	ldr	r3, [pc, #672]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4ba7      	ldr	r3, [pc, #668]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80035f8:	49a8      	ldr	r1, [pc, #672]	; (800389c <HAL_RCC_OscConfig+0x334>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e01e      	b.n	800363e <HAL_RCC_OscConfig+0xd6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d10e      	bne.n	8003626 <HAL_RCC_OscConfig+0xbe>
 8003608:	4ba2      	ldr	r3, [pc, #648]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4ba1      	ldr	r3, [pc, #644]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	02c9      	lsls	r1, r1, #11
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b9f      	ldr	r3, [pc, #636]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0249      	lsls	r1, r1, #9
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0xd6>
 8003626:	4b9b      	ldr	r3, [pc, #620]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b9a      	ldr	r3, [pc, #616]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800362c:	499a      	ldr	r1, [pc, #616]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800362e:	400a      	ands	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	4b98      	ldr	r3, [pc, #608]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b97      	ldr	r3, [pc, #604]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003638:	4998      	ldr	r1, [pc, #608]	; (800389c <HAL_RCC_OscConfig+0x334>)
 800363a:	400a      	ands	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7ff f9d3 	bl	80029f0 <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7ff f9ce 	bl	80029f0 <HAL_GetTick>
 8003654:	0002      	movs	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e26a      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	029b      	lsls	r3, r3, #10
 800366a:	4013      	ands	r3, r2
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e015      	b.n	800369c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7ff f9be 	bl	80029f0 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367a:	f7ff f9b9 	bl	80029f0 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	; 0x64
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e255      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	4013      	ands	r3, r2
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x112>
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d100      	bne.n	80036a8 <HAL_RCC_OscConfig+0x140>
 80036a6:	e06c      	b.n	8003782 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a8:	4b7a      	ldr	r3, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	220c      	movs	r2, #12
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036b2:	4b78      	ldr	r3, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	220c      	movs	r2, #12
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11f      	bne.n	80036fe <HAL_RCC_OscConfig+0x196>
 80036be:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	23c0      	movs	r3, #192	; 0xc0
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d116      	bne.n	80036fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d0:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2202      	movs	r2, #2
 80036d6:	4013      	ands	r3, r2
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e228      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b6b      	ldr	r3, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	22f8      	movs	r2, #248	; 0xf8
 80036ec:	4393      	bics	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	00da      	lsls	r2, r3, #3
 80036f6:	4b67      	ldr	r3, [pc, #412]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fc:	e041      	b.n	8003782 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003706:	4b63      	ldr	r3, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7ff f96d 	bl	80029f0 <HAL_GetTick>
 8003716:	0003      	movs	r3, r0
 8003718:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f968 	bl	80029f0 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e204      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2202      	movs	r2, #2
 8003734:	4013      	ands	r3, r2
 8003736:	d0f1      	beq.n	800371c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b56      	ldr	r3, [pc, #344]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	22f8      	movs	r2, #248	; 0xf8
 800373e:	4393      	bics	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e018      	b.n	8003782 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003750:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003756:	2101      	movs	r1, #1
 8003758:	438a      	bics	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7ff f948 	bl	80029f0 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7ff f943 	bl	80029f0 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1df      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003778:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2202      	movs	r2, #2
 800377e:	4013      	ands	r3, r2
 8003780:	d1f1      	bne.n	8003766 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2208      	movs	r2, #8
 8003788:	4013      	ands	r3, r2
 800378a:	d036      	beq.n	80037fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d019      	beq.n	80037c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003794:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800379a:	2101      	movs	r1, #1
 800379c:	430a      	orrs	r2, r1
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7ff f926 	bl	80029f0 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7ff f921 	bl	80029f0 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1bd      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2202      	movs	r2, #2
 80037c2:	4013      	ands	r3, r2
 80037c4:	d0f1      	beq.n	80037aa <HAL_RCC_OscConfig+0x242>
 80037c6:	e018      	b.n	80037fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d4:	f7ff f90c 	bl	80029f0 <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037de:	f7ff f907 	bl	80029f0 <HAL_GetTick>
 80037e2:	0002      	movs	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1a3      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	2202      	movs	r2, #2
 80037f6:	4013      	ands	r3, r2
 80037f8:	d1f1      	bne.n	80037de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2204      	movs	r2, #4
 8003800:	4013      	ands	r3, r2
 8003802:	d100      	bne.n	8003806 <HAL_RCC_OscConfig+0x29e>
 8003804:	e0b4      	b.n	8003970 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2017      	movs	r0, #23
 8003808:	183b      	adds	r3, r7, r0
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	055b      	lsls	r3, r3, #21
 8003816:	4013      	ands	r3, r2
 8003818:	d110      	bne.n	800383c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	0549      	lsls	r1, r1, #21
 8003824:	430a      	orrs	r2, r1
 8003826:	61da      	str	r2, [r3, #28]
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	055b      	lsls	r3, r3, #21
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003836:	183b      	adds	r3, r7, r0
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_RCC_OscConfig+0x338>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4013      	ands	r3, r2
 8003846:	d11a      	bne.n	800387e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_RCC_OscConfig+0x338>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_RCC_OscConfig+0x338>)
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	0049      	lsls	r1, r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7ff f8cb 	bl	80029f0 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003860:	f7ff f8c6 	bl	80029f0 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e162      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x338>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_RCC_OscConfig+0x33c>
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	4b02      	ldr	r3, [pc, #8]	; (8003894 <HAL_RCC_OscConfig+0x32c>)
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	621a      	str	r2, [r3, #32]
 8003892:	e035      	b.n	8003900 <HAL_RCC_OscConfig+0x398>
 8003894:	40021000 	.word	0x40021000
 8003898:	fffeffff 	.word	0xfffeffff
 800389c:	fffbffff 	.word	0xfffbffff
 80038a0:	40007000 	.word	0x40007000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x35e>
 80038ac:	4ba4      	ldr	r3, [pc, #656]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	4ba3      	ldr	r3, [pc, #652]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	438a      	bics	r2, r1
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	4ba1      	ldr	r3, [pc, #644]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	4ba0      	ldr	r3, [pc, #640]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038be:	2104      	movs	r1, #4
 80038c0:	438a      	bics	r2, r1
 80038c2:	621a      	str	r2, [r3, #32]
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x398>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x380>
 80038ce:	4b9c      	ldr	r3, [pc, #624]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	4b9b      	ldr	r3, [pc, #620]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038d4:	2104      	movs	r1, #4
 80038d6:	430a      	orrs	r2, r1
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	4b99      	ldr	r3, [pc, #612]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	4b98      	ldr	r3, [pc, #608]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x398>
 80038e8:	4b95      	ldr	r3, [pc, #596]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	438a      	bics	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]
 80038f4:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80038fa:	2104      	movs	r1, #4
 80038fc:	438a      	bics	r2, r1
 80038fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d014      	beq.n	8003932 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7ff f872 	bl	80029f0 <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e009      	b.n	8003926 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7ff f86d 	bl	80029f0 <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	4a89      	ldr	r2, [pc, #548]	; (8003b44 <HAL_RCC_OscConfig+0x5dc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e108      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	4b86      	ldr	r3, [pc, #536]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x3aa>
 8003930:	e013      	b.n	800395a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7ff f85d 	bl	80029f0 <HAL_GetTick>
 8003936:	0003      	movs	r3, r0
 8003938:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	e009      	b.n	8003950 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7ff f858 	bl	80029f0 <HAL_GetTick>
 8003940:	0002      	movs	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a7f      	ldr	r2, [pc, #508]	; (8003b44 <HAL_RCC_OscConfig+0x5dc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0f3      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800395a:	2317      	movs	r3, #23
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 800396a:	4977      	ldr	r1, [pc, #476]	; (8003b48 <HAL_RCC_OscConfig+0x5e0>)
 800396c:	400a      	ands	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003982:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	4b6e      	ldr	r3, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003988:	2104      	movs	r1, #4
 800398a:	430a      	orrs	r2, r1
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800398e:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7ff f829 	bl	80029f0 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039a4:	f7ff f824 	bl	80029f0 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0c0      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039b6:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f1      	beq.n	80039a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039c0:	4b5f      	ldr	r3, [pc, #380]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	22f8      	movs	r2, #248	; 0xf8
 80039c6:	4393      	bics	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
 80039d6:	e034      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	3305      	adds	r3, #5
 80039de:	d111      	bne.n	8003a04 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039e0:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039e6:	2104      	movs	r1, #4
 80039e8:	438a      	bics	r2, r1
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039ec:	4b54      	ldr	r3, [pc, #336]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	22f8      	movs	r2, #248	; 0xf8
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 80039fe:	430a      	orrs	r2, r1
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
 8003a02:	e01e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a04:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	438a      	bics	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe ffe8 	bl	80029f0 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a26:	f7fe ffe3 	bl	80029f0 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e07f      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d1f1      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4e4>
 8003a4a:	e074      	b.n	8003b36 <HAL_RCC_OscConfig+0x5ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4c:	4b3c      	ldr	r3, [pc, #240]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	220c      	movs	r2, #12
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d100      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4f2>
 8003a58:	e06b      	b.n	8003b32 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d14c      	bne.n	8003afc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a68:	4938      	ldr	r1, [pc, #224]	; (8003b4c <HAL_RCC_OscConfig+0x5e4>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe ffbf 	bl	80029f0 <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fe ffba 	bl	80029f0 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e056      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	049b      	lsls	r3, r3, #18
 8003a92:	4013      	ands	r3, r2
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0449      	lsls	r1, r1, #17
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe ff8d 	bl	80029f0 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe ff88 	bl	80029f0 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e024      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	049b      	lsls	r3, r3, #18
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x574>
 8003afa:	e01c      	b.n	8003b36 <HAL_RCC_OscConfig+0x5ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003b02:	4912      	ldr	r1, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x5e4>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe ff72 	bl	80029f0 <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe ff6d 	bl	80029f0 <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e009      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x5d8>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	049b      	lsls	r3, r3, #18
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5aa>
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x5ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x5d0>
    }
  }
  
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b006      	add	sp, #24
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00001388 	.word	0x00001388
 8003b48:	efffffff 	.word	0xefffffff
 8003b4c:	feffffff 	.word	0xfeffffff
 8003b50:	ffc27fff 	.word	0xffc27fff

08003b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d911      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b70:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4393      	bics	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	4b64      	ldr	r3, [pc, #400]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	22f0      	movs	r2, #240	; 0xf0
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d100      	bne.n	8003bbe <HAL_RCC_ClockConfig+0x6a>
 8003bbc:	e067      	b.n	8003c8e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b52      	ldr	r3, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d114      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e095      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	049b      	lsls	r3, r3, #18
 8003be6:	4013      	ands	r3, r2
 8003be8:	d108      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e089      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e082      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfc:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4393      	bics	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c10:	f7fe feee 	bl	80029f0 <HAL_GetTick>
 8003c14:	0003      	movs	r3, r0
 8003c16:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c20:	e009      	b.n	8003c36 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c22:	f7fe fee5 	bl	80029f0 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	4a39      	ldr	r2, [pc, #228]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e065      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d1ef      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
 8003c42:	e024      	b.n	8003c8e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d11b      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4e:	f7fe fecf 	bl	80029f0 <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	220c      	movs	r2, #12
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xfa>
 8003c6e:	e00e      	b.n	8003c8e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fe febe 	bl	80029f0 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03e      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	220c      	movs	r2, #12
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c8e:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d211      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4393      	bics	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cae:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e020      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cde:	f000 f821 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003ce2:	0001      	movs	r1, r0
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	220f      	movs	r2, #15
 8003cec:	4013      	ands	r3, r2
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	5cd3      	ldrb	r3, [r2, r3]
 8003cf2:	000a      	movs	r2, r1
 8003cf4:	40da      	lsrs	r2, r3
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fe fe50 	bl	80029a0 <HAL_InitTick>
  
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40022000 	.word	0x40022000
 8003d10:	40021000 	.word	0x40021000
 8003d14:	00001388 	.word	0x00001388
 8003d18:	fffff8ff 	.word	0xfffff8ff
 8003d1c:	08005b40 	.word	0x08005b40
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b08f      	sub	sp, #60	; 0x3c
 8003d28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d2a:	2314      	movs	r3, #20
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	4a2c      	ldr	r2, [pc, #176]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d32:	c313      	stmia	r3!, {r0, r1, r4}
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	220c      	movs	r2, #12
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d002      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x4a>
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x50>
 8003d6c:	e02f      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d72:	e02f      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	0c9b      	lsrs	r3, r3, #18
 8003d78:	220f      	movs	r2, #15
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2214      	movs	r2, #20
 8003d7e:	18ba      	adds	r2, r7, r2
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d84:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	220f      	movs	r2, #15
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	1d3a      	adds	r2, r7, #4
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	23c0      	movs	r3, #192	; 0xc0
 8003d96:	025b      	lsls	r3, r3, #9
 8003d98:	401a      	ands	r2, r3
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	025b      	lsls	r3, r3, #9
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da4:	4811      	ldr	r0, [pc, #68]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003da6:	f7fc f9ad 	bl	8000104 <__udivsi3>
 8003daa:	0003      	movs	r3, r0
 8003dac:	001a      	movs	r2, r3
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	4353      	muls	r3, r2
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8003db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dba:	f7fc f9a3 	bl	8000104 <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	4353      	muls	r3, r2
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dd2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b00f      	add	sp, #60	; 0x3c
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	08005aa0 	.word	0x08005aa0
 8003de4:	08005ab0 	.word	0x08005ab0
 8003de8:	40021000 	.word	0x40021000
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	20000000 	.word	0x20000000

08003e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003e08:	f7ff fff2 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e0c:	0001      	movs	r1, r0
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	2207      	movs	r2, #7
 8003e16:	4013      	ands	r3, r2
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	40d9      	lsrs	r1, r3
 8003e1e:	000b      	movs	r3, r1
}    
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08005b50 	.word	0x08005b50

08003e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d100      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e4c:	e08e      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2017      	movs	r0, #23
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e56:	4b57      	ldr	r3, [pc, #348]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	055b      	lsls	r3, r3, #21
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d110      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0549      	lsls	r1, r1, #21
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	61da      	str	r2, [r3, #28]
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	055b      	lsls	r3, r3, #21
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	4b4c      	ldr	r3, [pc, #304]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d11a      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e90:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0049      	lsls	r1, r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fda7 	bl	80029f0 <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	e008      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fe fda2 	bl	80029f0 <HAL_GetTick>
 8003eac:	0002      	movs	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e077      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d034      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	23c0      	movs	r3, #192	; 0xc0
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d02c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee8:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef2:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef4:	6a1a      	ldr	r2, [r3, #32]
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	0249      	lsls	r1, r1, #9
 8003efc:	430a      	orrs	r2, r1
 8003efe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f06:	492e      	ldr	r1, [pc, #184]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f0c:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	4013      	ands	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe fd69 	bl	80029f0 <HAL_GetTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	e009      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fe fd64 	bl	80029f0 <HAL_GetTick>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e038      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f56:	2317      	movs	r3, #23
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f66:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f86:	430a      	orrs	r2, r1
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	4013      	ands	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2210      	movs	r2, #16
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	fffffcff 	.word	0xfffffcff
 8003fc0:	fffeffff 	.word	0xfffeffff
 8003fc4:	00001388 	.word	0x00001388
 8003fc8:	efffffff 	.word	0xefffffff

08003fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e08a      	b.n	80040f4 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	225d      	movs	r2, #93	; 0x5d
 8003fe8:	5c9b      	ldrb	r3, [r3, r2]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	225c      	movs	r2, #92	; 0x5c
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7fe fa08 	bl	8002410 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	225d      	movs	r2, #93	; 0x5d
 8004004:	2102      	movs	r1, #2
 8004006:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2140      	movs	r1, #64	; 0x40
 8004014:	438a      	bics	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	23e0      	movs	r3, #224	; 0xe0
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	429a      	cmp	r2, r3
 8004022:	d902      	bls.n	800402a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e002      	b.n	8004030 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	015b      	lsls	r3, r3, #5
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	23f0      	movs	r3, #240	; 0xf0
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	429a      	cmp	r2, r3
 800403a:	d008      	beq.n	800404e <HAL_SPI_Init+0x82>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	23e0      	movs	r3, #224	; 0xe0
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	429a      	cmp	r2, r3
 8004046:	d002      	beq.n	800404e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	23e0      	movs	r3, #224	; 0xe0
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	429a      	cmp	r2, r3
 8004060:	d903      	bls.n	800406a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
 8004068:	e002      	b.n	8004070 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6999      	ldr	r1, [r3, #24]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	400b      	ands	r3, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	431a      	orrs	r2, r3
 800409e:	0011      	movs	r1, r2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	2204      	movs	r2, #4
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	0011      	movs	r1, r2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4907      	ldr	r1, [pc, #28]	; (80040fc <HAL_SPI_Init+0x130>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	225d      	movs	r2, #93	; 0x5d
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	fffff7ff 	.word	0xfffff7ff

08004100 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	001a      	movs	r2, r3
 800410e:	1cbb      	adds	r3, r7, #2
 8004110:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800411e:	2301      	movs	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004122:	2323      	movs	r3, #35	; 0x23
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	225c      	movs	r2, #92	; 0x5c
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x38>
 8004134:	2302      	movs	r3, #2
 8004136:	e1f2      	b.n	800451e <HAL_SPI_TransmitReceive+0x41e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	225c      	movs	r2, #92	; 0x5c
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004140:	f7fe fc56 	bl	80029f0 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	225d      	movs	r2, #93	; 0x5d
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d010      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x80>
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	2382      	movs	r3, #130	; 0x82
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	429a      	cmp	r2, r3
 8004166:	d106      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x76>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d004      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8004176:	2323      	movs	r3, #35	; 0x23
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	2202      	movs	r2, #2
 800417c:	701a      	strb	r2, [r3, #0]
    goto error;
 800417e:	e1c3      	b.n	8004508 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x94>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x94>
 800418c:	1cbb      	adds	r3, r7, #2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8004194:	2323      	movs	r3, #35	; 0x23
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
    goto error;
 800419c:	e1b4      	b.n	8004508 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	225d      	movs	r2, #93	; 0x5d
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	225d      	movs	r2, #93	; 0x5d
 80041ae:	2105      	movs	r1, #5
 80041b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1cba      	adds	r2, r7, #2
 80041c2:	2146      	movs	r1, #70	; 0x46
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1cba      	adds	r2, r7, #2
 80041cc:	2144      	movs	r1, #68	; 0x44
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1cba      	adds	r2, r7, #2
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1cba      	adds	r2, r7, #2
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	23e0      	movs	r3, #224	; 0xe0
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d805      	bhi.n	800420c <HAL_SPI_TransmitReceive+0x10c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2246      	movs	r2, #70	; 0x46
 8004204:	5a9b      	ldrh	r3, [r3, r2]
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d908      	bls.n	800421e <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	49c4      	ldr	r1, [pc, #784]	; (8004528 <HAL_SPI_TransmitReceive+0x428>)
 8004218:	400a      	ands	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e008      	b.n	8004230 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0149      	lsls	r1, r1, #5
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	4013      	ands	r3, r2
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d007      	beq.n	800424e <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	23e0      	movs	r3, #224	; 0xe0
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	429a      	cmp	r2, r3
 8004258:	d800      	bhi.n	800425c <HAL_SPI_TransmitReceive+0x15c>
 800425a:	e075      	b.n	8004348 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_SPI_TransmitReceive+0x16e>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d160      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3302      	adds	r3, #2
 800427c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428c:	e050      	b.n	8004330 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x1ce>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d017      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x1ce>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d110      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	881a      	ldrh	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3302      	adds	r3, #2
 80042ba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2246      	movs	r2, #70	; 0x46
 80042d2:	5a9b      	ldrh	r3, [r3, r2]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01a      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x210>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d113      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3302      	adds	r3, #2
 80042f8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2246      	movs	r2, #70	; 0x46
 80042fe:	5a9b      	ldrh	r3, [r3, r2]
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b299      	uxth	r1, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2246      	movs	r2, #70	; 0x46
 800430a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	3301      	adds	r3, #1
 8004314:	d00c      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x230>
 8004316:	f7fe fb6b 	bl	80029f0 <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	429a      	cmp	r2, r3
 8004324:	d804      	bhi.n	8004330 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8004326:	2323      	movs	r3, #35	; 0x23
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	2203      	movs	r2, #3
 800432c:	701a      	strb	r2, [r3, #0]
        goto error;
 800432e:	e0eb      	b.n	8004508 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1a9      	bne.n	800428e <HAL_SPI_TransmitReceive+0x18e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2246      	movs	r2, #70	; 0x46
 800433e:	5a9b      	ldrh	r3, [r3, r2]
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1a3      	bne.n	800428e <HAL_SPI_TransmitReceive+0x18e>
 8004346:	e0ca      	b.n	80044de <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_SPI_TransmitReceive+0x25c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d000      	beq.n	800435c <HAL_SPI_TransmitReceive+0x25c>
 800435a:	e0b3      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d90f      	bls.n	8004386 <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	3302      	adds	r3, #2
 8004374:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b02      	subs	r3, #2
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004384:	e09e      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	60ba      	str	r2, [r7, #8]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	320c      	adds	r2, #12
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a4:	e08e      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d031      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x310>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02c      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x310>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2202      	movs	r2, #2
 80043be:	4013      	ands	r3, r2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d125      	bne.n	8004410 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d90f      	bls.n	80043ee <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3302      	adds	r3, #2
 80043dc:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b02      	subs	r3, #2
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ec:	e00e      	b.n	800440c <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	60ba      	str	r2, [r7, #8]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	320c      	adds	r2, #12
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2246      	movs	r2, #70	; 0x46
 8004414:	5a9b      	ldrh	r3, [r3, r2]
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d043      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x3a4>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	2b01      	cmp	r3, #1
 8004428:	d13c      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2246      	movs	r2, #70	; 0x46
 800442e:	5a9b      	ldrh	r3, [r3, r2]
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d921      	bls.n	800447a <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3302      	adds	r3, #2
 8004446:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2246      	movs	r2, #70	; 0x46
 800444c:	5a9b      	ldrh	r3, [r3, r2]
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b02      	subs	r3, #2
 8004452:	b299      	uxth	r1, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2246      	movs	r2, #70	; 0x46
 8004458:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2246      	movs	r2, #70	; 0x46
 800445e:	5a9b      	ldrh	r3, [r3, r2]
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d81c      	bhi.n	80044a0 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	0149      	lsls	r1, r1, #5
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e012      	b.n	80044a0 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	001a      	movs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	6079      	str	r1, [r7, #4]
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2246      	movs	r2, #70	; 0x46
 8004492:	5a9b      	ldrh	r3, [r3, r2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b299      	uxth	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2246      	movs	r2, #70	; 0x46
 800449e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a0:	2301      	movs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	3301      	adds	r3, #1
 80044a8:	d00c      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x3c4>
 80044aa:	f7fe faa1 	bl	80029f0 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d804      	bhi.n	80044c4 <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 80044ba:	2323      	movs	r3, #35	; 0x23
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2203      	movs	r2, #3
 80044c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80044c2:	e021      	b.n	8004508 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d000      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x3d0>
 80044ce:	e76a      	b.n	80043a6 <HAL_SPI_TransmitReceive+0x2a6>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2246      	movs	r2, #70	; 0x46
 80044d4:	5a9b      	ldrh	r3, [r3, r2]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d000      	beq.n	80044de <HAL_SPI_TransmitReceive+0x3de>
 80044dc:	e763      	b.n	80043a6 <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f909 	bl	80046fc <SPI_EndRxTxTransaction>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 80044fc:	2323      	movs	r3, #35	; 0x23
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	e000      	b.n	8004508 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8004506:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	225d      	movs	r2, #93	; 0x5d
 800450c:	2101      	movs	r1, #1
 800450e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	225c      	movs	r2, #92	; 0x5c
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004518:	2323      	movs	r3, #35	; 0x23
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	781b      	ldrb	r3, [r3, #0]
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b00a      	add	sp, #40	; 0x28
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	ffffefff 	.word	0xffffefff

0800452c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453a:	e050      	b.n	80045de <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	d04d      	beq.n	80045de <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8004548:	f7fe fa52 	bl	80029f0 <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d842      	bhi.n	80045de <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	21e0      	movs	r1, #224	; 0xe0
 8004564:	438a      	bics	r2, r1
 8004566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	2382      	movs	r3, #130	; 0x82
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	429a      	cmp	r2, r3
 8004572:	d113      	bne.n	800459c <SPI_WaitFlagStateUntilTimeout+0x70>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	429a      	cmp	r2, r3
 800457e:	d005      	beq.n	800458c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2140      	movs	r1, #64	; 0x40
 8004598:	438a      	bics	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d110      	bne.n	80045ca <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4914      	ldr	r1, [pc, #80]	; (8004604 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	0189      	lsls	r1, r1, #6
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	225d      	movs	r2, #93	; 0x5d
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	225c      	movs	r2, #92	; 0x5c
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00e      	b.n	80045fc <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d101      	bne.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80045f2:	2300      	movs	r3, #0
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d1a0      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b004      	add	sp, #16
 8004602:	bd80      	pop	{r7, pc}
 8004604:	ffffdfff 	.word	0xffffdfff

08004608 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8004616:	e062      	b.n	80046de <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	23c0      	movs	r3, #192	; 0xc0
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	429a      	cmp	r2, r3
 8004620:	d10c      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0x34>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	2117      	movs	r1, #23
 8004634:	187b      	adds	r3, r7, r1
 8004636:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004638:	187b      	adds	r3, r7, r1
 800463a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	d04d      	beq.n	80046de <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <SPI_WaitFifoStateUntilTimeout+0x50>
 8004648:	f7fe f9d2 	bl	80029f0 <HAL_GetTick>
 800464c:	0002      	movs	r2, r0
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d842      	bhi.n	80046de <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	21e0      	movs	r1, #224	; 0xe0
 8004664:	438a      	bics	r2, r1
 8004666:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	2382      	movs	r3, #130	; 0x82
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	429a      	cmp	r2, r3
 8004672:	d113      	bne.n	800469c <SPI_WaitFifoStateUntilTimeout+0x94>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	429a      	cmp	r2, r3
 800467e:	d005      	beq.n	800468c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2140      	movs	r1, #64	; 0x40
 8004698:	438a      	bics	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	019b      	lsls	r3, r3, #6
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d110      	bne.n	80046ca <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4911      	ldr	r1, [pc, #68]	; (80046f8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	0189      	lsls	r1, r1, #6
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	225d      	movs	r2, #93	; 0x5d
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	225c      	movs	r2, #92	; 0x5c
 80046d6:	2100      	movs	r1, #0
 80046d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e008      	b.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d194      	bne.n	8004618 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b006      	add	sp, #24
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	ffffdfff 	.word	0xffffdfff

080046fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	23c0      	movs	r3, #192	; 0xc0
 800470c:	0159      	lsls	r1, r3, #5
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	0013      	movs	r3, r2
 8004716:	2200      	movs	r2, #0
 8004718:	f7ff ff76 	bl	8004608 <SPI_WaitFifoStateUntilTimeout>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d007      	beq.n	8004730 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	2220      	movs	r2, #32
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e027      	b.n	8004780 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0013      	movs	r3, r2
 800473a:	2200      	movs	r2, #0
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	f7ff fef5 	bl	800452c <SPI_WaitFlagStateUntilTimeout>
 8004742:	1e03      	subs	r3, r0, #0
 8004744:	d007      	beq.n	8004756 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	2220      	movs	r2, #32
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e014      	b.n	8004780 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	23c0      	movs	r3, #192	; 0xc0
 800475a:	00d9      	lsls	r1, r3, #3
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	0013      	movs	r3, r2
 8004764:	2200      	movs	r2, #0
 8004766:	f7ff ff4f 	bl	8004608 <SPI_WaitFifoStateUntilTimeout>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d007      	beq.n	800477e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004772:	2220      	movs	r2, #32
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e000      	b.n	8004780 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e01e      	b.n	80047d8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	223d      	movs	r2, #61	; 0x3d
 800479e:	5c9b      	ldrb	r3, [r3, r2]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	223c      	movs	r2, #60	; 0x3c
 80047aa:	2100      	movs	r1, #0
 80047ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fd ffe7 	bl	8002784 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	223d      	movs	r2, #61	; 0x3d
 80047ba:	2102      	movs	r1, #2
 80047bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	0019      	movs	r1, r3
 80047c8:	0010      	movs	r0, r2
 80047ca:	f000 fa33 	bl	8004c34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223d      	movs	r2, #61	; 0x3d
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e01e      	b.n	8004830 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	223d      	movs	r2, #61	; 0x3d
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223c      	movs	r2, #60	; 0x3c
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f815 	bl	8004838 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	223d      	movs	r2, #61	; 0x3d
 8004812:	2102      	movs	r1, #2
 8004814:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	0019      	movs	r1, r3
 8004820:	0010      	movs	r0, r2
 8004822:	f000 fa07 	bl	8004c34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223d      	movs	r2, #61	; 0x3d
 800482a:	2101      	movs	r1, #1
 800482c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	0018      	movs	r0, r3
 800485c:	f000 fd20 	bl	80052a0 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIM_PWM_Start+0x78>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_TIM_PWM_Start+0x40>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <HAL_TIM_PWM_Start+0x7c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_TIM_PWM_Start+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_TIM_PWM_Start+0x80>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_TIM_PWM_Start+0x40>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_TIM_PWM_Start+0x84>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_TIM_PWM_Start+0x44>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_TIM_PWM_Start+0x46>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2180      	movs	r1, #128	; 0x80
 800489e:	0209      	lsls	r1, r1, #8
 80048a0:	430a      	orrs	r2, r1
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	223c      	movs	r2, #60	; 0x3c
 80048e0:	5c9b      	ldrb	r3, [r3, r2]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e0af      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x17a>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	223c      	movs	r2, #60	; 0x3c
 80048ee:	2101      	movs	r1, #1
 80048f0:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	223d      	movs	r2, #61	; 0x3d
 80048f6:	2102      	movs	r1, #2
 80048f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d100      	bne.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004900:	e076      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d900      	bls.n	800490a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004908:	e095      	b.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x166>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d04e      	beq.n	80049ae <HAL_TIM_PWM_ConfigChannel+0xde>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b08      	cmp	r3, #8
 8004914:	d900      	bls.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004916:	e08e      	b.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_PWM_ConfigChannel+0x56>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b04      	cmp	r3, #4
 8004922:	d021      	beq.n	8004968 <HAL_TIM_PWM_ConfigChannel+0x98>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8004924:	e087      	b.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x166>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	0011      	movs	r1, r2
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f9f8 	bl	8004d24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2108      	movs	r1, #8
 8004940:	430a      	orrs	r2, r1
 8004942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2104      	movs	r1, #4
 8004950:	438a      	bics	r2, r1
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	619a      	str	r2, [r3, #24]
    break;
 8004966:	e067      	b.n	8004a38 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fa65 	bl	8004e40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	0109      	lsls	r1, r1, #4
 8004984:	430a      	orrs	r2, r1
 8004986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4930      	ldr	r1, [pc, #192]	; (8004a54 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8004994:	400a      	ands	r2, r1
 8004996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6999      	ldr	r1, [r3, #24]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]
    break;
 80049ac:	e044      	b.n	8004a38 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0011      	movs	r1, r2
 80049b6:	0018      	movs	r0, r3
 80049b8:	f000 facc 	bl	8004f54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2108      	movs	r1, #8
 80049c8:	430a      	orrs	r2, r1
 80049ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2104      	movs	r1, #4
 80049d8:	438a      	bics	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69d9      	ldr	r1, [r3, #28]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	61da      	str	r2, [r3, #28]
    break;
 80049ee:	e023      	b.n	8004a38 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	0011      	movs	r1, r2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fb37 	bl	800506c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	0109      	lsls	r1, r1, #4
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69d9      	ldr	r1, [r3, #28]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	61da      	str	r2, [r3, #28]
    break;
 8004a34:	e000      	b.n	8004a38 <HAL_TIM_PWM_ConfigChannel+0x168>
    break;
 8004a36:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	223d      	movs	r2, #61	; 0x3d
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	223c      	movs	r2, #60	; 0x3c
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	fffffbff 	.word	0xfffffbff

08004a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	223c      	movs	r2, #60	; 0x3c
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_ConfigClockSource+0x1c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e0d8      	b.n	8004c26 <HAL_TIM_ConfigClockSource+0x1ce>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223c      	movs	r2, #60	; 0x3c
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	223d      	movs	r2, #61	; 0x3d
 8004a80:	2102      	movs	r1, #2
 8004a82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2277      	movs	r2, #119	; 0x77
 8004a90:	4393      	bics	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a66      	ldr	r2, [pc, #408]	; (8004c30 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2280      	movs	r2, #128	; 0x80
 8004aaa:	0192      	lsls	r2, r2, #6
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d050      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0xfa>
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	0192      	lsls	r2, r2, #6
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d900      	bls.n	8004aba <HAL_TIM_ConfigClockSource+0x62>
 8004ab8:	e0ab      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	0152      	lsls	r2, r2, #5
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d023      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0xb2>
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	0152      	lsls	r2, r2, #5
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d900      	bls.n	8004acc <HAL_TIM_ConfigClockSource+0x74>
 8004aca:	e0a2      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d025      	beq.n	8004b1c <HAL_TIM_ConfigClockSource+0xc4>
 8004ad0:	d900      	bls.n	8004ad4 <HAL_TIM_ConfigClockSource+0x7c>
 8004ad2:	e09e      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d060      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x142>
 8004ad8:	d900      	bls.n	8004adc <HAL_TIM_ConfigClockSource+0x84>
 8004ada:	e09a      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004adc:	2b50      	cmp	r3, #80	; 0x50
 8004ade:	d04c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x122>
 8004ae0:	d900      	bls.n	8004ae4 <HAL_TIM_ConfigClockSource+0x8c>
 8004ae2:	e096      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d068      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x162>
 8004ae8:	d900      	bls.n	8004aec <HAL_TIM_ConfigClockSource+0x94>
 8004aea:	e092      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d100      	bne.n	8004af2 <HAL_TIM_ConfigClockSource+0x9a>
 8004af0:	e088      	b.n	8004c04 <HAL_TIM_ConfigClockSource+0x1ac>
 8004af2:	d900      	bls.n	8004af6 <HAL_TIM_ConfigClockSource+0x9e>
 8004af4:	e08d      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d100      	bne.n	8004afc <HAL_TIM_ConfigClockSource+0xa4>
 8004afa:	e07c      	b.n	8004bf6 <HAL_TIM_ConfigClockSource+0x19e>
 8004afc:	d900      	bls.n	8004b00 <HAL_TIM_ConfigClockSource+0xa8>
 8004afe:	e088      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d06a      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x182>
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d06f      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004b08:	e083      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2107      	movs	r1, #7
 8004b16:	438a      	bics	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
    break;
 8004b1a:	e07b      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f000 fb96 	bl	800525c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2277      	movs	r2, #119	; 0x77
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2277      	movs	r2, #119	; 0x77
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	609a      	str	r2, [r3, #8]
    break;
 8004b50:	e060      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f000 fb7b 	bl	800525c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	01c9      	lsls	r1, r1, #7
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
    break;
 8004b78:	e04c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	001a      	movs	r2, r3
 8004b88:	f000 fae0 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2150      	movs	r1, #80	; 0x50
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 fb42 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004b98:	e03c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	f000 fb02 	bl	80051b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2160      	movs	r1, #96	; 0x60
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fb32 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004bb8:	e02c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	f000 fac0 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 fb22 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004bd8:	e01c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2100      	movs	r1, #0
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 fb1b 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004be6:	e015      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2110      	movs	r1, #16
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 fb14 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004bf4:	e00e      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fb0d 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004c02:	e007      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2130      	movs	r1, #48	; 0x30
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fb06 	bl	800521c <TIM_ITRx_SetConfig>
    break;
 8004c10:	e000      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8004c12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	223d      	movs	r2, #61	; 0x3d
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	223c      	movs	r2, #60	; 0x3c
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	0018      	movs	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b004      	add	sp, #16
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	ffff00ff 	.word	0xffff00ff

08004c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <TIM_Base_SetConfig+0xd4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x24>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <TIM_Base_SetConfig+0xd8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2270      	movs	r2, #112	; 0x70
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <TIM_Base_SetConfig+0xd4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_Base_SetConfig+0x66>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <TIM_Base_SetConfig+0xd8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_Base_SetConfig+0x66>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <TIM_Base_SetConfig+0xdc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_Base_SetConfig+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <TIM_Base_SetConfig+0xe0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_Base_SetConfig+0x66>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <TIM_Base_SetConfig+0xe4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0x66>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <TIM_Base_SetConfig+0xe8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <TIM_Base_SetConfig+0xec>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2280      	movs	r2, #128	; 0x80
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <TIM_Base_SetConfig+0xd4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xbe>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <TIM_Base_SetConfig+0xe0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0xbe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <TIM_Base_SetConfig+0xe4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0xbe>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <TIM_Base_SetConfig+0xe8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d103      	bne.n	8004cfa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	615a      	str	r2, [r3, #20]
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b004      	add	sp, #16
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40002000 	.word	0x40002000
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	fffffcff 	.word	0xfffffcff

08004d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4393      	bics	r3, r2
 8004d42:	001a      	movs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2270      	movs	r2, #112	; 0x70
 8004d5e:	4393      	bics	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2203      	movs	r2, #3
 8004d66:	4393      	bics	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2202      	movs	r2, #2
 8004d78:	4393      	bics	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <TIM_OC1_SetConfig+0x104>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_OC1_SetConfig+0x82>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <TIM_OC1_SetConfig+0x108>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC1_SetConfig+0x82>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <TIM_OC1_SetConfig+0x10c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC1_SetConfig+0x82>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <TIM_OC1_SetConfig+0x110>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10c      	bne.n	8004dc0 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2208      	movs	r2, #8
 8004daa:	4393      	bics	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	4393      	bics	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <TIM_OC1_SetConfig+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_OC1_SetConfig+0xbc>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <TIM_OC1_SetConfig+0x108>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_OC1_SetConfig+0xbc>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC1_SetConfig+0x10c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC1_SetConfig+0xbc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC1_SetConfig+0x110>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d111      	bne.n	8004e04 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC1_SetConfig+0x114>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC1_SetConfig+0x118>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b006      	add	sp, #24
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	fffffeff 	.word	0xfffffeff
 8004e3c:	fffffdff 	.word	0xfffffdff

08004e40 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	4393      	bics	r3, r2
 8004e5e:	001a      	movs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <TIM_OC2_SetConfig+0xf4>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a2d      	ldr	r2, [pc, #180]	; (8004f38 <TIM_OC2_SetConfig+0xf8>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2220      	movs	r2, #32
 8004e96:	4393      	bics	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <TIM_OC2_SetConfig+0xfc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10d      	bne.n	8004eca <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <TIM_OC2_SetConfig+0xfc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_OC2_SetConfig+0xaa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1a      	ldr	r2, [pc, #104]	; (8004f40 <TIM_OC2_SetConfig+0x100>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_OC2_SetConfig+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <TIM_OC2_SetConfig+0x104>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC2_SetConfig+0xaa>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <TIM_OC2_SetConfig+0x108>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <TIM_OC2_SetConfig+0x10c>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <TIM_OC2_SetConfig+0x110>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b006      	add	sp, #24
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	ffff8fff 	.word	0xffff8fff
 8004f38:	fffffcff 	.word	0xfffffcff
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	fffffbff 	.word	0xfffffbff
 8004f50:	fffff7ff 	.word	0xfffff7ff

08004f54 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4a35      	ldr	r2, [pc, #212]	; (8005044 <TIM_OC3_SetConfig+0xf0>)
 8004f70:	401a      	ands	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2270      	movs	r2, #112	; 0x70
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2203      	movs	r2, #3
 8004f94:	4393      	bics	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <TIM_OC3_SetConfig+0xf4>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a24      	ldr	r2, [pc, #144]	; (800504c <TIM_OC3_SetConfig+0xf8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10d      	bne.n	8004fda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	; (8005050 <TIM_OC3_SetConfig+0xfc>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <TIM_OC3_SetConfig+0x100>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <TIM_OC3_SetConfig+0xf8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_OC3_SetConfig+0xa6>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <TIM_OC3_SetConfig+0x104>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_OC3_SetConfig+0xa6>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <TIM_OC3_SetConfig+0x108>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_OC3_SetConfig+0xa6>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <TIM_OC3_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d113      	bne.n	8005022 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <TIM_OC3_SetConfig+0x110>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4a18      	ldr	r2, [pc, #96]	; (8005068 <TIM_OC3_SetConfig+0x114>)
 8005006:	4013      	ands	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b006      	add	sp, #24
 8005042:	bd80      	pop	{r7, pc}
 8005044:	fffffeff 	.word	0xfffffeff
 8005048:	fffffdff 	.word	0xfffffdff
 800504c:	40012c00 	.word	0x40012c00
 8005050:	fffff7ff 	.word	0xfffff7ff
 8005054:	fffffbff 	.word	0xfffffbff
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	ffffefff 	.word	0xffffefff
 8005068:	ffffdfff 	.word	0xffffdfff

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <TIM_OC4_SetConfig+0xbc>)
 8005088:	401a      	ands	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4a22      	ldr	r2, [pc, #136]	; (800512c <TIM_OC4_SetConfig+0xc0>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4a21      	ldr	r2, [pc, #132]	; (8005130 <TIM_OC4_SetConfig+0xc4>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <TIM_OC4_SetConfig+0xc8>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a19      	ldr	r2, [pc, #100]	; (8005138 <TIM_OC4_SetConfig+0xcc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <TIM_OC4_SetConfig+0x84>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a18      	ldr	r2, [pc, #96]	; (800513c <TIM_OC4_SetConfig+0xd0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_OC4_SetConfig+0x84>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a17      	ldr	r2, [pc, #92]	; (8005140 <TIM_OC4_SetConfig+0xd4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_OC4_SetConfig+0x84>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a16      	ldr	r2, [pc, #88]	; (8005144 <TIM_OC4_SetConfig+0xd8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d109      	bne.n	8005104 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4a15      	ldr	r2, [pc, #84]	; (8005148 <TIM_OC4_SetConfig+0xdc>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b006      	add	sp, #24
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	ffffefff 	.word	0xffffefff
 800512c:	ffff8fff 	.word	0xffff8fff
 8005130:	fffffcff 	.word	0xfffffcff
 8005134:	ffffdfff 	.word	0xffffdfff
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	ffffbfff 	.word	0xffffbfff

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2201      	movs	r2, #1
 800516c:	4393      	bics	r3, r2
 800516e:	001a      	movs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	22f0      	movs	r2, #240	; 0xf0
 800517e:	4393      	bics	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	220a      	movs	r2, #10
 8005190:	4393      	bics	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b006      	add	sp, #24
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	2210      	movs	r2, #16
 80051ca:	4393      	bics	r3, r2
 80051cc:	001a      	movs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <TIM_TI2_ConfigInputStage+0x68>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	031b      	lsls	r3, r3, #12
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	22a0      	movs	r2, #160	; 0xa0
 80051f4:	4393      	bics	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b006      	add	sp, #24
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	ffff0fff 	.word	0xffff0fff

0800521c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	000a      	movs	r2, r1
 8005226:	1cbb      	adds	r3, r7, #2
 8005228:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2270      	movs	r2, #112	; 0x70
 8005238:	4393      	bics	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800523c:	1cbb      	adds	r3, r7, #2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	2207      	movs	r2, #7
 8005242:	4313      	orrs	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	001a      	movs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b004      	add	sp, #16
 800525a:	bd80      	pop	{r7, pc}

0800525c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <TIM_ETR_SetConfig+0x40>)
 8005278:	4013      	ands	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	431a      	orrs	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	b006      	add	sp, #24
 800529a:	bd80      	pop	{r7, pc}
 800529c:	ffff00ff 	.word	0xffff00ff

080052a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80052b0:	2201      	movs	r2, #1
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	409a      	lsls	r2, r3
 80052b6:	0013      	movs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	43d2      	mvns	r2, r2
 80052c2:	401a      	ands	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4099      	lsls	r1, r3
 80052d2:	000b      	movs	r3, r1
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b006      	add	sp, #24
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	223c      	movs	r2, #60	; 0x3c
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e032      	b.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	223c      	movs	r2, #60	; 0x3c
 80052fe:	2101      	movs	r1, #1
 8005300:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223d      	movs	r2, #61	; 0x3d
 8005306:	2102      	movs	r1, #2
 8005308:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2170      	movs	r1, #112	; 0x70
 8005316:	438a      	bics	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	438a      	bics	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6899      	ldr	r1, [r3, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	223d      	movs	r2, #61	; 0x3d
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	223c      	movs	r2, #60	; 0x3c
 800535a:	2100      	movs	r1, #0
 800535c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e04d      	b.n	8005420 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223c      	movs	r2, #60	; 0x3c
 8005388:	2101      	movs	r1, #1
 800538a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223d      	movs	r2, #61	; 0x3d
 8005390:	2102      	movs	r1, #2
 8005392:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	22ff      	movs	r2, #255	; 0xff
 8005398:	4393      	bics	r3, r2
 800539a:	001a      	movs	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80053a8:	401a      	ands	r2, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 80053b6:	401a      	ands	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 80053c4:	401a      	ands	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 80053d2:	401a      	ands	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80053e0:	401a      	ands	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 80053ee:	401a      	ands	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 80053fc:	401a      	ands	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223d      	movs	r2, #61	; 0x3d
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	223c      	movs	r2, #60	; 0x3c
 800541a:	2100      	movs	r1, #0
 800541c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}
 8005428:	fffffcff 	.word	0xfffffcff
 800542c:	fffffbff 	.word	0xfffffbff
 8005430:	fffff7ff 	.word	0xfffff7ff
 8005434:	ffffefff 	.word	0xffffefff
 8005438:	ffffdfff 	.word	0xffffdfff
 800543c:	ffffbfff 	.word	0xffffbfff
 8005440:	ffff7fff 	.word	0xffff7fff

08005444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e047      	b.n	80054e6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2269      	movs	r2, #105	; 0x69
 800545a:	5c9b      	ldrb	r3, [r3, r2]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2268      	movs	r2, #104	; 0x68
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f7fd fa21 	bl	80028b4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2269      	movs	r2, #105	; 0x69
 8005476:	2124      	movs	r1, #36	; 0x24
 8005478:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	438a      	bics	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0018      	movs	r0, r3
 800548e:	f000 f831 	bl	80054f4 <UART_SetConfig>
 8005492:	0003      	movs	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e024      	b.n	80054e6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f9cc 	bl	8005844 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	490e      	ldr	r1, [pc, #56]	; (80054f0 <HAL_UART_Init+0xac>)
 80054b8:	400a      	ands	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2108      	movs	r1, #8
 80054c8:	438a      	bics	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 fa64 	bl	80059ac <UART_CheckIdleState>
 80054e4:	0003      	movs	r3, r0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	fffff7ff 	.word	0xfffff7ff

080054f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005500:	2317      	movs	r3, #23
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2210      	movs	r2, #16
 8005506:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005508:	230a      	movs	r3, #10
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	2200      	movs	r2, #0
 800550e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005510:	2314      	movs	r3, #20
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	2200      	movs	r2, #0
 8005516:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005518:	2313      	movs	r3, #19
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4ab5      	ldr	r2, [pc, #724]	; (8005814 <UART_SetConfig+0x320>)
 8005540:	4013      	ands	r3, r2
 8005542:	0019      	movs	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4ab0      	ldr	r2, [pc, #704]	; (8005818 <UART_SetConfig+0x324>)
 8005556:	4013      	ands	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4aa8      	ldr	r2, [pc, #672]	; (800581c <UART_SetConfig+0x328>)
 800557a:	4013      	ands	r3, r2
 800557c:	0019      	movs	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4aa4      	ldr	r2, [pc, #656]	; (8005820 <UART_SetConfig+0x32c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d127      	bne.n	80055e2 <UART_SetConfig+0xee>
 8005592:	4ba4      	ldr	r3, [pc, #656]	; (8005824 <UART_SetConfig+0x330>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	2203      	movs	r2, #3
 8005598:	4013      	ands	r3, r2
 800559a:	2b03      	cmp	r3, #3
 800559c:	d00d      	beq.n	80055ba <UART_SetConfig+0xc6>
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0xe4>
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d014      	beq.n	80055ce <UART_SetConfig+0xda>
 80055a4:	d818      	bhi.n	80055d8 <UART_SetConfig+0xe4>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <UART_SetConfig+0xbc>
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d00a      	beq.n	80055c4 <UART_SetConfig+0xd0>
 80055ae:	e013      	b.n	80055d8 <UART_SetConfig+0xe4>
 80055b0:	2317      	movs	r3, #23
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e049      	b.n	800564e <UART_SetConfig+0x15a>
 80055ba:	2317      	movs	r3, #23
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	2202      	movs	r2, #2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e044      	b.n	800564e <UART_SetConfig+0x15a>
 80055c4:	2317      	movs	r3, #23
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	2204      	movs	r2, #4
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e03f      	b.n	800564e <UART_SetConfig+0x15a>
 80055ce:	2317      	movs	r3, #23
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	2208      	movs	r2, #8
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e03a      	b.n	800564e <UART_SetConfig+0x15a>
 80055d8:	2317      	movs	r3, #23
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2210      	movs	r2, #16
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e035      	b.n	800564e <UART_SetConfig+0x15a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a90      	ldr	r2, [pc, #576]	; (8005828 <UART_SetConfig+0x334>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d104      	bne.n	80055f6 <UART_SetConfig+0x102>
 80055ec:	2317      	movs	r3, #23
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e02b      	b.n	800564e <UART_SetConfig+0x15a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a8c      	ldr	r2, [pc, #560]	; (800582c <UART_SetConfig+0x338>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d104      	bne.n	800560a <UART_SetConfig+0x116>
 8005600:	2317      	movs	r3, #23
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e021      	b.n	800564e <UART_SetConfig+0x15a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a88      	ldr	r2, [pc, #544]	; (8005830 <UART_SetConfig+0x33c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d104      	bne.n	800561e <UART_SetConfig+0x12a>
 8005614:	2317      	movs	r3, #23
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e017      	b.n	800564e <UART_SetConfig+0x15a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a84      	ldr	r2, [pc, #528]	; (8005834 <UART_SetConfig+0x340>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d104      	bne.n	8005632 <UART_SetConfig+0x13e>
 8005628:	2317      	movs	r3, #23
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e00d      	b.n	800564e <UART_SetConfig+0x15a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a80      	ldr	r2, [pc, #512]	; (8005838 <UART_SetConfig+0x344>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d104      	bne.n	8005646 <UART_SetConfig+0x152>
 800563c:	2317      	movs	r3, #23
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e003      	b.n	800564e <UART_SetConfig+0x15a>
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	2210      	movs	r2, #16
 800564c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	429a      	cmp	r2, r3
 8005658:	d000      	beq.n	800565c <UART_SetConfig+0x168>
 800565a:	e077      	b.n	800574c <UART_SetConfig+0x258>
  {
    switch (clocksource)
 800565c:	2317      	movs	r3, #23
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b08      	cmp	r3, #8
 8005664:	d041      	beq.n	80056ea <UART_SetConfig+0x1f6>
 8005666:	dc52      	bgt.n	800570e <UART_SetConfig+0x21a>
 8005668:	2b04      	cmp	r3, #4
 800566a:	d02a      	beq.n	80056c2 <UART_SetConfig+0x1ce>
 800566c:	dc4f      	bgt.n	800570e <UART_SetConfig+0x21a>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <UART_SetConfig+0x184>
 8005672:	2b02      	cmp	r3, #2
 8005674:	d014      	beq.n	80056a0 <UART_SetConfig+0x1ac>
 8005676:	e04a      	b.n	800570e <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005678:	f7fe fbc4 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 800567c:	0003      	movs	r3, r0
 800567e:	005a      	lsls	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	18d2      	adds	r2, r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	0019      	movs	r1, r3
 800568e:	0010      	movs	r0, r2
 8005690:	f7fa fd38 	bl	8000104 <__udivsi3>
 8005694:	0003      	movs	r3, r0
 8005696:	001a      	movs	r2, r3
 8005698:	2314      	movs	r3, #20
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	801a      	strh	r2, [r3, #0]
        break;
 800569e:	e03b      	b.n	8005718 <UART_SetConfig+0x224>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	4a65      	ldr	r2, [pc, #404]	; (800583c <UART_SetConfig+0x348>)
 80056a8:	189a      	adds	r2, r3, r2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	0019      	movs	r1, r3
 80056b0:	0010      	movs	r0, r2
 80056b2:	f7fa fd27 	bl	8000104 <__udivsi3>
 80056b6:	0003      	movs	r3, r0
 80056b8:	001a      	movs	r2, r3
 80056ba:	2314      	movs	r3, #20
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	801a      	strh	r2, [r3, #0]
        break;
 80056c0:	e02a      	b.n	8005718 <UART_SetConfig+0x224>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80056c2:	f7fe fb2f 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 80056c6:	0003      	movs	r3, r0
 80056c8:	005a      	lsls	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	18d2      	adds	r2, r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	0019      	movs	r1, r3
 80056d8:	0010      	movs	r0, r2
 80056da:	f7fa fd13 	bl	8000104 <__udivsi3>
 80056de:	0003      	movs	r3, r0
 80056e0:	001a      	movs	r2, r3
 80056e2:	2314      	movs	r3, #20
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	801a      	strh	r2, [r3, #0]
        break;
 80056e8:	e016      	b.n	8005718 <UART_SetConfig+0x224>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	0252      	lsls	r2, r2, #9
 80056f4:	189a      	adds	r2, r3, r2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0019      	movs	r1, r3
 80056fc:	0010      	movs	r0, r2
 80056fe:	f7fa fd01 	bl	8000104 <__udivsi3>
 8005702:	0003      	movs	r3, r0
 8005704:	001a      	movs	r2, r3
 8005706:	2314      	movs	r3, #20
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	801a      	strh	r2, [r3, #0]
        break;
 800570c:	e004      	b.n	8005718 <UART_SetConfig+0x224>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800570e:	2313      	movs	r3, #19
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
        break;
 8005716:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005718:	200a      	movs	r0, #10
 800571a:	183b      	adds	r3, r7, r0
 800571c:	2414      	movs	r4, #20
 800571e:	193a      	adds	r2, r7, r4
 8005720:	8812      	ldrh	r2, [r2, #0]
 8005722:	210f      	movs	r1, #15
 8005724:	438a      	bics	r2, r1
 8005726:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005728:	193b      	adds	r3, r7, r4
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	105b      	asrs	r3, r3, #1
 800572e:	b29b      	uxth	r3, r3
 8005730:	2207      	movs	r2, #7
 8005732:	4013      	ands	r3, r2
 8005734:	b299      	uxth	r1, r3
 8005736:	183b      	adds	r3, r7, r0
 8005738:	183a      	adds	r2, r7, r0
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	183a      	adds	r2, r7, r0
 8005746:	8812      	ldrh	r2, [r2, #0]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	e05b      	b.n	8005804 <UART_SetConfig+0x310>
  }
  else
  {
    switch (clocksource)
 800574c:	2317      	movs	r3, #23
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b08      	cmp	r3, #8
 8005754:	d03f      	beq.n	80057d6 <UART_SetConfig+0x2e2>
 8005756:	dc50      	bgt.n	80057fa <UART_SetConfig+0x306>
 8005758:	2b04      	cmp	r3, #4
 800575a:	d029      	beq.n	80057b0 <UART_SetConfig+0x2bc>
 800575c:	dc4d      	bgt.n	80057fa <UART_SetConfig+0x306>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <UART_SetConfig+0x274>
 8005762:	2b02      	cmp	r3, #2
 8005764:	d013      	beq.n	800578e <UART_SetConfig+0x29a>
 8005766:	e048      	b.n	80057fa <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005768:	f7fe fb4c 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 800576c:	0002      	movs	r2, r0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	18d2      	adds	r2, r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	0019      	movs	r1, r3
 800577c:	0010      	movs	r0, r2
 800577e:	f7fa fcc1 	bl	8000104 <__udivsi3>
 8005782:	0003      	movs	r3, r0
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60da      	str	r2, [r3, #12]
        break;
 800578c:	e03a      	b.n	8005804 <UART_SetConfig+0x310>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <UART_SetConfig+0x34c>)
 8005796:	189a      	adds	r2, r3, r2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0019      	movs	r1, r3
 800579e:	0010      	movs	r0, r2
 80057a0:	f7fa fcb0 	bl	8000104 <__udivsi3>
 80057a4:	0003      	movs	r3, r0
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
        break;
 80057ae:	e029      	b.n	8005804 <UART_SetConfig+0x310>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80057b0:	f7fe fab8 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 80057b4:	0002      	movs	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	18d2      	adds	r2, r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	0019      	movs	r1, r3
 80057c4:	0010      	movs	r0, r2
 80057c6:	f7fa fc9d 	bl	8000104 <__udivsi3>
 80057ca:	0003      	movs	r3, r0
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60da      	str	r2, [r3, #12]
        break;
 80057d4:	e016      	b.n	8005804 <UART_SetConfig+0x310>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	0212      	lsls	r2, r2, #8
 80057e0:	189a      	adds	r2, r3, r2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	0019      	movs	r1, r3
 80057e8:	0010      	movs	r0, r2
 80057ea:	f7fa fc8b 	bl	8000104 <__udivsi3>
 80057ee:	0003      	movs	r3, r0
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
        break;
 80057f8:	e004      	b.n	8005804 <UART_SetConfig+0x310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80057fa:	2313      	movs	r3, #19
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
        break;
 8005802:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8005804:	2313      	movs	r3, #19
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	781b      	ldrb	r3, [r3, #0]

}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b007      	add	sp, #28
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	efff69f3 	.word	0xefff69f3
 8005818:	ffffcfff 	.word	0xffffcfff
 800581c:	fffff4ff 	.word	0xfffff4ff
 8005820:	40013800 	.word	0x40013800
 8005824:	40021000 	.word	0x40021000
 8005828:	40004400 	.word	0x40004400
 800582c:	40004800 	.word	0x40004800
 8005830:	40004c00 	.word	0x40004c00
 8005834:	40005000 	.word	0x40005000
 8005838:	40011400 	.word	0x40011400
 800583c:	00f42400 	.word	0x00f42400
 8005840:	007a1200 	.word	0x007a1200

08005844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2201      	movs	r2, #1
 8005852:	4013      	ands	r3, r2
 8005854:	d00b      	beq.n	800586e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <UART_AdvFeatureConfig+0x144>)
 800585e:	4013      	ands	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2202      	movs	r2, #2
 8005874:	4013      	ands	r3, r2
 8005876:	d00b      	beq.n	8005890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4a43      	ldr	r2, [pc, #268]	; (800598c <UART_AdvFeatureConfig+0x148>)
 8005880:	4013      	ands	r3, r2
 8005882:	0019      	movs	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2204      	movs	r2, #4
 8005896:	4013      	ands	r3, r2
 8005898:	d00b      	beq.n	80058b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a3b      	ldr	r2, [pc, #236]	; (8005990 <UART_AdvFeatureConfig+0x14c>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2208      	movs	r2, #8
 80058b8:	4013      	ands	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4a34      	ldr	r2, [pc, #208]	; (8005994 <UART_AdvFeatureConfig+0x150>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2210      	movs	r2, #16
 80058da:	4013      	ands	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4a2c      	ldr	r2, [pc, #176]	; (8005998 <UART_AdvFeatureConfig+0x154>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	0019      	movs	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2220      	movs	r2, #32
 80058fc:	4013      	ands	r3, r2
 80058fe:	d00b      	beq.n	8005918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	4a25      	ldr	r2, [pc, #148]	; (800599c <UART_AdvFeatureConfig+0x158>)
 8005908:	4013      	ands	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2240      	movs	r2, #64	; 0x40
 800591e:	4013      	ands	r3, r2
 8005920:	d01d      	beq.n	800595e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <UART_AdvFeatureConfig+0x15c>)
 800592a:	4013      	ands	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	035b      	lsls	r3, r3, #13
 8005942:	429a      	cmp	r2, r3
 8005944:	d10b      	bne.n	800595e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <UART_AdvFeatureConfig+0x160>)
 800594e:	4013      	ands	r3, r2
 8005950:	0019      	movs	r1, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	4013      	ands	r3, r2
 8005966:	d00b      	beq.n	8005980 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4a0e      	ldr	r2, [pc, #56]	; (80059a8 <UART_AdvFeatureConfig+0x164>)
 8005970:	4013      	ands	r3, r2
 8005972:	0019      	movs	r1, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	b002      	add	sp, #8
 8005986:	bd80      	pop	{r7, pc}
 8005988:	fffdffff 	.word	0xfffdffff
 800598c:	fffeffff 	.word	0xfffeffff
 8005990:	fffbffff 	.word	0xfffbffff
 8005994:	ffff7fff 	.word	0xffff7fff
 8005998:	ffffefff 	.word	0xffffefff
 800599c:	ffffdfff 	.word	0xffffdfff
 80059a0:	ffefffff 	.word	0xffefffff
 80059a4:	ff9fffff 	.word	0xff9fffff
 80059a8:	fff7ffff 	.word	0xfff7ffff

080059ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2269      	movs	r2, #105	; 0x69
 80059be:	2120      	movs	r1, #32
 80059c0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	226a      	movs	r2, #106	; 0x6a
 80059c6:	2120      	movs	r1, #32
 80059c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2268      	movs	r2, #104	; 0x68
 80059ce:	2100      	movs	r1, #0
 80059d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	2600      	movs	r6, #0
 80059e0:	4d0c      	ldr	r5, [pc, #48]	; (8005a14 <__libc_init_array+0x38>)
 80059e2:	4c0d      	ldr	r4, [pc, #52]	; (8005a18 <__libc_init_array+0x3c>)
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	42a6      	cmp	r6, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	2600      	movs	r6, #0
 80059ee:	f000 f819 	bl	8005a24 <_init>
 80059f2:	4d0a      	ldr	r5, [pc, #40]	; (8005a1c <__libc_init_array+0x40>)
 80059f4:	4c0a      	ldr	r4, [pc, #40]	; (8005a20 <__libc_init_array+0x44>)
 80059f6:	1b64      	subs	r4, r4, r5
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	42a6      	cmp	r6, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	00b3      	lsls	r3, r6, #2
 8005a02:	58eb      	ldr	r3, [r5, r3]
 8005a04:	4798      	blx	r3
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	00b3      	lsls	r3, r6, #2
 8005a0c:	58eb      	ldr	r3, [r5, r3]
 8005a0e:	4798      	blx	r3
 8005a10:	3601      	adds	r6, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	08005b58 	.word	0x08005b58
 8005a18:	08005b58 	.word	0x08005b58
 8005a1c:	08005b58 	.word	0x08005b58
 8005a20:	08005b5c 	.word	0x08005b5c

08005a24 <_init>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr

08005a30 <_fini>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr
