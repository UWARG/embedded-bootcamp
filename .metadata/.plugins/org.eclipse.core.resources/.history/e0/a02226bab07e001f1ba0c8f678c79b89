/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include <stdlib.h>
TIM_HandleTypeDef htim2; // Using TIM2

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PWM_MIN 3000
#define PWM_MAX 6000
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t pT_data[3] = {0x01, 0x80, 0x00};
uint8_t pR_data[3];
uint16_t size = 3;
uint32_t timeout = HAL_MAX_DELAY;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
double ADCToPWM(int ADC_val);
void decToBinary(long decimal_val, int* fill_array);
int binaryArrayToDecimal(int binary[], int size);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM on TIM2 channel 1

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
      HAL_SPI_TransmitReceive(&hspi1, pT_data, pR_data, size, timeout);
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);

      /* Process ADC data */
      int first_8_bits[8];
      int last_8_bits[8];

      /* Convert received bytes to binary */
      decToBinary((int)pR_data[1], first_8_bits);
      decToBinary((int)pR_data[2], last_8_bits);

      int ADC_binary[10];
      /* Extract useful bits */
      for(int i = 0; i < 2; i++) {
          ADC_binary[9-i] = first_8_bits[6+i];
      }
      for(int i = 0; i < 8; i++) {
          ADC_binary[7-i] = last_8_bits[i];
      }

      /* Convert binary to decimal */
      int ADC_val = binaryArrayToDecimal(ADC_binary, 10);
      /* Set compare register for TIM2 */
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ADCToPWM(ADC_val)); // Use htim2
      HAL_Delay(10);
  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
      Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
      Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
      Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
double ADCToPWM(int ADC_val) {
    return (ADC_val * (PWM_MAX - PWM_MIN) / 1023) + PWM_MIN;
}

void decToBinary(long decimal_val, int fill_array[]) {
    int curVal = decimal_val;
    int i = 0;

    while (curVal > 0) {
        fill_array[i] = curVal % 2;
        curVal = curVal / 2;
        i++;
    }

    // Reverse the array for proper order
    for (int j = 0; j < i / 2; j++) {
        int temp = fill_array[j];
        fill_array[j] = fill_array[i - j - 1];
        fill_array[i - j - 1] = temp;
    }
}

int binaryArrayToDecimal(int binary[], int size) {
    int decimalValue = 0;
    for (int i = 0; i < size; i++) {
        decimalValue = (decimalValue << 1) | binary[i];
    }
    return decimalValue;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number */
}
#endif /* USE_FULL_ASSERT */
