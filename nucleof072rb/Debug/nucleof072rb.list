
nucleof072rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004484  08004484  00005484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044bc  080044bc  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  080044bc  080044bc  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044bc  080044bc  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080044c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000018  080044dc  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080044dc  00006170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e48c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002140  00000000  00000000  000144cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00016610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad4  00000000  00000000  000173d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a615  00000000  00000000  00017eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011da5  00000000  00000000  000324c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a37b  00000000  00000000  00044266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de5e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000de624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e18d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800446c 	.word	0x0800446c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	0800446c 	.word	0x0800446c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f000 fc51 	bl	8000ca4 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f000 fbad 	bl	8000b68 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 f80a 	bl	8000430 <__aeabi_dsub>
 800041c:	f000 fba4 	bl	8000b68 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	@ 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_dsub>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464e      	mov	r6, r9
 8000434:	4645      	mov	r5, r8
 8000436:	46de      	mov	lr, fp
 8000438:	4657      	mov	r7, sl
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	b085      	sub	sp, #20
 800043e:	9000      	str	r0, [sp, #0]
 8000440:	9101      	str	r1, [sp, #4]
 8000442:	030c      	lsls	r4, r1, #12
 8000444:	004f      	lsls	r7, r1, #1
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	0a61      	lsrs	r1, r4, #9
 800044a:	9c00      	ldr	r4, [sp, #0]
 800044c:	46b0      	mov	r8, r6
 800044e:	0f64      	lsrs	r4, r4, #29
 8000450:	430c      	orrs	r4, r1
 8000452:	9900      	ldr	r1, [sp, #0]
 8000454:	0d7f      	lsrs	r7, r7, #21
 8000456:	00c8      	lsls	r0, r1, #3
 8000458:	0011      	movs	r1, r2
 800045a:	001a      	movs	r2, r3
 800045c:	031b      	lsls	r3, r3, #12
 800045e:	469c      	mov	ip, r3
 8000460:	9100      	str	r1, [sp, #0]
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	0051      	lsls	r1, r2, #1
 8000466:	0d4b      	lsrs	r3, r1, #21
 8000468:	4699      	mov	r9, r3
 800046a:	9b01      	ldr	r3, [sp, #4]
 800046c:	9d00      	ldr	r5, [sp, #0]
 800046e:	0fd9      	lsrs	r1, r3, #31
 8000470:	4663      	mov	r3, ip
 8000472:	0f6a      	lsrs	r2, r5, #29
 8000474:	0a5b      	lsrs	r3, r3, #9
 8000476:	4313      	orrs	r3, r2
 8000478:	00ea      	lsls	r2, r5, #3
 800047a:	4694      	mov	ip, r2
 800047c:	4693      	mov	fp, r2
 800047e:	4ac1      	ldr	r2, [pc, #772]	@ (8000784 <__aeabi_dsub+0x354>)
 8000480:	9003      	str	r0, [sp, #12]
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	4591      	cmp	r9, r2
 8000486:	d100      	bne.n	800048a <__aeabi_dsub+0x5a>
 8000488:	e0cd      	b.n	8000626 <__aeabi_dsub+0x1f6>
 800048a:	2501      	movs	r5, #1
 800048c:	4069      	eors	r1, r5
 800048e:	464d      	mov	r5, r9
 8000490:	1b7d      	subs	r5, r7, r5
 8000492:	46aa      	mov	sl, r5
 8000494:	428e      	cmp	r6, r1
 8000496:	d100      	bne.n	800049a <__aeabi_dsub+0x6a>
 8000498:	e080      	b.n	800059c <__aeabi_dsub+0x16c>
 800049a:	2d00      	cmp	r5, #0
 800049c:	dc00      	bgt.n	80004a0 <__aeabi_dsub+0x70>
 800049e:	e335      	b.n	8000b0c <__aeabi_dsub+0x6dc>
 80004a0:	4649      	mov	r1, r9
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x78>
 80004a6:	e0df      	b.n	8000668 <__aeabi_dsub+0x238>
 80004a8:	4297      	cmp	r7, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dsub+0x7e>
 80004ac:	e194      	b.n	80007d8 <__aeabi_dsub+0x3a8>
 80004ae:	4652      	mov	r2, sl
 80004b0:	2501      	movs	r5, #1
 80004b2:	2a38      	cmp	r2, #56	@ 0x38
 80004b4:	dc19      	bgt.n	80004ea <__aeabi_dsub+0xba>
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	9b02      	ldr	r3, [sp, #8]
 80004ba:	0412      	lsls	r2, r2, #16
 80004bc:	4313      	orrs	r3, r2
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	4652      	mov	r2, sl
 80004c2:	2a1f      	cmp	r2, #31
 80004c4:	dd00      	ble.n	80004c8 <__aeabi_dsub+0x98>
 80004c6:	e1e3      	b.n	8000890 <__aeabi_dsub+0x460>
 80004c8:	4653      	mov	r3, sl
 80004ca:	2220      	movs	r2, #32
 80004cc:	4661      	mov	r1, ip
 80004ce:	9d02      	ldr	r5, [sp, #8]
 80004d0:	1ad2      	subs	r2, r2, r3
 80004d2:	4095      	lsls	r5, r2
 80004d4:	40d9      	lsrs	r1, r3
 80004d6:	430d      	orrs	r5, r1
 80004d8:	4661      	mov	r1, ip
 80004da:	4091      	lsls	r1, r2
 80004dc:	000a      	movs	r2, r1
 80004de:	1e51      	subs	r1, r2, #1
 80004e0:	418a      	sbcs	r2, r1
 80004e2:	4315      	orrs	r5, r2
 80004e4:	9a02      	ldr	r2, [sp, #8]
 80004e6:	40da      	lsrs	r2, r3
 80004e8:	1aa4      	subs	r4, r4, r2
 80004ea:	1b45      	subs	r5, r0, r5
 80004ec:	42a8      	cmp	r0, r5
 80004ee:	4180      	sbcs	r0, r0
 80004f0:	4240      	negs	r0, r0
 80004f2:	1a24      	subs	r4, r4, r0
 80004f4:	0223      	lsls	r3, r4, #8
 80004f6:	d400      	bmi.n	80004fa <__aeabi_dsub+0xca>
 80004f8:	e13d      	b.n	8000776 <__aeabi_dsub+0x346>
 80004fa:	0264      	lsls	r4, r4, #9
 80004fc:	0a64      	lsrs	r4, r4, #9
 80004fe:	2c00      	cmp	r4, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_dsub+0xd4>
 8000502:	e147      	b.n	8000794 <__aeabi_dsub+0x364>
 8000504:	0020      	movs	r0, r4
 8000506:	f000 fbd7 	bl	8000cb8 <__clzsi2>
 800050a:	0003      	movs	r3, r0
 800050c:	3b08      	subs	r3, #8
 800050e:	2120      	movs	r1, #32
 8000510:	0028      	movs	r0, r5
 8000512:	1aca      	subs	r2, r1, r3
 8000514:	40d0      	lsrs	r0, r2
 8000516:	409c      	lsls	r4, r3
 8000518:	0002      	movs	r2, r0
 800051a:	409d      	lsls	r5, r3
 800051c:	4322      	orrs	r2, r4
 800051e:	429f      	cmp	r7, r3
 8000520:	dd00      	ble.n	8000524 <__aeabi_dsub+0xf4>
 8000522:	e177      	b.n	8000814 <__aeabi_dsub+0x3e4>
 8000524:	1bd8      	subs	r0, r3, r7
 8000526:	3001      	adds	r0, #1
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	002c      	movs	r4, r5
 800052c:	408d      	lsls	r5, r1
 800052e:	40c4      	lsrs	r4, r0
 8000530:	1e6b      	subs	r3, r5, #1
 8000532:	419d      	sbcs	r5, r3
 8000534:	0013      	movs	r3, r2
 8000536:	40c2      	lsrs	r2, r0
 8000538:	408b      	lsls	r3, r1
 800053a:	4325      	orrs	r5, r4
 800053c:	2700      	movs	r7, #0
 800053e:	0014      	movs	r4, r2
 8000540:	431d      	orrs	r5, r3
 8000542:	076b      	lsls	r3, r5, #29
 8000544:	d009      	beq.n	800055a <__aeabi_dsub+0x12a>
 8000546:	230f      	movs	r3, #15
 8000548:	402b      	ands	r3, r5
 800054a:	2b04      	cmp	r3, #4
 800054c:	d005      	beq.n	800055a <__aeabi_dsub+0x12a>
 800054e:	1d2b      	adds	r3, r5, #4
 8000550:	42ab      	cmp	r3, r5
 8000552:	41ad      	sbcs	r5, r5
 8000554:	426d      	negs	r5, r5
 8000556:	1964      	adds	r4, r4, r5
 8000558:	001d      	movs	r5, r3
 800055a:	0223      	lsls	r3, r4, #8
 800055c:	d400      	bmi.n	8000560 <__aeabi_dsub+0x130>
 800055e:	e140      	b.n	80007e2 <__aeabi_dsub+0x3b2>
 8000560:	4a88      	ldr	r2, [pc, #544]	@ (8000784 <__aeabi_dsub+0x354>)
 8000562:	3701      	adds	r7, #1
 8000564:	4297      	cmp	r7, r2
 8000566:	d100      	bne.n	800056a <__aeabi_dsub+0x13a>
 8000568:	e101      	b.n	800076e <__aeabi_dsub+0x33e>
 800056a:	2601      	movs	r6, #1
 800056c:	4643      	mov	r3, r8
 800056e:	4986      	ldr	r1, [pc, #536]	@ (8000788 <__aeabi_dsub+0x358>)
 8000570:	08ed      	lsrs	r5, r5, #3
 8000572:	4021      	ands	r1, r4
 8000574:	074a      	lsls	r2, r1, #29
 8000576:	432a      	orrs	r2, r5
 8000578:	057c      	lsls	r4, r7, #21
 800057a:	024d      	lsls	r5, r1, #9
 800057c:	0b2d      	lsrs	r5, r5, #12
 800057e:	0d64      	lsrs	r4, r4, #21
 8000580:	401e      	ands	r6, r3
 8000582:	0524      	lsls	r4, r4, #20
 8000584:	432c      	orrs	r4, r5
 8000586:	07f6      	lsls	r6, r6, #31
 8000588:	4334      	orrs	r4, r6
 800058a:	0010      	movs	r0, r2
 800058c:	0021      	movs	r1, r4
 800058e:	b005      	add	sp, #20
 8000590:	bcf0      	pop	{r4, r5, r6, r7}
 8000592:	46bb      	mov	fp, r7
 8000594:	46b2      	mov	sl, r6
 8000596:	46a9      	mov	r9, r5
 8000598:	46a0      	mov	r8, r4
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059c:	2d00      	cmp	r5, #0
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dsub+0x172>
 80005a0:	e2d0      	b.n	8000b44 <__aeabi_dsub+0x714>
 80005a2:	4649      	mov	r1, r9
 80005a4:	2900      	cmp	r1, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_dsub+0x17a>
 80005a8:	e0d4      	b.n	8000754 <__aeabi_dsub+0x324>
 80005aa:	4661      	mov	r1, ip
 80005ac:	9b02      	ldr	r3, [sp, #8]
 80005ae:	4319      	orrs	r1, r3
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dsub+0x184>
 80005b2:	e12b      	b.n	800080c <__aeabi_dsub+0x3dc>
 80005b4:	1e69      	subs	r1, r5, #1
 80005b6:	2d01      	cmp	r5, #1
 80005b8:	d100      	bne.n	80005bc <__aeabi_dsub+0x18c>
 80005ba:	e1d9      	b.n	8000970 <__aeabi_dsub+0x540>
 80005bc:	4295      	cmp	r5, r2
 80005be:	d100      	bne.n	80005c2 <__aeabi_dsub+0x192>
 80005c0:	e10a      	b.n	80007d8 <__aeabi_dsub+0x3a8>
 80005c2:	2501      	movs	r5, #1
 80005c4:	2938      	cmp	r1, #56	@ 0x38
 80005c6:	dc17      	bgt.n	80005f8 <__aeabi_dsub+0x1c8>
 80005c8:	468a      	mov	sl, r1
 80005ca:	4653      	mov	r3, sl
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_dsub+0x1a2>
 80005d0:	e1e7      	b.n	80009a2 <__aeabi_dsub+0x572>
 80005d2:	2220      	movs	r2, #32
 80005d4:	1ad2      	subs	r2, r2, r3
 80005d6:	9b02      	ldr	r3, [sp, #8]
 80005d8:	4661      	mov	r1, ip
 80005da:	4093      	lsls	r3, r2
 80005dc:	001d      	movs	r5, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	40d9      	lsrs	r1, r3
 80005e2:	4663      	mov	r3, ip
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001a      	movs	r2, r3
 80005e8:	430d      	orrs	r5, r1
 80005ea:	1e51      	subs	r1, r2, #1
 80005ec:	418a      	sbcs	r2, r1
 80005ee:	4653      	mov	r3, sl
 80005f0:	4315      	orrs	r5, r2
 80005f2:	9a02      	ldr	r2, [sp, #8]
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	18a4      	adds	r4, r4, r2
 80005f8:	182d      	adds	r5, r5, r0
 80005fa:	4285      	cmp	r5, r0
 80005fc:	4180      	sbcs	r0, r0
 80005fe:	4240      	negs	r0, r0
 8000600:	1824      	adds	r4, r4, r0
 8000602:	0223      	lsls	r3, r4, #8
 8000604:	d400      	bmi.n	8000608 <__aeabi_dsub+0x1d8>
 8000606:	e0b6      	b.n	8000776 <__aeabi_dsub+0x346>
 8000608:	4b5e      	ldr	r3, [pc, #376]	@ (8000784 <__aeabi_dsub+0x354>)
 800060a:	3701      	adds	r7, #1
 800060c:	429f      	cmp	r7, r3
 800060e:	d100      	bne.n	8000612 <__aeabi_dsub+0x1e2>
 8000610:	e0ad      	b.n	800076e <__aeabi_dsub+0x33e>
 8000612:	2101      	movs	r1, #1
 8000614:	4b5c      	ldr	r3, [pc, #368]	@ (8000788 <__aeabi_dsub+0x358>)
 8000616:	086a      	lsrs	r2, r5, #1
 8000618:	401c      	ands	r4, r3
 800061a:	4029      	ands	r1, r5
 800061c:	430a      	orrs	r2, r1
 800061e:	07e5      	lsls	r5, r4, #31
 8000620:	4315      	orrs	r5, r2
 8000622:	0864      	lsrs	r4, r4, #1
 8000624:	e78d      	b.n	8000542 <__aeabi_dsub+0x112>
 8000626:	4a59      	ldr	r2, [pc, #356]	@ (800078c <__aeabi_dsub+0x35c>)
 8000628:	9b02      	ldr	r3, [sp, #8]
 800062a:	4692      	mov	sl, r2
 800062c:	4662      	mov	r2, ip
 800062e:	44ba      	add	sl, r7
 8000630:	431a      	orrs	r2, r3
 8000632:	d02c      	beq.n	800068e <__aeabi_dsub+0x25e>
 8000634:	428e      	cmp	r6, r1
 8000636:	d02e      	beq.n	8000696 <__aeabi_dsub+0x266>
 8000638:	4652      	mov	r2, sl
 800063a:	2a00      	cmp	r2, #0
 800063c:	d060      	beq.n	8000700 <__aeabi_dsub+0x2d0>
 800063e:	2f00      	cmp	r7, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_dsub+0x214>
 8000642:	e0db      	b.n	80007fc <__aeabi_dsub+0x3cc>
 8000644:	4663      	mov	r3, ip
 8000646:	000e      	movs	r6, r1
 8000648:	9c02      	ldr	r4, [sp, #8]
 800064a:	08d8      	lsrs	r0, r3, #3
 800064c:	0762      	lsls	r2, r4, #29
 800064e:	4302      	orrs	r2, r0
 8000650:	08e4      	lsrs	r4, r4, #3
 8000652:	0013      	movs	r3, r2
 8000654:	4323      	orrs	r3, r4
 8000656:	d100      	bne.n	800065a <__aeabi_dsub+0x22a>
 8000658:	e254      	b.n	8000b04 <__aeabi_dsub+0x6d4>
 800065a:	2580      	movs	r5, #128	@ 0x80
 800065c:	032d      	lsls	r5, r5, #12
 800065e:	4325      	orrs	r5, r4
 8000660:	032d      	lsls	r5, r5, #12
 8000662:	4c48      	ldr	r4, [pc, #288]	@ (8000784 <__aeabi_dsub+0x354>)
 8000664:	0b2d      	lsrs	r5, r5, #12
 8000666:	e78c      	b.n	8000582 <__aeabi_dsub+0x152>
 8000668:	4661      	mov	r1, ip
 800066a:	9b02      	ldr	r3, [sp, #8]
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dsub+0x242>
 8000670:	e0cc      	b.n	800080c <__aeabi_dsub+0x3dc>
 8000672:	0029      	movs	r1, r5
 8000674:	3901      	subs	r1, #1
 8000676:	2d01      	cmp	r5, #1
 8000678:	d100      	bne.n	800067c <__aeabi_dsub+0x24c>
 800067a:	e188      	b.n	800098e <__aeabi_dsub+0x55e>
 800067c:	4295      	cmp	r5, r2
 800067e:	d100      	bne.n	8000682 <__aeabi_dsub+0x252>
 8000680:	e0aa      	b.n	80007d8 <__aeabi_dsub+0x3a8>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dd00      	ble.n	800068a <__aeabi_dsub+0x25a>
 8000688:	e72f      	b.n	80004ea <__aeabi_dsub+0xba>
 800068a:	468a      	mov	sl, r1
 800068c:	e718      	b.n	80004c0 <__aeabi_dsub+0x90>
 800068e:	2201      	movs	r2, #1
 8000690:	4051      	eors	r1, r2
 8000692:	428e      	cmp	r6, r1
 8000694:	d1d0      	bne.n	8000638 <__aeabi_dsub+0x208>
 8000696:	4653      	mov	r3, sl
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_dsub+0x26e>
 800069c:	e0be      	b.n	800081c <__aeabi_dsub+0x3ec>
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_dsub+0x274>
 80006a2:	e138      	b.n	8000916 <__aeabi_dsub+0x4e6>
 80006a4:	46ca      	mov	sl, r9
 80006a6:	0022      	movs	r2, r4
 80006a8:	4302      	orrs	r2, r0
 80006aa:	d100      	bne.n	80006ae <__aeabi_dsub+0x27e>
 80006ac:	e1e2      	b.n	8000a74 <__aeabi_dsub+0x644>
 80006ae:	4653      	mov	r3, sl
 80006b0:	1e59      	subs	r1, r3, #1
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dsub+0x288>
 80006b6:	e20d      	b.n	8000ad4 <__aeabi_dsub+0x6a4>
 80006b8:	4a32      	ldr	r2, [pc, #200]	@ (8000784 <__aeabi_dsub+0x354>)
 80006ba:	4592      	cmp	sl, r2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dsub+0x290>
 80006be:	e1d2      	b.n	8000a66 <__aeabi_dsub+0x636>
 80006c0:	2701      	movs	r7, #1
 80006c2:	2938      	cmp	r1, #56	@ 0x38
 80006c4:	dc13      	bgt.n	80006ee <__aeabi_dsub+0x2be>
 80006c6:	291f      	cmp	r1, #31
 80006c8:	dd00      	ble.n	80006cc <__aeabi_dsub+0x29c>
 80006ca:	e1ee      	b.n	8000aaa <__aeabi_dsub+0x67a>
 80006cc:	2220      	movs	r2, #32
 80006ce:	9b02      	ldr	r3, [sp, #8]
 80006d0:	1a52      	subs	r2, r2, r1
 80006d2:	0025      	movs	r5, r4
 80006d4:	0007      	movs	r7, r0
 80006d6:	469a      	mov	sl, r3
 80006d8:	40cc      	lsrs	r4, r1
 80006da:	4090      	lsls	r0, r2
 80006dc:	4095      	lsls	r5, r2
 80006de:	40cf      	lsrs	r7, r1
 80006e0:	44a2      	add	sl, r4
 80006e2:	1e42      	subs	r2, r0, #1
 80006e4:	4190      	sbcs	r0, r2
 80006e6:	4653      	mov	r3, sl
 80006e8:	432f      	orrs	r7, r5
 80006ea:	4307      	orrs	r7, r0
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	003d      	movs	r5, r7
 80006f0:	4465      	add	r5, ip
 80006f2:	4565      	cmp	r5, ip
 80006f4:	4192      	sbcs	r2, r2
 80006f6:	9b02      	ldr	r3, [sp, #8]
 80006f8:	4252      	negs	r2, r2
 80006fa:	464f      	mov	r7, r9
 80006fc:	18d4      	adds	r4, r2, r3
 80006fe:	e780      	b.n	8000602 <__aeabi_dsub+0x1d2>
 8000700:	4a23      	ldr	r2, [pc, #140]	@ (8000790 <__aeabi_dsub+0x360>)
 8000702:	1c7d      	adds	r5, r7, #1
 8000704:	4215      	tst	r5, r2
 8000706:	d000      	beq.n	800070a <__aeabi_dsub+0x2da>
 8000708:	e0aa      	b.n	8000860 <__aeabi_dsub+0x430>
 800070a:	4662      	mov	r2, ip
 800070c:	0025      	movs	r5, r4
 800070e:	9b02      	ldr	r3, [sp, #8]
 8000710:	4305      	orrs	r5, r0
 8000712:	431a      	orrs	r2, r3
 8000714:	2f00      	cmp	r7, #0
 8000716:	d000      	beq.n	800071a <__aeabi_dsub+0x2ea>
 8000718:	e0f5      	b.n	8000906 <__aeabi_dsub+0x4d6>
 800071a:	2d00      	cmp	r5, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dsub+0x2f0>
 800071e:	e16b      	b.n	80009f8 <__aeabi_dsub+0x5c8>
 8000720:	2a00      	cmp	r2, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_dsub+0x2f6>
 8000724:	e152      	b.n	80009cc <__aeabi_dsub+0x59c>
 8000726:	4663      	mov	r3, ip
 8000728:	1ac5      	subs	r5, r0, r3
 800072a:	9b02      	ldr	r3, [sp, #8]
 800072c:	1ae2      	subs	r2, r4, r3
 800072e:	42a8      	cmp	r0, r5
 8000730:	419b      	sbcs	r3, r3
 8000732:	425b      	negs	r3, r3
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	021a      	lsls	r2, r3, #8
 8000738:	d400      	bmi.n	800073c <__aeabi_dsub+0x30c>
 800073a:	e1d5      	b.n	8000ae8 <__aeabi_dsub+0x6b8>
 800073c:	4663      	mov	r3, ip
 800073e:	1a1d      	subs	r5, r3, r0
 8000740:	45ac      	cmp	ip, r5
 8000742:	4192      	sbcs	r2, r2
 8000744:	2601      	movs	r6, #1
 8000746:	9b02      	ldr	r3, [sp, #8]
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	4688      	mov	r8, r1
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	400e      	ands	r6, r1
 8000752:	e6f6      	b.n	8000542 <__aeabi_dsub+0x112>
 8000754:	4297      	cmp	r7, r2
 8000756:	d03f      	beq.n	80007d8 <__aeabi_dsub+0x3a8>
 8000758:	4652      	mov	r2, sl
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dd00      	ble.n	8000762 <__aeabi_dsub+0x332>
 8000760:	e74a      	b.n	80005f8 <__aeabi_dsub+0x1c8>
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	9b02      	ldr	r3, [sp, #8]
 8000766:	0412      	lsls	r2, r2, #16
 8000768:	4313      	orrs	r3, r2
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	e72d      	b.n	80005ca <__aeabi_dsub+0x19a>
 800076e:	003c      	movs	r4, r7
 8000770:	2500      	movs	r5, #0
 8000772:	2200      	movs	r2, #0
 8000774:	e705      	b.n	8000582 <__aeabi_dsub+0x152>
 8000776:	2307      	movs	r3, #7
 8000778:	402b      	ands	r3, r5
 800077a:	2b00      	cmp	r3, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dsub+0x350>
 800077e:	e6e2      	b.n	8000546 <__aeabi_dsub+0x116>
 8000780:	e06b      	b.n	800085a <__aeabi_dsub+0x42a>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	000007ff 	.word	0x000007ff
 8000788:	ff7fffff 	.word	0xff7fffff
 800078c:	fffff801 	.word	0xfffff801
 8000790:	000007fe 	.word	0x000007fe
 8000794:	0028      	movs	r0, r5
 8000796:	f000 fa8f 	bl	8000cb8 <__clzsi2>
 800079a:	0003      	movs	r3, r0
 800079c:	3318      	adds	r3, #24
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	dc00      	bgt.n	80007a4 <__aeabi_dsub+0x374>
 80007a2:	e6b4      	b.n	800050e <__aeabi_dsub+0xde>
 80007a4:	002a      	movs	r2, r5
 80007a6:	3808      	subs	r0, #8
 80007a8:	4082      	lsls	r2, r0
 80007aa:	429f      	cmp	r7, r3
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dsub+0x380>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dsub+0x4f4>
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	1c58      	adds	r0, r3, #1
 80007b4:	281f      	cmp	r0, #31
 80007b6:	dc00      	bgt.n	80007ba <__aeabi_dsub+0x38a>
 80007b8:	e1a0      	b.n	8000afc <__aeabi_dsub+0x6cc>
 80007ba:	0015      	movs	r5, r2
 80007bc:	3b1f      	subs	r3, #31
 80007be:	40dd      	lsrs	r5, r3
 80007c0:	2820      	cmp	r0, #32
 80007c2:	d005      	beq.n	80007d0 <__aeabi_dsub+0x3a0>
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	1a1b      	subs	r3, r3, r0
 80007c8:	409a      	lsls	r2, r3
 80007ca:	1e53      	subs	r3, r2, #1
 80007cc:	419a      	sbcs	r2, r3
 80007ce:	4315      	orrs	r5, r2
 80007d0:	2307      	movs	r3, #7
 80007d2:	2700      	movs	r7, #0
 80007d4:	402b      	ands	r3, r5
 80007d6:	e7d0      	b.n	800077a <__aeabi_dsub+0x34a>
 80007d8:	08c0      	lsrs	r0, r0, #3
 80007da:	0762      	lsls	r2, r4, #29
 80007dc:	4302      	orrs	r2, r0
 80007de:	08e4      	lsrs	r4, r4, #3
 80007e0:	e737      	b.n	8000652 <__aeabi_dsub+0x222>
 80007e2:	08ea      	lsrs	r2, r5, #3
 80007e4:	0763      	lsls	r3, r4, #29
 80007e6:	431a      	orrs	r2, r3
 80007e8:	4bd3      	ldr	r3, [pc, #844]	@ (8000b38 <__aeabi_dsub+0x708>)
 80007ea:	08e4      	lsrs	r4, r4, #3
 80007ec:	429f      	cmp	r7, r3
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dsub+0x3c2>
 80007f0:	e72f      	b.n	8000652 <__aeabi_dsub+0x222>
 80007f2:	0324      	lsls	r4, r4, #12
 80007f4:	0b25      	lsrs	r5, r4, #12
 80007f6:	057c      	lsls	r4, r7, #21
 80007f8:	0d64      	lsrs	r4, r4, #21
 80007fa:	e6c2      	b.n	8000582 <__aeabi_dsub+0x152>
 80007fc:	46ca      	mov	sl, r9
 80007fe:	0022      	movs	r2, r4
 8000800:	4302      	orrs	r2, r0
 8000802:	d158      	bne.n	80008b6 <__aeabi_dsub+0x486>
 8000804:	4663      	mov	r3, ip
 8000806:	000e      	movs	r6, r1
 8000808:	9c02      	ldr	r4, [sp, #8]
 800080a:	9303      	str	r3, [sp, #12]
 800080c:	9b03      	ldr	r3, [sp, #12]
 800080e:	4657      	mov	r7, sl
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	e7e7      	b.n	80007e4 <__aeabi_dsub+0x3b4>
 8000814:	4cc9      	ldr	r4, [pc, #804]	@ (8000b3c <__aeabi_dsub+0x70c>)
 8000816:	1aff      	subs	r7, r7, r3
 8000818:	4014      	ands	r4, r2
 800081a:	e692      	b.n	8000542 <__aeabi_dsub+0x112>
 800081c:	4dc8      	ldr	r5, [pc, #800]	@ (8000b40 <__aeabi_dsub+0x710>)
 800081e:	1c7a      	adds	r2, r7, #1
 8000820:	422a      	tst	r2, r5
 8000822:	d000      	beq.n	8000826 <__aeabi_dsub+0x3f6>
 8000824:	e084      	b.n	8000930 <__aeabi_dsub+0x500>
 8000826:	0022      	movs	r2, r4
 8000828:	4302      	orrs	r2, r0
 800082a:	2f00      	cmp	r7, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dsub+0x400>
 800082e:	e0ef      	b.n	8000a10 <__aeabi_dsub+0x5e0>
 8000830:	2a00      	cmp	r2, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_dsub+0x406>
 8000834:	e0e5      	b.n	8000a02 <__aeabi_dsub+0x5d2>
 8000836:	4662      	mov	r2, ip
 8000838:	9902      	ldr	r1, [sp, #8]
 800083a:	430a      	orrs	r2, r1
 800083c:	d100      	bne.n	8000840 <__aeabi_dsub+0x410>
 800083e:	e0c5      	b.n	80009cc <__aeabi_dsub+0x59c>
 8000840:	4663      	mov	r3, ip
 8000842:	18c5      	adds	r5, r0, r3
 8000844:	468c      	mov	ip, r1
 8000846:	4285      	cmp	r5, r0
 8000848:	4180      	sbcs	r0, r0
 800084a:	4464      	add	r4, ip
 800084c:	4240      	negs	r0, r0
 800084e:	1824      	adds	r4, r4, r0
 8000850:	0223      	lsls	r3, r4, #8
 8000852:	d502      	bpl.n	800085a <__aeabi_dsub+0x42a>
 8000854:	4bb9      	ldr	r3, [pc, #740]	@ (8000b3c <__aeabi_dsub+0x70c>)
 8000856:	3701      	adds	r7, #1
 8000858:	401c      	ands	r4, r3
 800085a:	46ba      	mov	sl, r7
 800085c:	9503      	str	r5, [sp, #12]
 800085e:	e7d5      	b.n	800080c <__aeabi_dsub+0x3dc>
 8000860:	4662      	mov	r2, ip
 8000862:	1a85      	subs	r5, r0, r2
 8000864:	42a8      	cmp	r0, r5
 8000866:	4192      	sbcs	r2, r2
 8000868:	4252      	negs	r2, r2
 800086a:	4691      	mov	r9, r2
 800086c:	9b02      	ldr	r3, [sp, #8]
 800086e:	1ae3      	subs	r3, r4, r3
 8000870:	001a      	movs	r2, r3
 8000872:	464b      	mov	r3, r9
 8000874:	1ad2      	subs	r2, r2, r3
 8000876:	0013      	movs	r3, r2
 8000878:	4691      	mov	r9, r2
 800087a:	021a      	lsls	r2, r3, #8
 800087c:	d46c      	bmi.n	8000958 <__aeabi_dsub+0x528>
 800087e:	464a      	mov	r2, r9
 8000880:	464c      	mov	r4, r9
 8000882:	432a      	orrs	r2, r5
 8000884:	d000      	beq.n	8000888 <__aeabi_dsub+0x458>
 8000886:	e63a      	b.n	80004fe <__aeabi_dsub+0xce>
 8000888:	2600      	movs	r6, #0
 800088a:	2400      	movs	r4, #0
 800088c:	2500      	movs	r5, #0
 800088e:	e678      	b.n	8000582 <__aeabi_dsub+0x152>
 8000890:	9902      	ldr	r1, [sp, #8]
 8000892:	4653      	mov	r3, sl
 8000894:	000d      	movs	r5, r1
 8000896:	3a20      	subs	r2, #32
 8000898:	40d5      	lsrs	r5, r2
 800089a:	2b20      	cmp	r3, #32
 800089c:	d006      	beq.n	80008ac <__aeabi_dsub+0x47c>
 800089e:	2240      	movs	r2, #64	@ 0x40
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	000b      	movs	r3, r1
 80008a4:	4093      	lsls	r3, r2
 80008a6:	4662      	mov	r2, ip
 80008a8:	431a      	orrs	r2, r3
 80008aa:	4693      	mov	fp, r2
 80008ac:	465b      	mov	r3, fp
 80008ae:	1e5a      	subs	r2, r3, #1
 80008b0:	4193      	sbcs	r3, r2
 80008b2:	431d      	orrs	r5, r3
 80008b4:	e619      	b.n	80004ea <__aeabi_dsub+0xba>
 80008b6:	4653      	mov	r3, sl
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dsub+0x490>
 80008be:	e0c6      	b.n	8000a4e <__aeabi_dsub+0x61e>
 80008c0:	4e9d      	ldr	r6, [pc, #628]	@ (8000b38 <__aeabi_dsub+0x708>)
 80008c2:	45b2      	cmp	sl, r6
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dsub+0x498>
 80008c6:	e6bd      	b.n	8000644 <__aeabi_dsub+0x214>
 80008c8:	4688      	mov	r8, r1
 80008ca:	000e      	movs	r6, r1
 80008cc:	2501      	movs	r5, #1
 80008ce:	2a38      	cmp	r2, #56	@ 0x38
 80008d0:	dc10      	bgt.n	80008f4 <__aeabi_dsub+0x4c4>
 80008d2:	2a1f      	cmp	r2, #31
 80008d4:	dc7f      	bgt.n	80009d6 <__aeabi_dsub+0x5a6>
 80008d6:	2120      	movs	r1, #32
 80008d8:	0025      	movs	r5, r4
 80008da:	1a89      	subs	r1, r1, r2
 80008dc:	0007      	movs	r7, r0
 80008de:	4088      	lsls	r0, r1
 80008e0:	408d      	lsls	r5, r1
 80008e2:	40d7      	lsrs	r7, r2
 80008e4:	40d4      	lsrs	r4, r2
 80008e6:	1e41      	subs	r1, r0, #1
 80008e8:	4188      	sbcs	r0, r1
 80008ea:	9b02      	ldr	r3, [sp, #8]
 80008ec:	433d      	orrs	r5, r7
 80008ee:	1b1b      	subs	r3, r3, r4
 80008f0:	4305      	orrs	r5, r0
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	4662      	mov	r2, ip
 80008f6:	1b55      	subs	r5, r2, r5
 80008f8:	45ac      	cmp	ip, r5
 80008fa:	4192      	sbcs	r2, r2
 80008fc:	9b02      	ldr	r3, [sp, #8]
 80008fe:	4252      	negs	r2, r2
 8000900:	464f      	mov	r7, r9
 8000902:	1a9c      	subs	r4, r3, r2
 8000904:	e5f6      	b.n	80004f4 <__aeabi_dsub+0xc4>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d000      	beq.n	800090c <__aeabi_dsub+0x4dc>
 800090a:	e0b7      	b.n	8000a7c <__aeabi_dsub+0x64c>
 800090c:	2a00      	cmp	r2, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dsub+0x4e2>
 8000910:	e0f0      	b.n	8000af4 <__aeabi_dsub+0x6c4>
 8000912:	2601      	movs	r6, #1
 8000914:	400e      	ands	r6, r1
 8000916:	4663      	mov	r3, ip
 8000918:	9802      	ldr	r0, [sp, #8]
 800091a:	08d9      	lsrs	r1, r3, #3
 800091c:	0742      	lsls	r2, r0, #29
 800091e:	430a      	orrs	r2, r1
 8000920:	08c4      	lsrs	r4, r0, #3
 8000922:	e696      	b.n	8000652 <__aeabi_dsub+0x222>
 8000924:	4c85      	ldr	r4, [pc, #532]	@ (8000b3c <__aeabi_dsub+0x70c>)
 8000926:	1aff      	subs	r7, r7, r3
 8000928:	4014      	ands	r4, r2
 800092a:	0762      	lsls	r2, r4, #29
 800092c:	08e4      	lsrs	r4, r4, #3
 800092e:	e760      	b.n	80007f2 <__aeabi_dsub+0x3c2>
 8000930:	4981      	ldr	r1, [pc, #516]	@ (8000b38 <__aeabi_dsub+0x708>)
 8000932:	428a      	cmp	r2, r1
 8000934:	d100      	bne.n	8000938 <__aeabi_dsub+0x508>
 8000936:	e0c9      	b.n	8000acc <__aeabi_dsub+0x69c>
 8000938:	4663      	mov	r3, ip
 800093a:	18c1      	adds	r1, r0, r3
 800093c:	4281      	cmp	r1, r0
 800093e:	4180      	sbcs	r0, r0
 8000940:	9b02      	ldr	r3, [sp, #8]
 8000942:	4240      	negs	r0, r0
 8000944:	18e3      	adds	r3, r4, r3
 8000946:	181b      	adds	r3, r3, r0
 8000948:	07dd      	lsls	r5, r3, #31
 800094a:	085c      	lsrs	r4, r3, #1
 800094c:	2307      	movs	r3, #7
 800094e:	0849      	lsrs	r1, r1, #1
 8000950:	430d      	orrs	r5, r1
 8000952:	0017      	movs	r7, r2
 8000954:	402b      	ands	r3, r5
 8000956:	e710      	b.n	800077a <__aeabi_dsub+0x34a>
 8000958:	4663      	mov	r3, ip
 800095a:	1a1d      	subs	r5, r3, r0
 800095c:	45ac      	cmp	ip, r5
 800095e:	4192      	sbcs	r2, r2
 8000960:	2601      	movs	r6, #1
 8000962:	9b02      	ldr	r3, [sp, #8]
 8000964:	4252      	negs	r2, r2
 8000966:	1b1c      	subs	r4, r3, r4
 8000968:	4688      	mov	r8, r1
 800096a:	1aa4      	subs	r4, r4, r2
 800096c:	400e      	ands	r6, r1
 800096e:	e5c6      	b.n	80004fe <__aeabi_dsub+0xce>
 8000970:	4663      	mov	r3, ip
 8000972:	18c5      	adds	r5, r0, r3
 8000974:	9b02      	ldr	r3, [sp, #8]
 8000976:	4285      	cmp	r5, r0
 8000978:	4180      	sbcs	r0, r0
 800097a:	469c      	mov	ip, r3
 800097c:	4240      	negs	r0, r0
 800097e:	4464      	add	r4, ip
 8000980:	1824      	adds	r4, r4, r0
 8000982:	2701      	movs	r7, #1
 8000984:	0223      	lsls	r3, r4, #8
 8000986:	d400      	bmi.n	800098a <__aeabi_dsub+0x55a>
 8000988:	e6f5      	b.n	8000776 <__aeabi_dsub+0x346>
 800098a:	2702      	movs	r7, #2
 800098c:	e641      	b.n	8000612 <__aeabi_dsub+0x1e2>
 800098e:	4663      	mov	r3, ip
 8000990:	1ac5      	subs	r5, r0, r3
 8000992:	42a8      	cmp	r0, r5
 8000994:	4180      	sbcs	r0, r0
 8000996:	9b02      	ldr	r3, [sp, #8]
 8000998:	4240      	negs	r0, r0
 800099a:	1ae4      	subs	r4, r4, r3
 800099c:	2701      	movs	r7, #1
 800099e:	1a24      	subs	r4, r4, r0
 80009a0:	e5a8      	b.n	80004f4 <__aeabi_dsub+0xc4>
 80009a2:	9d02      	ldr	r5, [sp, #8]
 80009a4:	4652      	mov	r2, sl
 80009a6:	002b      	movs	r3, r5
 80009a8:	3a20      	subs	r2, #32
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	0019      	movs	r1, r3
 80009ae:	4653      	mov	r3, sl
 80009b0:	2b20      	cmp	r3, #32
 80009b2:	d006      	beq.n	80009c2 <__aeabi_dsub+0x592>
 80009b4:	2240      	movs	r2, #64	@ 0x40
 80009b6:	1ad2      	subs	r2, r2, r3
 80009b8:	002b      	movs	r3, r5
 80009ba:	4093      	lsls	r3, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	431a      	orrs	r2, r3
 80009c0:	4693      	mov	fp, r2
 80009c2:	465d      	mov	r5, fp
 80009c4:	1e6b      	subs	r3, r5, #1
 80009c6:	419d      	sbcs	r5, r3
 80009c8:	430d      	orrs	r5, r1
 80009ca:	e615      	b.n	80005f8 <__aeabi_dsub+0x1c8>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e70d      	b.n	80007f2 <__aeabi_dsub+0x3c2>
 80009d6:	0011      	movs	r1, r2
 80009d8:	0027      	movs	r7, r4
 80009da:	3920      	subs	r1, #32
 80009dc:	40cf      	lsrs	r7, r1
 80009de:	2a20      	cmp	r2, #32
 80009e0:	d005      	beq.n	80009ee <__aeabi_dsub+0x5be>
 80009e2:	2140      	movs	r1, #64	@ 0x40
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	4094      	lsls	r4, r2
 80009e8:	0025      	movs	r5, r4
 80009ea:	4305      	orrs	r5, r0
 80009ec:	9503      	str	r5, [sp, #12]
 80009ee:	9d03      	ldr	r5, [sp, #12]
 80009f0:	1e6a      	subs	r2, r5, #1
 80009f2:	4195      	sbcs	r5, r2
 80009f4:	433d      	orrs	r5, r7
 80009f6:	e77d      	b.n	80008f4 <__aeabi_dsub+0x4c4>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dsub+0x5ce>
 80009fc:	e744      	b.n	8000888 <__aeabi_dsub+0x458>
 80009fe:	2601      	movs	r6, #1
 8000a00:	400e      	ands	r6, r1
 8000a02:	4663      	mov	r3, ip
 8000a04:	08d9      	lsrs	r1, r3, #3
 8000a06:	9b02      	ldr	r3, [sp, #8]
 8000a08:	075a      	lsls	r2, r3, #29
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	08dc      	lsrs	r4, r3, #3
 8000a0e:	e6f0      	b.n	80007f2 <__aeabi_dsub+0x3c2>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d028      	beq.n	8000a66 <__aeabi_dsub+0x636>
 8000a14:	4662      	mov	r2, ip
 8000a16:	9f02      	ldr	r7, [sp, #8]
 8000a18:	08c0      	lsrs	r0, r0, #3
 8000a1a:	433a      	orrs	r2, r7
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x5f0>
 8000a1e:	e6dc      	b.n	80007da <__aeabi_dsub+0x3aa>
 8000a20:	0762      	lsls	r2, r4, #29
 8000a22:	4310      	orrs	r0, r2
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	08e4      	lsrs	r4, r4, #3
 8000a28:	0312      	lsls	r2, r2, #12
 8000a2a:	4214      	tst	r4, r2
 8000a2c:	d009      	beq.n	8000a42 <__aeabi_dsub+0x612>
 8000a2e:	08fd      	lsrs	r5, r7, #3
 8000a30:	4215      	tst	r5, r2
 8000a32:	d106      	bne.n	8000a42 <__aeabi_dsub+0x612>
 8000a34:	4663      	mov	r3, ip
 8000a36:	2601      	movs	r6, #1
 8000a38:	002c      	movs	r4, r5
 8000a3a:	08d8      	lsrs	r0, r3, #3
 8000a3c:	077b      	lsls	r3, r7, #29
 8000a3e:	4318      	orrs	r0, r3
 8000a40:	400e      	ands	r6, r1
 8000a42:	0f42      	lsrs	r2, r0, #29
 8000a44:	00c0      	lsls	r0, r0, #3
 8000a46:	08c0      	lsrs	r0, r0, #3
 8000a48:	0752      	lsls	r2, r2, #29
 8000a4a:	4302      	orrs	r2, r0
 8000a4c:	e601      	b.n	8000652 <__aeabi_dsub+0x222>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	1a1d      	subs	r5, r3, r0
 8000a52:	45ac      	cmp	ip, r5
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	9b02      	ldr	r3, [sp, #8]
 8000a58:	4252      	negs	r2, r2
 8000a5a:	1b1c      	subs	r4, r3, r4
 8000a5c:	000e      	movs	r6, r1
 8000a5e:	4688      	mov	r8, r1
 8000a60:	2701      	movs	r7, #1
 8000a62:	1aa4      	subs	r4, r4, r2
 8000a64:	e546      	b.n	80004f4 <__aeabi_dsub+0xc4>
 8000a66:	4663      	mov	r3, ip
 8000a68:	08d9      	lsrs	r1, r3, #3
 8000a6a:	9b02      	ldr	r3, [sp, #8]
 8000a6c:	075a      	lsls	r2, r3, #29
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	08dc      	lsrs	r4, r3, #3
 8000a72:	e5ee      	b.n	8000652 <__aeabi_dsub+0x222>
 8000a74:	4663      	mov	r3, ip
 8000a76:	9c02      	ldr	r4, [sp, #8]
 8000a78:	9303      	str	r3, [sp, #12]
 8000a7a:	e6c7      	b.n	800080c <__aeabi_dsub+0x3dc>
 8000a7c:	08c0      	lsrs	r0, r0, #3
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dsub+0x654>
 8000a82:	e6aa      	b.n	80007da <__aeabi_dsub+0x3aa>
 8000a84:	0762      	lsls	r2, r4, #29
 8000a86:	4310      	orrs	r0, r2
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	08e4      	lsrs	r4, r4, #3
 8000a8c:	0312      	lsls	r2, r2, #12
 8000a8e:	4214      	tst	r4, r2
 8000a90:	d0d7      	beq.n	8000a42 <__aeabi_dsub+0x612>
 8000a92:	9f02      	ldr	r7, [sp, #8]
 8000a94:	08fd      	lsrs	r5, r7, #3
 8000a96:	4215      	tst	r5, r2
 8000a98:	d1d3      	bne.n	8000a42 <__aeabi_dsub+0x612>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	08d8      	lsrs	r0, r3, #3
 8000aa0:	077b      	lsls	r3, r7, #29
 8000aa2:	002c      	movs	r4, r5
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	400e      	ands	r6, r1
 8000aa8:	e7cb      	b.n	8000a42 <__aeabi_dsub+0x612>
 8000aaa:	000a      	movs	r2, r1
 8000aac:	0027      	movs	r7, r4
 8000aae:	3a20      	subs	r2, #32
 8000ab0:	40d7      	lsrs	r7, r2
 8000ab2:	2920      	cmp	r1, #32
 8000ab4:	d005      	beq.n	8000ac2 <__aeabi_dsub+0x692>
 8000ab6:	2240      	movs	r2, #64	@ 0x40
 8000ab8:	1a52      	subs	r2, r2, r1
 8000aba:	4094      	lsls	r4, r2
 8000abc:	0025      	movs	r5, r4
 8000abe:	4305      	orrs	r5, r0
 8000ac0:	9503      	str	r5, [sp, #12]
 8000ac2:	9d03      	ldr	r5, [sp, #12]
 8000ac4:	1e6a      	subs	r2, r5, #1
 8000ac6:	4195      	sbcs	r5, r2
 8000ac8:	432f      	orrs	r7, r5
 8000aca:	e610      	b.n	80006ee <__aeabi_dsub+0x2be>
 8000acc:	0014      	movs	r4, r2
 8000ace:	2500      	movs	r5, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e556      	b.n	8000582 <__aeabi_dsub+0x152>
 8000ad4:	9b02      	ldr	r3, [sp, #8]
 8000ad6:	4460      	add	r0, ip
 8000ad8:	4699      	mov	r9, r3
 8000ada:	4560      	cmp	r0, ip
 8000adc:	4192      	sbcs	r2, r2
 8000ade:	444c      	add	r4, r9
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	0005      	movs	r5, r0
 8000ae4:	18a4      	adds	r4, r4, r2
 8000ae6:	e74c      	b.n	8000982 <__aeabi_dsub+0x552>
 8000ae8:	001a      	movs	r2, r3
 8000aea:	001c      	movs	r4, r3
 8000aec:	432a      	orrs	r2, r5
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dsub+0x6c2>
 8000af0:	e6b3      	b.n	800085a <__aeabi_dsub+0x42a>
 8000af2:	e6c9      	b.n	8000888 <__aeabi_dsub+0x458>
 8000af4:	2480      	movs	r4, #128	@ 0x80
 8000af6:	2600      	movs	r6, #0
 8000af8:	0324      	lsls	r4, r4, #12
 8000afa:	e5ae      	b.n	800065a <__aeabi_dsub+0x22a>
 8000afc:	2120      	movs	r1, #32
 8000afe:	2500      	movs	r5, #0
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	e517      	b.n	8000534 <__aeabi_dsub+0x104>
 8000b04:	2200      	movs	r2, #0
 8000b06:	2500      	movs	r5, #0
 8000b08:	4c0b      	ldr	r4, [pc, #44]	@ (8000b38 <__aeabi_dsub+0x708>)
 8000b0a:	e53a      	b.n	8000582 <__aeabi_dsub+0x152>
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dsub+0x6e2>
 8000b10:	e5f6      	b.n	8000700 <__aeabi_dsub+0x2d0>
 8000b12:	464b      	mov	r3, r9
 8000b14:	1bda      	subs	r2, r3, r7
 8000b16:	4692      	mov	sl, r2
 8000b18:	2f00      	cmp	r7, #0
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dsub+0x6ee>
 8000b1c:	e66f      	b.n	80007fe <__aeabi_dsub+0x3ce>
 8000b1e:	2a38      	cmp	r2, #56	@ 0x38
 8000b20:	dc05      	bgt.n	8000b2e <__aeabi_dsub+0x6fe>
 8000b22:	2680      	movs	r6, #128	@ 0x80
 8000b24:	0436      	lsls	r6, r6, #16
 8000b26:	4334      	orrs	r4, r6
 8000b28:	4688      	mov	r8, r1
 8000b2a:	000e      	movs	r6, r1
 8000b2c:	e6d1      	b.n	80008d2 <__aeabi_dsub+0x4a2>
 8000b2e:	4688      	mov	r8, r1
 8000b30:	000e      	movs	r6, r1
 8000b32:	2501      	movs	r5, #1
 8000b34:	e6de      	b.n	80008f4 <__aeabi_dsub+0x4c4>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	000007ff 	.word	0x000007ff
 8000b3c:	ff7fffff 	.word	0xff7fffff
 8000b40:	000007fe 	.word	0x000007fe
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dsub+0x71a>
 8000b48:	e668      	b.n	800081c <__aeabi_dsub+0x3ec>
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	1bd9      	subs	r1, r3, r7
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d101      	bne.n	8000b56 <__aeabi_dsub+0x726>
 8000b52:	468a      	mov	sl, r1
 8000b54:	e5a7      	b.n	80006a6 <__aeabi_dsub+0x276>
 8000b56:	2701      	movs	r7, #1
 8000b58:	2938      	cmp	r1, #56	@ 0x38
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_dsub+0x72e>
 8000b5c:	e5c7      	b.n	80006ee <__aeabi_dsub+0x2be>
 8000b5e:	2280      	movs	r2, #128	@ 0x80
 8000b60:	0412      	lsls	r2, r2, #16
 8000b62:	4314      	orrs	r4, r2
 8000b64:	e5af      	b.n	80006c6 <__aeabi_dsub+0x296>
 8000b66:	46c0      	nop			@ (mov r8, r8)

08000b68 <__aeabi_d2iz>:
 8000b68:	000b      	movs	r3, r1
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4d16      	ldr	r5, [pc, #88]	@ (8000bc8 <__aeabi_d2iz+0x60>)
 8000b70:	030c      	lsls	r4, r1, #12
 8000b72:	b082      	sub	sp, #8
 8000b74:	0049      	lsls	r1, r1, #1
 8000b76:	2000      	movs	r0, #0
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	0b24      	lsrs	r4, r4, #12
 8000b7e:	0d49      	lsrs	r1, r1, #21
 8000b80:	0fde      	lsrs	r6, r3, #31
 8000b82:	42a9      	cmp	r1, r5
 8000b84:	dd04      	ble.n	8000b90 <__aeabi_d2iz+0x28>
 8000b86:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <__aeabi_d2iz+0x64>)
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	dd03      	ble.n	8000b94 <__aeabi_d2iz+0x2c>
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <__aeabi_d2iz+0x68>)
 8000b8e:	18f0      	adds	r0, r6, r3
 8000b90:	b002      	add	sp, #8
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	2080      	movs	r0, #128	@ 0x80
 8000b96:	0340      	lsls	r0, r0, #13
 8000b98:	4320      	orrs	r0, r4
 8000b9a:	4c0e      	ldr	r4, [pc, #56]	@ (8000bd4 <__aeabi_d2iz+0x6c>)
 8000b9c:	1a64      	subs	r4, r4, r1
 8000b9e:	2c1f      	cmp	r4, #31
 8000ba0:	dd08      	ble.n	8000bb4 <__aeabi_d2iz+0x4c>
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <__aeabi_d2iz+0x70>)
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	40d8      	lsrs	r0, r3
 8000ba8:	0003      	movs	r3, r0
 8000baa:	4258      	negs	r0, r3
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d1ef      	bne.n	8000b90 <__aeabi_d2iz+0x28>
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	e7ed      	b.n	8000b90 <__aeabi_d2iz+0x28>
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <__aeabi_d2iz+0x74>)
 8000bb6:	9a00      	ldr	r2, [sp, #0]
 8000bb8:	469c      	mov	ip, r3
 8000bba:	0003      	movs	r3, r0
 8000bbc:	4461      	add	r1, ip
 8000bbe:	408b      	lsls	r3, r1
 8000bc0:	40e2      	lsrs	r2, r4
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	e7f1      	b.n	8000baa <__aeabi_d2iz+0x42>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	000003fe 	.word	0x000003fe
 8000bcc:	0000041d 	.word	0x0000041d
 8000bd0:	7fffffff 	.word	0x7fffffff
 8000bd4:	00000433 	.word	0x00000433
 8000bd8:	00000413 	.word	0x00000413
 8000bdc:	fffffbed 	.word	0xfffffbed

08000be0 <__aeabi_i2d>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d016      	beq.n	8000c14 <__aeabi_i2d+0x34>
 8000be6:	17c3      	asrs	r3, r0, #31
 8000be8:	18c5      	adds	r5, r0, r3
 8000bea:	405d      	eors	r5, r3
 8000bec:	0fc4      	lsrs	r4, r0, #31
 8000bee:	0028      	movs	r0, r5
 8000bf0:	f000 f862 	bl	8000cb8 <__clzsi2>
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <__aeabi_i2d+0x58>)
 8000bf6:	1a1b      	subs	r3, r3, r0
 8000bf8:	055b      	lsls	r3, r3, #21
 8000bfa:	0d5b      	lsrs	r3, r3, #21
 8000bfc:	280a      	cmp	r0, #10
 8000bfe:	dc14      	bgt.n	8000c2a <__aeabi_i2d+0x4a>
 8000c00:	0002      	movs	r2, r0
 8000c02:	002e      	movs	r6, r5
 8000c04:	3215      	adds	r2, #21
 8000c06:	4096      	lsls	r6, r2
 8000c08:	220b      	movs	r2, #11
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	40d5      	lsrs	r5, r2
 8000c0e:	032d      	lsls	r5, r5, #12
 8000c10:	0b2d      	lsrs	r5, r5, #12
 8000c12:	e003      	b.n	8000c1c <__aeabi_i2d+0x3c>
 8000c14:	2400      	movs	r4, #0
 8000c16:	2300      	movs	r3, #0
 8000c18:	2500      	movs	r5, #0
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	051b      	lsls	r3, r3, #20
 8000c1e:	432b      	orrs	r3, r5
 8000c20:	07e4      	lsls	r4, r4, #31
 8000c22:	4323      	orrs	r3, r4
 8000c24:	0030      	movs	r0, r6
 8000c26:	0019      	movs	r1, r3
 8000c28:	bd70      	pop	{r4, r5, r6, pc}
 8000c2a:	380b      	subs	r0, #11
 8000c2c:	4085      	lsls	r5, r0
 8000c2e:	032d      	lsls	r5, r5, #12
 8000c30:	2600      	movs	r6, #0
 8000c32:	0b2d      	lsrs	r5, r5, #12
 8000c34:	e7f2      	b.n	8000c1c <__aeabi_i2d+0x3c>
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	0000041e 	.word	0x0000041e

08000c3c <__aeabi_cdrcmple>:
 8000c3c:	4684      	mov	ip, r0
 8000c3e:	0010      	movs	r0, r2
 8000c40:	4662      	mov	r2, ip
 8000c42:	468c      	mov	ip, r1
 8000c44:	0019      	movs	r1, r3
 8000c46:	4663      	mov	r3, ip
 8000c48:	e000      	b.n	8000c4c <__aeabi_cdcmpeq>
 8000c4a:	46c0      	nop			@ (mov r8, r8)

08000c4c <__aeabi_cdcmpeq>:
 8000c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c4e:	f000 f909 	bl	8000e64 <__ledf2>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d401      	bmi.n	8000c5a <__aeabi_cdcmpeq+0xe>
 8000c56:	2100      	movs	r1, #0
 8000c58:	42c8      	cmn	r0, r1
 8000c5a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000c5c <__aeabi_dcmpeq>:
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	f000 f849 	bl	8000cf4 <__eqdf2>
 8000c62:	4240      	negs	r0, r0
 8000c64:	3001      	adds	r0, #1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <__aeabi_dcmplt>:
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	f000 f8fb 	bl	8000e64 <__ledf2>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	db01      	blt.n	8000c76 <__aeabi_dcmplt+0xe>
 8000c72:	2000      	movs	r0, #0
 8000c74:	bd10      	pop	{r4, pc}
 8000c76:	2001      	movs	r0, #1
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)

08000c7c <__aeabi_dcmple>:
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	f000 f8f1 	bl	8000e64 <__ledf2>
 8000c82:	2800      	cmp	r0, #0
 8000c84:	dd01      	ble.n	8000c8a <__aeabi_dcmple+0xe>
 8000c86:	2000      	movs	r0, #0
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	bd10      	pop	{r4, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)

08000c90 <__aeabi_dcmpgt>:
 8000c90:	b510      	push	{r4, lr}
 8000c92:	f000 f873 	bl	8000d7c <__gedf2>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	dc01      	bgt.n	8000c9e <__aeabi_dcmpgt+0xe>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_dcmpge>:
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	f000 f869 	bl	8000d7c <__gedf2>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	da01      	bge.n	8000cb2 <__aeabi_dcmpge+0xe>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	bd10      	pop	{r4, pc}
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	bd10      	pop	{r4, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)

08000cb8 <__clzsi2>:
 8000cb8:	211c      	movs	r1, #28
 8000cba:	2301      	movs	r3, #1
 8000cbc:	041b      	lsls	r3, r3, #16
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d301      	bcc.n	8000cc6 <__clzsi2+0xe>
 8000cc2:	0c00      	lsrs	r0, r0, #16
 8000cc4:	3910      	subs	r1, #16
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	d301      	bcc.n	8000cd0 <__clzsi2+0x18>
 8000ccc:	0a00      	lsrs	r0, r0, #8
 8000cce:	3908      	subs	r1, #8
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	4298      	cmp	r0, r3
 8000cd4:	d301      	bcc.n	8000cda <__clzsi2+0x22>
 8000cd6:	0900      	lsrs	r0, r0, #4
 8000cd8:	3904      	subs	r1, #4
 8000cda:	a202      	add	r2, pc, #8	@ (adr r2, 8000ce4 <__clzsi2+0x2c>)
 8000cdc:	5c10      	ldrb	r0, [r2, r0]
 8000cde:	1840      	adds	r0, r0, r1
 8000ce0:	4770      	bx	lr
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	02020304 	.word	0x02020304
 8000ce8:	01010101 	.word	0x01010101
	...

08000cf4 <__eqdf2>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	46de      	mov	lr, fp
 8000cfa:	464e      	mov	r6, r9
 8000cfc:	4645      	mov	r5, r8
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	000d      	movs	r5, r1
 8000d02:	0004      	movs	r4, r0
 8000d04:	0fe8      	lsrs	r0, r5, #31
 8000d06:	4683      	mov	fp, r0
 8000d08:	0309      	lsls	r1, r1, #12
 8000d0a:	0fd8      	lsrs	r0, r3, #31
 8000d0c:	0b09      	lsrs	r1, r1, #12
 8000d0e:	4682      	mov	sl, r0
 8000d10:	4819      	ldr	r0, [pc, #100]	@ (8000d78 <__eqdf2+0x84>)
 8000d12:	468c      	mov	ip, r1
 8000d14:	031f      	lsls	r7, r3, #12
 8000d16:	0069      	lsls	r1, r5, #1
 8000d18:	005e      	lsls	r6, r3, #1
 8000d1a:	0d49      	lsrs	r1, r1, #21
 8000d1c:	0b3f      	lsrs	r7, r7, #12
 8000d1e:	0d76      	lsrs	r6, r6, #21
 8000d20:	4281      	cmp	r1, r0
 8000d22:	d018      	beq.n	8000d56 <__eqdf2+0x62>
 8000d24:	4286      	cmp	r6, r0
 8000d26:	d00f      	beq.n	8000d48 <__eqdf2+0x54>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	42b1      	cmp	r1, r6
 8000d2c:	d10d      	bne.n	8000d4a <__eqdf2+0x56>
 8000d2e:	45bc      	cmp	ip, r7
 8000d30:	d10b      	bne.n	8000d4a <__eqdf2+0x56>
 8000d32:	4294      	cmp	r4, r2
 8000d34:	d109      	bne.n	8000d4a <__eqdf2+0x56>
 8000d36:	45d3      	cmp	fp, sl
 8000d38:	d01c      	beq.n	8000d74 <__eqdf2+0x80>
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d105      	bne.n	8000d4a <__eqdf2+0x56>
 8000d3e:	4660      	mov	r0, ip
 8000d40:	4320      	orrs	r0, r4
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqdf2+0x56>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d4c:	46bb      	mov	fp, r7
 8000d4e:	46b2      	mov	sl, r6
 8000d50:	46a9      	mov	r9, r5
 8000d52:	46a0      	mov	r8, r4
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d56:	2001      	movs	r0, #1
 8000d58:	428e      	cmp	r6, r1
 8000d5a:	d1f6      	bne.n	8000d4a <__eqdf2+0x56>
 8000d5c:	4661      	mov	r1, ip
 8000d5e:	4339      	orrs	r1, r7
 8000d60:	000f      	movs	r7, r1
 8000d62:	4317      	orrs	r7, r2
 8000d64:	4327      	orrs	r7, r4
 8000d66:	d1f0      	bne.n	8000d4a <__eqdf2+0x56>
 8000d68:	465b      	mov	r3, fp
 8000d6a:	4652      	mov	r2, sl
 8000d6c:	1a98      	subs	r0, r3, r2
 8000d6e:	1e43      	subs	r3, r0, #1
 8000d70:	4198      	sbcs	r0, r3
 8000d72:	e7ea      	b.n	8000d4a <__eqdf2+0x56>
 8000d74:	2000      	movs	r0, #0
 8000d76:	e7e8      	b.n	8000d4a <__eqdf2+0x56>
 8000d78:	000007ff 	.word	0x000007ff

08000d7c <__gedf2>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	4657      	mov	r7, sl
 8000d80:	464e      	mov	r6, r9
 8000d82:	4645      	mov	r5, r8
 8000d84:	46de      	mov	lr, fp
 8000d86:	b5e0      	push	{r5, r6, r7, lr}
 8000d88:	000d      	movs	r5, r1
 8000d8a:	030f      	lsls	r7, r1, #12
 8000d8c:	0b39      	lsrs	r1, r7, #12
 8000d8e:	b083      	sub	sp, #12
 8000d90:	0004      	movs	r4, r0
 8000d92:	4680      	mov	r8, r0
 8000d94:	9101      	str	r1, [sp, #4]
 8000d96:	0058      	lsls	r0, r3, #1
 8000d98:	0fe9      	lsrs	r1, r5, #31
 8000d9a:	4f31      	ldr	r7, [pc, #196]	@ (8000e60 <__gedf2+0xe4>)
 8000d9c:	0d40      	lsrs	r0, r0, #21
 8000d9e:	468c      	mov	ip, r1
 8000da0:	006e      	lsls	r6, r5, #1
 8000da2:	0319      	lsls	r1, r3, #12
 8000da4:	4682      	mov	sl, r0
 8000da6:	4691      	mov	r9, r2
 8000da8:	0d76      	lsrs	r6, r6, #21
 8000daa:	0b09      	lsrs	r1, r1, #12
 8000dac:	0fd8      	lsrs	r0, r3, #31
 8000dae:	42be      	cmp	r6, r7
 8000db0:	d01f      	beq.n	8000df2 <__gedf2+0x76>
 8000db2:	45ba      	cmp	sl, r7
 8000db4:	d00f      	beq.n	8000dd6 <__gedf2+0x5a>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d12f      	bne.n	8000e1a <__gedf2+0x9e>
 8000dba:	4655      	mov	r5, sl
 8000dbc:	9e01      	ldr	r6, [sp, #4]
 8000dbe:	4334      	orrs	r4, r6
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d127      	bne.n	8000e14 <__gedf2+0x98>
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	d03a      	beq.n	8000e3e <__gedf2+0xc2>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d145      	bne.n	8000e58 <__gedf2+0xdc>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d11a      	bne.n	8000e06 <__gedf2+0x8a>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	e017      	b.n	8000e06 <__gedf2+0x8a>
 8000dd6:	4311      	orrs	r1, r2
 8000dd8:	d13b      	bne.n	8000e52 <__gedf2+0xd6>
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d102      	bne.n	8000de4 <__gedf2+0x68>
 8000dde:	9f01      	ldr	r7, [sp, #4]
 8000de0:	4327      	orrs	r7, r4
 8000de2:	d0f3      	beq.n	8000dcc <__gedf2+0x50>
 8000de4:	4584      	cmp	ip, r0
 8000de6:	d109      	bne.n	8000dfc <__gedf2+0x80>
 8000de8:	4663      	mov	r3, ip
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <__gedf2+0x54>
 8000dee:	4660      	mov	r0, ip
 8000df0:	e009      	b.n	8000e06 <__gedf2+0x8a>
 8000df2:	9f01      	ldr	r7, [sp, #4]
 8000df4:	4327      	orrs	r7, r4
 8000df6:	d12c      	bne.n	8000e52 <__gedf2+0xd6>
 8000df8:	45b2      	cmp	sl, r6
 8000dfa:	d024      	beq.n	8000e46 <__gedf2+0xca>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	2002      	movs	r0, #2
 8000e00:	3b01      	subs	r3, #1
 8000e02:	4018      	ands	r0, r3
 8000e04:	3801      	subs	r0, #1
 8000e06:	b003      	add	sp, #12
 8000e08:	bcf0      	pop	{r4, r5, r6, r7}
 8000e0a:	46bb      	mov	fp, r7
 8000e0c:	46b2      	mov	sl, r6
 8000e0e:	46a9      	mov	r9, r5
 8000e10:	46a0      	mov	r8, r4
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d0d9      	beq.n	8000dcc <__gedf2+0x50>
 8000e18:	e7e4      	b.n	8000de4 <__gedf2+0x68>
 8000e1a:	4654      	mov	r4, sl
 8000e1c:	2c00      	cmp	r4, #0
 8000e1e:	d0ed      	beq.n	8000dfc <__gedf2+0x80>
 8000e20:	4584      	cmp	ip, r0
 8000e22:	d1eb      	bne.n	8000dfc <__gedf2+0x80>
 8000e24:	4556      	cmp	r6, sl
 8000e26:	dce9      	bgt.n	8000dfc <__gedf2+0x80>
 8000e28:	dbde      	blt.n	8000de8 <__gedf2+0x6c>
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d8e5      	bhi.n	8000dfc <__gedf2+0x80>
 8000e30:	d1da      	bne.n	8000de8 <__gedf2+0x6c>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d8e2      	bhi.n	8000dfc <__gedf2+0x80>
 8000e36:	2000      	movs	r0, #0
 8000e38:	45c8      	cmp	r8, r9
 8000e3a:	d2e4      	bcs.n	8000e06 <__gedf2+0x8a>
 8000e3c:	e7d4      	b.n	8000de8 <__gedf2+0x6c>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d0e0      	beq.n	8000e06 <__gedf2+0x8a>
 8000e44:	e7da      	b.n	8000dfc <__gedf2+0x80>
 8000e46:	4311      	orrs	r1, r2
 8000e48:	d103      	bne.n	8000e52 <__gedf2+0xd6>
 8000e4a:	4584      	cmp	ip, r0
 8000e4c:	d1d6      	bne.n	8000dfc <__gedf2+0x80>
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e7d9      	b.n	8000e06 <__gedf2+0x8a>
 8000e52:	2002      	movs	r0, #2
 8000e54:	4240      	negs	r0, r0
 8000e56:	e7d6      	b.n	8000e06 <__gedf2+0x8a>
 8000e58:	4584      	cmp	ip, r0
 8000e5a:	d0e6      	beq.n	8000e2a <__gedf2+0xae>
 8000e5c:	e7ce      	b.n	8000dfc <__gedf2+0x80>
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff

08000e64 <__ledf2>:
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	4657      	mov	r7, sl
 8000e68:	464e      	mov	r6, r9
 8000e6a:	4645      	mov	r5, r8
 8000e6c:	46de      	mov	lr, fp
 8000e6e:	b5e0      	push	{r5, r6, r7, lr}
 8000e70:	000d      	movs	r5, r1
 8000e72:	030f      	lsls	r7, r1, #12
 8000e74:	0004      	movs	r4, r0
 8000e76:	4680      	mov	r8, r0
 8000e78:	0fe8      	lsrs	r0, r5, #31
 8000e7a:	0b39      	lsrs	r1, r7, #12
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	b083      	sub	sp, #12
 8000e80:	0058      	lsls	r0, r3, #1
 8000e82:	4f30      	ldr	r7, [pc, #192]	@ (8000f44 <__ledf2+0xe0>)
 8000e84:	0d40      	lsrs	r0, r0, #21
 8000e86:	9101      	str	r1, [sp, #4]
 8000e88:	031e      	lsls	r6, r3, #12
 8000e8a:	0069      	lsls	r1, r5, #1
 8000e8c:	4682      	mov	sl, r0
 8000e8e:	4691      	mov	r9, r2
 8000e90:	0d49      	lsrs	r1, r1, #21
 8000e92:	0b36      	lsrs	r6, r6, #12
 8000e94:	0fd8      	lsrs	r0, r3, #31
 8000e96:	42b9      	cmp	r1, r7
 8000e98:	d020      	beq.n	8000edc <__ledf2+0x78>
 8000e9a:	45ba      	cmp	sl, r7
 8000e9c:	d00f      	beq.n	8000ebe <__ledf2+0x5a>
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d12b      	bne.n	8000efa <__ledf2+0x96>
 8000ea2:	9901      	ldr	r1, [sp, #4]
 8000ea4:	430c      	orrs	r4, r1
 8000ea6:	4651      	mov	r1, sl
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	d137      	bne.n	8000f1c <__ledf2+0xb8>
 8000eac:	4332      	orrs	r2, r6
 8000eae:	d038      	beq.n	8000f22 <__ledf2+0xbe>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d144      	bne.n	8000f3e <__ledf2+0xda>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d119      	bne.n	8000eec <__ledf2+0x88>
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4240      	negs	r0, r0
 8000ebc:	e016      	b.n	8000eec <__ledf2+0x88>
 8000ebe:	4316      	orrs	r6, r2
 8000ec0:	d113      	bne.n	8000eea <__ledf2+0x86>
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d102      	bne.n	8000ecc <__ledf2+0x68>
 8000ec6:	9f01      	ldr	r7, [sp, #4]
 8000ec8:	4327      	orrs	r7, r4
 8000eca:	d0f3      	beq.n	8000eb4 <__ledf2+0x50>
 8000ecc:	4584      	cmp	ip, r0
 8000ece:	d020      	beq.n	8000f12 <__ledf2+0xae>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	4018      	ands	r0, r3
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e007      	b.n	8000eec <__ledf2+0x88>
 8000edc:	9f01      	ldr	r7, [sp, #4]
 8000ede:	4327      	orrs	r7, r4
 8000ee0:	d103      	bne.n	8000eea <__ledf2+0x86>
 8000ee2:	458a      	cmp	sl, r1
 8000ee4:	d1f4      	bne.n	8000ed0 <__ledf2+0x6c>
 8000ee6:	4316      	orrs	r6, r2
 8000ee8:	d01f      	beq.n	8000f2a <__ledf2+0xc6>
 8000eea:	2002      	movs	r0, #2
 8000eec:	b003      	add	sp, #12
 8000eee:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef0:	46bb      	mov	fp, r7
 8000ef2:	46b2      	mov	sl, r6
 8000ef4:	46a9      	mov	r9, r5
 8000ef6:	46a0      	mov	r8, r4
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	4654      	mov	r4, sl
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d0e7      	beq.n	8000ed0 <__ledf2+0x6c>
 8000f00:	4584      	cmp	ip, r0
 8000f02:	d1e5      	bne.n	8000ed0 <__ledf2+0x6c>
 8000f04:	4551      	cmp	r1, sl
 8000f06:	dce3      	bgt.n	8000ed0 <__ledf2+0x6c>
 8000f08:	db03      	blt.n	8000f12 <__ledf2+0xae>
 8000f0a:	9b01      	ldr	r3, [sp, #4]
 8000f0c:	42b3      	cmp	r3, r6
 8000f0e:	d8df      	bhi.n	8000ed0 <__ledf2+0x6c>
 8000f10:	d00f      	beq.n	8000f32 <__ledf2+0xce>
 8000f12:	4663      	mov	r3, ip
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0cf      	beq.n	8000eb8 <__ledf2+0x54>
 8000f18:	4660      	mov	r0, ip
 8000f1a:	e7e7      	b.n	8000eec <__ledf2+0x88>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d0c9      	beq.n	8000eb4 <__ledf2+0x50>
 8000f20:	e7d4      	b.n	8000ecc <__ledf2+0x68>
 8000f22:	2000      	movs	r0, #0
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	d0e1      	beq.n	8000eec <__ledf2+0x88>
 8000f28:	e7d2      	b.n	8000ed0 <__ledf2+0x6c>
 8000f2a:	4584      	cmp	ip, r0
 8000f2c:	d1d0      	bne.n	8000ed0 <__ledf2+0x6c>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e7dc      	b.n	8000eec <__ledf2+0x88>
 8000f32:	45c8      	cmp	r8, r9
 8000f34:	d8cc      	bhi.n	8000ed0 <__ledf2+0x6c>
 8000f36:	2000      	movs	r0, #0
 8000f38:	45c8      	cmp	r8, r9
 8000f3a:	d2d7      	bcs.n	8000eec <__ledf2+0x88>
 8000f3c:	e7e9      	b.n	8000f12 <__ledf2+0xae>
 8000f3e:	4584      	cmp	ip, r0
 8000f40:	d0e3      	beq.n	8000f0a <__ledf2+0xa6>
 8000f42:	e7c5      	b.n	8000ed0 <__ledf2+0x6c>
 8000f44:	000007ff 	.word	0x000007ff

08000f48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b08b      	sub	sp, #44	@ 0x2c
 8000f4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	2414      	movs	r4, #20
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	0018      	movs	r0, r3
 8000f54:	2314      	movs	r3, #20
 8000f56:	001a      	movs	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f003 fa5b 	bl	8004414 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	0309      	lsls	r1, r1, #12
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	031b      	lsls	r3, r3, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	03c9      	lsls	r1, r1, #15
 8000f84:	430a      	orrs	r2, r1
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	03db      	lsls	r3, r3, #15
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0289      	lsls	r1, r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000fb8:	2180      	movs	r1, #128	@ 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_GPIO_Init+0xe8>)
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	02db      	lsls	r3, r3, #11
 8000fc8:	4013      	ands	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fce:	2390      	movs	r3, #144	@ 0x90
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fefe 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2280      	movs	r2, #128	@ 0x80
 8000fe0:	0192      	lsls	r2, r2, #6
 8000fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2284      	movs	r2, #132	@ 0x84
 8000fe8:	0392      	lsls	r2, r2, #14
 8000fea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <MX_GPIO_Init+0xec>)
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	f000 fd75 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffe:	0021      	movs	r1, r4
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2220      	movs	r2, #32
 8001004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2201      	movs	r2, #1
 800100a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001018:	187a      	adds	r2, r7, r1
 800101a:	2390      	movs	r3, #144	@ 0x90
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fd61 	bl	8001ae8 <HAL_GPIO_Init>

}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b00b      	add	sp, #44	@ 0x2c
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b0a7      	sub	sp, #156	@ 0x9c
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fc17 	bl	8001870 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f8cf 	bl	80011e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f7ff ff7f 	bl	8000f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800104a:	f000 fb6b 	bl	8001724 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800104e:	f000 f9bd 	bl	80013cc <MX_SPI1_Init>
  MX_TIM2_Init();
 8001052:	f000 faad 	bl	80015b0 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b5b      	ldr	r3, [pc, #364]	@ (80011c4 <main+0x18c>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b5a      	ldr	r3, [pc, #360]	@ (80011c4 <main+0x18c>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	02c9      	lsls	r1, r1, #11
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b57      	ldr	r3, [pc, #348]	@ (80011c4 <main+0x18c>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	4013      	ands	r3, r2
 800106e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	2470      	movs	r4, #112	@ 0x70
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0018      	movs	r0, r3
 8001078:	2314      	movs	r3, #20
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f003 f9c9 	bl	8004414 <memset>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001082:	0021      	movs	r1, r4
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	0052      	lsls	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2201      	movs	r2, #1
 8001090:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2201      	movs	r2, #1
 8001096:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	187b      	adds	r3, r7, r1
 800109a:	4a4b      	ldr	r2, [pc, #300]	@ (80011c8 <main+0x190>)
 800109c:	0019      	movs	r1, r3
 800109e:	0010      	movs	r0, r2
 80010a0:	f000 fd22 	bl	8001ae8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4847      	ldr	r0, [pc, #284]	@ (80011c8 <main+0x190>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	0019      	movs	r1, r3
 80010ae:	f000 fe93 	bl	8001dd8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM on TIM2 channel 1
 80010b2:	4b46      	ldr	r3, [pc, #280]	@ (80011cc <main+0x194>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 f916 	bl	80032e8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4a41      	ldr	r2, [pc, #260]	@ (80011c8 <main+0x190>)
 80010c2:	0019      	movs	r1, r3
 80010c4:	0010      	movs	r0, r2
 80010c6:	f000 fea4 	bl	8001e12 <HAL_GPIO_TogglePin>
      HAL_SPI_TransmitReceive(&hspi1, pT_data, pR_data, size, timeout);
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <main+0x198>)
 80010cc:	881c      	ldrh	r4, [r3, #0]
 80010ce:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <main+0x19c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a41      	ldr	r2, [pc, #260]	@ (80011d8 <main+0x1a0>)
 80010d4:	4941      	ldr	r1, [pc, #260]	@ (80011dc <main+0x1a4>)
 80010d6:	4842      	ldr	r0, [pc, #264]	@ (80011e0 <main+0x1a8>)
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	0023      	movs	r3, r4
 80010dc:	f001 fd5c 	bl	8002b98 <HAL_SPI_TransmitReceive>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4a38      	ldr	r2, [pc, #224]	@ (80011c8 <main+0x190>)
 80010e6:	0019      	movs	r1, r3
 80010e8:	0010      	movs	r0, r2
 80010ea:	f000 fe92 	bl	8001e12 <HAL_GPIO_TogglePin>
      /* Process ADC data */
      int first_8_bits[8];
      int last_8_bits[8];

      /* Convert received bytes to binary */
      decToBinary((int)pR_data[1], first_8_bits);
 80010ee:	4b3a      	ldr	r3, [pc, #232]	@ (80011d8 <main+0x1a0>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	001a      	movs	r2, r3
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	0019      	movs	r1, r3
 80010f8:	0010      	movs	r0, r2
 80010fa:	f000 f8e5 	bl	80012c8 <decToBinary>
      decToBinary((int)pR_data[2], last_8_bits);
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <main+0x1a0>)
 8001100:	789b      	ldrb	r3, [r3, #2]
 8001102:	001a      	movs	r2, r3
 8001104:	2324      	movs	r3, #36	@ 0x24
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	0019      	movs	r1, r3
 800110a:	0010      	movs	r0, r2
 800110c:	f000 f8dc 	bl	80012c8 <decToBinary>

      int ADC_binary[10];
      /* Extract useful bits */
      for(int i = 0; i < 2; i++) {
 8001110:	2300      	movs	r3, #0
 8001112:	228c      	movs	r2, #140	@ 0x8c
 8001114:	18ba      	adds	r2, r7, r2
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	e013      	b.n	8001142 <main+0x10a>
          ADC_binary[9-i] = first_8_bits[6+i];
 800111a:	208c      	movs	r0, #140	@ 0x8c
 800111c:	183b      	adds	r3, r7, r0
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1d99      	adds	r1, r3, #6
 8001122:	183b      	adds	r3, r7, r0
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2209      	movs	r2, #9
 8001128:	1ad2      	subs	r2, r2, r3
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	0089      	lsls	r1, r1, #2
 800112e:	58c9      	ldr	r1, [r1, r3]
 8001130:	2344      	movs	r3, #68	@ 0x44
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	50d1      	str	r1, [r2, r3]
      for(int i = 0; i < 2; i++) {
 8001138:	183b      	adds	r3, r7, r0
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	183a      	adds	r2, r7, r0
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	238c      	movs	r3, #140	@ 0x8c
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	dde6      	ble.n	800111a <main+0xe2>
      }
      for(int i = 0; i < 8; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	2288      	movs	r2, #136	@ 0x88
 8001150:	18ba      	adds	r2, r7, r2
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e013      	b.n	800117e <main+0x146>
          ADC_binary[7-i] = last_8_bits[i];
 8001156:	2088      	movs	r0, #136	@ 0x88
 8001158:	183b      	adds	r3, r7, r0
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2207      	movs	r2, #7
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	2324      	movs	r3, #36	@ 0x24
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	1839      	adds	r1, r7, r0
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	0089      	lsls	r1, r1, #2
 800116a:	58c9      	ldr	r1, [r1, r3]
 800116c:	2344      	movs	r3, #68	@ 0x44
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	50d1      	str	r1, [r2, r3]
      for(int i = 0; i < 8; i++) {
 8001174:	183b      	adds	r3, r7, r0
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	183a      	adds	r2, r7, r0
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	2388      	movs	r3, #136	@ 0x88
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b07      	cmp	r3, #7
 8001186:	dde6      	ble.n	8001156 <main+0x11e>
      }

      /* Convert binary to decimal */
      int ADC_val = binaryArrayToDecimal(ADC_binary, 10);
 8001188:	2344      	movs	r3, #68	@ 0x44
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	210a      	movs	r1, #10
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f8f6 	bl	8001380 <binaryArrayToDecimal>
 8001194:	0003      	movs	r3, r0
 8001196:	2284      	movs	r2, #132	@ 0x84
 8001198:	18b9      	adds	r1, r7, r2
 800119a:	600b      	str	r3, [r1, #0]
      /* Set compare register for TIM2 */
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ADCToPWM(ADC_val)); // Use htim2
 800119c:	18bb      	adds	r3, r7, r2
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 f873 	bl	800128c <ADCToPWM>
 80011a6:	0002      	movs	r2, r0
 80011a8:	000b      	movs	r3, r1
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <main+0x194>)
 80011ac:	680c      	ldr	r4, [r1, #0]
 80011ae:	0010      	movs	r0, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	f7ff f91f 	bl	80003f4 <__aeabi_d2uiz>
 80011b6:	0003      	movs	r3, r0
 80011b8:	6363      	str	r3, [r4, #52]	@ 0x34
      HAL_Delay(10);
 80011ba:	200a      	movs	r0, #10
 80011bc:	f000 fbbc 	bl	8001938 <HAL_Delay>
  {
 80011c0:	e77c      	b.n	80010bc <main+0x84>
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	2000009c 	.word	0x2000009c
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000034 	.word	0x20000034
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000038 	.word	0x20000038

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b099      	sub	sp, #100	@ 0x64
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	242c      	movs	r4, #44	@ 0x2c
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	2334      	movs	r3, #52	@ 0x34
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f003 f90d 	bl	8004414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fa:	231c      	movs	r3, #28
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	0018      	movs	r0, r3
 8001200:	2310      	movs	r3, #16
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f003 f905 	bl	8004414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120a:	003b      	movs	r3, r7
 800120c:	0018      	movs	r0, r3
 800120e:	231c      	movs	r3, #28
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f003 f8fe 	bl	8004414 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2220      	movs	r2, #32
 800121c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800121e:	193b      	adds	r3, r7, r4
 8001220:	2201      	movs	r2, #1
 8001222:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	193b      	adds	r3, r7, r4
 800122c:	0018      	movs	r0, r3
 800122e:	f000 fe0b 	bl	8001e48 <HAL_RCC_OscConfig>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x56>
  {
      Error_Handler();
 8001236:	f000 f8c2 	bl	80013be <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	211c      	movs	r1, #28
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2207      	movs	r2, #7
 8001240:	601a      	str	r2, [r3, #0]
                                |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2203      	movs	r2, #3
 8001246:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2101      	movs	r1, #1
 8001258:	0018      	movs	r0, r3
 800125a:	f001 f97b 	bl	8002554 <HAL_RCC_ClockConfig>
 800125e:	1e03      	subs	r3, r0, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x82>
  {
      Error_Handler();
 8001262:	f000 f8ac 	bl	80013be <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001266:	003b      	movs	r3, r7
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800126c:	003b      	movs	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	003b      	movs	r3, r7
 8001274:	0018      	movs	r0, r3
 8001276:	f001 fad9 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x9e>
  {
      Error_Handler();
 800127e:	f000 f89e 	bl	80013be <Error_Handler>
  }
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b019      	add	sp, #100	@ 0x64
 8001288:	bd90      	pop	{r4, r7, pc}
	...

0800128c <ADCToPWM>:

/* USER CODE BEGIN 4 */
double ADCToPWM(int ADC_val) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    return (ADC_val * (PWM_MAX - PWM_MIN) / 1023) + PWM_MIN;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <ADCToPWM+0x34>)
 8001298:	4353      	muls	r3, r2
 800129a:	490a      	ldr	r1, [pc, #40]	@ (80012c4 <ADCToPWM+0x38>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7fe ffbd 	bl	800021c <__divsi3>
 80012a2:	0003      	movs	r3, r0
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <ADCToPWM+0x34>)
 80012a6:	4694      	mov	ip, r2
 80012a8:	4463      	add	r3, ip
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff fc98 	bl	8000be0 <__aeabi_i2d>
 80012b0:	0002      	movs	r2, r0
 80012b2:	000b      	movs	r3, r1
}
 80012b4:	0010      	movs	r0, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	00000bb8 	.word	0x00000bb8
 80012c4:	000003ff 	.word	0x000003ff

080012c8 <decToBinary>:

void decToBinary(long decimal_val, int fill_array[]) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
    int curVal = decimal_val;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	617b      	str	r3, [r7, #20]
    int i = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]

    while (curVal > 0) {
 80012da:	e016      	b.n	800130a <decToBinary+0x42>
        fill_array[i] = curVal % 2;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	18d2      	adds	r2, r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4924      	ldr	r1, [pc, #144]	@ (8001378 <decToBinary+0xb0>)
 80012e8:	400b      	ands	r3, r1
 80012ea:	d504      	bpl.n	80012f6 <decToBinary+0x2e>
 80012ec:	3b01      	subs	r3, #1
 80012ee:	2102      	movs	r1, #2
 80012f0:	4249      	negs	r1, r1
 80012f2:	430b      	orrs	r3, r1
 80012f4:	3301      	adds	r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
        curVal = curVal / 2;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da00      	bge.n	8001300 <decToBinary+0x38>
 80012fe:	3301      	adds	r3, #1
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
        i++;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3301      	adds	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
    while (curVal > 0) {
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dce5      	bgt.n	80012dc <decToBinary+0x14>
    }

    // Reverse the array for proper order
    for (int j = 0; j < i / 2; j++) {
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e022      	b.n	800135c <decToBinary+0x94>
        int temp = fill_array[j];
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60bb      	str	r3, [r7, #8]
        fill_array[j] = fill_array[i - j - 1];
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <decToBinary+0xb4>)
 800132a:	4694      	mov	ip, r2
 800132c:	4463      	add	r3, ip
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	18d2      	adds	r2, r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	18cb      	adds	r3, r1, r3
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	601a      	str	r2, [r3, #0]
        fill_array[i - j - 1] = temp;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <decToBinary+0xb4>)
 8001348:	4694      	mov	ip, r2
 800134a:	4463      	add	r3, ip
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < i / 2; j++) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da00      	bge.n	8001364 <decToBinary+0x9c>
 8001362:	3301      	adds	r3, #1
 8001364:	105b      	asrs	r3, r3, #1
 8001366:	001a      	movs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4293      	cmp	r3, r2
 800136c:	dbd3      	blt.n	8001316 <decToBinary+0x4e>
    }
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}
 8001378:	80000001 	.word	0x80000001
 800137c:	3fffffff 	.word	0x3fffffff

08001380 <binaryArrayToDecimal>:

int binaryArrayToDecimal(int binary[], int size) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    int decimalValue = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	e00b      	b.n	80013ac <binaryArrayToDecimal+0x2c>
        decimalValue = (decimalValue << 1) | binary[i];
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	005a      	lsls	r2, r3, #1
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	18cb      	adds	r3, r1, r3
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbef      	blt.n	8001394 <binaryArrayToDecimal+0x14>
    }
    return decimalValue;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}

080013be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c2:	b672      	cpsid	i
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	e7fd      	b.n	80013c6 <Error_Handler+0x8>
	...

080013cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_SPI1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013d8:	2282      	movs	r2, #130	@ 0x82
 80013da:	0052      	lsls	r2, r2, #1
 80013dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013e6:	22e0      	movs	r2, #224	@ 0xe0
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_SPI1_Init+0x74>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_SPI1_Init+0x74>)
 8001402:	2208      	movs	r2, #8
 8001404:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_SPI1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_SPI1_Init+0x74>)
 800141a:	2207      	movs	r2, #7
 800141c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_SPI1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_SPI1_Init+0x74>)
 8001426:	2208      	movs	r2, #8
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <MX_SPI1_Init+0x74>)
 800142c:	0018      	movs	r0, r3
 800142e:	f001 fafb 	bl	8002a28 <HAL_SPI_Init>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f7ff ffc2 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000038 	.word	0x20000038
 8001444:	40013000 	.word	0x40013000

08001448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	@ 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	2414      	movs	r4, #20
 8001452:	193b      	adds	r3, r7, r4
 8001454:	0018      	movs	r0, r3
 8001456:	2314      	movs	r3, #20
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f002 ffda 	bl	8004414 <memset>
  if(spiHandle->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2e      	ldr	r2, [pc, #184]	@ (8001520 <HAL_SPI_MspInit+0xd8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d155      	bne.n	8001516 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0149      	lsls	r1, r1, #5
 8001474:	430a      	orrs	r2, r1
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	0289      	lsls	r1, r1, #10
 8001490:	430a      	orrs	r2, r1
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	02c9      	lsls	r1, r1, #11
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <HAL_SPI_MspInit+0xdc>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	02db      	lsls	r3, r3, #11
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	22c0      	movs	r2, #192	@ 0xc0
 80014c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2202      	movs	r2, #2
 80014c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	2203      	movs	r2, #3
 80014d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	193a      	adds	r2, r7, r4
 80014de:	2390      	movs	r3, #144	@ 0x90
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 faff 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ea:	0021      	movs	r1, r4
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2208      	movs	r2, #8
 80014f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2202      	movs	r2, #2
 80014f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2203      	movs	r2, #3
 8001502:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	187b      	adds	r3, r7, r1
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_SPI_MspInit+0xe0>)
 800150e:	0019      	movs	r1, r3
 8001510:	0010      	movs	r0, r2
 8001512:	f000 fae9 	bl	8001ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b00b      	add	sp, #44	@ 0x2c
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	40013000 	.word	0x40013000
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_MspInit+0x44>)
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_MspInit+0x44>)
 8001538:	2101      	movs	r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	619a      	str	r2, [r3, #24]
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_MspInit+0x44>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x44>)
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_MspInit+0x44>)
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0549      	lsls	r1, r1, #21
 8001554:	430a      	orrs	r2, r1
 8001556:	61da      	str	r2, [r3, #28]
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_MspInit+0x44>)
 800155a:	69da      	ldr	r2, [r3, #28]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4013      	ands	r3, r2
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	46c0      	nop			@ (mov r8, r8)
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	46c0      	nop			@ (mov r8, r8)
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f9b0 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	2320      	movs	r3, #32
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	0018      	movs	r0, r3
 80015bc:	2308      	movs	r3, #8
 80015be:	001a      	movs	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	f002 ff27 	bl	8004414 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	0018      	movs	r0, r3
 80015ca:	231c      	movs	r3, #28
 80015cc:	001a      	movs	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	f002 ff20 	bl	8004414 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b25      	ldr	r3, [pc, #148]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	05d2      	lsls	r2, r2, #23
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015de:	220e      	movs	r2, #14
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b22      	ldr	r3, [pc, #136]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015ea:	22fa      	movs	r2, #250	@ 0xfa
 80015ec:	0212      	lsls	r2, r2, #8
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fe22 	bl	8003248 <HAL_TIM_PWM_Init>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001608:	f7ff fed9 	bl	80013be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2120      	movs	r1, #32
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	187a      	adds	r2, r7, r1
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <MX_TIM2_Init+0xbc>)
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f002 fa8d 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800162a:	f7ff fec8 	bl	80013be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2260      	movs	r2, #96	@ 0x60
 8001632:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001646:	1d39      	adds	r1, r7, #4
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_TIM2_Init+0xbc>)
 800164a:	2204      	movs	r2, #4
 800164c:	0018      	movs	r0, r3
 800164e:	f001 ff03 	bl	8003458 <HAL_TIM_PWM_ConfigChannel>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001656:	f7ff feb2 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <MX_TIM2_Init+0xbc>)
 800165c:	0018      	movs	r0, r3
 800165e:	f000 f823 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b00a      	add	sp, #40	@ 0x28
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	2000009c 	.word	0x2000009c

08001670 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	05db      	lsls	r3, r3, #23
 8001680:	429a      	cmp	r2, r3
 8001682:	d10b      	bne.n	800169c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x34>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x34>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	61da      	str	r2, [r3, #28]
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x34>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	240c      	movs	r4, #12
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	2314      	movs	r3, #20
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f002 feaa 	bl	8004414 <memset>
  if(timHandle->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d124      	bne.n	8001716 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_TIM_MspPostInit+0x78>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_TIM_MspPostInit+0x78>)
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	0289      	lsls	r1, r1, #10
 80016d6:	430a      	orrs	r2, r1
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_TIM_MspPostInit+0x78>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	4013      	ands	r3, r2
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e8:	0021      	movs	r1, r4
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2202      	movs	r2, #2
 80016f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2202      	movs	r2, #2
 8001706:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	187a      	adds	r2, r7, r1
 800170a:	2390      	movs	r3, #144	@ 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f9e9 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b009      	add	sp, #36	@ 0x24
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40021000 	.word	0x40021000

08001724 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USART2_UART_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	@ (8001780 <MX_USART2_UART_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001730:	2296      	movs	r2, #150	@ 0x96
 8001732:	0212      	lsls	r2, r2, #8
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_USART2_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_USART2_UART_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MX_USART2_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <MX_USART2_UART_Init+0x58>)
 8001768:	0018      	movs	r0, r3
 800176a:	f002 fa47 	bl	8003bfc <HAL_UART_Init>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001772:	f7ff fe24 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200000e4 	.word	0x200000e4
 8001780:	40004400 	.word	0x40004400

08001784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08b      	sub	sp, #44	@ 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	2414      	movs	r4, #20
 800178e:	193b      	adds	r3, r7, r4
 8001790:	0018      	movs	r0, r3
 8001792:	2314      	movs	r3, #20
 8001794:	001a      	movs	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f002 fe3c 	bl	8004414 <memset>
  if(uartHandle->Instance==USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <HAL_UART_MspInit+0x90>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d132      	bne.n	800180c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	0289      	lsls	r1, r1, #10
 80017b0:	430a      	orrs	r2, r1
 80017b2:	61da      	str	r2, [r3, #28]
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0289      	lsls	r1, r1, #10
 80017cc:	430a      	orrs	r2, r1
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_UART_MspInit+0x94>)
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	029b      	lsls	r3, r3, #10
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017de:	0021      	movs	r1, r4
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2202      	movs	r2, #2
 80017ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2201      	movs	r2, #1
 80017fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	187a      	adds	r2, r7, r1
 8001800:	2390      	movs	r3, #144	@ 0x90
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f96e 	bl	8001ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b00b      	add	sp, #44	@ 0x2c
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	40004400 	.word	0x40004400
 8001818:	40021000 	.word	0x40021000

0800181c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800181c:	480d      	ldr	r0, [pc, #52]	@ (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f7ff fec1 	bl	80015a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	@ (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	@ (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184a:	f002 fdeb 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184e:	f7ff fbf3 	bl	8001038 <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001860:	080044c4 	.word	0x080044c4
  ldr r2, =_sbss
 8001864:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001868:	20000170 	.word	0x20000170

0800186c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_COMP_IRQHandler>
	...

08001870 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <HAL_Init+0x24>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_Init+0x24>)
 800187a:	2110      	movs	r1, #16
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 f809 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001886:	f7ff fe51 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_InitTick+0x5c>)
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_InitTick+0x60>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	0019      	movs	r1, r3
 80018aa:	23fa      	movs	r3, #250	@ 0xfa
 80018ac:	0098      	lsls	r0, r3, #2
 80018ae:	f7fe fc2b 	bl	8000108 <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0019      	movs	r1, r3
 80018b6:	0020      	movs	r0, r4
 80018b8:	f7fe fc26 	bl	8000108 <__udivsi3>
 80018bc:	0003      	movs	r3, r0
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f905 	bl	8001ace <HAL_SYSTICK_Config>
 80018c4:	1e03      	subs	r3, r0, #0
 80018c6:	d001      	beq.n	80018cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00f      	b.n	80018ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d80b      	bhi.n	80018ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2301      	movs	r3, #1
 80018d6:	425b      	negs	r3, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f8e2 	bl	8001aa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_InitTick+0x64>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b003      	add	sp, #12
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000014 	.word	0x20000014
 80018fc:	20000010 	.word	0x20000010

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_IncTick+0x1c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_IncTick+0x20>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	18d2      	adds	r2, r2, r3
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_IncTick+0x20>)
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	20000014 	.word	0x20000014
 8001920:	2000016c 	.word	0x2000016c

08001924 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <HAL_GetTick+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	2000016c 	.word	0x2000016c

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fff0 	bl	8001924 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	001a      	movs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	189b      	adds	r3, r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	f7ff ffe0 	bl	8001924 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	46c0      	nop			@ (mov r8, r8)
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	20000014 	.word	0x20000014

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	0002      	movs	r2, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b7f      	cmp	r3, #127	@ 0x7f
 8001994:	d828      	bhi.n	80019e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <__NVIC_SetPriority+0xd4>)
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	33c0      	adds	r3, #192	@ 0xc0
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	589b      	ldr	r3, [r3, r2]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	@ 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	@ 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	481f      	ldr	r0, [pc, #124]	@ (8001a54 <__NVIC_SetPriority+0xd4>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	430a      	orrs	r2, r1
 80019e0:	33c0      	adds	r3, #192	@ 0xc0
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019e6:	e031      	b.n	8001a4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a58 <__NVIC_SetPriority+0xd8>)
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	0019      	movs	r1, r3
 80019f0:	230f      	movs	r3, #15
 80019f2:	400b      	ands	r3, r1
 80019f4:	3b08      	subs	r3, #8
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3306      	adds	r3, #6
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	18d3      	adds	r3, r2, r3
 80019fe:	3304      	adds	r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1dfa      	adds	r2, r7, #7
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	0011      	movs	r1, r2
 8001a08:	2203      	movs	r2, #3
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	00d2      	lsls	r2, r2, #3
 8001a0e:	21ff      	movs	r1, #255	@ 0xff
 8001a10:	4091      	lsls	r1, r2
 8001a12:	000a      	movs	r2, r1
 8001a14:	43d2      	mvns	r2, r2
 8001a16:	401a      	ands	r2, r3
 8001a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	401a      	ands	r2, r3
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	2303      	movs	r3, #3
 8001a2a:	4003      	ands	r3, r0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a30:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <__NVIC_SetPriority+0xd8>)
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	001c      	movs	r4, r3
 8001a38:	230f      	movs	r3, #15
 8001a3a:	4023      	ands	r3, r4
 8001a3c:	3b08      	subs	r3, #8
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	430a      	orrs	r2, r1
 8001a42:	3306      	adds	r3, #6
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	18c3      	adds	r3, r0, r3
 8001a48:	3304      	adds	r3, #4
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b003      	add	sp, #12
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	045b      	lsls	r3, r3, #17
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d301      	bcc.n	8001a74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e010      	b.n	8001a96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <SysTick_Config+0x44>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	425b      	negs	r3, r3
 8001a80:	2103      	movs	r1, #3
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff ff7c 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x44>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x44>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	210f      	movs	r1, #15
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	0011      	movs	r1, r2
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ffbf 	bl	8001a5c <SysTick_Config>
 8001ade:	0003      	movs	r3, r0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e155      	b.n	8001da4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4091      	lsls	r1, r2
 8001b02:	000a      	movs	r2, r1
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d100      	bne.n	8001b10 <HAL_GPIO_Init+0x28>
 8001b0e:	e146      	b.n	8001d9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d005      	beq.n	8001b28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d130      	bne.n	8001b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	2201      	movs	r2, #1
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d017      	beq.n	8001bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d123      	bne.n	8001c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	58d3      	ldr	r3, [r2, r3]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	400b      	ands	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	6939      	ldr	r1, [r7, #16]
 8001c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	23c0      	movs	r3, #192	@ 0xc0
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	4013      	ands	r3, r2
 8001c58:	d100      	bne.n	8001c5c <HAL_GPIO_Init+0x174>
 8001c5a:	e0a0      	b.n	8001d9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5c:	4b57      	ldr	r3, [pc, #348]	@ (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	4b56      	ldr	r3, [pc, #344]	@ (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
 8001c68:	4b54      	ldr	r3, [pc, #336]	@ (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c74:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_GPIO_Init+0x2d8>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	589b      	ldr	r3, [r3, r2]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2203      	movs	r2, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	0013      	movs	r3, r2
 8001c90:	43da      	mvns	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	2390      	movs	r3, #144	@ 0x90
 8001c9c:	05db      	lsls	r3, r3, #23
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a47      	ldr	r2, [pc, #284]	@ (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1ea>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a46      	ldr	r2, [pc, #280]	@ (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1e6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a45      	ldr	r2, [pc, #276]	@ (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1e2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a44      	ldr	r2, [pc, #272]	@ (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1de>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	2103      	movs	r1, #3
 8001cdc:	400a      	ands	r2, r1
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	@ (8001dc0 <HAL_GPIO_Init+0x2d8>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	035b      	lsls	r3, r3, #13
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	039b      	lsls	r3, r3, #14
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	029b      	lsls	r3, r3, #10
 8001d62:	4013      	ands	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d74:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	40da      	lsrs	r2, r3
 8001dac:	1e13      	subs	r3, r2, #0
 8001dae:	d000      	beq.n	8001db2 <HAL_GPIO_Init+0x2ca>
 8001db0:	e6a2      	b.n	8001af8 <HAL_GPIO_Init+0x10>
  } 
}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b006      	add	sp, #24
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	48000c00 	.word	0x48000c00
 8001dd0:	48001000 	.word	0x48001000
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	0008      	movs	r0, r1
 8001de2:	0011      	movs	r1, r2
 8001de4:	1cbb      	adds	r3, r7, #2
 8001de6:	1c02      	adds	r2, r0, #0
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	1c7b      	adds	r3, r7, #1
 8001dec:	1c0a      	adds	r2, r1, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df0:	1c7b      	adds	r3, r7, #1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df8:	1cbb      	adds	r3, r7, #2
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e02:	1cbb      	adds	r3, r7, #2
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	1cbb      	adds	r3, r7, #2
 8001e1e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e26:	1cbb      	adds	r3, r7, #2
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	041a      	lsls	r2, r3, #16
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	1cb9      	adds	r1, r7, #2
 8001e36:	8809      	ldrh	r1, [r1, #0]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f000 fb76 	bl	8002548 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x20>
 8001e66:	e08e      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e68:	4bc5      	ldr	r3, [pc, #788]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d00e      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e74:	4bc2      	ldr	r3, [pc, #776]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d117      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x68>
 8001e80:	4bbf      	ldr	r3, [pc, #764]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23c0      	movs	r3, #192	@ 0xc0
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	401a      	ands	r2, r3
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4bbb      	ldr	r3, [pc, #748]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x58>
 8001e9e:	e071      	b.n	8001f84 <HAL_RCC_OscConfig+0x13c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d000      	beq.n	8001eaa <HAL_RCC_OscConfig+0x62>
 8001ea8:	e06c      	b.n	8001f84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f000 fb4c 	bl	8002548 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x80>
 8001eb8:	4bb1      	ldr	r3, [pc, #708]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4bb0      	ldr	r3, [pc, #704]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ebe:	2180      	movs	r1, #128	@ 0x80
 8001ec0:	0249      	lsls	r1, r1, #9
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e02f      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0xa2>
 8001ed0:	4bab      	ldr	r3, [pc, #684]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4baa      	ldr	r3, [pc, #680]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	49ab      	ldr	r1, [pc, #684]	@ (8002184 <HAL_RCC_OscConfig+0x33c>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	4ba8      	ldr	r3, [pc, #672]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4ba7      	ldr	r3, [pc, #668]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	49a9      	ldr	r1, [pc, #676]	@ (8002188 <HAL_RCC_OscConfig+0x340>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e01e      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10e      	bne.n	8001f10 <HAL_RCC_OscConfig+0xc8>
 8001ef2:	4ba3      	ldr	r3, [pc, #652]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4ba2      	ldr	r3, [pc, #648]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	02c9      	lsls	r1, r1, #11
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	4b9f      	ldr	r3, [pc, #636]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b9e      	ldr	r3, [pc, #632]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f06:	2180      	movs	r1, #128	@ 0x80
 8001f08:	0249      	lsls	r1, r1, #9
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001f10:	4b9b      	ldr	r3, [pc, #620]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b9a      	ldr	r3, [pc, #616]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f16:	499b      	ldr	r1, [pc, #620]	@ (8002184 <HAL_RCC_OscConfig+0x33c>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4b98      	ldr	r3, [pc, #608]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b97      	ldr	r3, [pc, #604]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f22:	4999      	ldr	r1, [pc, #612]	@ (8002188 <HAL_RCC_OscConfig+0x340>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d014      	beq.n	8001f5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcf8 	bl	8001924 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fcf3 	bl	8001924 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	@ 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e2fd      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0xf2>
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fce3 	bl	8001924 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcde 	bl	8001924 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e2e8      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b82      	ldr	r3, [pc, #520]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x11c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x14a>
 8001f90:	e06c      	b.n	800206c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f92:	4b7b      	ldr	r3, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	220c      	movs	r2, #12
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f9c:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d11f      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1a0>
 8001fa8:	4b75      	ldr	r3, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	23c0      	movs	r3, #192	@ 0xc0
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b71      	ldr	r3, [pc, #452]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x188>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e2bb      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	22f8      	movs	r2, #248	@ 0xf8
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00da      	lsls	r2, r3, #3
 8001fe0:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e041      	b.n	800206c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d024      	beq.n	800203a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b63      	ldr	r3, [pc, #396]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b62      	ldr	r3, [pc, #392]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc92 	bl	8001924 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fc8d 	bl	8001924 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e297      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b59      	ldr	r3, [pc, #356]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d0f1      	beq.n	8002006 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	22f8      	movs	r2, #248	@ 0xf8
 8002028:	4393      	bics	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00da      	lsls	r2, r3, #3
 8002032:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b51      	ldr	r3, [pc, #324]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b50      	ldr	r3, [pc, #320]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff fc6d 	bl	8001924 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fc68 	bl	8001924 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e272      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d1f1      	bne.n	8002050 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	4013      	ands	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002082:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fc4b 	bl	8001924 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff fc46 	bl	8001924 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e250      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f1      	beq.n	8002094 <HAL_RCC_OscConfig+0x24c>
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b33      	ldr	r3, [pc, #204]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 80020b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b6:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	438a      	bics	r2, r1
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fc31 	bl	8001924 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff fc2c 	bl	8001924 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e236      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d1f1      	bne.n	80020c8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2204      	movs	r2, #4
 80020ea:	4013      	ands	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2a8>
 80020ee:	e0b5      	b.n	800225c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f0:	201f      	movs	r0, #31
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f8:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	4013      	ands	r3, r2
 8002102:	d110      	bne.n	8002126 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 800210a:	2180      	movs	r1, #128	@ 0x80
 800210c:	0549      	lsls	r1, r1, #21
 800210e:	430a      	orrs	r2, r1
 8002110:	61da      	str	r2, [r3, #28]
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	055b      	lsls	r3, r3, #21
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002120:	183b      	adds	r3, r7, r0
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_RCC_OscConfig+0x344>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_RCC_OscConfig+0x344>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_RCC_OscConfig+0x344>)
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7ff fbf0 	bl	8001924 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7ff fbeb 	bl	8001924 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	@ 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1f5      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x344>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10f      	bne.n	8002190 <HAL_RCC_OscConfig+0x348>
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4b02      	ldr	r3, [pc, #8]	@ (8002180 <HAL_RCC_OscConfig+0x338>)
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	621a      	str	r2, [r3, #32]
 800217c:	e036      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	fffeffff 	.word	0xfffeffff
 8002188:	fffbffff 	.word	0xfffbffff
 800218c:	40007000 	.word	0x40007000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x36a>
 8002198:	4bca      	ldr	r3, [pc, #808]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4bc9      	ldr	r3, [pc, #804]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	4bc7      	ldr	r3, [pc, #796]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4bc6      	ldr	r3, [pc, #792]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	438a      	bics	r2, r1
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x38c>
 80021ba:	4bc2      	ldr	r3, [pc, #776]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4bc1      	ldr	r3, [pc, #772]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	2104      	movs	r1, #4
 80021c2:	430a      	orrs	r2, r1
 80021c4:	621a      	str	r2, [r3, #32]
 80021c6:	4bbf      	ldr	r3, [pc, #764]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	4bbe      	ldr	r3, [pc, #760]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	621a      	str	r2, [r3, #32]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 80021d4:	4bbb      	ldr	r3, [pc, #748]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	4bba      	ldr	r3, [pc, #744]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	621a      	str	r2, [r3, #32]
 80021e0:	4bb8      	ldr	r3, [pc, #736]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4bb7      	ldr	r3, [pc, #732]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d014      	beq.n	800221e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7ff fb96 	bl	8001924 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fb91 	bl	8001924 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4aaf      	ldr	r2, [pc, #700]	@ (80024c8 <HAL_RCC_OscConfig+0x680>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e19a      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	4bac      	ldr	r3, [pc, #688]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x3b6>
 800221c:	e013      	b.n	8002246 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fb81 	bl	8001924 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002226:	e009      	b.n	800223c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff fb7c 	bl	8001924 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4aa5      	ldr	r2, [pc, #660]	@ (80024c8 <HAL_RCC_OscConfig+0x680>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e185      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4ba1      	ldr	r3, [pc, #644]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b9c      	ldr	r3, [pc, #624]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	4b9b      	ldr	r3, [pc, #620]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002256:	499d      	ldr	r1, [pc, #628]	@ (80024cc <HAL_RCC_OscConfig+0x684>)
 8002258:	400a      	ands	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2210      	movs	r2, #16
 8002262:	4013      	ands	r3, r2
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800226e:	4b95      	ldr	r3, [pc, #596]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002272:	4b94      	ldr	r3, [pc, #592]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002274:	2104      	movs	r1, #4
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800227a:	4b92      	ldr	r3, [pc, #584]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800227c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800227e:	4b91      	ldr	r3, [pc, #580]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fb4d 	bl	8001924 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002290:	f7ff fb48 	bl	8001924 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e152      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022a2:	4b88      	ldr	r3, [pc, #544]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f1      	beq.n	8002290 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022ac:	4b85      	ldr	r3, [pc, #532]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	22f8      	movs	r2, #248	@ 0xf8
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	4b81      	ldr	r3, [pc, #516]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022c2:	e034      	b.n	800232e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	3305      	adds	r3, #5
 80022ca:	d111      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022cc:	4b7d      	ldr	r3, [pc, #500]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d0:	4b7c      	ldr	r3, [pc, #496]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	2104      	movs	r1, #4
 80022d4:	438a      	bics	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022d8:	4b7a      	ldr	r3, [pc, #488]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022dc:	22f8      	movs	r2, #248	@ 0xf8
 80022de:	4393      	bics	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	00da      	lsls	r2, r3, #3
 80022e8:	4b76      	ldr	r3, [pc, #472]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022f0:	4b74      	ldr	r3, [pc, #464]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f4:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	2104      	movs	r1, #4
 80022f8:	430a      	orrs	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022fc:	4b71      	ldr	r3, [pc, #452]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002300:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fb0c 	bl	8001924 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002312:	f7ff fb07 	bl	8001924 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e111      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002324:	4b67      	ldr	r3, [pc, #412]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f1      	bne.n	8002312 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	d05c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002338:	4b62      	ldr	r3, [pc, #392]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	220c      	movs	r2, #12
 800233e:	4013      	ands	r3, r2
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d00e      	beq.n	8002362 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002344:	4b5f      	ldr	r3, [pc, #380]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	220c      	movs	r2, #12
 800234a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800234c:	2b08      	cmp	r3, #8
 800234e:	d114      	bne.n	800237a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002350:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	23c0      	movs	r3, #192	@ 0xc0
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	401a      	ands	r2, r3
 800235a:	23c0      	movs	r3, #192	@ 0xc0
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	429a      	cmp	r2, r3
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002362:	4b58      	ldr	r3, [pc, #352]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5a8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d03c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e6      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01b      	beq.n	80023ba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002382:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	0249      	lsls	r1, r1, #9
 800238c:	430a      	orrs	r2, r1
 800238e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fac8 	bl	8001924 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239a:	f7ff fac3 	bl	8001924 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0cd      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023ac:	4b45      	ldr	r3, [pc, #276]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x552>
 80023b8:	e01b      	b.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023ba:	4b42      	ldr	r3, [pc, #264]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023c0:	4943      	ldr	r1, [pc, #268]	@ (80024d0 <HAL_RCC_OscConfig+0x688>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff faad 	bl	8001924 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d0:	f7ff faa8 	bl	8001924 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b2      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023e2:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x588>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023f0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d100      	bne.n	80023fc <HAL_RCC_OscConfig+0x5b4>
 80023fa:	e0a4      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4b31      	ldr	r3, [pc, #196]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	220c      	movs	r2, #12
 8002402:	4013      	ands	r3, r2
 8002404:	2b08      	cmp	r3, #8
 8002406:	d100      	bne.n	800240a <HAL_RCC_OscConfig+0x5c2>
 8002408:	e078      	b.n	80024fc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	2b02      	cmp	r3, #2
 8002410:	d14c      	bne.n	80024ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002418:	492e      	ldr	r1, [pc, #184]	@ (80024d4 <HAL_RCC_OscConfig+0x68c>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7ff fa81 	bl	8001924 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff fa7c 	bl	8001924 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e086      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002446:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	220f      	movs	r2, #15
 800244c:	4393      	bics	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	62da      	str	r2, [r3, #44]	@ 0x2c
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_RCC_OscConfig+0x690>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	431a      	orrs	r2, r3
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	0449      	lsls	r1, r1, #17
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fa4f 	bl	8001924 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff fa4a 	bl	8001924 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e054      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x644>
 80024aa:	e04c      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <HAL_RCC_OscConfig+0x68c>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fa34 	bl	8001924 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x6a6>
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00001388 	.word	0x00001388
 80024cc:	efffffff 	.word	0xefffffff
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	feffffff 	.word	0xfeffffff
 80024d8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff fa22 	bl	8001924 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e02c      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <HAL_RCC_OscConfig+0x708>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x694>
 80024fa:	e024      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e01f      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_RCC_OscConfig+0x708>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_RCC_OscConfig+0x708>)
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	23c0      	movs	r3, #192	@ 0xc0
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	429a      	cmp	r2, r3
 8002522:	d10e      	bne.n	8002542 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	220f      	movs	r2, #15
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	23f0      	movs	r3, #240	@ 0xf0
 8002536:	039b      	lsls	r3, r3, #14
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b008      	add	sp, #32
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0bf      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d911      	bls.n	800259a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0a6      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d006      	beq.n	80025bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025ae:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025b4:	21e0      	movs	r1, #224	@ 0xe0
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	22f0      	movs	r2, #240	@ 0xf0
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d04c      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	d120      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07a      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	049b      	lsls	r3, r3, #18
 8002602:	4013      	ands	r3, r2
 8002604:	d114      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06e      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	4013      	ands	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e062      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e05b      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	4393      	bics	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7ff f96e 	bl	8001924 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7ff f969 	bl	8001924 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_RCC_ClockConfig+0x1a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e042      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	220c      	movs	r2, #12
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1ec      	bne.n	800264e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d211      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a11      	ldr	r2, [pc, #68]	@ (80026fc <HAL_RCC_ClockConfig+0x1a8>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c4:	f000 f820 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	220f      	movs	r2, #15
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x1ac>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	000a      	movs	r2, r1
 80026da:	40da      	lsrs	r2, r3
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 80026de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff f8d9 	bl	8001898 <HAL_InitTick>
  
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	00001388 	.word	0x00001388
 80026fc:	fffff8ff 	.word	0xfffff8ff
 8002700:	08004484 	.word	0x08004484
 8002704:	2000000c 	.word	0x2000000c

08002708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002722:	4b2d      	ldr	r3, [pc, #180]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	220c      	movs	r2, #12
 800272c:	4013      	ands	r3, r2
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d046      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002732:	d848      	bhi.n	80027c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002734:	2b04      	cmp	r3, #4
 8002736:	d002      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x36>
 8002738:	2b08      	cmp	r3, #8
 800273a:	d003      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x3c>
 800273c:	e043      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273e:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002740:	613b      	str	r3, [r7, #16]
      break;
 8002742:	e043      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	220f      	movs	r2, #15
 800274a:	4013      	ands	r3, r2
 800274c:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002752:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	220f      	movs	r2, #15
 8002758:	4013      	ands	r3, r2
 800275a:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	23c0      	movs	r3, #192	@ 0xc0
 8002764:	025b      	lsls	r3, r3, #9
 8002766:	401a      	ands	r2, r3
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	025b      	lsls	r3, r3, #9
 800276c:	429a      	cmp	r2, r3
 800276e:	d109      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	481a      	ldr	r0, [pc, #104]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002774:	f7fd fcc8 	bl	8000108 <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	001a      	movs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4353      	muls	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e01a      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	23c0      	movs	r3, #192	@ 0xc0
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	401a      	ands	r2, r3
 800278c:	23c0      	movs	r3, #192	@ 0xc0
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	429a      	cmp	r2, r3
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4814      	ldr	r0, [pc, #80]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002798:	f7fd fcb6 	bl	8000108 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	001a      	movs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4353      	muls	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e008      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	480c      	ldr	r0, [pc, #48]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80027ac:	f7fd fcac 	bl	8000108 <__udivsi3>
 80027b0:	0003      	movs	r3, r0
 80027b2:	001a      	movs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4353      	muls	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	e002      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80027c8:	613b      	str	r3, [r7, #16]
      break;
 80027ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027cc:	693b      	ldr	r3, [r7, #16]
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b006      	add	sp, #24
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	40021000 	.word	0x40021000
 80027dc:	007a1200 	.word	0x007a1200
 80027e0:	0800449c 	.word	0x0800449c
 80027e4:	080044ac 	.word	0x080044ac
 80027e8:	02dc6c00 	.word	0x02dc6c00

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b02      	ldr	r3, [pc, #8]	@ (80027fc <HAL_RCC_GetHCLKFreq+0x10>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	2000000c 	.word	0x2000000c

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002804:	f7ff fff2 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002808:	0001      	movs	r1, r0
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	2207      	movs	r2, #7
 8002812:	4013      	ands	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	40d9      	lsrs	r1, r3
 800281a:	000b      	movs	r3, r1
}    
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	40021000 	.word	0x40021000
 8002828:	08004494 	.word	0x08004494

0800282c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	4013      	ands	r3, r2
 8002846:	d100      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002848:	e08e      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2017      	movs	r0, #23
 800284c:	183b      	adds	r3, r7, r0
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	055b      	lsls	r3, r3, #21
 800285a:	4013      	ands	r3, r2
 800285c:	d110      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002864:	2180      	movs	r1, #128	@ 0x80
 8002866:	0549      	lsls	r1, r1, #21
 8002868:	430a      	orrs	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
 800286c:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	055b      	lsls	r3, r3, #21
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	183b      	adds	r3, r7, r0
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b63      	ldr	r3, [pc, #396]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4013      	ands	r3, r2
 800288a:	d11a      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288c:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b5f      	ldr	r3, [pc, #380]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	0049      	lsls	r1, r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff f843 	bl	8001924 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	e008      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7ff f83e 	bl	8001924 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0a6      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b56      	ldr	r3, [pc, #344]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c2:	4b52      	ldr	r3, [pc, #328]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c4:	6a1a      	ldr	r2, [r3, #32]
 80028c6:	23c0      	movs	r3, #192	@ 0xc0
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d034      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	23c0      	movs	r3, #192	@ 0xc0
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d02c      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e4:	4b49      	ldr	r3, [pc, #292]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	4b46      	ldr	r3, [pc, #280]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	0249      	lsls	r1, r1, #9
 80028f8:	430a      	orrs	r2, r1
 80028fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fc:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	4b42      	ldr	r3, [pc, #264]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002902:	4945      	ldr	r1, [pc, #276]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002904:	400a      	ands	r2, r1
 8002906:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002908:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7ff f805 	bl	8001924 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	e009      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7ff f800 	bl	8001924 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e067      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d0f0      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800293e:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a34      	ldr	r2, [pc, #208]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800294e:	430a      	orrs	r2, r1
 8002950:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002952:	2317      	movs	r3, #23
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002962:	492f      	ldr	r1, [pc, #188]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002964:	400a      	ands	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	4013      	ands	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	2203      	movs	r2, #3
 8002978:	4393      	bics	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002982:	430a      	orrs	r2, r1
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	4a23      	ldr	r2, [pc, #140]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2220      	movs	r2, #32
 80029aa:	4013      	ands	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	2210      	movs	r2, #16
 80029b4:	4393      	bics	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ce:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	4393      	bics	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	fffffcff 	.word	0xfffffcff
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	00001388 	.word	0x00001388
 8002a20:	efffffff 	.word	0xefffffff
 8002a24:	fffcffff 	.word	0xfffcffff

08002a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0a8      	b.n	8002b8c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	2382      	movs	r3, #130	@ 0x82
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d009      	beq.n	8002a62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
 8002a54:	e005      	b.n	8002a62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	225d      	movs	r2, #93	@ 0x5d
 8002a6c:	5c9b      	ldrb	r3, [r3, r2]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	225c      	movs	r2, #92	@ 0x5c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fe fce2 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	225d      	movs	r2, #93	@ 0x5d
 8002a88:	2102      	movs	r1, #2
 8002a8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2140      	movs	r1, #64	@ 0x40
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	23e0      	movs	r3, #224	@ 0xe0
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d902      	bls.n	8002aae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e002      	b.n	8002ab4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	015b      	lsls	r3, r3, #5
 8002ab2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	23f0      	movs	r3, #240	@ 0xf0
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d008      	beq.n	8002ad2 <HAL_SPI_Init+0xaa>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	23e0      	movs	r3, #224	@ 0xe0
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	2382      	movs	r3, #130	@ 0x82
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	401a      	ands	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	2384      	movs	r3, #132	@ 0x84
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2102      	movs	r1, #2
 8002aee:	400b      	ands	r3, r1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2101      	movs	r1, #1
 8002af8:	400b      	ands	r3, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6999      	ldr	r1, [r3, #24]
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	400b      	ands	r3, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2138      	movs	r1, #56	@ 0x38
 8002b0e:	400b      	ands	r3, r1
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2180      	movs	r1, #128	@ 0x80
 8002b18:	400b      	ands	r3, r1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	2204      	movs	r2, #4
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2110      	movs	r1, #16
 8002b40:	400b      	ands	r3, r1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b48:	2108      	movs	r1, #8
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	23f0      	movs	r3, #240	@ 0xf0
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	015b      	lsls	r3, r3, #5
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <HAL_SPI_Init+0x16c>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	225d      	movs	r2, #93	@ 0x5d
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	fffff7ff 	.word	0xfffff7ff

08002b98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	1cbb      	adds	r3, r7, #2
 8002ba8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002baa:	2301      	movs	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bae:	2323      	movs	r3, #35	@ 0x23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	225c      	movs	r2, #92	@ 0x5c
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x2c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e1c4      	b.n	8002f4e <HAL_SPI_TransmitReceive+0x3b6>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	225c      	movs	r2, #92	@ 0x5c
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bcc:	f7fe feaa 	bl	8001924 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bd4:	201b      	movs	r0, #27
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	215d      	movs	r1, #93	@ 0x5d
 8002bdc:	5c52      	ldrb	r2, [r2, r1]
 8002bde:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002be6:	2312      	movs	r3, #18
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	1cba      	adds	r2, r7, #2
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d011      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x84>
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	2382      	movs	r3, #130	@ 0x82
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d107      	bne.n	8002c12 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_SPI_TransmitReceive+0x7a>
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d004      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002c12:	2323      	movs	r3, #35	@ 0x23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c1a:	e191      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x98>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x98>
 8002c28:	1cbb      	adds	r3, r7, #2
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002c30:	2323      	movs	r3, #35	@ 0x23
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c38:	e182      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	225d      	movs	r2, #93	@ 0x5d
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d003      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	225d      	movs	r2, #93	@ 0x5d
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1cba      	adds	r2, r7, #2
 8002c5e:	2146      	movs	r1, #70	@ 0x46
 8002c60:	8812      	ldrh	r2, [r2, #0]
 8002c62:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1cba      	adds	r2, r7, #2
 8002c68:	2144      	movs	r1, #68	@ 0x44
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1cba      	adds	r2, r7, #2
 8002c78:	8812      	ldrh	r2, [r2, #0]
 8002c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1cba      	adds	r2, r7, #2
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	23e0      	movs	r3, #224	@ 0xe0
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	49ac      	ldr	r1, [pc, #688]	@ (8002f58 <HAL_SPI_TransmitReceive+0x3c0>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	e008      	b.n	8002cc0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	0149      	lsls	r1, r1, #5
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2240      	movs	r2, #64	@ 0x40
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d007      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	23e0      	movs	r3, #224	@ 0xe0
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d800      	bhi.n	8002cec <HAL_SPI_TransmitReceive+0x154>
 8002cea:	e083      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x168>
 8002cf4:	2312      	movs	r3, #18
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d000      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x168>
 8002cfe:	e06d      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d24:	e05a      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d11b      	bne.n	8002d6c <HAL_SPI_TransmitReceive+0x1d4>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x1d4>
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d113      	bne.n	8002d6c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2201      	movs	r2, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d11c      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x21c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2246      	movs	r2, #70	@ 0x46
 8002d7e:	5a9b      	ldrh	r3, [r3, r2]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	b292      	uxth	r2, r2
 8002d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	1c9a      	adds	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2246      	movs	r2, #70	@ 0x46
 8002da2:	5a9b      	ldrh	r3, [r3, r2]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b299      	uxth	r1, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2246      	movs	r2, #70	@ 0x46
 8002dae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db4:	f7fe fdb6 	bl	8001924 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d80b      	bhi.n	8002ddc <HAL_SPI_TransmitReceive+0x244>
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	d008      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002dca:	2323      	movs	r3, #35	@ 0x23
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2203      	movs	r2, #3
 8002dd0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	225d      	movs	r2, #93	@ 0x5d
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]
        goto error;
 8002dda:	e0b1      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d19f      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x18e>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2246      	movs	r2, #70	@ 0x46
 8002dea:	5a9b      	ldrh	r3, [r3, r2]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d199      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x18e>
 8002df2:	e089      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x270>
 8002dfc:	2312      	movs	r3, #18
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d000      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x270>
 8002e06:	e074      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2e:	e060      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d11c      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x2e0>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x2e0>
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d114      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d11e      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x32c>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2246      	movs	r2, #70	@ 0x46
 8002e8a:	5a9b      	ldrh	r3, [r3, r2]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	001a      	movs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	7812      	ldrb	r2, [r2, #0]
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2246      	movs	r2, #70	@ 0x46
 8002eb2:	5a9b      	ldrh	r3, [r3, r2]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2246      	movs	r2, #70	@ 0x46
 8002ebe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ec4:	f7fe fd2e 	bl	8001924 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d802      	bhi.n	8002eda <HAL_SPI_TransmitReceive+0x342>
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x348>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002ee0:	2323      	movs	r3, #35	@ 0x23
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	225d      	movs	r2, #93	@ 0x5d
 8002eec:	2101      	movs	r1, #1
 8002eee:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ef0:	e026      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d199      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x298>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2246      	movs	r2, #70	@ 0x46
 8002f00:	5a9b      	ldrh	r3, [r3, r2]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d193      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f954 	bl	80031bc <SPI_EndRxTxTransaction>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002f18:	2323      	movs	r3, #35	@ 0x23
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002f2e:	2323      	movs	r3, #35	@ 0x23
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e003      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	225d      	movs	r2, #93	@ 0x5d
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	225c      	movs	r2, #92	@ 0x5c
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f48:	2323      	movs	r3, #35	@ 0x23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b00a      	add	sp, #40	@ 0x28
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	ffffefff 	.word	0xffffefff

08002f5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f6c:	f7fe fcda 	bl	8001924 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f7c:	f7fe fcd2 	bl	8001924 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f84:	4b3a      	ldr	r3, [pc, #232]	@ (8003070 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	0d1b      	lsrs	r3, r3, #20
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	4353      	muls	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	e058      	b.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	d055      	beq.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f9a:	f7fe fcc3 	bl	8001924 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d142      	bne.n	8003036 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	21e0      	movs	r1, #224	@ 0xe0
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	2382      	movs	r3, #130	@ 0x82
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d113      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2140      	movs	r1, #64	@ 0x40
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d110      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	491a      	ldr	r1, [pc, #104]	@ (8003074 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2180      	movs	r1, #128	@ 0x80
 800301c:	0189      	lsls	r1, r1, #6
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	225d      	movs	r2, #93	@ 0x5d
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	225c      	movs	r2, #92	@ 0x5c
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e017      	b.n	8003066 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3b01      	subs	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	425a      	negs	r2, r3
 8003056:	4153      	adcs	r3, r2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	001a      	movs	r2, r3
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d197      	bne.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b008      	add	sp, #32
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	2000000c 	.word	0x2000000c
 8003074:	ffffdfff 	.word	0xffffdfff

08003078 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800308e:	f7fe fc49 	bl	8001924 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800309e:	f7fe fc41 	bl	8001924 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	0013      	movs	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	00da      	lsls	r2, r3, #3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	0d1b      	lsrs	r3, r3, #20
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	4353      	muls	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030c4:	e068      	b.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	23c0      	movs	r3, #192	@ 0xc0
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10a      	bne.n	80030e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	2117      	movs	r1, #23
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	d055      	beq.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ec:	f7fe fc1a 	bl	8001924 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d902      	bls.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d142      	bne.n	8003188 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	21e0      	movs	r1, #224	@ 0xe0
 800310e:	438a      	bics	r2, r1
 8003110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	2382      	movs	r3, #130	@ 0x82
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	429a      	cmp	r2, r3
 800311c:	d113      	bne.n	8003146 <SPI_WaitFifoStateUntilTimeout+0xce>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	429a      	cmp	r2, r3
 8003128:	d005      	beq.n	8003136 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d107      	bne.n	8003146 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	@ 0x40
 8003142:	438a      	bics	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	429a      	cmp	r2, r3
 8003150:	d110      	bne.n	8003174 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4916      	ldr	r1, [pc, #88]	@ (80031b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800315e:	400a      	ands	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2180      	movs	r1, #128	@ 0x80
 800316e:	0189      	lsls	r1, r1, #6
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	225d      	movs	r2, #93	@ 0x5d
 8003178:	2101      	movs	r1, #1
 800317a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	225c      	movs	r2, #92	@ 0x5c
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e010      	b.n	80031aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	3b01      	subs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d18e      	bne.n	80030c6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b00a      	add	sp, #40	@ 0x28
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	ffffdfff 	.word	0xffffdfff

080031bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	23c0      	movs	r3, #192	@ 0xc0
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	0013      	movs	r3, r2
 80031d6:	2200      	movs	r2, #0
 80031d8:	f7ff ff4e 	bl	8003078 <SPI_WaitFifoStateUntilTimeout>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d007      	beq.n	80031f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e4:	2220      	movs	r2, #32
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e027      	b.n	8003240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	0013      	movs	r3, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	f7ff fead 	bl	8002f5c <SPI_WaitFlagStateUntilTimeout>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d007      	beq.n	8003216 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320a:	2220      	movs	r2, #32
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e014      	b.n	8003240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	23c0      	movs	r3, #192	@ 0xc0
 800321a:	00d9      	lsls	r1, r3, #3
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	0013      	movs	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	f7ff ff27 	bl	8003078 <SPI_WaitFifoStateUntilTimeout>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d007      	beq.n	800323e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	2220      	movs	r2, #32
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e000      	b.n	8003240 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e042      	b.n	80032e0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	223d      	movs	r2, #61	@ 0x3d
 800325e:	5c9b      	ldrb	r3, [r3, r2]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223c      	movs	r2, #60	@ 0x3c
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f7fe f9fd 	bl	8001670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223d      	movs	r2, #61	@ 0x3d
 800327a:	2102      	movs	r1, #2
 800327c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f000 f9ab 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2246      	movs	r2, #70	@ 0x46
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223e      	movs	r2, #62	@ 0x3e
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223f      	movs	r2, #63	@ 0x3f
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2240      	movs	r2, #64	@ 0x40
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2241      	movs	r2, #65	@ 0x41
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2242      	movs	r2, #66	@ 0x42
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2243      	movs	r2, #67	@ 0x43
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2244      	movs	r2, #68	@ 0x44
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2245      	movs	r2, #69	@ 0x45
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223d      	movs	r2, #61	@ 0x3d
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <HAL_TIM_PWM_Start+0x22>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	223e      	movs	r2, #62	@ 0x3e
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	4193      	sbcs	r3, r2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e01f      	b.n	800334a <HAL_TIM_PWM_Start+0x62>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d108      	bne.n	8003322 <HAL_TIM_PWM_Start+0x3a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	223f      	movs	r2, #63	@ 0x3f
 8003314:	5c9b      	ldrb	r3, [r3, r2]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	4193      	sbcs	r3, r2
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e013      	b.n	800334a <HAL_TIM_PWM_Start+0x62>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d108      	bne.n	800333a <HAL_TIM_PWM_Start+0x52>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	@ 0x40
 800332c:	5c9b      	ldrb	r3, [r3, r2]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	1e5a      	subs	r2, r3, #1
 8003334:	4193      	sbcs	r3, r2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e007      	b.n	800334a <HAL_TIM_PWM_Start+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2241      	movs	r2, #65	@ 0x41
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	4193      	sbcs	r3, r2
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e074      	b.n	800343c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0x7a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	223e      	movs	r2, #62	@ 0x3e
 800335c:	2102      	movs	r1, #2
 800335e:	5499      	strb	r1, [r3, r2]
 8003360:	e013      	b.n	800338a <HAL_TIM_PWM_Start+0xa2>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0x8a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	223f      	movs	r2, #63	@ 0x3f
 800336c:	2102      	movs	r1, #2
 800336e:	5499      	strb	r1, [r3, r2]
 8003370:	e00b      	b.n	800338a <HAL_TIM_PWM_Start+0xa2>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d104      	bne.n	8003382 <HAL_TIM_PWM_Start+0x9a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2240      	movs	r2, #64	@ 0x40
 800337c:	2102      	movs	r1, #2
 800337e:	5499      	strb	r1, [r3, r2]
 8003380:	e003      	b.n	800338a <HAL_TIM_PWM_Start+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2241      	movs	r2, #65	@ 0x41
 8003386:	2102      	movs	r1, #2
 8003388:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fbb0 	bl	8003af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a29      	ldr	r2, [pc, #164]	@ (8003444 <HAL_TIM_PWM_Start+0x15c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_TIM_PWM_Start+0xd8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a28      	ldr	r2, [pc, #160]	@ (8003448 <HAL_TIM_PWM_Start+0x160>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIM_PWM_Start+0xd8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	@ (800344c <HAL_TIM_PWM_Start+0x164>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIM_PWM_Start+0xd8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	@ (8003450 <HAL_TIM_PWM_Start+0x168>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_PWM_Start+0xdc>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_TIM_PWM_Start+0xde>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2180      	movs	r1, #128	@ 0x80
 80033d6:	0209      	lsls	r1, r1, #8
 80033d8:	430a      	orrs	r2, r1
 80033da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	@ (8003444 <HAL_TIM_PWM_Start+0x15c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00f      	beq.n	8003406 <HAL_TIM_PWM_Start+0x11e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	05db      	lsls	r3, r3, #23
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d009      	beq.n	8003406 <HAL_TIM_PWM_Start+0x11e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HAL_TIM_PWM_Start+0x16c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_PWM_Start+0x11e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_TIM_PWM_Start+0x160>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d111      	bne.n	800342a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2207      	movs	r2, #7
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d010      	beq.n	800343a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	e007      	b.n	800343a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	40000400 	.word	0x40000400

08003458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2317      	movs	r3, #23
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	223c      	movs	r2, #60	@ 0x3c
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003476:	2302      	movs	r3, #2
 8003478:	e0ad      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	223c      	movs	r2, #60	@ 0x3c
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d100      	bne.n	800348a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003488:	e076      	b.n	8003578 <HAL_TIM_PWM_ConfigChannel+0x120>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d900      	bls.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003490:	e095      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x166>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d04e      	beq.n	8003536 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d900      	bls.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 800349e:	e08e      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x166>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x56>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d021      	beq.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80034ac:	e087      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f922 	bl	8003700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2108      	movs	r1, #8
 80034c8:	430a      	orrs	r2, r1
 80034ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2104      	movs	r1, #4
 80034d8:	438a      	bics	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6999      	ldr	r1, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	619a      	str	r2, [r3, #24]
      break;
 80034ee:	e06b      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f989 	bl	8003810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2180      	movs	r1, #128	@ 0x80
 800350a:	0109      	lsls	r1, r1, #4
 800350c:	430a      	orrs	r2, r1
 800350e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4931      	ldr	r1, [pc, #196]	@ (80035e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800351c:	400a      	ands	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6999      	ldr	r1, [r3, #24]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	619a      	str	r2, [r3, #24]
      break;
 8003534:	e048      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f9ea 	bl	8003918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2108      	movs	r1, #8
 8003550:	430a      	orrs	r2, r1
 8003552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2104      	movs	r1, #4
 8003560:	438a      	bics	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69d9      	ldr	r1, [r3, #28]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	61da      	str	r2, [r3, #28]
      break;
 8003576:	e027      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fa4f 	bl	8003a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	0109      	lsls	r1, r1, #4
 8003594:	430a      	orrs	r2, r1
 8003596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69d9      	ldr	r1, [r3, #28]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
      break;
 80035bc:	e004      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80035be:	2317      	movs	r3, #23
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
      break;
 80035c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	223c      	movs	r2, #60	@ 0x3c
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

  return status;
 80035d0:	2317      	movs	r3, #23
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	781b      	ldrb	r3, [r3, #0]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b006      	add	sp, #24
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	fffffbff 	.word	0xfffffbff

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	@ (80036e4 <TIM_Base_SetConfig+0x100>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d008      	beq.n	800360e <TIM_Base_SetConfig+0x2a>
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	429a      	cmp	r2, r3
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0x2a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a37      	ldr	r2, [pc, #220]	@ (80036e8 <TIM_Base_SetConfig+0x104>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2270      	movs	r2, #112	@ 0x70
 8003612:	4393      	bics	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a30      	ldr	r2, [pc, #192]	@ (80036e4 <TIM_Base_SetConfig+0x100>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d018      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	05db      	lsls	r3, r3, #23
 800362e:	429a      	cmp	r2, r3
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <TIM_Base_SetConfig+0x104>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <TIM_Base_SetConfig+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2a      	ldr	r2, [pc, #168]	@ (80036f0 <TIM_Base_SetConfig+0x10c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a29      	ldr	r2, [pc, #164]	@ (80036f4 <TIM_Base_SetConfig+0x110>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x76>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a28      	ldr	r2, [pc, #160]	@ (80036f8 <TIM_Base_SetConfig+0x114>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <TIM_Base_SetConfig+0x118>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	4393      	bics	r3, r2
 8003672:	001a      	movs	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <TIM_Base_SetConfig+0x100>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00b      	beq.n	80036b2 <TIM_Base_SetConfig+0xce>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <TIM_Base_SetConfig+0x10c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <TIM_Base_SetConfig+0xce>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a13      	ldr	r2, [pc, #76]	@ (80036f4 <TIM_Base_SetConfig+0x110>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_Base_SetConfig+0xce>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <TIM_Base_SetConfig+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d103      	bne.n	80036ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4393      	bics	r3, r2
 80036d4:	001a      	movs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	611a      	str	r2, [r3, #16]
  }
}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40002000 	.word	0x40002000
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	fffffcff 	.word	0xfffffcff

08003700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	2201      	movs	r2, #1
 8003716:	4393      	bics	r3, r2
 8003718:	001a      	movs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2270      	movs	r2, #112	@ 0x70
 800372e:	4393      	bics	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2203      	movs	r2, #3
 8003736:	4393      	bics	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2202      	movs	r2, #2
 8003748:	4393      	bics	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <TIM_OC1_SetConfig+0xf8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_OC1_SetConfig+0x76>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a26      	ldr	r2, [pc, #152]	@ (80037fc <TIM_OC1_SetConfig+0xfc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d007      	beq.n	8003776 <TIM_OC1_SetConfig+0x76>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a25      	ldr	r2, [pc, #148]	@ (8003800 <TIM_OC1_SetConfig+0x100>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_OC1_SetConfig+0x76>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a24      	ldr	r2, [pc, #144]	@ (8003804 <TIM_OC1_SetConfig+0x104>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2208      	movs	r2, #8
 800377a:	4393      	bics	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2204      	movs	r2, #4
 800378c:	4393      	bics	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a19      	ldr	r2, [pc, #100]	@ (80037f8 <TIM_OC1_SetConfig+0xf8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_OC1_SetConfig+0xb0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a18      	ldr	r2, [pc, #96]	@ (80037fc <TIM_OC1_SetConfig+0xfc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_OC1_SetConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a17      	ldr	r2, [pc, #92]	@ (8003800 <TIM_OC1_SetConfig+0x100>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_OC1_SetConfig+0xb0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a16      	ldr	r2, [pc, #88]	@ (8003804 <TIM_OC1_SetConfig+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <TIM_OC1_SetConfig+0x108>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <TIM_OC1_SetConfig+0x10c>)
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b006      	add	sp, #24
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800
 8003808:	fffffeff 	.word	0xfffffeff
 800380c:	fffffdff 	.word	0xfffffdff

08003810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	2210      	movs	r2, #16
 8003826:	4393      	bics	r3, r2
 8003828:	001a      	movs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <TIM_OC2_SetConfig+0xe8>)
 800383e:	4013      	ands	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <TIM_OC2_SetConfig+0xec>)
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2220      	movs	r2, #32
 800385a:	4393      	bics	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a24      	ldr	r2, [pc, #144]	@ (8003900 <TIM_OC2_SetConfig+0xf0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10d      	bne.n	800388e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	4393      	bics	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2240      	movs	r2, #64	@ 0x40
 800388a:	4393      	bics	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <TIM_OC2_SetConfig+0xf0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_OC2_SetConfig+0x9e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <TIM_OC2_SetConfig+0xf4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_OC2_SetConfig+0x9e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <TIM_OC2_SetConfig+0xf8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_OC2_SetConfig+0x9e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <TIM_OC2_SetConfig+0xfc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d113      	bne.n	80038d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <TIM_OC2_SetConfig+0x100>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <TIM_OC2_SetConfig+0x104>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b006      	add	sp, #24
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	ffff8fff 	.word	0xffff8fff
 80038fc:	fffffcff 	.word	0xfffffcff
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800
 8003910:	fffffbff 	.word	0xfffffbff
 8003914:	fffff7ff 	.word	0xfffff7ff

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a33      	ldr	r2, [pc, #204]	@ (80039fc <TIM_OC3_SetConfig+0xe4>)
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2270      	movs	r2, #112	@ 0x70
 8003944:	4393      	bics	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2203      	movs	r2, #3
 800394c:	4393      	bics	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4a28      	ldr	r2, [pc, #160]	@ (8003a00 <TIM_OC3_SetConfig+0xe8>)
 800395e:	4013      	ands	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <TIM_OC3_SetConfig+0xec>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <TIM_OC3_SetConfig+0xf0>)
 800397a:	4013      	ands	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <TIM_OC3_SetConfig+0xf4>)
 800398e:	4013      	ands	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1b      	ldr	r2, [pc, #108]	@ (8003a04 <TIM_OC3_SetConfig+0xec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00b      	beq.n	80039b2 <TIM_OC3_SetConfig+0x9a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <TIM_OC3_SetConfig+0xf8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <TIM_OC3_SetConfig+0x9a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a14 <TIM_OC3_SetConfig+0xfc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <TIM_OC3_SetConfig+0x9a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <TIM_OC3_SetConfig+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <TIM_OC3_SetConfig+0x104>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <TIM_OC3_SetConfig+0x108>)
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b006      	add	sp, #24
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffffeff 	.word	0xfffffeff
 8003a00:	fffffdff 	.word	0xfffffdff
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	fffff7ff 	.word	0xfffff7ff
 8003a0c:	fffffbff 	.word	0xfffffbff
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	ffffefff 	.word	0xffffefff
 8003a20:	ffffdfff 	.word	0xffffdfff

08003a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_OC4_SetConfig+0xb0>)
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <TIM_OC4_SetConfig+0xb4>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <TIM_OC4_SetConfig+0xb8>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <TIM_OC4_SetConfig+0xbc>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <TIM_OC4_SetConfig+0xc0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <TIM_OC4_SetConfig+0x78>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <TIM_OC4_SetConfig+0xc4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <TIM_OC4_SetConfig+0x78>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <TIM_OC4_SetConfig+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_OC4_SetConfig+0x78>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <TIM_OC4_SetConfig+0xcc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <TIM_OC4_SetConfig+0xd0>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b006      	add	sp, #24
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	ffffefff 	.word	0xffffefff
 8003ad8:	ffff8fff 	.word	0xffff8fff
 8003adc:	fffffcff 	.word	0xfffffcff
 8003ae0:	ffffdfff 	.word	0xffffdfff
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	ffffbfff 	.word	0xffffbfff

08003af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	221f      	movs	r2, #31
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	0013      	movs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	43d2      	mvns	r2, r2
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	211f      	movs	r1, #31
 8003b28:	400b      	ands	r3, r1
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4099      	lsls	r1, r3
 8003b2e:	000b      	movs	r3, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b006      	add	sp, #24
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223c      	movs	r2, #60	@ 0x3c
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e047      	b.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	223c      	movs	r2, #60	@ 0x3c
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	223d      	movs	r2, #61	@ 0x3d
 8003b64:	2102      	movs	r1, #2
 8003b66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2270      	movs	r2, #112	@ 0x70
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00f      	beq.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	05db      	lsls	r3, r3, #23
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a11      	ldr	r2, [pc, #68]	@ (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10c      	bne.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2280      	movs	r2, #128	@ 0x80
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	223d      	movs	r2, #61	@ 0x3d
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223c      	movs	r2, #60	@ 0x3c
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40014000 	.word	0x40014000

08003bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e044      	b.n	8003c98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2278      	movs	r2, #120	@ 0x78
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fd fdaf 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2224      	movs	r2, #36	@ 0x24
 8003c2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	438a      	bics	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f9b4 	bl	8003fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f828 	bl	8003ca4 <UART_SetConfig>
 8003c54:	0003      	movs	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e01c      	b.n	8003c98 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	490d      	ldr	r1, [pc, #52]	@ (8003ca0 <HAL_UART_Init+0xa4>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	212a      	movs	r1, #42	@ 0x2a
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 fa43 	bl	800411c <UART_CheckIdleState>
 8003c96:	0003      	movs	r3, r0
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	ffffb7ff 	.word	0xffffb7ff

08003ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cac:	231e      	movs	r3, #30
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4aaf      	ldr	r2, [pc, #700]	@ (8003f90 <UART_SetConfig+0x2ec>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4aaa      	ldr	r2, [pc, #680]	@ (8003f94 <UART_SetConfig+0x2f0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4aa1      	ldr	r2, [pc, #644]	@ (8003f98 <UART_SetConfig+0x2f4>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a9d      	ldr	r2, [pc, #628]	@ (8003f9c <UART_SetConfig+0x2f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d127      	bne.n	8003d7a <UART_SetConfig+0xd6>
 8003d2a:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa0 <UART_SetConfig+0x2fc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d00d      	beq.n	8003d52 <UART_SetConfig+0xae>
 8003d36:	d81b      	bhi.n	8003d70 <UART_SetConfig+0xcc>
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d014      	beq.n	8003d66 <UART_SetConfig+0xc2>
 8003d3c:	d818      	bhi.n	8003d70 <UART_SetConfig+0xcc>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <UART_SetConfig+0xa4>
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d00a      	beq.n	8003d5c <UART_SetConfig+0xb8>
 8003d46:	e013      	b.n	8003d70 <UART_SetConfig+0xcc>
 8003d48:	231f      	movs	r3, #31
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e065      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003d52:	231f      	movs	r3, #31
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e060      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003d5c:	231f      	movs	r3, #31
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2204      	movs	r2, #4
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e05b      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e056      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003d70:	231f      	movs	r3, #31
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2210      	movs	r2, #16
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e051      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a89      	ldr	r2, [pc, #548]	@ (8003fa4 <UART_SetConfig+0x300>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d134      	bne.n	8003dee <UART_SetConfig+0x14a>
 8003d84:	4b86      	ldr	r3, [pc, #536]	@ (8003fa0 <UART_SetConfig+0x2fc>)
 8003d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d88:	23c0      	movs	r3, #192	@ 0xc0
 8003d8a:	029b      	lsls	r3, r3, #10
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	22c0      	movs	r2, #192	@ 0xc0
 8003d90:	0292      	lsls	r2, r2, #10
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <UART_SetConfig+0x122>
 8003d96:	22c0      	movs	r2, #192	@ 0xc0
 8003d98:	0292      	lsls	r2, r2, #10
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d822      	bhi.n	8003de4 <UART_SetConfig+0x140>
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	0292      	lsls	r2, r2, #10
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d019      	beq.n	8003dda <UART_SetConfig+0x136>
 8003da6:	2280      	movs	r2, #128	@ 0x80
 8003da8:	0292      	lsls	r2, r2, #10
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d81a      	bhi.n	8003de4 <UART_SetConfig+0x140>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <UART_SetConfig+0x118>
 8003db2:	2280      	movs	r2, #128	@ 0x80
 8003db4:	0252      	lsls	r2, r2, #9
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00a      	beq.n	8003dd0 <UART_SetConfig+0x12c>
 8003dba:	e013      	b.n	8003de4 <UART_SetConfig+0x140>
 8003dbc:	231f      	movs	r3, #31
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e02b      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e026      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003dd0:	231f      	movs	r3, #31
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e021      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003dda:	231f      	movs	r3, #31
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2208      	movs	r2, #8
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e01c      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003de4:	231f      	movs	r3, #31
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2210      	movs	r2, #16
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e017      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6d      	ldr	r2, [pc, #436]	@ (8003fa8 <UART_SetConfig+0x304>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d104      	bne.n	8003e02 <UART_SetConfig+0x15e>
 8003df8:	231f      	movs	r3, #31
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e00d      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a69      	ldr	r2, [pc, #420]	@ (8003fac <UART_SetConfig+0x308>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d104      	bne.n	8003e16 <UART_SetConfig+0x172>
 8003e0c:	231f      	movs	r3, #31
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e003      	b.n	8003e1e <UART_SetConfig+0x17a>
 8003e16:	231f      	movs	r3, #31
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d15c      	bne.n	8003ee4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d015      	beq.n	8003e60 <UART_SetConfig+0x1bc>
 8003e34:	dc18      	bgt.n	8003e68 <UART_SetConfig+0x1c4>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d00d      	beq.n	8003e56 <UART_SetConfig+0x1b2>
 8003e3a:	dc15      	bgt.n	8003e68 <UART_SetConfig+0x1c4>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <UART_SetConfig+0x1a2>
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d005      	beq.n	8003e50 <UART_SetConfig+0x1ac>
 8003e44:	e010      	b.n	8003e68 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e46:	f7fe fcdb 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	61bb      	str	r3, [r7, #24]
        break;
 8003e4e:	e012      	b.n	8003e76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b57      	ldr	r3, [pc, #348]	@ (8003fb0 <UART_SetConfig+0x30c>)
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e00f      	b.n	8003e76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fc57 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	61bb      	str	r3, [r7, #24]
        break;
 8003e5e:	e00a      	b.n	8003e76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	61bb      	str	r3, [r7, #24]
        break;
 8003e66:	e006      	b.n	8003e76 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e6c:	231e      	movs	r3, #30
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
        break;
 8003e74:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d100      	bne.n	8003e7e <UART_SetConfig+0x1da>
 8003e7c:	e07a      	b.n	8003f74 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	005a      	lsls	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	18d2      	adds	r2, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f7fc f939 	bl	8000108 <__udivsi3>
 8003e96:	0003      	movs	r3, r0
 8003e98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b0f      	cmp	r3, #15
 8003e9e:	d91c      	bls.n	8003eda <UART_SetConfig+0x236>
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	025b      	lsls	r3, r3, #9
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d217      	bcs.n	8003eda <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	200e      	movs	r0, #14
 8003eb0:	183b      	adds	r3, r7, r0
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	183b      	adds	r3, r7, r0
 8003ec6:	183a      	adds	r2, r7, r0
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	183a      	adds	r2, r7, r0
 8003ed4:	8812      	ldrh	r2, [r2, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e04c      	b.n	8003f74 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003eda:	231e      	movs	r3, #30
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e047      	b.n	8003f74 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee4:	231f      	movs	r3, #31
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d015      	beq.n	8003f1a <UART_SetConfig+0x276>
 8003eee:	dc18      	bgt.n	8003f22 <UART_SetConfig+0x27e>
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d00d      	beq.n	8003f10 <UART_SetConfig+0x26c>
 8003ef4:	dc15      	bgt.n	8003f22 <UART_SetConfig+0x27e>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <UART_SetConfig+0x25c>
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d005      	beq.n	8003f0a <UART_SetConfig+0x266>
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7fe fc7e 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8003f04:	0003      	movs	r3, r0
 8003f06:	61bb      	str	r3, [r7, #24]
        break;
 8003f08:	e012      	b.n	8003f30 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0a:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <UART_SetConfig+0x30c>)
 8003f0c:	61bb      	str	r3, [r7, #24]
        break;
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f10:	f7fe fbfa 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]
        break;
 8003f18:	e00a      	b.n	8003f30 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e006      	b.n	8003f30 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f26:	231e      	movs	r3, #30
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
        break;
 8003f2e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01e      	beq.n	8003f74 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	085a      	lsrs	r2, r3, #1
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	18d2      	adds	r2, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f7fc f8de 	bl	8000108 <__udivsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d90a      	bls.n	8003f6c <UART_SetConfig+0x2c8>
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	025b      	lsls	r3, r3, #9
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d205      	bcs.n	8003f6c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e003      	b.n	8003f74 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6c:	231e      	movs	r3, #30
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f80:	231e      	movs	r3, #30
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	781b      	ldrb	r3, [r3, #0]
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b008      	add	sp, #32
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	efff69f3 	.word	0xefff69f3
 8003f94:	ffffcfff 	.word	0xffffcfff
 8003f98:	fffff4ff 	.word	0xfffff4ff
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40004800 	.word	0x40004800
 8003fac:	40004c00 	.word	0x40004c00
 8003fb0:	007a1200 	.word	0x007a1200

08003fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80040f8 <UART_AdvFeatureConfig+0x144>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4a43      	ldr	r2, [pc, #268]	@ (80040fc <UART_AdvFeatureConfig+0x148>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d00b      	beq.n	8004022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a3b      	ldr	r2, [pc, #236]	@ (8004100 <UART_AdvFeatureConfig+0x14c>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
 800402a:	d00b      	beq.n	8004044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a34      	ldr	r2, [pc, #208]	@ (8004104 <UART_AdvFeatureConfig+0x150>)
 8004034:	4013      	ands	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	2210      	movs	r2, #16
 800404a:	4013      	ands	r3, r2
 800404c:	d00b      	beq.n	8004066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a2c      	ldr	r2, [pc, #176]	@ (8004108 <UART_AdvFeatureConfig+0x154>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	2220      	movs	r2, #32
 800406c:	4013      	ands	r3, r2
 800406e:	d00b      	beq.n	8004088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4a25      	ldr	r2, [pc, #148]	@ (800410c <UART_AdvFeatureConfig+0x158>)
 8004078:	4013      	ands	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	2240      	movs	r2, #64	@ 0x40
 800408e:	4013      	ands	r3, r2
 8004090:	d01d      	beq.n	80040ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <UART_AdvFeatureConfig+0x15c>)
 800409a:	4013      	ands	r3, r2
 800409c:	0019      	movs	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	035b      	lsls	r3, r3, #13
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d10b      	bne.n	80040ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <UART_AdvFeatureConfig+0x160>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	4013      	ands	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <UART_AdvFeatureConfig+0x164>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	ffff7fff 	.word	0xffff7fff
 80040fc:	fffdffff 	.word	0xfffdffff
 8004100:	fffeffff 	.word	0xfffeffff
 8004104:	fffbffff 	.word	0xfffbffff
 8004108:	ffffefff 	.word	0xffffefff
 800410c:	ffffdfff 	.word	0xffffdfff
 8004110:	ffefffff 	.word	0xffefffff
 8004114:	ff9fffff 	.word	0xff9fffff
 8004118:	fff7ffff 	.word	0xfff7ffff

0800411c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b092      	sub	sp, #72	@ 0x48
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2284      	movs	r2, #132	@ 0x84
 8004128:	2100      	movs	r1, #0
 800412a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800412c:	f7fd fbfa 	bl	8001924 <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	2b08      	cmp	r3, #8
 8004140:	d12c      	bne.n	800419c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	0391      	lsls	r1, r2, #14
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4a46      	ldr	r2, [pc, #280]	@ (8004264 <UART_CheckIdleState+0x148>)
 800414c:	9200      	str	r2, [sp, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	f000 f88c 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d021      	beq.n	800419c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004158:	f3ef 8310 	mrs	r3, PRIMASK
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004162:	2301      	movs	r3, #1
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	f383 8810 	msr	PRIMASK, r3
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2180      	movs	r1, #128	@ 0x80
 800417a:	438a      	bics	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	f383 8810 	msr	PRIMASK, r3
}
 8004188:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2278      	movs	r2, #120	@ 0x78
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e05f      	b.n	800425c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2204      	movs	r2, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d146      	bne.n	8004238 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	2280      	movs	r2, #128	@ 0x80
 80041ae:	03d1      	lsls	r1, r2, #15
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004264 <UART_CheckIdleState+0x148>)
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f000 f858 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d03b      	beq.n	8004238 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c0:	f3ef 8310 	mrs	r3, PRIMASK
 80041c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ca:	2301      	movs	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			@ (mov r8, r8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4921      	ldr	r1, [pc, #132]	@ (8004268 <UART_CheckIdleState+0x14c>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f2:	f3ef 8310 	mrs	r3, PRIMASK
 80041f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fc:	2301      	movs	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	2120      	movs	r1, #32
 800422a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2278      	movs	r2, #120	@ 0x78
 8004230:	2100      	movs	r1, #0
 8004232:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e011      	b.n	800425c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2280      	movs	r2, #128	@ 0x80
 8004242:	2120      	movs	r1, #32
 8004244:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2278      	movs	r2, #120	@ 0x78
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b010      	add	sp, #64	@ 0x40
 8004262:	bd80      	pop	{r7, pc}
 8004264:	01ffffff 	.word	0x01ffffff
 8004268:	fffffedf 	.word	0xfffffedf

0800426c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	e051      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3301      	adds	r3, #1
 8004282:	d04e      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7fd fb4e 	bl	8001924 <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e051      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2204      	movs	r2, #4
 80042a6:	4013      	ands	r3, r2
 80042a8:	d03b      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b80      	cmp	r3, #128	@ 0x80
 80042ae:	d038      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b40      	cmp	r3, #64	@ 0x40
 80042b4:	d035      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2208      	movs	r2, #8
 80042be:	4013      	ands	r3, r2
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d111      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2208      	movs	r2, #8
 80042ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f83c 	bl	800434c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2284      	movs	r2, #132	@ 0x84
 80042d8:	2108      	movs	r1, #8
 80042da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2278      	movs	r2, #120	@ 0x78
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e02c      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	401a      	ands	r2, r3
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d112      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2280      	movs	r2, #128	@ 0x80
 8004302:	0112      	lsls	r2, r2, #4
 8004304:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	0018      	movs	r0, r3
 800430a:	f000 f81f 	bl	800434c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2284      	movs	r2, #132	@ 0x84
 8004312:	2120      	movs	r1, #32
 8004314:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2278      	movs	r2, #120	@ 0x78
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00f      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	425a      	negs	r2, r3
 8004332:	4153      	adcs	r3, r2
 8004334:	b2db      	uxtb	r3, r3
 8004336:	001a      	movs	r2, r3
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d09e      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08e      	sub	sp, #56	@ 0x38
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004354:	f3ef 8310 	mrs	r3, PRIMASK
 8004358:	617b      	str	r3, [r7, #20]
  return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435c:	637b      	str	r3, [r7, #52]	@ 0x34
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			@ (mov r8, r8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4926      	ldr	r1, [pc, #152]	@ (8004410 <UART_EndRxTransfer+0xc4>)
 8004376:	400a      	ands	r2, r1
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f383 8810 	msr	PRIMASK, r3
}
 8004384:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004386:	f3ef 8310 	mrs	r3, PRIMASK
 800438a:	623b      	str	r3, [r7, #32]
  return(result);
 800438c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	438a      	bics	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	f383 8810 	msr	PRIMASK, r3
}
 80043b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d118      	bne.n	80043f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ca:	2301      	movs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2110      	movs	r1, #16
 80043e2:	438a      	bics	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2280      	movs	r2, #128	@ 0x80
 80043f6:	2120      	movs	r1, #32
 80043f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b00e      	add	sp, #56	@ 0x38
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	fffffedf 	.word	0xfffffedf

08004414 <memset>:
 8004414:	0003      	movs	r3, r0
 8004416:	1882      	adds	r2, r0, r2
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	7019      	strb	r1, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	2600      	movs	r6, #0
 8004428:	4c0c      	ldr	r4, [pc, #48]	@ (800445c <__libc_init_array+0x38>)
 800442a:	4d0d      	ldr	r5, [pc, #52]	@ (8004460 <__libc_init_array+0x3c>)
 800442c:	1b64      	subs	r4, r4, r5
 800442e:	10a4      	asrs	r4, r4, #2
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	2600      	movs	r6, #0
 8004436:	f000 f819 	bl	800446c <_init>
 800443a:	4c0a      	ldr	r4, [pc, #40]	@ (8004464 <__libc_init_array+0x40>)
 800443c:	4d0a      	ldr	r5, [pc, #40]	@ (8004468 <__libc_init_array+0x44>)
 800443e:	1b64      	subs	r4, r4, r5
 8004440:	10a4      	asrs	r4, r4, #2
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	00b3      	lsls	r3, r6, #2
 800444a:	58eb      	ldr	r3, [r5, r3]
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	00b3      	lsls	r3, r6, #2
 8004454:	58eb      	ldr	r3, [r5, r3]
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	080044bc 	.word	0x080044bc
 8004460:	080044bc 	.word	0x080044bc
 8004464:	080044c0 	.word	0x080044c0
 8004468:	080044bc 	.word	0x080044bc

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
