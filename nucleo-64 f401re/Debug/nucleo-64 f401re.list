
nucleo-64 f401re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d30  08003d30  00004d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d48  08003d48  00004d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d50  08003d50  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003d64  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003d64  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa1  00000000  00000000  00011bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00013698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d5  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016849  00000000  00000000  00014ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e099  00000000  00000000  0002b536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009557d  00000000  00000000  000395cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ceb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000ceb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d21e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d18 	.word	0x08003d18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003d18 	.word	0x08003d18

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f000 fbbb 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f847 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 f9a3 	bl	8001000 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cba:	f000 f977 	bl	8000fac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cbe:	f000 f8ff 	bl	8000ec0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000cc2:	f000 f8ab 	bl	8000e1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000cc6:	481c      	ldr	r0, [pc, #112]	@ (8000d38 <main+0x90>)
 8000cc8:	f000 fc88 	bl	80015dc <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	481b      	ldr	r0, [pc, #108]	@ (8000d3c <main+0x94>)
 8000cd0:	f001 ffb2 	bl	8002c38 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_PollForConversion(&hadc1,1000);
 8000cd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cd8:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <main+0x90>)
 8000cda:	f000 fd33 	bl	8001744 <HAL_ADC_PollForConversion>
	    readValue = HAL_ADC_GetValue(&hadc1);
 8000cde:	4816      	ldr	r0, [pc, #88]	@ (8000d38 <main+0x90>)
 8000ce0:	f000 fdbb 	bl	800185a <HAL_ADC_GetValue>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	80fb      	strh	r3, [r7, #6]
	    PWM = 250 + readValue/4.1;
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbc6 	bl	800047c <__aeabi_i2d>
 8000cf0:	a30f      	add	r3, pc, #60	@ (adr r3, 8000d30 <main+0x88>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fd55 	bl	80007a4 <__aeabi_ddiv>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <main+0x98>)
 8000d08:	f7ff fa6c 	bl	80001e4 <__adddf3>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe2e 	bl	8000974 <__aeabi_d2uiz>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80bb      	strh	r3, [r7, #4]
	    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, PWM);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <main+0x94>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	@ 0x32
 8000d26:	f000 fbf1 	bl	800150c <HAL_Delay>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 8000d2a:	bf00      	nop
 8000d2c:	e7d2      	b.n	8000cd4 <main+0x2c>
 8000d2e:	bf00      	nop
 8000d30:	66666666 	.word	0x66666666
 8000d34:	40106666 	.word	0x40106666
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	20000070 	.word	0x20000070
 8000d40:	406f4000 	.word	0x406f4000

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	@ 0x50
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2230      	movs	r2, #48	@ 0x30
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 ffb4 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2310      	movs	r3, #16
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000db8:	2310      	movs	r3, #16
 8000dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f9f2 	bl	80021b8 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dda:	f000 f9a7 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2302      	movs	r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fc54 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e06:	f000 f991 	bl	800112c <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3750      	adds	r7, #80	@ 0x50
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40007000 	.word	0x40007000

08000e1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <MX_ADC1_Init+0xa0>)
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e7e:	f000 fb69 	bl	8001554 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f950 	bl	800112c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e9e:	f000 fce9 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ea8:	f000 f940 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000028 	.word	0x20000028
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	0f000001 	.word	0x0f000001

08000ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000efa:	220f      	movs	r2, #15
 8000efc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f18:	4823      	ldr	r0, [pc, #140]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f1a:	f001 fde5 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f24:	f000 f902 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481c      	ldr	r0, [pc, #112]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f36:	f001 fff1 	bl	8002f1c <HAL_TIM_ConfigClockSource>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f40:	f000 f8f4 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f44:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f46:	f001 fe1e 	bl	8002b86 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f50:	f000 f8ec 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4619      	mov	r1, r3
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f64:	f002 fb7a 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f6e:	f000 f8dd 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f72:	2360      	movs	r3, #96	@ 0x60
 8000f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f8a:	f001 ff05 	bl	8002d98 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f94:	f000 f8ca 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <MX_TIM2_Init+0xe8>)
 8000f9a:	f000 f959 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000f9e:	bf00      	nop
 8000fa0:	3738      	adds	r7, #56	@ 0x38
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000070 	.word	0x20000070

08000fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <MX_USART2_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f002 fba8 	bl	8003738 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f000 f89d 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000b8 	.word	0x200000b8
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b40      	ldr	r3, [pc, #256]	@ (800111c <MX_GPIO_Init+0x11c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a3f      	ldr	r2, [pc, #252]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b39      	ldr	r3, [pc, #228]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a38      	ldr	r2, [pc, #224]	@ (800111c <MX_GPIO_Init+0x11c>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b36      	ldr	r3, [pc, #216]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a31      	ldr	r2, [pc, #196]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a2a      	ldr	r2, [pc, #168]	@ (800111c <MX_GPIO_Init+0x11c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_GPIO_Init+0x11c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4825      	ldr	r0, [pc, #148]	@ (8001120 <MX_GPIO_Init+0x120>)
 800108c:	f001 f87a 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2122      	movs	r1, #34	@ 0x22
 8001094:	4823      	ldr	r0, [pc, #140]	@ (8001124 <MX_GPIO_Init+0x124>)
 8001096:	f001 f875 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2124      	movs	r1, #36	@ 0x24
 800109e:	4822      	ldr	r0, [pc, #136]	@ (8001128 <MX_GPIO_Init+0x128>)
 80010a0:	f001 f870 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4819      	ldr	r0, [pc, #100]	@ (8001120 <MX_GPIO_Init+0x120>)
 80010bc:	f000 fede 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <MX_GPIO_Init+0x120>)
 80010d8:	f000 fed0 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80010dc:	2322      	movs	r3, #34	@ 0x22
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <MX_GPIO_Init+0x124>)
 80010f4:	f000 fec2 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80010f8:	2324      	movs	r3, #36	@ 0x24
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <MX_GPIO_Init+0x128>)
 8001110:	f000 feb4 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <HAL_MspInit+0x4c>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_MspInit+0x4c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001176:	2007      	movs	r0, #7
 8001178:	f000 fe4c 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_ADC_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d127      	bne.n	80011fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_ADC_MspInit+0x80>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_ADC_MspInit+0x84>)
 80011f6:	f000 fe41 	bl	8001e7c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40012000 	.word	0x40012000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001220:	d10d      	bne.n	800123e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001270:	d11d      	bne.n	80012ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_TIM_MspPostInit+0x68>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_TIM_MspPostInit+0x68>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_TIM_MspPostInit+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128e:	2308      	movs	r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <HAL_TIM_MspPostInit+0x6c>)
 80012aa:	f000 fde7 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12b      	bne.n	800133a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800131a:	230c      	movs	r3, #12
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132a:	2307      	movs	r3, #7
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <HAL_UART_MspInit+0x8c>)
 8001336:	f000 fda1 	bl	8001e7c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004400 	.word	0x40004400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f891 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800140c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001402:	f002 fc65 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fc4f 	bl	8000ca8 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001418:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 800141c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001420:	20000104 	.word	0x20000104

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 fcdf 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fe6c 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fce9 	bl	8001e62 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 fcbf 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000100 	.word	0x20000100

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000100 	.word	0x20000100

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e033      	b.n	80015d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fe08 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800159a:	f023 0302 	bic.w	r3, r3, #2
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa86 	bl	8001ab8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c2:	e001      	b.n	80015c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Start+0x1a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e097      	b.n	8001726 <HAL_ADC_Start+0x14a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d018      	beq.n	800163e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <HAL_ADC_Start+0x158>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a45      	ldr	r2, [pc, #276]	@ (8001738 <HAL_ADC_Start+0x15c>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d15f      	bne.n	800170c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001676:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800168a:	d106      	bne.n	800169a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	f023 0206 	bic.w	r2, r3, #6
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	@ 0x44
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_ADC_Start+0x160>)
 80016aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d129      	bne.n	8001724 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e020      	b.n	8001724 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <HAL_ADC_Start+0x164>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d11b      	bne.n	8001724 <HAL_ADC_Start+0x148>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d114      	bne.n	8001724 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	e00b      	b.n	8001724 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	40012300 	.word	0x40012300
 8001740:	40012000 	.word	0x40012000

08001744 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001760:	d113      	bne.n	800178a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800176c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001770:	d10b      	bne.n	800178a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e063      	b.n	8001852 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800178a:	f7ff feb3 	bl	80014f4 <HAL_GetTick>
 800178e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001790:	e021      	b.n	80017d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d01d      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_PollForConversion+0x6c>
 80017a0:	f7ff fea8 	bl	80014f4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d212      	bcs.n	80017d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d00b      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f043 0204 	orr.w	r2, r3, #4
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e03d      	b.n	8001852 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d1d6      	bne.n	8001792 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0212 	mvn.w	r2, #18
 80017ec:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d123      	bne.n	8001850 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11f      	bne.n	8001850 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1c>
 800188c:	2302      	movs	r3, #2
 800188e:	e105      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x228>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d925      	bls.n	80018ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	3b1e      	subs	r3, #30
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43da      	mvns	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	400a      	ands	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68d9      	ldr	r1, [r3, #12]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	4603      	mov	r3, r0
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4403      	add	r3, r0
 80018de:	3b1e      	subs	r3, #30
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	e022      	b.n	8001932 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	2207      	movs	r2, #7
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	4603      	mov	r3, r0
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4403      	add	r3, r0
 8001928:	409a      	lsls	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d824      	bhi.n	8001984 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b05      	subs	r3, #5
 800194c:	221f      	movs	r2, #31
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	400a      	ands	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b05      	subs	r3, #5
 8001976:	fa00 f203 	lsl.w	r2, r0, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
 8001982:	e04c      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d824      	bhi.n	80019d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b23      	subs	r3, #35	@ 0x23
 800199e:	221f      	movs	r2, #31
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43da      	mvns	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	400a      	ands	r2, r1
 80019ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b23      	subs	r3, #35	@ 0x23
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80019d4:	e023      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b41      	subs	r3, #65	@ 0x41
 80019e8:	221f      	movs	r2, #31
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b41      	subs	r3, #65	@ 0x41
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x234>)
 8001a20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	@ (8001aac <HAL_ADC_ConfigChannel+0x238>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d109      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1cc>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	@ (8001aac <HAL_ADC_ConfigChannel+0x238>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d123      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d003      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x1e6>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b11      	cmp	r3, #17
 8001a58:	d11b      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d111      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x23c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a10      	ldr	r2, [pc, #64]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x240>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac0:	4b79      	ldr	r3, [pc, #484]	@ (8001ca8 <ADC_Init+0x1f0>)
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	4a58      	ldr	r2, [pc, #352]	@ (8001cac <ADC_Init+0x1f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e00f      	b.n	8001bb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0202 	bic.w	r2, r2, #2
 8001bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	035a      	lsls	r2, r3, #13
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e007      	b.n	8001c2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051a      	lsls	r2, r3, #20
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6e:	025a      	lsls	r2, r3, #9
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	029a      	lsls	r2, r3, #10
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	0f000001 	.word	0x0f000001

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff47 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff5c 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffb0 	bl	8001dd0 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e159      	b.n	800214c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8148 	bne.w	8002146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a2 	beq.w	8002146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	4a56      	ldr	r2, [pc, #344]	@ (8002164 <HAL_GPIO_Init+0x2e8>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002010:	6453      	str	r3, [r2, #68]	@ 0x44
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <HAL_GPIO_Init+0x2e8>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a52      	ldr	r2, [pc, #328]	@ (8002168 <HAL_GPIO_Init+0x2ec>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	@ (800216c <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x202>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	@ (8002170 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x1fe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a47      	ldr	r2, [pc, #284]	@ (8002174 <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x1fa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a46      	ldr	r2, [pc, #280]	@ (8002178 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x1f6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a45      	ldr	r2, [pc, #276]	@ (800217c <HAL_GPIO_Init+0x300>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x1f2>
 800206a:	2304      	movs	r3, #4
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800206e:	2307      	movs	r3, #7
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	@ (8002168 <HAL_GPIO_Init+0x2ec>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b38      	ldr	r3, [pc, #224]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a24      	ldr	r2, [pc, #144]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002116:	4a1a      	ldr	r2, [pc, #104]	@ (8002180 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <HAL_GPIO_Init+0x304>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002140:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f aea2 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e267      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d075      	beq.n	80022c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021d6:	4b88      	ldr	r3, [pc, #544]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d00c      	beq.n	80021fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e2:	4b85      	ldr	r3, [pc, #532]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d112      	bne.n	8002214 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ee:	4b82      	ldr	r3, [pc, #520]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021fa:	d10b      	bne.n	8002214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	4b7e      	ldr	r3, [pc, #504]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x108>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d157      	bne.n	80022c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e242      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x74>
 800221e:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b70      	ldr	r3, [pc, #448]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6f      	ldr	r2, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b6d      	ldr	r3, [pc, #436]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6c      	ldr	r2, [pc, #432]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 8002250:	4b69      	ldr	r3, [pc, #420]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a68      	ldr	r2, [pc, #416]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b66      	ldr	r3, [pc, #408]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a65      	ldr	r2, [pc, #404]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff f940 	bl	80014f4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f93c 	bl	80014f4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e207      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xc0>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f92c 	bl	80014f4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f928 	bl	80014f4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	@ 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1f3      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0xe8>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d063      	beq.n	8002396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e6:	4b44      	ldr	r3, [pc, #272]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x152>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1c7      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4937      	ldr	r1, [pc, #220]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	e03a      	b.n	8002396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b34      	ldr	r3, [pc, #208]	@ (80023fc <HAL_RCC_OscConfig+0x244>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7ff f8e1 	bl	80014f4 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7ff f8dd 	bl	80014f4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1a8      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b28      	ldr	r3, [pc, #160]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4925      	ldr	r1, [pc, #148]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e015      	b.n	8002396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_RCC_OscConfig+0x244>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff f8c0 	bl	80014f4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002378:	f7ff f8bc 	bl	80014f4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e187      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d036      	beq.n	8002410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_RCC_OscConfig+0x248>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff f8a0 	bl	80014f4 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff f89c 	bl	80014f4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e167      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x200>
 80023d6:	e01b      	b.n	8002410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d8:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <HAL_RCC_OscConfig+0x248>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f889 	bl	80014f4 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	e00e      	b.n	8002404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e6:	f7ff f885 	bl	80014f4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d907      	bls.n	8002404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e150      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	42470000 	.word	0x42470000
 8002400:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ea      	bne.n	80023e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8097 	beq.w	800254c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b81      	ldr	r3, [pc, #516]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b7d      	ldr	r3, [pc, #500]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a7c      	ldr	r2, [pc, #496]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b7a      	ldr	r3, [pc, #488]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b77      	ldr	r3, [pc, #476]	@ (800262c <HAL_RCC_OscConfig+0x474>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b74      	ldr	r3, [pc, #464]	@ (800262c <HAL_RCC_OscConfig+0x474>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a73      	ldr	r2, [pc, #460]	@ (800262c <HAL_RCC_OscConfig+0x474>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff f845 	bl	80014f4 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff f841 	bl	80014f4 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e10c      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b6a      	ldr	r3, [pc, #424]	@ (800262c <HAL_RCC_OscConfig+0x474>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2ea>
 8002494:	4b64      	ldr	r3, [pc, #400]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a63      	ldr	r2, [pc, #396]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x324>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x30c>
 80024aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0x324>
 80024c4:	4b58      	ldr	r3, [pc, #352]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	4a57      	ldr	r2, [pc, #348]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d0:	4b55      	ldr	r3, [pc, #340]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d4:	4a54      	ldr	r2, [pc, #336]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80024d6:	f023 0304 	bic.w	r3, r3, #4
 80024da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff f806 	bl	80014f4 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7ff f802 	bl	80014f4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0cb      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	4b49      	ldr	r3, [pc, #292]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <HAL_RCC_OscConfig+0x334>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7fe fff0 	bl	80014f4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe ffec 	bl	80014f4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0b5      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252e:	4b3e      	ldr	r3, [pc, #248]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ee      	bne.n	8002518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	4b39      	ldr	r3, [pc, #228]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	4a38      	ldr	r2, [pc, #224]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a1 	beq.w	8002698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002556:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d05c      	beq.n	800261c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d141      	bne.n	80025ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <HAL_RCC_OscConfig+0x478>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe ffc0 	bl	80014f4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe ffbc 	bl	80014f4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e087      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	019b      	lsls	r3, r3, #6
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	3b01      	subs	r3, #1
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	491b      	ldr	r1, [pc, #108]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x478>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe ff95 	bl	80014f4 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe ff91 	bl	80014f4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e05c      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x416>
 80025ec:	e054      	b.n	8002698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_OscConfig+0x478>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe ff7e 	bl	80014f4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe ff7a 	bl	80014f4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e045      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_OscConfig+0x470>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
 800261a:	e03d      	b.n	8002698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e038      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
 8002630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x4ec>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d028      	beq.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d121      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d11a      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800266a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266c:	4293      	cmp	r3, r2
 800266e:	d111      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d107      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0cc      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b68      	ldr	r3, [pc, #416]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d90c      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b65      	ldr	r3, [pc, #404]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800271e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d044      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d119      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d003      	beq.n	8002766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002762:	2b03      	cmp	r3, #3
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b3f      	ldr	r3, [pc, #252]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e067      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4934      	ldr	r1, [pc, #208]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe feac 	bl	80014f4 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fea8 	bl	80014f4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e04f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d20c      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fe0c 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00
 8002864:	40023800 	.word	0x40023800
 8002868:	08003d30 	.word	0x08003d30
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b094      	sub	sp, #80	@ 0x50
 800287a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288c:	4b79      	ldr	r3, [pc, #484]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d00d      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002898:	2b08      	cmp	r3, #8
 800289a:	f200 80e1 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x34>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x3a>
 80028a6:	e0db      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b73      	ldr	r3, [pc, #460]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ac:	e0db      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ae:	4b73      	ldr	r3, [pc, #460]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028b2:	e0d8      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028be:	4b6d      	ldr	r3, [pc, #436]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	2200      	movs	r2, #0
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028e6:	4622      	mov	r2, r4
 80028e8:	462b      	mov	r3, r5
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	0159      	lsls	r1, r3, #5
 80028f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f8:	0150      	lsls	r0, r2, #5
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4621      	mov	r1, r4
 8002900:	1a51      	subs	r1, r2, r1
 8002902:	6139      	str	r1, [r7, #16]
 8002904:	4629      	mov	r1, r5
 8002906:	eb63 0301 	sbc.w	r3, r3, r1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002918:	4659      	mov	r1, fp
 800291a:	018b      	lsls	r3, r1, #6
 800291c:	4651      	mov	r1, sl
 800291e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002922:	4651      	mov	r1, sl
 8002924:	018a      	lsls	r2, r1, #6
 8002926:	4651      	mov	r1, sl
 8002928:	ebb2 0801 	subs.w	r8, r2, r1
 800292c:	4659      	mov	r1, fp
 800292e:	eb63 0901 	sbc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	462b      	mov	r3, r5
 8002954:	eb49 0303 	adc.w	r3, r9, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002966:	4629      	mov	r1, r5
 8002968:	024b      	lsls	r3, r1, #9
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002970:	4621      	mov	r1, r4
 8002972:	024a      	lsls	r2, r1, #9
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800297e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002984:	f7fe f816 	bl	80009b4 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002990:	e058      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	4618      	mov	r0, r3
 800299c:	4611      	mov	r1, r2
 800299e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	0159      	lsls	r1, r3, #5
 80029ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029be:	0150      	lsls	r0, r2, #5
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4641      	mov	r1, r8
 80029c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ca:	4649      	mov	r1, r9
 80029cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e4:	ebb2 040a 	subs.w	r4, r2, sl
 80029e8:	eb63 050b 	sbc.w	r5, r3, fp
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00eb      	lsls	r3, r5, #3
 80029f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fa:	00e2      	lsls	r2, r4, #3
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	18e3      	adds	r3, r4, r3
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	464b      	mov	r3, r9
 8002a08:	eb45 0303 	adc.w	r3, r5, r3
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	028b      	lsls	r3, r1, #10
 8002a1e:	4621      	mov	r1, r4
 8002a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a24:	4621      	mov	r1, r4
 8002a26:	028a      	lsls	r2, r1, #10
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	61fa      	str	r2, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	f7fd ffbc 	bl	80009b4 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3750      	adds	r7, #80	@ 0x50
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	007a1200 	.word	0x007a1200

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08003d40 	.word	0x08003d40

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffdc 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08003d40 	.word	0x08003d40

08002ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e041      	b.n	8002b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fb7e 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fac0 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e041      	b.n	8002c1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f839 	bl	8002c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f000 fa71 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x24>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e022      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x6a>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d109      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x3e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e015      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x6a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x58>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e008      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x6a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e068      	b.n	8002d7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0x82>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb8:	e013      	b.n	8002ce2 <HAL_TIM_PWM_Start+0xaa>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_PWM_Start+0x92>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc8:	e00b      	b.n	8002ce2 <HAL_TIM_PWM_Start+0xaa>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_PWM_Start+0xa2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd8:	e003      	b.n	8002ce2 <HAL_TIM_PWM_Start+0xaa>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fc90 	bl	8003610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	@ (8002d84 <HAL_TIM_PWM_Start+0x14c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d107      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <HAL_TIM_PWM_Start+0x14c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d018      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x10e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d013      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x10e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_TIM_PWM_Start+0x150>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x10e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <HAL_TIM_PWM_Start+0x154>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x10e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <HAL_TIM_PWM_Start+0x158>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x10e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <HAL_TIM_PWM_Start+0x15c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d010      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	e007      	b.n	8002d7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40014000 	.word	0x40014000

08002d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0ae      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	f200 809f 	bhi.w	8002f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002f05 	.word	0x08002f05
 8002dd4:	08002f05 	.word	0x08002f05
 8002dd8:	08002f05 	.word	0x08002f05
 8002ddc:	08002e41 	.word	0x08002e41
 8002de0:	08002f05 	.word	0x08002f05
 8002de4:	08002f05 	.word	0x08002f05
 8002de8:	08002f05 	.word	0x08002f05
 8002dec:	08002e83 	.word	0x08002e83
 8002df0:	08002f05 	.word	0x08002f05
 8002df4:	08002f05 	.word	0x08002f05
 8002df8:	08002f05 	.word	0x08002f05
 8002dfc:	08002ec3 	.word	0x08002ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9dc 	bl	80031c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	619a      	str	r2, [r3, #24]
      break;
 8002e3e:	e064      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa22 	bl	8003290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6999      	ldr	r1, [r3, #24]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]
      break;
 8002e80:	e043      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fa6d 	bl	8003368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0204 	bic.w	r2, r2, #4
 8002eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]
      break;
 8002ec0:	e023      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fab7 	bl	800343c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69d9      	ldr	r1, [r3, #28]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	61da      	str	r2, [r3, #28]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0x1c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0b4      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x186>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f70:	d03e      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f76:	f200 8087 	bhi.w	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7e:	f000 8086 	beq.w	800308e <HAL_TIM_ConfigClockSource+0x172>
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	d87f      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b70      	cmp	r3, #112	@ 0x70
 8002f8a:	d01a      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f8c:	2b70      	cmp	r3, #112	@ 0x70
 8002f8e:	d87b      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b60      	cmp	r3, #96	@ 0x60
 8002f92:	d050      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x11a>
 8002f94:	2b60      	cmp	r3, #96	@ 0x60
 8002f96:	d877      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b50      	cmp	r3, #80	@ 0x50
 8002f9a:	d03c      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xfa>
 8002f9c:	2b50      	cmp	r3, #80	@ 0x50
 8002f9e:	d873      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b40      	cmp	r3, #64	@ 0x40
 8002fa2:	d058      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x13a>
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d86f      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b30      	cmp	r3, #48	@ 0x30
 8002faa:	d064      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	2b30      	cmp	r3, #48	@ 0x30
 8002fae:	d86b      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d060      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d867      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d05c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d05a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc0:	e062      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fd2:	f000 fafd 	bl	80035d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
      break;
 8002fee:	e04f      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	f000 fae6 	bl	80035d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003012:	609a      	str	r2, [r3, #8]
      break;
 8003014:	e03c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	461a      	mov	r2, r3
 8003024:	f000 fa5a 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2150      	movs	r1, #80	@ 0x50
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fab3 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003034:	e02c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fa79 	bl	800353a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2160      	movs	r1, #96	@ 0x60
 800304e:	4618      	mov	r0, r3
 8003050:	f000 faa3 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003054:	e01c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	461a      	mov	r2, r3
 8003064:	f000 fa3a 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2140      	movs	r1, #64	@ 0x40
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa93 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003074:	e00c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f000 fa8a 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003086:	e003      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e000      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800308e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3a      	ldr	r2, [pc, #232]	@ (80031a8 <TIM_Base_SetConfig+0xfc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00f      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ca:	d00b      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a37      	ldr	r2, [pc, #220]	@ (80031ac <TIM_Base_SetConfig+0x100>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a36      	ldr	r2, [pc, #216]	@ (80031b0 <TIM_Base_SetConfig+0x104>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a35      	ldr	r2, [pc, #212]	@ (80031b4 <TIM_Base_SetConfig+0x108>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	@ (80031a8 <TIM_Base_SetConfig+0xfc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01b      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003104:	d017      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <TIM_Base_SetConfig+0x100>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <TIM_Base_SetConfig+0x104>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00f      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a26      	ldr	r2, [pc, #152]	@ (80031b4 <TIM_Base_SetConfig+0x108>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a25      	ldr	r2, [pc, #148]	@ (80031b8 <TIM_Base_SetConfig+0x10c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a24      	ldr	r2, [pc, #144]	@ (80031bc <TIM_Base_SetConfig+0x110>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <TIM_Base_SetConfig+0x114>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d108      	bne.n	8003148 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0e      	ldr	r2, [pc, #56]	@ (80031a8 <TIM_Base_SetConfig+0xfc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f023 0201 	bic.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]
  }
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800

080031c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f023 0201 	bic.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f023 0302 	bic.w	r3, r3, #2
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <TIM_OC1_SetConfig+0xc8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10c      	bne.n	800323a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0308 	bic.w	r3, r3, #8
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a13      	ldr	r2, [pc, #76]	@ (800328c <TIM_OC1_SetConfig+0xc8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	621a      	str	r2, [r3, #32]
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40010000 	.word	0x40010000

08003290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 0210 	bic.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0320 	bic.w	r3, r3, #32
 80032da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003364 <TIM_OC2_SetConfig+0xd4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10d      	bne.n	800330c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800330a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <TIM_OC2_SetConfig+0xd4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d113      	bne.n	800333c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800331a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000

08003368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <TIM_OC3_SetConfig+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <TIM_OC3_SetConfig+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d113      	bne.n	8003412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40010000 	.word	0x40010000

0800343c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	031b      	lsls	r3, r3, #12
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a10      	ldr	r2, [pc, #64]	@ (80034d8 <TIM_OC4_SetConfig+0x9c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d109      	bne.n	80034b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000

080034dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 030a 	bic.w	r3, r3, #10
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0210 	bic.w	r2, r3, #16
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f043 0307 	orr.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e050      	b.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d013      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a16      	ldr	r2, [pc, #88]	@ (800372c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a15      	ldr	r2, [pc, #84]	@ (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a13      	ldr	r2, [pc, #76]	@ (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10c      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40014000 	.word	0x40014000

08003738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e042      	b.n	80037d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fdae 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	@ 0x24
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800377a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f82b 	bl	80037d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b0c0      	sub	sp, #256	@ 0x100
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	ea40 0301 	orr.w	r3, r0, r1
 8003800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003830:	f021 010c 	bic.w	r1, r1, #12
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800383e:	430b      	orrs	r3, r1
 8003840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	6999      	ldr	r1, [r3, #24]
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	ea40 0301 	orr.w	r3, r0, r1
 800385e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa4 <UART_SetConfig+0x2cc>)
 8003868:	429a      	cmp	r2, r3
 800386a:	d005      	beq.n	8003878 <UART_SetConfig+0xa0>
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8d      	ldr	r3, [pc, #564]	@ (8003aa8 <UART_SetConfig+0x2d0>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d104      	bne.n	8003882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7ff f922 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 800387c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003880:	e003      	b.n	800388a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff f909 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8003886:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003894:	f040 810c 	bne.w	8003ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038b2:	415b      	adcs	r3, r3
 80038b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ba:	4621      	mov	r1, r4
 80038bc:	eb12 0801 	adds.w	r8, r2, r1
 80038c0:	4629      	mov	r1, r5
 80038c2:	eb43 0901 	adc.w	r9, r3, r1
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038da:	4690      	mov	r8, r2
 80038dc:	4699      	mov	r9, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	eb18 0303 	adds.w	r3, r8, r3
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038e8:	462b      	mov	r3, r5
 80038ea:	eb49 0303 	adc.w	r3, r9, r3
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003906:	460b      	mov	r3, r1
 8003908:	18db      	adds	r3, r3, r3
 800390a:	653b      	str	r3, [r7, #80]	@ 0x50
 800390c:	4613      	mov	r3, r2
 800390e:	eb42 0303 	adc.w	r3, r2, r3
 8003912:	657b      	str	r3, [r7, #84]	@ 0x54
 8003914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800391c:	f7fd f84a 	bl	80009b4 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003938:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800393c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003948:	415b      	adcs	r3, r3
 800394a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003950:	4641      	mov	r1, r8
 8003952:	eb12 0a01 	adds.w	sl, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb43 0b01 	adc.w	fp, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800396c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003970:	4692      	mov	sl, r2
 8003972:	469b      	mov	fp, r3
 8003974:	4643      	mov	r3, r8
 8003976:	eb1a 0303 	adds.w	r3, sl, r3
 800397a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800397e:	464b      	mov	r3, r9
 8003980:	eb4b 0303 	adc.w	r3, fp, r3
 8003984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003994:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039b2:	f7fc ffff 	bl	80009b4 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <UART_SetConfig+0x2d4>)
 80039be:	fba3 2301 	umull	r2, r3, r3, r1
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2264      	movs	r2, #100	@ 0x64
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	1acb      	subs	r3, r1, r3
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <UART_SetConfig+0x2d4>)
 80039d4:	fba3 2302 	umull	r2, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039fc:	415b      	adcs	r3, r3
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a58:	460b      	mov	r3, r1
 8003a5a:	18db      	adds	r3, r3, r3
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5e:	4613      	mov	r3, r2
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a6e:	f7fc ffa1 	bl	80009b4 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	@ 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	@ 0x32
 8003a8a:	4a08      	ldr	r2, [pc, #32]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4422      	add	r2, r4
 8003a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa0:	e106      	b.n	8003cb0 <UART_SetConfig+0x4d8>
 8003aa2:	bf00      	nop
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40011400 	.word	0x40011400
 8003aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ac2:	4642      	mov	r2, r8
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	6239      	str	r1, [r7, #32]
 8003aca:	415b      	adcs	r3, r3
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	1854      	adds	r4, r2, r1
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	eb43 0501 	adc.w	r5, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003af8:	464b      	mov	r3, r9
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b1e:	4629      	mov	r1, r5
 8003b20:	008b      	lsls	r3, r1, #2
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b28:	4621      	mov	r1, r4
 8003b2a:	008a      	lsls	r2, r1, #2
 8003b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b30:	f7fc ff40 	bl	80009b4 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4b60      	ldr	r3, [pc, #384]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	011c      	lsls	r4, r3, #4
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	61b9      	str	r1, [r7, #24]
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6139      	str	r1, [r7, #16]
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	008b      	lsls	r3, r1, #2
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	008a      	lsls	r2, r1, #2
 8003bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bce:	f7fc fef1 	bl	80009b4 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003bda:	fba3 2301 	umull	r2, r3, r3, r1
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2264      	movs	r2, #100	@ 0x64
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	1acb      	subs	r3, r1, r3
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	3332      	adds	r3, #50	@ 0x32
 8003bec:	4a33      	ldr	r2, [pc, #204]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf8:	441c      	add	r4, r3
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	415b      	adcs	r3, r3
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c18:	4641      	mov	r1, r8
 8003c1a:	1851      	adds	r1, r2, r1
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	4649      	mov	r1, r9
 8003c20:	414b      	adcs	r3, r1
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c30:	4659      	mov	r1, fp
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	00ca      	lsls	r2, r1, #3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	4642      	mov	r2, r8
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	4641      	mov	r1, r8
 8003c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c76:	4641      	mov	r1, r8
 8003c78:	008a      	lsls	r2, r1, #2
 8003c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7e:	f7fc fe99 	bl	80009b4 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	@ 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3332      	adds	r3, #50	@ 0x32
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4422      	add	r2, r4
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <memset>:
 8003cc0:	4402      	add	r2, r0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d08 <__libc_init_array+0x38>)
 8003cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d0c <__libc_init_array+0x3c>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	2600      	movs	r6, #0
 8003cdc:	42a6      	cmp	r6, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8003d10 <__libc_init_array+0x40>)
 8003ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8003d14 <__libc_init_array+0x44>)
 8003ce4:	f000 f818 	bl	8003d18 <_init>
 8003ce8:	1b64      	subs	r4, r4, r5
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	2600      	movs	r6, #0
 8003cee:	42a6      	cmp	r6, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf8:	4798      	blx	r3
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d02:	4798      	blx	r3
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08003d50 	.word	0x08003d50
 8003d0c:	08003d50 	.word	0x08003d50
 8003d10:	08003d50 	.word	0x08003d50
 8003d14:	08003d54 	.word	0x08003d54

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
